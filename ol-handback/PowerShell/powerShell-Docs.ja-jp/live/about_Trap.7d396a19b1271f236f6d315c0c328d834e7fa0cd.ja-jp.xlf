<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e354f90592fe25fb1fdbc65b6f379a7888491dc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Trap.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25a2b14cceeba975a9ba56b2ac74f201dde9a541</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d1f7251f91415e5add590eeb0192550614f2d8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Trap</source>
          <target state="translated">トラップについて</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes a keyword that handles a terminating error.</source>
          <target state="translated">終了エラーを処理するキーワードについて説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">終了エラーは、ステートメントの実行を停止します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script in the current pipeline.</source>
          <target state="translated">Windows PowerShell が何らかの方法で終了エラーを処理しない場合、Windows PowerShell は、現在のパイプラインで関数またはスクリプトを実行しても停止します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">C などの他の言語で<ph id="ph1">\#</ph>, 、終了するエラーを例外と呼びます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Trap keyword specifies a list of statements to run when a terminating error occurs.</source>
          <target state="translated">Trap キーワードでは、終了エラーが発生したときに実行するステートメントの一覧を指定します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Trap statements handle the terminating errors and allow execution of the script or function to continue instead of stopping.</source>
          <target state="translated">Trap ステートメントは、終了するエラーを処理し、スクリプトまたは停止するのではなく引き続き関数の実行を許可します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Trap statement has the following syntax:</source>
          <target state="translated">Trap ステートメントでは、次の構文があります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Trap statement includes a list of statements to run when a terminating error occurs.</source>
          <target state="translated">Trap ステートメントには、終了エラーが発生したときに実行するステートメントの一覧が含まれています。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Trap keyword can optionally specify an error type.</source>
          <target state="translated">Trap キーワードは、エラーの種類を必要に応じて指定できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">エラーの種類には、角かっこが必要です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A script or command can have multiple Trap statements.</source>
          <target state="translated">スクリプトまたはコマンドでは、複数のステートメントをトラップことができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Trap statements can appear anywhere in the script or command.</source>
          <target state="translated">Trap ステートメントは、スクリプトまたはコマンドに任意の場所に表示できます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>TRAPPING ALL TERMINATING ERRORS</source>
          <target state="translated">すべて終了するエラーをトラップします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When a terminating error occurs that is not handled in another way in a script or command,  Windows PowerShell checks for a Trap statement that handles the error.</source>
          <target state="translated">終了エラーが発生したスクリプトまたはコマンドで別の方法で処理されていない、Windows PowerShell は、エラーを処理する Trap ステートメントをチェックします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a Trap statement is present,  Windows PowerShell continues running the script or command in the Trap statement.</source>
          <target state="translated">Windows PowerShell では Trap ステートメントが存在する場合、Trap ステートメント内のスクリプトまたはコマンドを実行しているが続行されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example is a very simple Trap statement:</source>
          <target state="translated">次の例では、非常にシンプルなトラップ ステートメントを示します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This Trap statement traps any terminating error.</source>
          <target state="translated">この Trap ステートメントでは、任意の終了エラーをトラップします。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example is a function that contains this Trap statement:</source>
          <target state="translated">次の例では、このトラップ ステートメントを含む関数を示します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This function includes a nonsense string that causes an error.</source>
          <target state="translated">この関数には、エラーが発生する意味がない文字列が含まれます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Running this function returns the following:</source>
          <target state="translated">この関数を実行する、次を返します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example includes a Trap statement that displays the error by using the $_ automatic variable:</source>
          <target state="translated">次の例には、$_ 自動変数を使用して、エラーを表示する Trap ステートメントが含まれています。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Running this version of the function returns the following:</source>
          <target state="translated">このバージョンの関数を実行している結果の例。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Trap statements can also be more complex.</source>
          <target state="translated">Trap ステートメントより複雑なこともできます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A Trap statement can include multiple conditions or function calls.</source>
          <target state="translated">Trap ステートメントには、複数の条件や関数呼び出しを含めることができます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It can log, test, or even run another program.</source>
          <target state="translated">ログに記録、テスト、または別のプログラムを実行したり、ことができます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>TRAPPING SPECIFIED TERMINATING ERRORS</source>
          <target state="translated">指定された終了するエラーのトラップ</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example is a Trap statement that traps the CommandNotFoundException error type:</source>
          <target state="translated">次の例では、CommandNotFoundException エラーの種類をトラップする Trap ステートメントを示します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When a function or script encounters a string that does not match a known command, this Trap statement displays the "Command error trapped" string.</source>
          <target state="translated">関数またはスクリプトには、既知のコマンドに一致しない文字列が検出されると、この Trap ステートメントは、「コマンドのエラー トラップ」文字列を表示します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After running any statements in the Trap statement list,  Windows PowerShell writes the error object to the error stream and then continues the script.</source>
          <target state="translated">トラップ ステートメント リストのすべてのステートメントを実行すると、Windows PowerShell はエラー オブジェクトをエラー ストリームに書き込み、スクリプトを続行します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the Microsoft .NET Framework exception types.</source>
          <target state="translated">Windows PowerShell では、Microsoft .NET Framework の例外型を使用します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example specifies the System.Exception error type:</source>
          <target state="translated">次の例では、System.Exception エラーの種類を指定します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The CommandNotFoundException error type inherits from the System.Exception type.</source>
          <target state="translated">CommandNotFoundException エラーの種類は、System.Exception 型から継承します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This statement traps an error that is created by an unknown command.</source>
          <target state="translated">このステートメントは、不明なコマンドによって作成されるエラーをトラップします。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It also traps other error types.</source>
          <target state="translated">その他のエラーの種類もトラップします。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can have more than one Trap statement in a script.</source>
          <target state="translated">スクリプト内で 1 つ以上の Trap ステートメントことができます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each error can be trapped by only one Trap statement.</source>
          <target state="translated">Trap ステートメントを 1 つだけでは、各エラーをトラップすることができます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If an error occurs, and more than one Trap statement is available,  Windows PowerShell uses the Trap statement with the most specific error type that matches the error.</source>
          <target state="translated">エラーが発生する 1 つ以上の Trap ステートメントが使用可能な場合は、Windows PowerShell は、エラーと一致する具体的なエラー型を含む、Trap ステートメントを使用します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following script example contains an error.</source>
          <target state="translated">次のスクリプトの例には、エラーが含まれています。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The script includes a general Trap statement that traps any terminating error and a specific Trap statement that specifies the CommandNotFoundException type.</source>
          <target state="translated">スクリプトには、任意の終了エラーをトラップする一般的な Trap ステートメントと CommandNotFoundException 型を指定する特定の Trap ステートメントが含まれます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">このスクリプトを実行するには、次の結果が生成されます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because  Windows PowerShell does not recognize "nonsenseString" as a cmdlet or other item, it returns a CommandNotFoundException error.</source>
          <target state="translated">Windows PowerShell がコマンドレットまたはその他の項目として"nonsenseString"を認識しないために、CommandNotFoundException エラーを返します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This terminating error is trapped by the specific Trap statement.</source>
          <target state="translated">特定の Trap ステートメントでこの終了エラーがトラップされます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following script example contains the same Trap statements with a different error:</source>
          <target state="translated">次のスクリプトの例には、別のエラーの同じトラップ ステートメントが含まれています。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">このスクリプトを実行するには、次の結果が生成されます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The attempt to divide by zero does not create a CommandNotFoundException error.</source>
          <target state="translated">0 で除算しようとするは CommandNotFoundException エラーを作成できません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Instead, that error is trapped by the other Trap statement, which traps any terminating error.</source>
          <target state="translated">代わりに、そのエラーは、その他のトラップ ステートメントによって、任意の終了エラーをトラップするトラップされます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>TRAPPING ERRORS AND SCOPE</source>
          <target state="translated">トラップできるエラーとスコープ</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the same scope as the Trap statement, after running the Trap statements,  Windows PowerShell continues at the statement after the error.</source>
          <target state="translated">Trap ステートメントを実行した後、Trap ステートメントと同じスコープ内に終了エラーが発生した場合、Windows PowerShell はエラー後のステートメントから続行されます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the Trap statement is in a different scope from the error, execution continues at the next statement that is in the same scope as the Trap statement.</source>
          <target state="translated">Trap ステートメントがエラーからの別のスコープ内にある場合、Trap ステートメントと同じスコープ内にある次のステートメントで実行が続行されます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For instance, if an error occurs in a function, and the Trap statement is in the function, the script continues at the next statement.</source>
          <target state="translated">たとえば、関数でエラーが発生し、Trap ステートメントが関数では、次のステートメントで、スクリプトが続行されます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script contains an error and a Trap statement:</source>
          <target state="translated">たとえば、次のスクリプトには、Trap ステートメントと、エラーが含まれています。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function1 function produces the following result:</source>
          <target state="translated">後で、スクリプトで Function1 関数を実行するにも、次の結果が生成されます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The Trap statement in the function traps the error.</source>
          <target state="translated">関数で Trap ステートメントでは、エラーをトラップします。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>After displaying the message,  Windows PowerShell resumes running the function.</source>
          <target state="translated">メッセージを表示した後は、Windows PowerShell は、された関数の実行を再開します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that Function1 was completed.</source>
          <target state="translated">Function1 が完了したことに注意してください。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compare this with the following example, which has the same error and Trap statement.</source>
          <target state="translated">これに対し、次の例では、同じエラーが発生し、Trap ステートメントとなっています。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this example, the Trap statement occurs outside the function:</source>
          <target state="translated">この例では、Trap ステートメントは関数の外部のようになります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function2 function produces the following result:</source>
          <target state="translated">後で、スクリプトで Function2 関数を実行するにも、次の結果が生成されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this example, the "function2 was completed" command was not run.</source>
          <target state="translated">この例では、「function2 が完了しました」コマンドが実行されませんでした。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Although both terminating errors occur within a function, if the Trap statement is outside the function,  Windows PowerShell does not go back into the function after the Trap statement runs.</source>
          <target state="translated">両方終了するエラーが、関数内で発生するは、Trap ステートメントが関数の外部にある場合、Windows PowerShell 戻りません関数に、Trap ステートメントが実行された後です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>USING THE BREAK AND CONTINUE KEYWORDS</source>
          <target state="translated">コンティニュ キーワードの中断の使用</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can use the Break and Continue keywords in a Trap statement to determine whether a script or command continues to run after a terminating error.</source>
          <target state="translated">中断を使用し、終了エラーが発生後に実行するスクリプトまたはコマンドが続くかどうかを確認する Trap ステートメントでキーワードを続行できます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you include a Break statement in a Trap statement list,  Windows PowerShell stops the function or script.</source>
          <target state="translated">Break ステートメントをトラップ ステートメントの一覧を指定する場合、Windows PowerShell は、関数またはスクリプトを停止します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Break keyword in a Trap statement:</source>
          <target state="translated">次の関数のサンプルでは、Trap ステートメントで、Break キーワードを使用します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Because the Trap statement included the Break keyword, the function does not continue to run, and the "Function completed" line is not run.</source>
          <target state="translated">Trap ステートメントに Break キーワードが含まれているため、実行するには、関数は実行されませんし、「関数が完了しました」の行が実行されません。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you include a Continue statement in a Trap statement,  Windows PowerShell resumes after the statement that caused the error, just as it would without Break or Continue.</source>
          <target state="translated">Trap ステートメントには、Continue ステートメントを含める場合、Windows PowerShell は、Break または Continue なしの場合と同様、エラーを引き起こしたステートメントの後に再開されます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>With the Continue keyword, however,  Windows PowerShell does not write an error to the error stream.</source>
          <target state="translated">Continue キーワードを使用して、Windows PowerShell は書き込みませんエラーをエラー ストリーム。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Continue keyword in a Trap statement:</source>
          <target state="translated">次の関数のサンプルでは、Trap ステートメントで Continue キーワードを使用します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The function resumes after the error is trapped, and the "Function completed" statement runs.</source>
          <target state="translated">関数は、エラーがトラップされ、「関数の実行完了」ステートメントの実行後に再開します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>No error is written to the error stream.</source>
          <target state="translated">エラーは、エラー ストリームに書き込まれません。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>