<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff2006ad44cc39e7fa716711debb67bf7144a804</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Language_Keywords.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">362313350d77975b5af8c5a659afa85764ed0fb2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9c66dcc5d0efd2efb6c88bbf5c0cdc2bcee9cda</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Language Keywords</source>
          <target state="translated">言語のキーワードについて</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the keywords in the Windows PowerShell scripting language.</source>
          <target state="translated">Windows PowerShell スクリプト言語のキーワードについて説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has the following language keywords.</source>
          <target state="translated">Windows PowerShell では、次の言語キーワードです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see the about topic for the keyword and the information that follows the table.</source>
          <target state="translated">詳細については、次を参照してください。、、キーワードと、テーブルを次の情報は、トピックについてです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Keyword            Reference</source>
          <target state="translated">キーワード リファレンス</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Begin              about_Functions, about_Functions_Advanced Break              about_Break, about_Trap Catch              about_Try_Catch_Finally Continue           about_Continue, about_Trap Data               about_Data_Sections Do                 about_Do, about_While DynamicParam       about_Functions_Advanced_Parameters Else               about_If Elseif             about_If End                about_Functions, about_Functions_Advanced_Methods Exit               Described in this topic.</source>
          <target state="translated">About_Functions、about_Functions_Advanced 中断「about_break」、about_Trap Catch about_Try_Catch_Finally 続行「about_Continue、about_Trap データ about_Data_Sections は about_Do、about_While DynamicParam 指示 Else about_If Elseif about_If エンド about_Functions、このトピック終了が説明されている about_Functions_Advanced_Methods を開始します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Filter             about_Functions Finally            about_Try_Catch_Finally For                about_For ForEach            about_ForEach From               Reserved for future use.</source>
          <target state="translated">About_Functions about_For ForEach about_ForEach から予約済み将来使用するための最後に about_Try_Catch_Finally をフィルター処理します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Function           about_Functions, about_Functions_Advanced If                 about_If In                 about_ForEach InlineScript       about_InlineScript Hidden             about_Hidden Parallel           about_Parallel, about_ForEach-Parallel Param              about_Functions Process            about_Functions, about_Functions_Advanced Return             about_Return Sequence           about_Sequence Switch             about_Switch Throw              about_Throw, about_Functions_Advanced_Methods Trap               about_Trap, about_Break, about_Try_Catch_Finally Try                about_Try_Catch_Finally Until              about_Do While              about_While, about_Do Workflow           about_Workflows</source>
          <target state="translated">関数 about_Functions、about_Functions_Advanced about_ForEach InlineScript about_InlineScript Hidden about_Hidden 並列 about_Parallel、about_ForEach 並列 Param about_Functions プロセス about_Functions、about_Functions_Advanced 戻り about_Return シーケンス about_Sequence スイッチ about_Switch Throw about_Throw、about_Functions_Advanced_Methods トラップ about_Trap、「about_break」、about_Try_Catch_Finally about_If と about_Do まで about_Try_Catch_Finally about_While 中、about_Do ワークフロー about_workflows に関するページ</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Language Keywords</source>
          <target state="translated">言語のキーワード</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Begin</source>
          <target state="translated">開始</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifies one part of the body of a function, along with the DynamicParam, Process, and End keywords.</source>
          <target state="translated">DynamicParam、プロセス、および End キーワードと共に、関数の本体の 1 つの部分を指定します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Begin statement list runs one time before any objects are received from the pipeline.</source>
          <target state="translated">Begin ステートメントの一覧では、パイプラインからすべてのオブジェクトを受信する前に 1 回実行されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">関数 <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 開始 {<ph id="ph3">&lt;statement list&gt;</ph>} プロセス {<ph id="ph4">&lt;statement list&gt;</ph>} 終了 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Break</source>
          <target state="translated">中断</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Causes a script to exit a loop.</source>
          <target state="translated">ループを終了するスクリプトをさせます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>while (<ph id="ph1">&lt;condition&gt;</ph>) {</source>
          <target state="translated">中 (<ph id="ph1">&lt;condition&gt;</ph>) {</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>break</source>
          <target state="translated">中断</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="translated">}</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Catch</source>
          <target state="translated">Catch</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specifies a statement list to run if an error occurs in the accompanying Try statement list.</source>
          <target state="translated">付随する Try ステートメントのリストでエラーが発生した場合に実行するステートメントの一覧を指定します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">エラーの種類には、角かっこが必要です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The second pair of brackets indicates that the error type is optional.</source>
          <target state="translated">2 番目の組のかっこは、エラーの種類が省略可能であることを示します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>try {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[<ph id="ph2">&lt;error type&gt;</ph>]] {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">実行してください {<ph id="ph1">&lt;statement list&gt;</ph>} catch [<ph id="ph2">&lt;error type&gt;</ph>] {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Continue</source>
          <target state="translated">続行</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Causes a script to stop running a loop and to go back to the condition.</source>
          <target state="translated">ループの実行を停止して、条件に戻るには、スクリプトが発生します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the condition is met, the script begins the loop again.</source>
          <target state="translated">条件が満たされた場合、スクリプトは、ループを再度開始します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>while (<ph id="ph1">&lt;condition&gt;</ph>) {</source>
          <target state="translated">中 (<ph id="ph1">&lt;condition&gt;</ph>) {</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="translated">続行</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="translated">}</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Data</source>
          <target state="translated">データ</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In a script, defines a section that isolates data from the script logic.</source>
          <target state="translated">スクリプトでは、スクリプトのロジックからデータを分離するセクションを定義します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Can also include If statements and some limited commands.</source>
          <target state="translated">ステートメントといくつかのコマンドを制限されている場合も含めることができます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>data <ph id="ph1">&lt;variable&gt;</ph> [-supportedCommand &lt;cmdlet-name&gt;] {<ph id="ph2">&lt;permitted content&gt;</ph>}</source>
          <target state="translated">データ <ph id="ph1">&lt;variable&gt;</ph> [-supportedCommand &lt; コマンドレット名 &gt;] {<ph id="ph2">&lt;permitted content&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Do</source>
          <target state="translated">操作を行います</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Used with the While or Until keyword as a looping construct.</source>
          <target state="translated">ループ構造として While または Until キーワードを使用します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Windows PowerShell runs the statement list at least one time, unlike a loop that uses While.</source>
          <target state="translated">Windows PowerShell がステートメントの一覧を使用するループとは異なり、少なくとも 1 回は実行中です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} while (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">{<ph id="ph1">&lt;statement list&gt;</ph>} 中に (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} until (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">{<ph id="ph1">&lt;statement list&gt;</ph>} まで (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>DynamicParam</source>
          <target state="translated">DynamicParam</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifies one part of the body of a function, along with the Begin, Process, and End keywords.</source>
          <target state="translated">Begin、Process、および End キーワードと共に、関数の本体の 1 つの部分を指定します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Dynamic parameters are added at run time.</source>
          <target state="translated">動的パラメーターは、実行時に追加されます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">関数 <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 開始 {<ph id="ph3">&lt;statement list&gt;</ph>} プロセス {<ph id="ph4">&lt;statement list&gt;</ph>} 終了 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Else</source>
          <target state="translated">その他</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Used with the If keyword to specify the default statement list.</source>
          <target state="translated">使用キーワードを既定のステートメントの一覧を指定します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} else {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} else {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Elseif</source>
          <target state="translated">Elseif</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Used with the If and Else keywords to specify additional conditionals.</source>
          <target state="translated">使用および Else キーワードを追加の条件を指定します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The Else keyword is optional.</source>
          <target state="translated">Else キーワードは省略できます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} elseif (<ph id="ph3">&lt;condition&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>} else {<ph id="ph5">&lt;statement list&gt;</ph>}</source>
          <target state="translated">場合 (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} elseif (<ph id="ph3">&lt;condition&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>} else {<ph id="ph5">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">[終了]</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Specifies one part of the body of a function, along with the DynamicParam, Begin, and End keywords.</source>
          <target state="translated">DynamicParam、開始、および End キーワードと共に、関数の本体の 1 つの部分を指定します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The End statement list runs one time after all the objects have been received from the pipeline.</source>
          <target state="translated">最後のステートメントの一覧に 1 回実行した後は、すべてのオブジェクトは、パイプラインから受け取っていること。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">関数 <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 開始 {<ph id="ph3">&lt;statement list&gt;</ph>} プロセス {<ph id="ph4">&lt;statement list&gt;</ph>} 終了 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Exit</source>
          <target state="translated">終了</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Causes Windows PowerShell to exit a script or a Windows PowerShell instance.</source>
          <target state="translated">Windows PowerShell スクリプトまたは Windows PowerShell インスタンスを終了するとします。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When you run 'powershell.exe –File <ph id="ph1">&lt;path to a script&gt;</ph>', you can only set the %ERRORLEVEL% variable to a value other than zero by using the exit statement.</source>
          <target state="translated">実行時に ' powershell.exe – ファイル <ph id="ph1">&lt;path to a script&gt;</ph>'、ERRORLEVEL 変数は、exit ステートメントを使用して、ゼロ以外の値にのみ設定できます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the following example, the user sets the error level variable value to 4 by typing 'exit 4'.</source>
          <target state="translated">次の例では、ユーザーは、エラー レベルの変数の値を 'exit 4' を入力して 4 に設定します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>C:\Users\bruce\documents\test&gt;type test.ps1</source>
          <target state="translated">C:\Users\bruce\documents\test &gt; test.ps1 の入力</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>exit 4</source>
          <target state="translated">4 を終了します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>C:\Users\bruce\documents\test&gt;powershell -file ./test.ps1</source>
          <target state="translated">C:\Users\bruce\documents\test &gt; powershell-./test.ps1 ファイル</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>C:\Users\bruce\documents\test&gt;echo %ERRORLEVEL%</source>
          <target state="translated">C:\Users\bruce\documents\test &gt; echo %errorlevel%</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>When you use powershell.exe with the File parameter, the .ps1 (script) file itself should include instructions for handling any errors or exceptions that occur while the script is running.</source>
          <target state="translated">File パラメーターを使用して powershell.exe を使用すると、(スクリプト) を .ps1 ファイル自体はエラーや、スクリプトが実行されているときに発生した例外を処理するための手順を含める必要があります。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You should only use the exit statement to indicate the post-execution status of the script.</source>
          <target state="translated">Exit ステートメントは、スクリプトの実行後の状態を示すためにのみ使用する必要があります。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>exit exit</source>
          <target state="translated">exit 終了</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">フィルター</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Specifies a function in which the statement list runs one time for each input object.</source>
          <target state="translated">ステートメントの一覧を各入力オブジェクトに 1 回実行する関数を指定します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>It has the same effect as a function that contains only a Process block.</source>
          <target state="translated">Process ブロックのみを含む関数と同じ効果があります。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>filter <ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">フィルター <ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Finally</source>
          <target state="translated">最後に</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Defines a statement list that runs after statements that are associated with Try and Catch.</source>
          <target state="translated">Try と Catch に関連付けられているステートメントの後に実行されるステートメントの一覧を定義します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A Finally statement list runs even if you press CTRL+C to leave a script or if you use the Exit keyword in the script.</source>
          <target state="translated">A、スクリプトで、Exit キーワードを使用する場合や、スクリプトのままにするには、CTRL + C キーを押す場合でも、ステートメントの一覧が最後に実行します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>try {<ph id="ph1">&lt;statement list&gt;</ph>} catch [&lt;error type] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">実行してください {<ph id="ph1">&lt;statement list&gt;</ph>} catch [&lt; エラーの種類] {<ph id="ph2">&lt;statement list&gt;</ph>} 最後に {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For</source>
          <target state="translated">[名前]</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Defines a loop by using a condition.</source>
          <target state="translated">ループを定義するには、条件を使用します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>for (<ph id="ph1">&lt;initialize&gt;</ph>; <ph id="ph2">&lt;condition&gt;</ph>; <ph id="ph3">&lt;iterate&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>}</source>
          <target state="translated">for (<ph id="ph1">&lt;initialize&gt;</ph>; <ph id="ph2">&lt;condition&gt;</ph>; <ph id="ph3">&lt;iterate&gt;</ph>){<ph id="ph4">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>ForEach</source>
          <target state="translated">ForEach</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Defines a loop by using each member of a collection.</source>
          <target state="translated">コレクションの各メンバーを使用してループを定義します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>ForEach (<ph id="ph1">&lt;item&gt;</ph> in <ph id="ph2">&lt;collection&gt;</ph>){<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">ForEach (<ph id="ph1">&lt;item&gt;</ph> で <ph id="ph2">&lt;collection&gt;</ph>) {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">移行元</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
          <target state="translated">将来使用するために予約されています。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">機能</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Creates a named statement list of reusable code.</source>
          <target state="translated">再利用可能なコードの名前付きステートメントの一覧を作成します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can name the scope a function belongs to.</source>
          <target state="translated">関数が属するスコープを名前を付けることができます。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>And, you can specify one or more named parameters by using the Param keyword.</source>
          <target state="translated">Param キーワードを使用して 1 つまたは複数の名前付きパラメーターを指定できます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Within the function statement list, you can include DynamicParam, Begin, Process, and End statement lists.</source>
          <target state="translated">関数ステートメントの一覧内では DynamicParam、開始、プロセス、およびステートメント リストを終了できます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> { param ([type]&lt;$pname1&gt; [, [type]&lt;$pname2&gt;]) DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">関数 [&lt; スコープ: &gt;]<ph id="ph1">&lt;name&gt;</ph> {param ([type] &lt; ドル pname1 &gt; [、[type] &lt; ドル pname2 &gt;]) DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 開始 {<ph id="ph3">&lt;statement list&gt;</ph>} プロセス {<ph id="ph4">&lt;statement list&gt;</ph>} 終了 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You also have the option of defining one or more parameters outside the statement list after the function name.</source>
          <target state="translated">また、関数名の後に、ステートメント リストの外部の 1 つまたは複数のパラメーターを定義するオプションがあります。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> [([type]&lt;$pname1&gt;, [[type]&lt;$pname2&gt;])] { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">関数 [&lt; スコープ: &gt;]<ph id="ph1">&lt;name&gt;</ph> [([type] &lt;$ pname1 &gt; [type] &lt;$ pname2 &gt;])] {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 開始 {<ph id="ph3">&lt;statement list&gt;</ph>} プロセス {<ph id="ph4">&lt;statement list&gt;</ph>} 終了 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">If</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Defines a conditional.</source>
          <target state="translated">条件を定義します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Hidden</source>
          <target state="translated">Hidden</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Hides class members from the default results of the Get-Member cmdlet, and from IntelliSense and tab completion results.</source>
          <target state="translated">非表示にはクラス メンバーの IntelliSense およびタブ補完の結果と、Get-member コマンドレットの既定の結果からです。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Hidden [data type] $member_name</source>
          <target state="translated">[データ型] $member_name を非表示</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In</source>
          <target state="translated">既定により、</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Used in a ForEach statement to create a loop that uses each member of a collection.</source>
          <target state="translated">ForEach ステートメントで使用するには、コレクションの各メンバーを使用するループを作成します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>ForEach (<ph id="ph1">&lt;item&gt;</ph> in <ph id="ph2">&lt;collection&gt;</ph>){<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">ForEach (<ph id="ph1">&lt;item&gt;</ph> で <ph id="ph2">&lt;collection&gt;</ph>) {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>InlineScript</source>
          <target state="translated">InlineScript</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Runs workflow commands in a shared Windows PowerShell session.</source>
          <target state="translated">共有の Windows PowerShell セッションでは、ワークフローのコマンドを実行します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This keyword is valid only in a Windows PowerShell Workflow.</source>
          <target state="translated">このキーワードは、Windows PowerShell ワークフローでのみ有効です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { InlineScript { &lt;Command/Expression&gt;</source>
          <target state="translated">ワークフロー <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {InlineScript {&lt; コマンド/式 &gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>} }</source>
          <target state="translated">} }</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The InlineScript keyword indicates an InlineScript activity, which runs commands in a shared standard (non-workflow) session.</source>
          <target state="translated">InlineScript キーワードでは、標準的な (非ワークフロー) の共有セッションにコマンドを実行する InlineScript アクティビティを示します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You can use the InlineScript keyword to run commands that are not otherwise valid in a workflow, and to run commands that share data.</source>
          <target state="translated">それ以外の場合、ワークフローで有効ではないコマンドを実行して、データを共有するコマンドを実行するには、InlineScript キーワードを使用することができます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>By default, the commands in an InlineScript script block run in a separate process.</source>
          <target state="translated">既定では、InlineScript スクリプト ブロックのコマンドは、別のプロセスで実行されます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information, see about_InlineScript and Running Windows PowerShell Commands in a Workflow (http://technet.microsoft.com/library/jj574197.aspx).</source>
          <target state="translated">詳細については、about_InlineScript とワークフロー (http://technet.microsoft.com/library/jj574197.aspx) での Windows PowerShell コマンドの実行を参照してください。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Defines the parameters in a function.</source>
          <target state="translated">関数のパラメーターを定義します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> { param ([type]&lt;$pname1&gt;[, [[type]&lt;$pname2&gt;]]) <ph id="ph2">&lt;statement list&gt;</ph> }</source>
          <target state="translated">関数 [&lt; スコープ: &gt;]<ph id="ph1">&lt;name&gt;</ph> {param ([type] &lt; ドル pname1 &gt; [、[type] &lt; ドル pname2 &gt;]) <ph id="ph2">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parallel</source>
          <target state="translated">Parallel</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Runs workflow commands concurrently and in an undefined order.</source>
          <target state="translated">同時に、任意の順序では、ワークフローのコマンドを実行します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This keyword is valid only in a Windows PowerShell Workflow.</source>
          <target state="translated">このキーワードは、Windows PowerShell ワークフローでのみ有効です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The Parallel keyword indicates a Parallel script block.</source>
          <target state="translated">並列のキーワードでは、Parallel スクリプト ブロックを示します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The commands in a Parallel script block can run at the same time and in any order.</source>
          <target state="translated">Parallel スクリプト ブロック内のコマンドは、同時に、任意の順序で実行できます。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This feature significantly improves the performance of a workflow.</source>
          <target state="translated">この機能は、ワークフローのパフォーマンスを大幅に向上します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { Parallel {</source>
          <target state="translated">ワークフロー <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {並列 {</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>…</source>
          <target state="translated">…</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>} }</source>
          <target state="translated">} }</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The Parallel parameter of the ForEach keyword processes the items in a collection in parallel.</source>
          <target state="translated">ForEach キーワードの並列のパラメーターは、並列でコレクション内の項目を処理します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The activities in the script block run sequentially on each item, but the script block can run on multiple items at the same time and the items are processed in an undefined order.</source>
          <target state="translated">スクリプト ブロック内のアクティビティは、各項目を順番に実行し、スクリプト ブロックは、同時に複数のアイテムに対して実行できますが、項目は、任意の順序で処理されます。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { ForEach -Parallel (<ph id="ph2">&lt;item&gt;</ph> in <ph id="ph3">&lt;collection&gt;</ph>) {</source>
          <target state="translated">ワークフロー <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {ForEach-Parallel (<ph id="ph2">&lt;item&gt;</ph> で <ph id="ph3">&lt;collection&gt;</ph>) {</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>} }</source>
          <target state="translated">} }</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For more information, see about_Parallel, about_ForEach-Parallel</source>
          <target state="translated">詳細については、about_Parallel、並列で about_foreach」を参照してください。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Process</source>
          <target state="translated">プロセス</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specifies a part of the body of a function, along with the DynamicParam, Begin, and End keywords.</source>
          <target state="translated">DynamicParam、開始、および End キーワードと共に、関数の本体の一部を指定します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>When a Process statement list receives input from the pipeline, the Process statement list runs one time for each element from the pipeline.</source>
          <target state="translated">プロセス ステートメントの一覧は、パイプラインから入力を受け取るときにプロセス ステートメントの一覧は、パイプラインから各要素に対して 1 回を実行します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If the pipeline provides no objects, the Process statement list does not run.</source>
          <target state="translated">パイプラインはオブジェクトを提供しない場合、プロセスのステートメントの一覧は実行されません。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If the command is the first command in the pipeline, the Process statement list runs one time.</source>
          <target state="translated">パイプラインの最初のコマンドをコマンドには、プロセスのステートメントの一覧は 1 回を実行します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">関数 <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} 開始 {<ph id="ph3">&lt;statement list&gt;</ph>} プロセス {<ph id="ph4">&lt;statement list&gt;</ph>} 終了 {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">戻り値</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Causes Windows PowerShell to leave the current scope, such as a script or function, and writes the optional expression to the output.</source>
          <target state="translated">Windows powershell はスクリプトや関数など、現在のスコープにしておくと、省略可能な式を出力に書き込みます。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>return [<ph id="ph1">&lt;expression&gt;</ph>]</source>
          <target state="translated">返す [<ph id="ph1">&lt;expression&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Sequence</source>
          <target state="translated">Sequence</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Runs workflow commands sequentially in a Parallel script block.</source>
          <target state="translated">Parallel スクリプト ブロックでワークフロー コマンドを順番に実行されます。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This keyword is valid only in a Windows PowerShell Workflow.</source>
          <target state="translated">このキーワードは、Windows PowerShell ワークフローでのみ有効です。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { Parallel { Sequence { <ph id="ph2">&lt;Activity&gt;</ph> } } }</source>
          <target state="translated">ワークフロー <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {並列 {シーケンス { <ph id="ph2">&lt;Activity&gt;</ph> }}}</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The Sequence keyword creates a sequence block within a Parallel script block.</source>
          <target state="translated">シーケンスのキーワードでは、Parallel スクリプト ブロック内でシーケンス ブロックを作成します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The commands in the Sequence script block run sequentially and in the order defined.</source>
          <target state="translated">シーケンスのスクリプト ブロック内のコマンドは、順番にし、定義されている順序で実行します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For more information, see about_Sequence</source>
          <target state="translated">詳細については、about_Sequence を参照してください。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Switch</source>
          <target state="translated">スイッチ</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Specifies a variety of actions to be performed on items from the pipeline or from a file.</source>
          <target state="translated">さまざまなパイプラインから、またはファイルからの項目で実行するアクションを指定します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You can use either of the following syntax models.</source>
          <target state="translated">次の構文のモデルのいずれかを使用することができます。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Syntax 1:</source>
          <target state="translated">構文 1:</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>switch [-regex|-wildcard|-exact][-casesensitive] ( pipeline )</source>
          <target state="translated">切り替え [-regex |-ワイルドカード | の正確な] [-casesensitive] (パイプライン)</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>{ <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</source>
          <target state="translated">{ <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>default {<ph id="ph1">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">既定 {<ph id="ph1">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Syntax 2:</source>
          <target state="translated">構文 2:</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>switch [-regex|-wildcard|-exact][-casesensitive] -file filename { <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</source>
          <target state="translated">切り替え [-regex |-ワイルドカード | の正確な] [-casesensitive]-ファイル名 { <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>| { <ph id="ph2">&lt;expression&gt;</ph> }{<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> }{<ph id="ph6">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>default {<ph id="ph1">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">既定 {<ph id="ph1">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Throw</source>
          <target state="translated">スローします。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Throws an object as an error.</source>
          <target state="translated">オブジェクトをエラーとしてスローします。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>throw [<ph id="ph1">&lt;object&gt;</ph>]</source>
          <target state="translated">スロー [<ph id="ph1">&lt;object&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Trap</source>
          <target state="translated">トラップ</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Defines a statement list to be run if an error is encountered.</source>
          <target state="translated">エラーが発生した場合に実行されるステートメントの一覧を定義します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">エラーの種類には、角かっこが必要です。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The second pair of brackets indicates that the error type is optional.</source>
          <target state="translated">2 番目の組のかっこは、エラーの種類が省略可能であることを示します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>trap [[<ph id="ph1">&lt;error type&gt;</ph>]] {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">trap [[<ph id="ph1">&lt;error type&gt;</ph>]] {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Try</source>
          <target state="translated">実行してください。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Defines a statement list to be checked for errors while the statements run.</source>
          <target state="translated">ステートメントの実行中にエラーをチェックするステートメントの一覧を定義します。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If an error occurs, Windows PowerShell continues running in a Catch or Finally statement.</source>
          <target state="translated">エラーが発生する場合、Windows PowerShell は Catch または Finally ステートメントで実行を続けます。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">エラーの種類には、角かっこが必要です。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The second pair of brackets indicates that the error type is optional.</source>
          <target state="translated">2 番目の組のかっこは、エラーの種類が省略可能であることを示します。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>try {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[&lt;error type]] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">実行してください {<ph id="ph1">&lt;statement list&gt;</ph>} catch [&lt; エラーの種類] {<ph id="ph2">&lt;statement list&gt;</ph>} 最後に {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Until</source>
          <target state="translated">まで</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Used in a Do statement as a looping construct where the statement list is executed at least one time.</source>
          <target state="translated">ステートメントの一覧に少なくとも 1 回が実行される場所、ループ構造として Do ステートメントで使用されます。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} until (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">{<ph id="ph1">&lt;statement list&gt;</ph>} まで (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>While</source>
          <target state="translated">While</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Used in a Do statement as a looping construct where the statement list is executed at least one time.</source>
          <target state="translated">ステートメントの一覧に少なくとも 1 回が実行される場所、ループ構造として Do ステートメントで使用されます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">構文:</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} while (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">{<ph id="ph1">&lt;statement list&gt;</ph>} 中に (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Workflow</source>
          <target state="translated">ワークフロー</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Creates a script-based Windows PowerShell workflow, that is, a workflow written in the Windows PowerShell language.</source>
          <target state="translated">スクリプトを使用した Windows PowerShell ワークフローは、Windows PowerShell 言語で記述されたワークフローを作成します。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A Windows PowerShell workflow is a Windows PowerShell command type that is supported by Windows PowerShell and Windows Workflow Foundation.</source>
          <target state="translated">Windows PowerShell ワークフローは、Windows PowerShell および Windows Workflow Foundation でサポートされている Windows PowerShell コマンドの種類です。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Workflows are designed for complex, long-running tasks that affect multiple computers.</source>
          <target state="translated">ワークフローは、複数のコンピューターに影響する複雑な実行時間の長いタスク向けに設計されました。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Workflows can be recovered if interrupted, such as by a network outage, and you can suspend and resume them  without losing state or data.</source>
          <target state="translated">中断された場合、ネットワークでの停止、およびを中断および再開できますに状態やデータを失うことがなくなど、ワークフローを復旧できます。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Workflows can be written in XAML, the native language of Windows Workflow Foundation, or in the Windows PowerShell language.</source>
          <target state="translated">ワークフローは、XAML では、Windows Workflow Foundation のネイティブ言語または Windows PowerShell 言語で記述できます。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The syntax of a script-based workflow is similar to the syntax of a function.</source>
          <target state="translated">スクリプト ベースのワークフローの構文は、関数の構文に似ています。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>However, the unit of execution in a workflow is an activity, instead of a command.</source>
          <target state="translated">ただし、ワークフローの実行の単位には、コマンドではなく、アクティビティです。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Cmdlets (and other commands) that are used in script-based workflows are implicitly converted to activities.</source>
          <target state="translated">コマンドレット (およびその他のコマンド) で使用されるスクリプト ベースのワークフローがアクティビティに暗黙的に変換します。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Some language elements that are permitted in scripts and functions are not permitted in workflows.</source>
          <target state="translated">スクリプトと関数で許可されている一部の言語要素は、ワークフローでは使用できません。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Similarly, workflows can include elements that are not found in scripts and functions, such as "persistence points" (checkpoints), self-suspension, and parallel processing.</source>
          <target state="translated">同様に、ワークフローがスクリプトと「永続化ポイント」などの関数にはない要素を含めることができます (チェックポイント)、自己の中断、および並列処理します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>In addition, all workflows have a set of common parameters that are added by Windows PowerShell when you use the Workflow keyword.</source>
          <target state="translated">さらに、すべてのワークフローでは、ワークフロー キーワードを使用するときに、Windows PowerShell によって追加される共通パラメーターのセットがあります。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Syntax: workflow &lt;Verb-Noun&gt; { param ([type]&lt;$pname1&gt; [, [type]&lt;$pname2&gt;]) <ph id="ph1">&lt;statement list&gt;</ph> }</source>
          <target state="translated">構文: ワークフロー &lt; 動詞-名詞 &gt; {param ([type] &lt; ドル pname1 &gt; [、[種類] &lt; ドル pname2 &gt;]) <ph id="ph1">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>workflow &lt;verb-noun&gt; { [CmdletBinding(<ph id="ph1">&lt;Attributes&gt;</ph>)] Param</source>
          <target state="translated">ワークフロー &lt; 動詞-名詞 &gt; {[CmdletBinding (<ph id="ph1">&lt;Attributes&gt;</ph>)] パラメーター</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>[Parameter(<ph id="ph1">&lt;Arguments&gt;</ph>)] $Param1</source>
          <target state="translated">[パラメーター (<ph id="ph1">&lt;Arguments&gt;</ph>)] $param1</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)です。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="translated">}</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>For more information about workflows, see about_Workflows and "Getting Started with Windows PowerShell Workflow" (http://go.microsoft.com/fwlink/?LinkID=252592) in the TechNet Library.</source>
          <target state="translated">ワークフローの詳細については、about_workflows に関するページと「の取得を開始で Windows PowerShell ワークフロー」(http://go.microsoft.com/fwlink/?LinkID=252592) TechNet ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>about_Escape_Characters about_Special_Characters about_Wildcards</source>
          <target state="translated">about_Escape_Characters about_Special_Characters about_wildcards」と入力</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>