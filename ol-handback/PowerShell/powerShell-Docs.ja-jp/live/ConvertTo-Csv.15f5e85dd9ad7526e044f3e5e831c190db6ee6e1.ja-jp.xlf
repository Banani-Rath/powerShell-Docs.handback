<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90f7d88853b919db7f4b799f0c5f987f7b8621f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\ConvertTo-Csv.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3d123d3963e6fb226afbe6383948295f2ecb8b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">562d4c183cf73d1a45542d1385e27d5abdeafded</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts objects into a series of comma-separated value (CSV) variable-length strings.</source>
          <target state="translated">オブジェクトを一連のコンマ区切り値 (CSV) の可変長文字列に変換します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Delimiter (Default)</source>
          <target state="translated">区切り記号 (既定値)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>UseCulture</source>
          <target state="translated">UseCulture</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet returns a series of comma-separated (CSV) strings that represents the objects that you submit.</source>
          <target state="translated"> <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> コマンドレットを送信するオブジェクトを表す一連のコンマ区切り (CSV) 文字列が返されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can then use the ConvertFrom-Csv cmdlet to re-create objects from the CSV strings.</source>
          <target state="translated">Convertfrom-csv コマンドレットを使用して、CSV 文字列からオブジェクトを再作成し、ことができます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The resulting objects are CSV versions of the original objects that consist of string representations of the property values and no methods.</source>
          <target state="translated">結果のオブジェクトは、メソッドのない、プロパティ値の文字列形式で構成された元のオブジェクトの CSV バージョンです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can also use the Export-Csv and Import-Csv cmdlets to convert objects to CSV strings and back.</source>
          <target state="translated">Export-csv コマンドレットと Import-csv コマンドレットは、オブジェクトを CSV 文字列に変換し、バックアップも使えます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> is the same as <bpt id="p2">**</bpt>ConvertTo-CSV<ept id="p2">**</ept>, except that it saves the CSV strings to a file.</source>
          <target state="translated"><bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> と同じ <bpt id="p2">**</bpt>CONVERTTO-CSV<ept id="p2">**</ept>, CSV 文字列をファイルに保存する点を除いて、します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use the parameters of the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet to specify a delimiter other than a comma or to direct <bpt id="p2">**</bpt>ConvertTo-CSV<ept id="p2">**</ept> to use the default delimiter for the current culture.</source>
          <target state="translated">パラメーターを使用する、 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> コマンドレットをコンマ以外の区切り記号を指定するかを特定する <bpt id="p2">**</bpt>CONVERTTO-CSV<ept id="p2">**</ept> 、現在のカルチャの既定の区切り記号を使用します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example 1: Convert an object to CSV</source>
          <target state="translated">例 1: オブジェクトを CSV に変換します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This command converts a single process object to CSV format.</source>
          <target state="translated">このコマンドは、1 つのプロセス オブジェクトを CSV 形式に変換します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The command uses the Get-Process cmdlet to get the Windows PowerShell process on the local computer.</source>
          <target state="translated">コマンドでは、Get-process コマンドレットを使用して、ローカル コンピューター上の Windows PowerShell プロセスを取得します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator (|) to send the command to the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet, which converts it to a series of comma-separated strings.</source>
          <target state="translated">使用して、パイプライン演算子 (|)、コマンドを <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> コマンドレットに渡して、一連のコンマ区切りの文字列に変換します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example 2: Convert a DateTime object to CSV</source>
          <target state="translated">例 2: DateTime オブジェクトを CSV に変換します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This example converts a <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> object to CSV format.</source>
          <target state="translated">この例では変換、 <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> オブジェクトを CSV 形式にします。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Date cmdlet to get the current date.</source>
          <target state="translated">最初のコマンドは、Get-Date コマンドレットを使用して現在の日付を取得します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It saves it in the $Date variable.</source>
          <target state="translated">$Date 変数に保存します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet to convert the <bpt id="p2">**</bpt>DateTime<ept id="p2">**</ept> object in the $Date variable to CSV format.</source>
          <target state="translated">2 番目のコマンドを使用して、 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> に変換するコマンドレット、 <bpt id="p2">**</bpt>DateTime<ept id="p2">**</ept> を CSV 形式に $Date 変数内のオブジェクト。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> parameter to specify the object to be converted.</source>
          <target state="translated">このコマンドは、 <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> パラメーターを変換するオブジェクトを指定します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>Delimiter<ept id="p1">*</ept> parameter to specify the delimiter that separates the object properties.</source>
          <target state="translated">使用して、 <bpt id="p1">*</bpt>区切り記号<ept id="p1">*</ept> パラメーターに渡して、オブジェクトのプロパティを区切る区切り記号を指定します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> parameter to suppress the #TYPE string.</source>
          <target state="translated">使用して、 <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> を抑制する状況、#TYPE 文字列パラメーターです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example 3: Convert the PowerShell event log to CSV</source>
          <target state="translated">例 3: PowerShell イベント ログを CSV に変換します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This command converts the Windows PowerShell event log on the local computer to a series of CSV strings.</source>
          <target state="translated">このコマンドは、ローカル コンピューター上の Windows PowerShell イベント ログを一連の CSV 文字列に変換します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The command uses the Get-EventLog cmdlet to get the events in the Windows PowerShell log.</source>
          <target state="translated">このコマンドは、Get-EventLog コマンドレットを使用して、Windows PowerShell ログ内のイベントを取得します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A pipeline operator (|) sends the events to the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet, which converts the events to CSV format.</source>
          <target state="translated">パイプライン演算子 (|) を送信するイベント、 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> コマンドレットに渡して、CSV 形式に変換します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter, which uses the list separator for the current culture as the delimiter.</source>
          <target state="translated">コマンドを使用して、 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> パラメーターで、現在のカルチャの区切り記号としてリスト区切り記号を使用します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">パラメータ</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-Delimiter</source>
          <target state="translated">区切り記号</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Specifies a delimiter to separate the property values.</source>
          <target state="translated">プロパティの値を区切る区切り記号を指定します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">既定値はコンマ (,) です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Enter a character, such as a colon (:).</source>
          <target state="translated">コロン (:) などの文字を入力します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To specify a semicolon (;), enclose it in quotation marks.</source>
          <target state="translated">セミコロン (;) を指定するには、引用符で囲みます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Otherwise, it will be interpreted as the command delimiter.</source>
          <target state="translated">引用符で囲まないと、コマンドの区切り記号として解釈されます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-Inputobject</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Specifies the objects to export as CSV strings.</source>
          <target state="translated">CSV 文字列としてエクスポートするオブジェクトを指定します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects or type a command or expression that gets the objects.</source>
          <target state="translated">オブジェクトが格納されている変数を入力するか、オブジェクトを取得するコマンドまたは式を入力します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can also pipe objects to <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept>.</source>
          <target state="translated">オブジェクトを渡すこともできます <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>-NoTypeInformation</source>
          <target state="translated">-NoTypeInformation</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Omits the type information header from the output.</source>
          <target state="translated">出力から型情報ヘッダーを省略します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>By default, the string in the output contains #TYPE followed by the fully-qualified name of the object type.</source>
          <target state="translated">既定では、出力文字列には、#TYPE 続いてオブジェクトの種類の完全修飾名が含まれています。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>-UseCulture</source>
          <target state="translated">-UseCulture</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Uses the list separator for the current culture as the data delimiter.</source>
          <target state="translated">データの区切り記号として、現在のカルチャの区切り記号を使用します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">既定値はコンマ (,) です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This parameter is very useful in scripts that are being distributed to users worldwide.</source>
          <target state="translated">このパラメーターは、世界中のユーザーに配布されるスクリプトで使用するのに非常に便利です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To find the list separator for a culture, use the following command: <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>.</source>
          <target state="translated">カルチャの区切り記号を検索するには、次のコマンドを使用します。 <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">このコマンドレットは、共通のパラメーターをサポートしています:-デバッグ、-erroraction、-errorvariable、- InformationAction-InformationVariable、- OutVariable、-OutBuffer、- PipelineVariable、- Verbose、および - WarningVariable です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">詳細については、about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216) を参照してください。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">入力</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can pipe any object that has an Extended Type System (ETS) adapter to <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept>.</source>
          <target state="translated">するための拡張型システム (ETS) アダプターを持つオブジェクトをパイプする <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">出力</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The CSV output is returned as a collection of strings.</source>
          <target state="translated">CSV 出力は、文字列のコレクションとして返されます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">ノート</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In CSV format, each object is represented by a comma-separated list of its property value.</source>
          <target state="translated">CSV 形式では、各オブジェクトはそのプロパティ値のコンマ区切りリストで表されます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The property values are converted to strings (by using the ToString() method of the object), so they are generally represented by the name of the property value.</source>
          <target state="translated">プロパティ値はオブジェクトの ToString() メソッドを使用して文字列に変換するため、通常、これらはプロパティ値の名前で表されます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> does not export the methods of the object.</source>
          <target state="translated"><bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> オブジェクトのメソッドではエクスポートされません。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The format of the resulting CSV strings is as follows:</source>
          <target state="translated">結果の CSV 文字列の形式は次のとおりです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The first string consists of #TYPE followed by the fully-qualified name of the object type, such as #TYPE System.Diagnostics.Process.</source>
          <target state="translated">最初の文字列は、#TYPE 続いて #TYPE System.Diagnostics.Process などのオブジェクトの種類の完全修飾名で構成されます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To suppress this string, use the <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> parameter.</source>
          <target state="translated">この文字列を抑制するのには、使用、 <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> パラメーター。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The next string represents the column headers.</source>
          <target state="translated">次の文字列では、列ヘッダーを表します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It contains a comma-separated list of the names of all the properties of the first object.</source>
          <target state="translated">これには、最初のオブジェクトのすべてのプロパティの名前のコンマ区切りリストが含まれます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The remaining strings consist of comma-separated lists of the property values of each object.</source>
          <target state="translated">残りの文字列は、各オブジェクトのプロパティ値のコンマ区切りのリストで構成されます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When you submit multiple objects to <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept>, <bpt id="p2">**</bpt>ConvertTo-CSV<ept id="p2">**</ept> orders the strings based on the properties of the first object that you submit.</source>
          <target state="translated">複数のオブジェクトを送信すると <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept>, 、<bpt id="p2">**</bpt>CONVERTTO-CSV<ept id="p2">**</ept> を送信する最初のオブジェクトのプロパティに基づく文字列の順序。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the remaining objects do not have one of the specified properties, the property value of that object is Null, as represented by two consecutive commas.</source>
          <target state="translated">残りのオブジェクトは、指定されたプロパティのいずれかのない、連続する 2 つのコンマで表される、そのオブジェクトのプロパティの値は Null の場合です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the remaining objects have additional properties, those property values are ignored.</source>
          <target state="translated">残りのオブジェクトに追加のプロパティがある場合、これらのプロパティ値は無視されます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">関連リンク</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>