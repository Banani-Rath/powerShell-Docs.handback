<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0ed69e4731a796d2851e384ba2fcd36bccefee3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Types.ps1xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e048ac45db21dab3f3e79adefca24f06530cc63b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90e5515bb689451a5de53796b1b5711c9215c1fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Types.ps1xml</source>
          <target state="translated">Types.ps1xml について</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Explains how to use Types.ps1xml files to extend the types of objects that are used in Windows PowerShell.</source>
          <target state="translated">Types.ps1xml ファイルを使用して、Windows PowerShell で使用されるオブジェクトの種類を拡張する方法について説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Extended type data defines additional properties and methods ("members") of object types in Windows PowerShell.</source>
          <target state="translated">拡張型データは、Windows PowerShell の他のプロパティとメソッド (「メンバー」) オブジェクトの種類を定義します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are two techniques for adding extended type data to a Windows PowerShell session.</source>
          <target state="translated">拡張型データを Windows PowerShell セッションに追加するための 2 つの方法があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>-- Types.ps1xml file: An XML file that defines extended type data.</source>
          <target state="translated">-Types.ps1xml ファイル: 拡張型データを定義する XML ファイルです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>-- Update-TypeData: A cmdlet that reloads Types.ps1xml files and defines extended data for types in the current session.</source>
          <target state="translated">-Update-typedata: Types.ps1xml を再読み込みするコマンドレットは、ファイルし、現在のセッションの種類の拡張データを定義します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This topic describes Types.ps1xml files.</source>
          <target state="translated">このトピックでは、Types.ps1xml ファイルについて説明します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about using the Update-TypeData cmdlet to add dynamic extended type data to the current session see Update-TypeData (http://go.microsoft.com/fwlink/?LinkID=113421).</source>
          <target state="translated">Update-typedata コマンドレットを使用して、動的拡張型を追加する方法については、現在のセッションにデータには、Update-typedata (http://go.microsoft.com/fwlink/?LinkID=113421) が参照してください。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>About Extended Type Data</source>
          <target state="translated">拡張型データについて</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Extended type data defines additional properties and methods ("members") of object types in Windows PowerShell.</source>
          <target state="translated">拡張型データは、Windows PowerShell の他のプロパティとメソッド (「メンバー」) オブジェクトの種類を定義します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can extend any type that is supported by Windows PowerShell and use the added properties and methods in the same way that you use the properties that are defined on the object types.</source>
          <target state="translated">Windows PowerShell でサポートされている任意の型を拡張し、オブジェクトの種類で定義されているプロパティを使用するのと同じ方法で追加されたプロパティとメソッドを使用できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, Windows PowerShell adds a DateTime property to all System.DateTime objects, such as the ones that the Get-Date cmdlet returns.</source>
          <target state="translated">たとえば、Windows PowerShell は、Get-date コマンドレットを返すものなど、すべての System.DateTime オブジェクトに DateTime プロパティを追加します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>PS C:&gt; (Get-Date).DateTime Sunday, January 29, 2012 9:43:57 AM</source>
          <target state="translated">PS c: &gt; (Get-date)。DateTime 2012 年 1 月 29 日日曜日午前 9時 43分: 57</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You won't find the DateTime property in the description of the System.DateTime structure (http://msdn.microsoft.com/library/system.datetime.aspx), because Windows PowerShell adds the property and it is visible only in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell は、プロパティを追加し、Windows PowerShell でのみ表示されているために、System.DateTime 構造 (http://msdn.microsoft.com/library/system.datetime.aspx) の説明で DateTime プロパティを検索しません。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To add the DateTime property to all Windows PowerShell sessions, Windows PowerShell defines the DateTime property in the Types.ps1xml file in the Windows PowerShell installation directory ($pshome).</source>
          <target state="translated">すべての Windows PowerShell セッションに日時プロパティを追加するには、Windows PowerShell は、Windows PowerShell のインストール ディレクトリ ($pshome) 内の Types.ps1xml ファイルの DateTime プロパティを定義します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Adding Extended Type Data to Windows PowerShell.</source>
          <target state="translated">Windows PowerShell には、拡張型データを追加します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There are three sources of extended type data in Windows PowerShell sessions.</source>
          <target state="translated">Windows PowerShell セッションには、3 種類の拡張型データのソースがあります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>--  The Types.ps1xml files in the Windows PowerShell installation directory are loaded automatically into every Windows PowerShell session.</source>
          <target state="translated">-Windows PowerShell のインストール ディレクトリ内の Types.ps1xml ファイルは、すべての Windows PowerShell セッションに自動的に読み込まれます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>--  The Types.ps1xml files that modules export are loaded when the module is imported into the current session.</source>
          <target state="translated">-現在のセッションにモジュールのインポート モジュールがエクスポートする Types.ps1xml ファイルが読み込まれます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>--  Extended type data that is defined by using the Update-TypeData cmdlet is added only to the current session.</source>
          <target state="translated">--Update-typedata コマンドレットを使用して定義されている拡張型データは、現在のセッションにのみ追加されます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is not saved in a file.</source>
          <target state="translated">ファイルには保存されません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the session, the extended type data from the three sources is applied to objects in the same way and is available on all objects of the specified types.</source>
          <target state="translated">セッションで、次の 3 つのソースから拡張型データは同じ方法でオブジェクトに適用され、、指定された型のすべてのオブジェクトで使用できます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The TypeData Cmdlets</source>
          <target state="translated">TypeData コマンドレット</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following TypeData cmdlets are included in the Microsoft.PowerShell.Utility module in Windows PowerShell 3.0 and later versions of Windows PowerShell.</source>
          <target state="translated">Windows PowerShell 3.0 と以降のバージョンの Windows PowerShell で Microsoft.PowerShell.Utility モジュールには、次の TypeData コマンドレットが含まれています。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Get-TypeData:     Gets extended type data in the current session.</source>
          <target state="translated">Get-typedata: は、現在のセッションでの種類のデータを拡張を取得します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Update-TypeData:  Reloads Types.ps1xml files.</source>
          <target state="translated">Update-typedata: の再読み込み回数の Types.ps1xml ファイルです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Adds extended type data to the current session.</source>
          <target state="translated">拡張型データを現在のセッションに追加します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remove-TypeData:  Removes extended type data from the current session.</source>
          <target state="translated">Remove-typedata: 現在のセッションから拡張型データを削除します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about these cmdlets, see the help topic for each cmdlet.</source>
          <target state="translated">これらのコマンドレットの詳細については、各コマンドレットのヘルプ トピックを参照してください。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Built-in Types.ps1xml Files</source>
          <target state="translated">組み込みの Types.ps1xml ファイル</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Types.ps1xml files in the $pshome directory are added automatically to every session.</source>
          <target state="translated">$Pshome ディレクトリ内の Types.ps1xml ファイルは、すべてのセッションに自動的に追加されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The Types.ps1xml file in the Windows PowerShell installation directory ($pshome) is an XML-based text file that lets you add properties and methods to the objects that are used in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell のインストール ディレクトリ ($pshome) 内の Types.ps1xml ファイルとは、Windows PowerShell で使用されるオブジェクトにプロパティとメソッドを追加できる XML ベースのテキスト ファイルです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has built-in Types.ps1xml files that add several elements to the .NET Framework types, but you can create additional Types.ps1xml files to further extend the types.</source>
          <target state="translated">Windows PowerShell では、.NET Framework の型にいくつかの要素を追加する組み込みの Types.ps1xml ファイルが、さらに、型を拡張する追加の Types.ps1xml ファイルを作成できます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, by default, array objects (System.Array) have a Length property that lists the number of objects in the array.</source>
          <target state="translated">たとえば、既定では、オブジェクトの配列 (System.Array) では、配列内のオブジェクトの数を一覧表示する長さプロパティにあります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, because the name "length" does not clearly describe the property, Windows PowerShell adds an alias property named "Count" that displays the same value.</source>
          <target state="translated">ただし、名前"length"が明確にプロパティを示さないため Windows PowerShell は、同じ値を表示する"Count"という名前のエイリアス プロパティを追加します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following XML adds the Count property to the System.Array type.</source>
          <target state="translated">次の XML は、System.Array 型に、Count プロパティを追加します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>Count<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph> Length</source>
          <target state="translated">System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>カウント<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph> の長さ</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To get the new AliasProperty, use a Get-Member command on any array, as shown in the following example.</source>
          <target state="translated">新しい AliasProperty を取得するには、次の例に示すように任意の配列に、Get-member コマンドを使用します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Get-Member -inputobject (1,2,3,4)</source>
          <target state="translated">Get-member-inputobject (1,2,3,4)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The command returns the following results.</source>
          <target state="translated">コマンドは、次の結果を返します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Name           MemberType    Definition</source>
          <target state="translated">MemberType 定義の名前</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Count          AliasProperty Count = Length Address        Method        System.Object&amp; Address(Int32 ) Clone          Method        System.Object Clone() CopyTo         Method        System.Void CopyTo(Array array, Int32 index): Equals         Method        System.Boolean Equals(Object obj) Get            Method        System.Object Get(Int32 )</source>
          <target state="translated">AliasProperty カウントのカウント = 長さアドレス メソッド System.Object &amp; アドレス (Int32) 複製メソッド System.Object Clone() CopyTo メソッド System.Void CopyTo(Array array, Int32 index): Equals メソッド System.Boolean Equals(Object obj) 取得メソッド System.Object 取得 (Int32)</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As a result, you can use either the Count property or the Length property of arrays in Windows PowerShell.</source>
          <target state="translated">その結果、Windows PowerShell で、Count プロパティまたは配列の Length プロパティのいずれかを使用することができます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">たとえば、次のように入力します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (1, 2, 3, 4).count</source>
          <target state="translated">C:\PS &gt; (1、2、3、4) .count</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (1, 2, 3, 4).length</source>
          <target state="translated">C:\PS &gt; (1、2、3、4) .length</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Creating New Types.ps1xml Files</source>
          <target state="translated">Types.ps1xml ファイルの新規作成</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The .ps1xml files that are installed with Windows PowerShell are digitally signed to prevent tampering because the formatting can include script blocks.</source>
          <target state="translated">Windows PowerShell と共にインストールされる .ps1xml ファイルにスクリプト ブロックを含めることができます、書式設定するための改ざんを防ぐためにデジタル署名します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Therefore, to add a property or method to a .NET Framework type, create your own Types.ps1xml files, and then add them to your Windows PowerShell session.</source>
          <target state="translated">そのため、.NET Framework 型にプロパティまたはメソッドを追加するには、Types.ps1xml ファイルを作成し、[Windows PowerShell セッションに追加します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To create a new file, start by copying an existing Types.ps1xml file.</source>
          <target state="translated">新しいファイルを作成するには、既存の Types.ps1xml ファイルをコピーして起動します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The new file can have any name, but it must have a .ps1xml file name extension.</source>
          <target state="translated">新しいファイルでは、任意の名前を使用できますが、.ps1xml ファイル名拡張子を持つ必要があります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can place the new file in any directory that is accessible to Windows PowerShell, but it is useful to place the files in the Windows PowerShell installation directory ($pshome) or in a subdirectory of the installation directory.</source>
          <target state="translated">新しいファイルを Windows PowerShell にアクセスできる任意のディレクトリに配置することができますが、Windows PowerShell のインストール ディレクトリ ($pshome) またはインストール ディレクトリのサブディレクトリにファイルを配置すると便利です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When you have saved the new file, use the Update-TypeData cmdlet to add the new file to your Windows PowerShell session.</source>
          <target state="translated">新しいファイルを保存するときに、新しいファイルを使用して、Windows PowerShell セッションに追加するのに Update-typedata コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you want your types to take precedence over the types that are defined in the built-in file, use the PrependData parameter of the Update-TypeData cmdlet.</source>
          <target state="translated">組み込みのファイルで定義されている型よりも優先する型を自分を設定する場合は、Update-typedata コマンドレットの PrependData パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Update-TypeData affects only the current session.</source>
          <target state="translated">Update-typedata では、現在のセッションのみに影響します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To make the change to all future sessions, export the console, or add the Update-TypeData command to your Windows PowerShell profile.</source>
          <target state="translated">将来のすべてのセッションに変更を加える、エクスポート、コンソールまたは Windows PowerShell プロファイルに Update-typedata コマンドを追加します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Types.ps1xml and Add-Member</source>
          <target state="translated">Types.ps1xml とメンバーの追加</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The Types.ps1xml files add properties and methods to all the instances of the objects of the specified .NET Framework type in the affected Windows PowerShell session.</source>
          <target state="translated">Types.ps1xml ファイルはプロパティとメソッドを影響を受ける Windows PowerShell セッションで指定した .NET Framework 型のオブジェクトのすべてのインスタンスに追加します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, if you need to add properties or methods only to one instance of an object, use the Add-Member cmdlet.</source>
          <target state="translated">ただし、オブジェクトの 1 つのインスタンスにのみ、プロパティまたはメソッドを追加する必要がある場合は、Add-member コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information,see Add-Member.</source>
          <target state="translated">詳細については、メンバーの追加を参照してください。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example: Adding an Age Member to FileInfo Objects</source>
          <target state="translated">例: FileInfo オブジェクトへの Age メンバーの追加</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This example shows how to add an Age property to file objects (System.IO.FileInfo).</source>
          <target state="translated">この例では、ファイル オブジェクト (System.IO.FileInfo) への Age プロパティを追加する方法を示します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The age of a file is the difference between its creation time and the current time in days.</source>
          <target state="translated">ファイルの有効期間は、日、作成時刻と現在の時刻の間の差分です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It is easiest to use the original Types.ps1xml file as a template for the new file.</source>
          <target state="translated">新しいファイルの元の Types.ps1xml ファイルをテンプレートとして使用する最も簡単になります。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following command copies the original file to a file called MyTypes.ps1xml in the $pshome directory.</source>
          <target state="translated">次のコマンドは、$pshome ディレクトリ MyTypes.ps1xml という名前のファイルを元のファイルをコピーします。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>copy-item Types.ps1xml MyTypes.ps1xml</source>
          <target state="translated">copy-item は、Types.ps1xml MyTypes.ps1xml</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Next, open the Types.ps1xml file in any XML or text editor, such as Notepad.</source>
          <target state="translated">次に、Types.ps1xml ファイルをメモ帳などの XML またはテキスト エディターで開きます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Because the Age property is calculated by using a script block, find a <ph id="ph1">&lt;ScriptProperty&gt;</ph> tag to use as a model for the new Age property.</source>
          <target state="translated">検索の Age プロパティがスクリプト ブロックを使用して計算されるため、 <ph id="ph1">&lt;ScriptProperty&gt;</ph> の Age プロパティを新しいモデルとして使用するタグです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Copy the XML between the <ph id="ph1">&lt;Type&gt;</ph> and <ph id="ph2">&lt;/Type&gt;</ph> tags of the code to create the script property.</source>
          <target state="translated">間で XML をコピーし、 <ph id="ph1">&lt;Type&gt;</ph> と <ph id="ph2">&lt;/Type&gt;</ph> スクリプト プロパティを作成するコードのタグ。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Then, delete the remainder of the file, except for the opening &lt;?xml&gt; and <ph id="ph1">&lt;Types&gt;</ph> tags and the closing <ph id="ph2">&lt;/Types&gt;</ph> tag.</source>
          <target state="translated">開始以外のファイルの残りの部分を削除してください &lt;? xml &gt; と <ph id="ph1">&lt;Types&gt;</ph> タグと終了 <ph id="ph2">&lt;/Types&gt;</ph> タグ。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You must also delete the digital signature to prevent errors.</source>
          <target state="translated">また、エラーを防ぐためにデジタル署名を削除する必要があります。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Begin with the model script property, such as the following script property, which was copied from the original Types.ps1xml file.</source>
          <target state="translated">次のスクリプトのプロパティは、元の Types.ps1xml ファイルからコピーしたなど、モデルのスクリプト プロパティで始まります。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>System.Guid<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>Guid<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph>$this.ToString()</source>
          <target state="translated">System.Guid<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>Guid<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph>$これです。ToString()</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Then, change the name of the .NET Framework type, the name of the property, and the value of the script block to create an Age property for file objects.</source>
          <target state="translated">次に、.NET Framework 型の名前、プロパティの名前とファイル オブジェクトの Age プロパティを作成するスクリプト ブロックの値を変更します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>Age<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph> ((get-date) - ($this.creationtime)).days</source>
          <target state="translated">System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>年齢<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph> ((get-date)-($this.creationtime)).days</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>After you save the file and close it, run an Update-TypeData command, such as the following command, to add the new Types.ps1xml file to the current session.</source>
          <target state="translated">ファイルを保存して終了した後は、新しい Types.ps1xml ファイルを現在のセッションに追加するのには、次の各コマンドなど、Update-typedata コマンドを実行します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The command uses the PrependData parameter to place the new file in a higher precedence order than the original file.</source>
          <target state="translated">コマンドでは、PrependData パラメーターを使用して、元のファイルよりも高い優先順位に新しいファイルを配置します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>(For more information about Update-TypeData, see Update-TypeData.)</source>
          <target state="translated">(Update-typedata の詳細については、Update-typedata を参照してください)。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>update-typedata -prependpath $pshome\MyTypes.ps1xml</source>
          <target state="translated">更新プログラム typedata-prependpath $pshome\MyTypes.ps1xml</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To test the change, run a Get-ChildItem command to get the PowerShell.exe file in the $pshome directory, and then pipe the file to the Format-List cmdlet to list all of the properties of the file.</source>
          <target state="translated">変更をテストするには、$pshome ディレクトリ内の PowerShell.exe ファイルを取得する Get-childitem コマンドを実行し、ファイルをすべてのファイルのプロパティの一覧を表示する Format-list コマンドレットにパイプします。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>As a result of the change, the Age property appears in the list.</source>
          <target state="translated">Age プロパティは、変更の結果として一覧に表示します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>get-childitem $pshome\PowerShell.exe | format-list -property *</source>
          <target state="translated">get-childitem $pshome\PowerShell.exe |format-list の-プロパティ *</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>PSPath            : Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS... PSParentPath      : Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS... PSChildName       : PowerShell.exe PSDrive           : C PSProvider        : Microsoft.PowerShell.Core\FileSystem PSIsContainer     : False Age               : 16 VersionInfo       : File:             C:\WINDOWS\system32\WindowsPow... InternalName:     POWERSHELL OriginalFilename: PowerShell.EXE</source>
          <target state="translated">PSPath: Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS.PSParentPath: Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS.PSChildName: PowerShell.exe PSDrive: C PSProvider: Microsoft.PowerShell.Core\FileSystem PSIsContainer: False 経過時間: 16 VersionInfo: ファイル: C:\WINDOWS\system32\WindowsPow.InternalName: POWERSHELL OriginalFilename: PowerShell.EXE</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can also display the Age property of the file by using the following command.</source>
          <target state="translated">次のコマンドを使用して、ファイルの Age プロパティを表示することもできます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>(get-childitem $pshome\PowerShell.exe).age</source>
          <target state="translated">(get-childitem $pshome\PowerShell.exe).age</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>16</source>
          <target state="translated">16</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The XML in Types.ps1xml Files</source>
          <target state="translated">Types.ps1xml ファイル内の XML</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;Types&gt;</ph> tag encloses all of the types that are defined in the file.</source>
          <target state="translated"> <ph id="ph1">&lt;Types&gt;</ph> タグを囲むすべてのファイルで定義されている型。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>There should be only one pair of <ph id="ph1">&lt;Types&gt;</ph> tags.</source>
          <target state="translated">1 つだけのペアである必要が <ph id="ph1">&lt;Types&gt;</ph> タグ。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Each .NET Framework type mentioned in the file should be represented by a pair of <ph id="ph1">&lt;Type&gt;</ph> tags.</source>
          <target state="translated">ファイルに記載されている各 .NET Framework 型のペアによって表される <ph id="ph1">&lt;Type&gt;</ph> タグ。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The type tags must contain the following tags:</source>
          <target state="translated">型のタグは、次のタグを含める必要があります。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>: A pair of <ph id="ph1">&lt;Name&gt;</ph> tags that enclose the name of the affected .NET Framework type.</source>
          <target state="translated">: 1 組の <ph id="ph1">&lt;Name&gt;</ph> の影響を受ける .NET Framework の型名を囲むタグ。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>: A pair of <ph id="ph1">&lt;Members&gt;</ph> tags that enclose the tags for the new properties and methods that are defined for the .NET Framework type.</source>
          <target state="translated">: 1 組の <ph id="ph1">&lt;Members&gt;</ph> を新しいプロパティと、.NET Framework の型に定義されているメソッドのタグを囲むタグ。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Any of the following member tags can be inside the <ph id="ph1">&lt;Members&gt;</ph> tags.</source>
          <target state="translated">内のメンバーに次のタグのいずれかで使用できます、 <ph id="ph1">&lt;Members&gt;</ph> タグ。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>: Defines a new name for an existing property.</source>
          <target state="translated">: 既存のプロパティの新しい名前を定義します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;AliasProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;ReferencedMemberName&gt;</ph> tags that specify the existing property.</source>
          <target state="translated"> <ph id="ph1">&lt;AliasProperty&gt;</ph> タグのペアを持つ必要があります <ph id="ph2">&lt;Name&gt;</ph> 新しいプロパティとのペアの名前を指定するタグ <ph id="ph3">&lt;ReferencedMemberName&gt;</ph> 既存のプロパティを指定するタグです。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, the Count alias property is an alias for the Length property of array objects.</source>
          <target state="translated">たとえば、Count エイリアス プロパティは、配列オブジェクトの Length プロパティのエイリアスです。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>Count<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph>Length</source>
          <target state="translated">System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>カウント<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph>の長さ</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>:  References a static method of a .NET Framework class.</source>
          <target state="translated">: .NET Framework クラスの静的メソッドを参照します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;CodeMethod&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new method and a pair of <ph id="ph3">&lt;GetCodeReference&gt;</ph> tags that specify the code in which the method is defined.</source>
          <target state="translated"> <ph id="ph1">&lt;CodeMethod&gt;</ph> タグのペアを持つ必要があります <ph id="ph2">&lt;Name&gt;</ph> 新しいメソッドとのペアの名前を指定するタグ <ph id="ph3">&lt;GetCodeReference&gt;</ph> メソッドが定義されているコードを指定するタグです。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, the Mode property of directories (System.IO.DirectoryInfo objects) is a code property defined in the Windows PowerShell FileSystem provider.</source>
          <target state="translated">たとえば、ディレクトリ (System.IO.DirectoryInfo オブジェクト) の Mode プロパティは、Windows PowerShell FileSystem プロバイダーで定義されているコード プロパティです。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>Mode<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>Mode</source>
          <target state="translated">System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>モード<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>モード</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>: References a static method of a .NET Framework class.</source>
          <target state="translated">: .NET Framework クラスの静的メソッドを参照します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;CodeProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;GetCodeReference&gt;</ph> tags that specify the code in which the property is defined.</source>
          <target state="translated"> <ph id="ph1">&lt;CodeProperty&gt;</ph> タグのペアを持つ必要があります <ph id="ph2">&lt;Name&gt;</ph> 新しいプロパティとのペアの名前を指定するタグ <ph id="ph3">&lt;GetCodeReference&gt;</ph> タグ、プロパティが定義されているコードを指定します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, the Mode property of directories (System.IO.DirectoryInfo objects) is a code property defined in the Windows PowerShell FileSystem provider.</source>
          <target state="translated">たとえば、ディレクトリ (System.IO.DirectoryInfo オブジェクト) の Mode プロパティは、Windows PowerShell FileSystem プロバイダーで定義されているコード プロパティです。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>Mode<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>Mode</source>
          <target state="translated">System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>モード<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>モード</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>: Defines a collection of members (properties and methods).</source>
          <target state="translated">: メンバー (プロパティとメソッド) のコレクションを定義します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;MemberSet&gt;</ph> tags appear within the primary <ph id="ph2">&lt;Members&gt;</ph> tags.</source>
          <target state="translated"> <ph id="ph1">&lt;MemberSet&gt;</ph> タグは、プライマリ内で表示されます。 <ph id="ph2">&lt;Members&gt;</ph> タグ。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The tags must enclose a pair of <ph id="ph1">&lt;Name&gt;</ph> tags surrounding the name of the member set and a pair of secondary <ph id="ph2">&lt;Members&gt;</ph> tags that surround the members (properties and methods) in the set.</source>
          <target state="translated">タグのペアを囲む必要があります <ph id="ph1">&lt;Name&gt;</ph> メンバー セットとセカンダリのペアの名前を囲むタグ <ph id="ph2">&lt;Members&gt;</ph> セットのメンバー (プロパティとメソッド) を囲むタグ。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Any of the tags that create a property (such as <ph id="ph1">&lt;NoteProperty&gt;</ph> or <ph id="ph2">&lt;ScriptProperty&gt;</ph>) or a method (such as <ph id="ph3">&lt;Method&gt;</ph> or <ph id="ph4">&lt;ScriptMethod&gt;</ph>) can be members of the set.</source>
          <target state="translated">プロパティを作成するタグのいずれか (など <ph id="ph1">&lt;NoteProperty&gt;</ph> または <ph id="ph2">&lt;ScriptProperty&gt;</ph>) またはメソッド (よう <ph id="ph3">&lt;Method&gt;</ph> または <ph id="ph4">&lt;ScriptMethod&gt;</ph>) セットのメンバーであることができます。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In Types.ps1xml files, the <ph id="ph1">&lt;MemberSet&gt;</ph> tag is used to define the default views of the .NET Framework objects in Windows PowerShell.</source>
          <target state="translated">Types.ps1xml ファイルで、 <ph id="ph1">&lt;MemberSet&gt;</ph> タグを使用して、Windows PowerShell に .NET Framework オブジェクトの既定のビューを定義します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In this case, the name of the member set (the value within the <ph id="ph1">&lt;Name&gt;</ph> tags) is always "PsStandardMembers", and the names of the properties (the value of the <ph id="ph2">&lt;Name&gt;</ph> tag) are one of the following:</source>
          <target state="translated">この場合、セット、メンバーの名前 (内の値、 <ph id="ph1">&lt;Name&gt;</ph> タグ) が常に"PsStandardMembers"、およびプロパティの名前 (の値、 <ph id="ph2">&lt;Name&gt;</ph> タグ) は、次のいずれか。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>DefaultDisplayProperty: A single property of an object.</source>
          <target state="translated">DefaultDisplayProperty: オブジェクトの 1 つのプロパティです。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>DefaultDisplayPropertySet: One or more properties of an object.</source>
          <target state="translated">オブジェクトの 1 つまたは複数のプロパティを DefaultDisplayPropertySet: です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>DefaultKeyPropertySet: One or more key properties of an object.</source>
          <target state="translated">DefaultKeyPropertySet: 1 つまたは複数のキー プロパティ オブジェクト。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A key property identifies instances of property values, such as the ID number of items in a session history.</source>
          <target state="translated">キー プロパティでは、セッション履歴内の項目の ID 番号などのプロパティ値のインスタンスを識別します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For example, the following XML defines the default display of services (System.ServiceProcess.ServiceController objects) that are returned by the Get-Service cmdlet.</source>
          <target state="translated">たとえば、次の XML では、Get-service コマンドレットによって返されるサービス (System.ServiceProcess.ServiceController オブジェクト) の既定の表示を定義します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It defines a member set named "PsStandardMembers" that consists of a default property set with the Status, Name, and DisplayName properties.</source>
          <target state="translated">ステータス、名、および DisplayName プロパティが設定を既定のプロパティで構成される"PsStandardMembers"という名前のメンバー セットを定義します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>Status<ph id="ph4">&lt;/Name&gt;
&lt;Name&gt;</ph>Name<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</source>
          <target state="translated">System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>ステータス<ph id="ph4">&lt;/Name&gt;
&lt;Name&gt;</ph>名前<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>: References a native method of the underlying object.</source>
          <target state="translated">: 基になるオブジェクトのネイティブ メソッドを参照します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>: A collection of the methods of the object.</source>
          <target state="translated">: オブジェクトのメソッドのコレクション。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>: Defines a property with a static value.</source>
          <target state="translated">: 静的な値を持つプロパティを定義します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;NoteProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;Value&gt;</ph> tags that specify the value of the property.</source>
          <target state="translated"> <ph id="ph1">&lt;NoteProperty&gt;</ph> タグのペアを持つ必要があります <ph id="ph2">&lt;Name&gt;</ph> 新しいプロパティとのペアの名前を指定するタグ <ph id="ph3">&lt;Value&gt;</ph> プロパティの値を指定したタグです。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For example, the following XML creates a Status property for directories (System.IO.DirectoryInfo objects).</source>
          <target state="translated">たとえば、次の XML では、ディレクトリ (System.IO.DirectoryInfo オブジェクト) の Status プロパティを作成します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The value of the Status property is always "Success".</source>
          <target state="translated">Status プロパティの値は、「成功」では常にします。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;NoteProperty&gt;
&lt;Name&gt;</ph>Status<ph id="ph2">&lt;/Name&gt;
&lt;Value&gt;</ph>Success</source>
          <target state="translated">System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;NoteProperty&gt;
&lt;Name&gt;</ph>ステータス<ph id="ph2">&lt;/Name&gt;
&lt;Value&gt;</ph>成功</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>: Properties that take arguments and return a value.</source>
          <target state="translated">: プロパティは引数を受け取り、値を返します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>: A collection of the properties of the object.</source>
          <target state="translated">: オブジェクトのプロパティのコレクション。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>: A property of the base object.</source>
          <target state="translated">: ベース オブジェクトのプロパティ。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>: Defines a collection of properties of the object.</source>
          <target state="translated">: オブジェクトのプロパティのコレクションを定義します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;PropertySet&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the property set and a pair of <ph id="ph3">&lt;ReferencedProperty&gt;</ph> tags that specify the properties.</source>
          <target state="translated"> <ph id="ph1">&lt;PropertySet&gt;</ph> タグのペアを持つ必要があります <ph id="ph2">&lt;Name&gt;</ph> プロパティ セットとのペアの名前を指定するタグ <ph id="ph3">&lt;ReferencedProperty&gt;</ph> プロパティを指定するタグです。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The names of the properties are enclosed in <ph id="ph1">&lt;Name&gt;</ph> tag pairs.</source>
          <target state="translated">プロパティの名前はで囲まれた <ph id="ph1">&lt;Name&gt;</ph> のペアをタグ付けします。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>In Types.ps1xml, <ph id="ph1">&lt;PropertySet&gt;</ph> tags are used to define sets of properties for the default display of an object.</source>
          <target state="translated">Types.ps1xml で <ph id="ph1">&lt;PropertySet&gt;</ph> タグを使用して、オブジェクトの既定の表示のプロパティのセットを定義します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You can identify the default displays by the value "PsStandardMembers" in the <ph id="ph1">&lt;Name&gt;</ph> tag of a <ph id="ph2">&lt;MemberSet&gt;</ph> tag.</source>
          <target state="translated">値"PsStandardMembers"を既定の表示を特定できます、 <ph id="ph1">&lt;Name&gt;</ph> のタグ、 <ph id="ph2">&lt;MemberSet&gt;</ph> タグ。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example, the following XML creates a Status property for directories (System.IO.DirectoryInfo objects).</source>
          <target state="translated">たとえば、次の XML では、ディレクトリ (System.IO.DirectoryInfo オブジェクト) の Status プロパティを作成します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The value of the Status property is always "Success".</source>
          <target state="translated">Status プロパティの値は、「成功」では常にします。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>Status&lt;/Name <ph id="ph4">&lt;Name&gt;</ph>Name<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</source>
          <target state="translated">System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>ステータス &lt;/name <ph id="ph4">&lt;Name&gt;</ph>名前<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>: Defines a method whose value is the output of a script.</source>
          <target state="translated">: 値が、スクリプトの出力メソッドを定義します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;ScriptMethod&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new method and a pair of <ph id="ph3">&lt;Script&gt;</ph> tags that enclose the script block that returns the method result.</source>
          <target state="translated"> <ph id="ph1">&lt;ScriptMethod&gt;</ph> タグのペアを持つ必要があります <ph id="ph2">&lt;Name&gt;</ph> 新しいメソッドとのペアの名前を指定するタグ <ph id="ph3">&lt;Script&gt;</ph> メソッドの結果を返すスクリプト ブロックを囲むタグ。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For example, the ConvertToDateTime and ConvertFromDateTime methods of management objects (System.System.Management.ManagementObject) are script methods that use the ToDateTime and ToDmtfDateTime static methods of the System.Management.ManagementDateTimeConverter class.</source>
          <target state="translated">たとえば、管理オブジェクト (System.System.Management.ManagementObject) の ConvertToDateTime および ConvertFromDateTime メソッドには、ToDateTime を使用してスクリプト メソッドおよび System.Management.ManagementDateTimeConverter クラスの静的メソッドを ToDmtfDateTime です。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>System.Management.ManagementObject<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptMethod&gt;
&lt;Name&gt;</ph>ConvertToDateTime</source>
          <target state="translated">System.Management.ManagementObject<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptMethod&gt;
&lt;Name&gt;</ph>ConvertToDateTime</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>ConvertFromDateTime<ph id="ph1">&lt;/Name&gt;
&lt;Script&gt;
[System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($args[0])
&lt;/Script&gt;
&lt;/ScriptMethod&gt;
&lt;/Members&gt;
&lt;/Type&gt;

&lt;ScriptProperty&gt;</ph>: Defines a property whose value is the output of a script.</source>
          <target state="translated">ConvertFromDateTime<ph id="ph1">&lt;/Name&gt;
&lt;Script&gt;
[System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($args[0])
&lt;/Script&gt;
&lt;/ScriptMethod&gt;
&lt;/Members&gt;
&lt;/Type&gt;

&lt;ScriptProperty&gt;</ph>: プロパティは、スクリプトの出力を定義します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;ScriptProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;GetScriptBlock&gt;</ph> tags that enclose the script block that returns the property value.</source>
          <target state="translated"> <ph id="ph1">&lt;ScriptProperty&gt;</ph> タグのペアを持つ必要があります <ph id="ph2">&lt;Name&gt;</ph> 新しいプロパティとのペアの名前を指定するタグ <ph id="ph3">&lt;GetScriptBlock&gt;</ph> プロパティの値を返すスクリプト ブロックを囲むタグ。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For example, the VersionInfo property of files (System.IO.FileInfo objects) is a script property that results from using the FullName property of the GetVersionInfo static method of System.Diagnostics.FileVersionInfo objects.</source>
          <target state="translated">たとえば、ファイル (System.IO.FileInfo オブジェクト) の VersionInfo プロパティは、System.Diagnostics.FileVersionInfo オブジェクトの GetVersionInfo 静的メソッドの FullName プロパティを使用することによって生成されるスクリプト プロパティです。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>VersionInfo</source>
          <target state="translated">System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>VersionInfo</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>System.Diagnostics.FileVersionInfo</source>
          <target state="translated">System.Diagnostics.FileVersionInfo</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For more information, see the Windows PowerShell Software Development Kit (SDK) in the MSDN (Microsoft Developer Network )library at http://go.microsoft.com/fwlink/?LinkId=144538.</source>
          <target state="translated">詳細については、Windows PowerShell ソフトウェア開発キット (SDK) http://go.microsoft.com/fwlink/?LinkId=144538 で MSDN (Microsoft Developer Network) ライブラリを参照してください。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Update-TypeData</source>
          <target state="translated">Update-TypeData</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To load your Types.ps1xml files into a Windows PowerShell session, run the Update-TypeData cmdlet.</source>
          <target state="translated">Windows PowerShell セッションには、Types.ps1xml ファイルを読み込む、Update-typedata コマンドレットを実行します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If you want the types in your file to take precedence over types in the built-in Types.ps1xml file, add the PrependData parameter of Update-TypeData.</source>
          <target state="translated">組み込みの Types.ps1xml ファイル内の型よりも優先するのには、ファイルの種類をする場合は、Update-typedata の PrependData パラメーターを追加します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Update-TypeData affects only the current session.</source>
          <target state="translated">Update-typedata では、現在のセッションのみに影響します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>To make the change to all future sessions, export the session, or add the Update-TypeData command to your Windows PowerShell profile.</source>
          <target state="translated">将来のすべてのセッションに変更するには、セッションをエクスポートまたは Windows PowerShell プロファイルに Update-typedata コマンドを追加します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Exceptions that occur in properties, or from adding properties to an Update-TypeData command, do not report errors to StdErr.</source>
          <target state="translated">プロパティで、またはプロパティを Update-typedata コマンドに追加することから発生する例外は、StdErr にエラーを報告しません。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This is to suppress exceptions that would occur in many common types during formatting and outputting.</source>
          <target state="translated">これは、書式設定および出力の際に、多くの一般的な型で発生する例外を抑制します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If you are getting .NET Framework properties, you can work around the suppression of exceptions by using method syntax instead, as shown in the following example:</source>
          <target state="translated">.NET Framework プロパティを取得する場合は、次の例に示すように、代わりにメソッド構文を使用して、例外の抑制を回避できます。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>"hello".get_Length()</source>
          <target state="translated">"hello".get_Length()</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Note that method syntax can only be used with .NET Framework properties.</source>
          <target state="translated">メソッドの構文は .NET Framework のプロパティでのみ使用できる点に注意してください。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Properties that are added by running the Update-TypeData cmdlet cannot use method syntax.</source>
          <target state="translated">Update-TypeData コマンドレットを実行して追加されるプロパティは、メソッド構文を使用できません。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Signing a Types.ps1xml File</source>
          <target state="translated">Types.ps1xml ファイルへの署名</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>To protect users of your Types.ps1xml file, you can sign the file using a digital signature.</source>
          <target state="translated">Types.ps1xml ファイルのユーザーを保護するのには、デジタル署名を使用して、ファイルを署名できます。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information, see about_Signing.</source>
          <target state="translated">詳細については、署名に関するトピックを参照してください。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>about_Signing (http://go.microsoft.com/fwlink/?LinkID=113268) Copy-Item (http://go.microsoft.com/fwlink/?LinkID=113292) Copy-ItemProperty (http://go.microsoft.com/fwlink/?LinkID=113293) Get-Member (http://go.microsoft.com/fwlink/?LinkID=113322) Get-TypeData (http://go.microsoft.com/fwlink/?LinkID=217033) Remove-TypeData (http://go.microsoft.com/fwlink/?LinkID=217038) Update-TypeData (http://go.microsoft.com/fwlink/?LinkID=113421)</source>
          <target state="translated">署名に関するトピック (http://go.microsoft.com/fwlink/?LinkID=113268) アイテムのコピー (http://go.microsoft.com/fwlink/?LinkID=113292) Copy-itemproperty (http://go.microsoft.com/fwlink/?LinkID=113293) Get-member (http://go.microsoft.com/fwlink/?LinkID=113322) Get-typedata (http://go.microsoft.com/fwlink/?LinkID=217033) Remove-typedata (http://go.microsoft.com/fwlink/?LinkID=217038) Update-typedata (http://go.microsoft.com/fwlink/?LinkID=113421)</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>