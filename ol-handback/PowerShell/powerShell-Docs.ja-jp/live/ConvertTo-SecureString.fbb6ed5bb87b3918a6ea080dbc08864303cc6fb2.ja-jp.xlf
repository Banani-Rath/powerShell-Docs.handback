<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb0962c0f81d40d7916ff2e6f61f1d2f75493051</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Security\ConvertTo-SecureString.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49785309f4685f15d297602d1c89a87b41469b8c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0698bf15b9fe00b28f40c82b10165bba3eaee610</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertTo-SecureString</source>
          <target state="translated">Convertto-securestring</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertTo-SecureString</source>
          <target state="translated">Convertto-securestring</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts encrypted standard strings to secure strings.</source>
          <target state="translated">暗号化された標準文字列を、セキュリティで保護された文字列に変換します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It can also convert plain text to secure strings.</source>
          <target state="translated">プレーンテキストをセキュリティで保護された文字列に変換することもできます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is used with ConvertFrom-SecureString and Read-Host.</source>
          <target state="translated">ConvertFrom-SecureString および Read-Host と共に使用します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Secure (Default)</source>
          <target state="translated">(既定値) をセキュリティで保護します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>PlainText</source>
          <target state="translated">プレーン テキスト</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Open</source>
          <target state="translated">［開く］</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ConvertTo-SecureString<ept id="p1">**</ept> cmdlet converts encrypted standard strings into secure strings.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Convertto-securestring<ept id="p1">**</ept> コマンドレットは、セキュリティで保護された文字列に暗号化された標準文字列を変換します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It can also convert plain text to secure strings.</source>
          <target state="translated">プレーンテキストをセキュリティで保護された文字列に変換することもできます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It is used with ConvertFrom-SecureString and Read-Host.</source>
          <target state="translated">ConvertFrom-SecureString および Read-Host と共に使用します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The secure string created by the cmdlet can be used with cmdlets or functions that require a parameter of type SecureString.</source>
          <target state="translated">コマンドレットが作成したセキュリティで保護された文字列は、SecureString 型のパラメーターを必要とするコマンドレットまたは関数で使用できます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The secure string can be converted back to an encrypted, standard string using the ConvertFrom-SecureString cmdlet.</source>
          <target state="translated">ConvertFrom SecureString コマンドレットを使用して、セキュリティで保護された文字列を暗号化された標準文字列に変換できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This enables it to be stored in a file for later use.</source>
          <target state="translated">この文字列は、後で使用できるようにファイルに格納されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the standard string being converted was encrypted with <bpt id="p1">**</bpt>ConvertFrom-SecureString<ept id="p1">**</ept> using a specified key, that same key must be provided as the value of the <bpt id="p2">*</bpt>Key<ept id="p2">*</ept> or <bpt id="p3">*</bpt>SecureKey<ept id="p3">*</ept> parameter of the <bpt id="p4">**</bpt>ConvertTo-SecureString<ept id="p4">**</ept> cmdlet.</source>
          <target state="translated">変換される標準の文字列を使って暗号化されていた場合 <bpt id="p1">**</bpt>Convertfrom-securestring<ept id="p1">**</ept> 指定したキーを使用して、同じ暗号化キーが指定の値として、 <bpt id="p2">*</bpt>キー<ept id="p2">*</ept> または <bpt id="p3">*</bpt>SecureKey<ept id="p3">*</ept> のパラメーター、 <bpt id="p4">**</bpt>Convertto-securestring<ept id="p4">**</ept> コマンドレットです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example 1: Convert a secure string to an encrypted string</source>
          <target state="translated">例 1: セキュリティで保護された文字列を暗号化された文字列に変換します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This example shows how to create a secure string from user input, convert the secure string to an encrypted standard string, and then convert the encrypted standard string back to a secure string.</source>
          <target state="translated">この例では、ユーザー入力からセキュリティで保護された文字列を作成し、セキュリティで保護された文字列を暗号化された標準文字列に変換してから、暗号化された標準文字列をセキュリティで保護された文字列に戻す方法を示します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">*</bpt>AsSecureString<ept id="p1">*</ept> parameter of the Read-Host cmdlet to create a secure string.</source>
          <target state="translated">最初のコマンドを使用して、 <bpt id="p1">*</bpt>AsSecureString<ept id="p1">*</ept> セキュリティで保護された文字列を作成する Read-host コマンドレットのパラメーターです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>After you enter the command, any characters that you type are converted into a secure string and then saved in the $Secure variable.</source>
          <target state="translated">コマンドを入力すると、入力した任意の文字がセキュリティで保護された文字列に変換され、$Secure 変数に保存されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second command displays the contents of the $Secure variable.</source>
          <target state="translated">2 番目のコマンドは、$Secure 変数の内容を表示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because the $Secure variable contains a secure string, Windows PowerShell displays only the System.Security.SecureString type.</source>
          <target state="translated">$Secure 変数にセキュリティで保護された文字列が含まれているために、Windows PowerShell は System.Security.SecureString 型のみを表示します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The third command uses the ConvertFrom-SecureString cmdlet to convert the secure string in the $Secure variable into an encrypted standard string.</source>
          <target state="translated">3 番目のコマンドでは、ConvertFrom SecureString コマンドレットを使用して、$Secure 変数内のセキュリティで保護された文字列を暗号化された標準文字列に変換します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It saves the result in the $Encrypted variable.</source>
          <target state="translated">結果は $Encrypted 変数に保存されます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The fourth command displays the encrypted string in the value of the $Encrypted variable.</source>
          <target state="translated">4 番目のコマンドでは、$Encrypted 変数の値の中に、暗号化された文字列が表示されます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The fifth command uses the <bpt id="p1">**</bpt>ConvertTo-SecureString<ept id="p1">**</ept> cmdlet to convert the encrypted standard string in the $Encrypted variable back into a secure string.</source>
          <target state="translated">5 番目のコマンドを使用して、 <bpt id="p1">**</bpt>Convertto-securestring<ept id="p1">**</ept> $Encrypted 変数に暗号化された標準文字列に変換するコマンドレットは、セキュリティで保護された文字列にバックアップします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It saves the result in the $Secure2 variable.</source>
          <target state="translated">結果は $secure2 変数に保存されます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The sixth command displays the value of the $Secure2 variable.</source>
          <target state="translated">6 番目のコマンドは、$secure2 変数の値を表示します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The SecureString type indicates that the command was successful.</source>
          <target state="translated">SecureString 型は、コマンドが成功したことを示します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example 2: Create a secure string from an encrypted string in a file</source>
          <target state="translated">例 2: ファイル内の暗号化された文字列からセキュリティで保護された文字列を作成します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This example shows how to create a secure string from an encrypted standard string that is saved in a file.</source>
          <target state="translated">この例では、ファイルに保存されている暗号化された標準文字列からセキュリティで保護された文字列を作成する方法を示します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">*</bpt>AsSecureString<ept id="p1">*</ept> parameter of the Read-Host cmdlet to create a secure string.</source>
          <target state="translated">最初のコマンドを使用して、 <bpt id="p1">*</bpt>AsSecureString<ept id="p1">*</ept> セキュリティで保護された文字列を作成する Read-host コマンドレットのパラメーターです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After you enter the command, any characters that you type are converted into a secure string and then saved in the $Secure variable.</source>
          <target state="translated">コマンドを入力すると、入力した任意の文字がセキュリティで保護された文字列に変換され、$Secure 変数に保存されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The second command uses the ConvertFrom-SecureString cmdlet to convert the secure string in the $Secure variable into an encrypted standard string by using the specified key.</source>
          <target state="translated">2 番目のコマンドでは、ConvertFrom SecureString コマンドレットを使用して、指定したキーを使用して、$Secure 変数内のセキュリティで保護された文字列を暗号化された標準文字列に変換します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The contents are saved in the $Encrypted variable.</source>
          <target state="translated">内容は $Encrypted 変数に保存されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The third command uses a pipeline operator (|) to send the value of the $Encrypted variable to the Set-Content cmdlet, which saves the value in the Encrypted.txt file.</source>
          <target state="translated">3 番目のコマンドでは、パイプライン演算子 (|) を使用して、$Encrypted 変数の値、値を Encrypted.txt ファイルに保存して、Set-content コマンドレットに送信します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The fourth command uses the Get-Content cmdlet to get the encrypted standard string in the Encrypted.txt file.</source>
          <target state="translated">4 番目のコマンドは、Get-Content コマンドレットを使用して、暗号化された標準文字列を Encrypted.txt ファイルで取得します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The command uses a pipeline operator to send the encrypted string to the <bpt id="p1">**</bpt>ConvertTo-SecureString<ept id="p1">**</ept> cmdlet, which converts it to a secure string by using the specified key.</source>
          <target state="translated">コマンドでは、パイプライン演算子を使用する暗号化された接続文字列を送信する、 <bpt id="p1">**</bpt>Convertto-securestring<ept id="p1">**</ept> コマンドレットに渡して、指定したキーを使用してセキュリティで保護された文字列に変換します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The results are saved in the $Secure2 variable.</source>
          <target state="translated">結果は $secure2 変数に保存されます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example 3: Convert a plain text string to a secure string</source>
          <target state="translated">例 3: プレーン テキスト文字列をセキュリティで保護された文字列に変換します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This command converts the plain text string P@ssW0rD!</source>
          <target state="translated">このコマンドでは、プレーン テキスト文字列 P@ssW0rD に変換します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>into a secure string and stores the result in the $Secure_String_Pwd variable.</source>
          <target state="translated">セキュリティで保護された文字列にし、結果を $secure_string_pwd 変数に格納します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To use the <bpt id="p1">*</bpt>AsPlainText<ept id="p1">*</ept> parameter, the <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> parameter must also be included in the command.</source>
          <target state="translated">使用する、 <bpt id="p1">*</bpt>AsPlainText<ept id="p1">*</ept> 、パラメーター、 <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> パラメーターは、コマンドにも含める必要があります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">パラメータ</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>-AsPlainText</source>
          <target state="translated">-Asplaintext</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Specifies a plain text string to convert to a secure string.</source>
          <target state="translated">セキュリティで保護された文字列に変換するプレーンテキスト文字列を指定します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The secure string cmdlets help protect confidential text.</source>
          <target state="translated">セキュリティで保護された文字列コマンドレットは、秘密情報テキストを保護できます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The text is encrypted for privacy and is deleted from computer memory after it is used.</source>
          <target state="translated">テキストはプライバシー保護のために暗号化され、使用後にコンピューターのメモリから削除されます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you use this parameter to provide plain text as input, the system cannot protect that input in this manner.</source>
          <target state="translated">このパラメーターを使用してプレーンテキストを入力として提供すると、システムはこの方法でその入力を保護することはできません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To use this parameter, you must also specify the <bpt id="p1">*</bpt>Force<ept id="p1">*</ept> parameter.</source>
          <target state="translated">このパラメーターを使用する必要がありますも指定する、 <bpt id="p1">*</bpt>Force<ept id="p1">*</ept> パラメーター。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Confirms that you understand the implications of using the <bpt id="p1">*</bpt>AsPlainText<ept id="p1">*</ept> parameter and still want to use it.</source>
          <target state="translated">使用する意味を理解していることを確認、 <bpt id="p1">*</bpt>AsPlainText<ept id="p1">*</ept> パラメーターも使用し、たいことです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>-Key</source>
          <target state="translated">キー</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Specifies the encryption key to use when converting a secure string into an encrypted standard string.</source>
          <target state="translated">セキュリティで保護された文字列を暗号化された標準文字列に変換するときに使用する暗号化キーを指定します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Valid key lengths are 16, 24, and 32 bytes.</source>
          <target state="translated">有効なキーの長さは、16、24、および 32 バイトです。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>-SecureKey</source>
          <target state="translated">-SecureKey</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Specifies the encryption key to use when converting a secure string into an encrypted standard string.</source>
          <target state="translated">セキュリティで保護された文字列を暗号化された標準文字列に変換するときに使用する暗号化キーを指定します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The key must be provided in the format of a secure string.</source>
          <target state="translated">セキュリティで保護された文字列の形式で、キーを指定する必要があります。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The secure string is converted to a byte array before being used as the key.</source>
          <target state="translated">セキュリティで保護された文字列は、キーとして使用する前にバイト配列に変換されます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Valid key lengths are 16, 24, and 32 bytes.</source>
          <target state="translated">有効なキーの長さは、16、24、および 32 バイトです。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>-String</source>
          <target state="translated">-文字列</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Specifies the string to convert to a secure string.</source>
          <target state="translated">セキュリティで保護された文字列に変換する文字列を指定します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">このコマンドレットは、共通のパラメーターをサポートしています:-デバッグ、-erroraction、-errorvariable、- InformationAction-InformationVariable、- OutVariable、-OutBuffer、- PipelineVariable、- Verbose、および - WarningVariable です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">詳細については、about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216) を参照してください。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">入力</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can pipe a standard encrypted string to <bpt id="p1">**</bpt>ConvertTo-SecureString<ept id="p1">**</ept>.</source>
          <target state="translated">暗号化された標準文字列をパイプ処理できます <bpt id="p1">**</bpt>Convertto-securestring<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">出力</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>System.Security.SecureString</source>
          <target state="translated">System.Security.SecureString</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>ConvertTo-SecureString returns a <bpt id="p1">**</bpt>SecureString<ept id="p1">**</ept> object.</source>
          <target state="translated">Convertto-securestring 返します、 <bpt id="p1">**</bpt>SecureString<ept id="p1">**</ept> オブジェクトです。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">ノート</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">関連リンク</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ConvertFrom-SecureString</source>
          <target state="translated">ConvertFrom SecureString</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Read-Host</source>
          <target state="translated">Read-Host</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>