<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3e6bb8f2069bc911873cd74c321d9f8aa04de47</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Remote_Output.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">081d2ad8d7507ee2da30d2e8e61bd2362a68b90a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b47b67a14bcf01e165206fd160b3e8099bce0fb6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Remote_Output</source>
          <target state="translated">about_Remote_Output</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Remote Output</source>
          <target state="translated">リモートの出力について</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Remote_Output</source>
          <target state="translated">about_Remote_Output</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">トピック</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Remote_Output</source>
          <target state="translated">about_Remote_Output</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes how to interpret and format the output of remote commands.</source>
          <target state="translated">解釈し、リモート コマンドの出力を書式設定する方法について説明します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The output of a command that was run on a remote computer might look like output of the same command run on a local computer, but there are some significant differences.</source>
          <target state="translated">リモート コンピューターに対して実行されたコマンドの出力がローカル コンピューター上で実行する同じコマンドの出力のようになりますが、いくつかの重要な違いがあります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic explains how to interpret, format, and display the output of commands that are run on remote computers.</source>
          <target state="translated">このトピックでは、解釈、書式設定、およびリモート コンピューターで実行されるコマンドの出力を表示する方法について説明します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DISPLAYING THE COMPUTER NAME</source>
          <target state="translated">コンピューターの名前を表示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you use the Invoke-Command cmdlet to run a command on a remote computer, the command returns an object that includes the name of the computer that generated the data.</source>
          <target state="translated">Invoke-command コマンドレットを使用してリモート コンピューターでコマンドを実行するときに、データを生成したコンピューターの名前を含んでいるオブジェクトが返されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The remote computer name is stored in the PSComputerName property.</source>
          <target state="translated">リモート コンピューターの名前は、PSComputerName プロパティに格納されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For many commands, the PSComputerName is displayed by default.</source>
          <target state="translated">多くのコマンドは、PSComputerName は既定で表示されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the following command runs a Get-Culture command on two remote computers, Server01 and Server02.</source>
          <target state="translated">たとえば、次のコマンドは、2 つのリモート コンピューター Server01 および Server02 上 Get-culture コマンドを実行します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The output, which appears below, includes the names of the remote computers on which the command ran.</source>
          <target state="translated">下に表示される出力には、コマンドを実行しているリモート コンピューターの名前が含まれています。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -script {get-culture} -comp Server01, Server02</source>
          <target state="translated">C:\PS &gt; 呼び出しコマンドのスクリプトを作成 {get カルチャ} comp Server01、Server02</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>LCID  Name    DisplayName                PSComputerName</source>
          <target state="translated">LCID 名 DisplayName PSComputerName</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>1033  en-US   English (United States)    Server01 1033  es-AR   Spanish (Argentina)        Server02</source>
          <target state="translated">1033 EN-US 英語 (米国) Server01 1033 es AR スペイン語 (アルゼンチン) Server02</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use the HideComputerName parameter of Invoke-Command to hide the PSComputerName property.</source>
          <target state="translated">PSComputerName プロパティを非表示には、Invoke-command の HideComputerName パラメーターを使用できます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This parameter is designed for commands that collect data from only one remote computer.</source>
          <target state="translated">このパラメーターは、1 つだけのリモート コンピューターからデータを収集するためのコマンド用です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following command runs a Get-Culture command on the Server01 remote computer.</source>
          <target state="translated">次のコマンドは、Server01 リモート コンピューター上、Get-culture コマンドを実行します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It uses the HideComputerName parameter to hide the PSComputerName property and related properties.</source>
          <target state="translated">PSComputerName プロパティおよび関連プロパティを非表示にするのに HideComputerName パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scr {get-culture} -comp Server01 -HideComputerName</source>
          <target state="translated">C:\PS &gt; を呼び出すコマンド scr {get カルチャ}-Server01 HideComputerName コンポジション</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>LCID             Name             DisplayName</source>
          <target state="translated">LCID 名の表示名</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>1033             en-US            English (United States)</source>
          <target state="translated">1033 EN-US 英語 (米国)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also display the PSComputerName property if it is not displayed by default.</source>
          <target state="translated">既定で表示されていない場合は、PSComputerName プロパティを表示することもできます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, the following commands use the Format-Table cmdlet to add the PSComputerName property to the output of a remote Get-Date command.</source>
          <target state="translated">たとえば、次のコマンドは、リモート Get-date コマンドの出力に PSComputerName プロパティを追加する Format-table コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $dates = invoke-command -script {get-date} -computername Server01, Server02 C:\PS&gt; $dates | format-table DateTime, PSComputerName -auto</source>
          <target state="translated">C:\PS &gt; $dates を呼び出すコマンドを =-{取得日} computername Server01、Server02 C:\PS &gt; $dates のスクリプトを作成 |表形式の DateTime、PSComputerName-自動</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>DateTime                            PSComputerName</source>
          <target state="translated">DateTime PSComputerName</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Monday, July 21, 2008 7:16:58 PM    Server01 Monday, July 21, 2008 7:16:58 PM    Server02</source>
          <target state="translated">2008 年 7 月 21 日月曜日午後 7時 16分: 58 Server01 2008 年 7 月 21 日月曜日午後 7時 16分: 58 Server02</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>DISPLAYING THE MACHINENAME PROPERTY</source>
          <target state="translated">MACHINENAME プロパティを表示します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Several cmdlets, including Get-Process, Get-Service, and Get-EventLog, have a ComputerName parameter that gets the objects on a remote computer.</source>
          <target state="translated">いくつかのコマンドレット、Get-process、Get-service がおよび、Get-eventlog は、リモート コンピューター上のオブジェクトを取得する ComputerName パラメーターを持っています。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These cmdlets do not use Windows PowerShell remoting, so you can use them even on computers that are not configured for remoting in Windows PowerShell.</source>
          <target state="translated">これらのコマンドレットは、Windows PowerShell リモート処理を使わないため、Windows PowerShell でのリモート処理が構成されていないコンピューターでも使用できます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The objects that these cmdlets return store the name of the remote computer in the MachineName property.</source>
          <target state="translated">これらのコマンドレットが返すオブジェクトは、MachineName プロパティのリモート コンピューターの名前を格納します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(These objects do not have a PSComputerName property.)</source>
          <target state="translated">(これらのオブジェクトはありません PSComputerName プロパティ。)</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, this command gets the PowerShell process on the Server01 and Server02 remote computers.</source>
          <target state="translated">たとえば、このコマンドは、Server01 および Server02 リモート コンピューター上の PowerShell プロセスを取得します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default display does not include the MachineName property.</source>
          <target state="translated">既定の表示では、MachineName プロパティは含まれません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; get-process PowerShell -computername server01, server02</source>
          <target state="translated">C:\PS &gt;、get-process PowerShell-computername server01、server02</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">Npm (k) pm (k) ws (k) vm (m) [CPU Id ProcessName を処理します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>920      38    97524     114504   575     9.66   2648 PowerShell 194       6    24256      32384   142            3020 PowerShell 352      27    63472      63520   577     3.84   4796 PowerShell</source>
          <target state="translated">920 38 97524 114504 575 9.66 2648 PowerShell 194 6 24256 32384 142 3020 PowerShell 352 27 63472 63520 577 3.84 4796 PowerShell</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use the Format-Table cmdlet to display the MachineName property of the process objects.</source>
          <target state="translated">Format-table コマンドレットを使用すると、プロセス オブジェクトの MachineName プロパティを表示します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, the following command saves the processes in the $p variable and then uses a pipeline operator (|) to send the processes in $p to the Format-Table command.</source>
          <target state="translated">たとえば、次のコマンドは、$p 変数にプロセスを保存し、パイプライン演算子 (|) を使用して、$p 内のプロセスを Format-table コマンドに送信。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the Property parameter of Format-Table to include the MachineName property in the display.</source>
          <target state="translated">コマンドは、MachineName プロパティを表示に含める、Format-table の Property パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $p = get-process PowerShell -comp Server01, Server02 C:\PS&gt; $P | format-table -property ID, ProcessName, MachineName -auto</source>
          <target state="translated">C:\PS &gt; $p = get-process PowerShell に comp Server01、Server02 C:\PS &gt; $P |表の書式設定のプロパティ ID、プロセス名、MachineName-自動</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Id ProcessName MachineName</source>
          <target state="translated">Id ProcessName MachineName</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>2648 PowerShell  Server02 3020 PowerShell  Server01 4796 PowerShell  Server02</source>
          <target state="translated">2648 PowerShell Server02 3020 PowerShell Server01 4796 PowerShell Server02</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following more complex command adds the MachineName property to the default process display.</source>
          <target state="translated">次より複雑なコマンドが表示される既定のプロセスに、MachineName プロパティを追加します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It uses hash tables to specify calculated properties.</source>
          <target state="translated">ハッシュ テーブルを使用して計算のプロパティを指定します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Fortunately, you do not have to understand it to use it.</source>
          <target state="translated">幸いにも、それを使用するように理解する必要はありません。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>(Note that the backtick [`] is the continuation character.)</source>
          <target state="translated">(バックティック (') が連結文字に注意してください)。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $p = get-process PowerShell -comp Server01, Server02</source>
          <target state="translated">C:\PS &gt; $p = get-process PowerShell に comp Server01、Server02</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $p | format-table -property Handles, <ph id="ph1">`
@{Label="NPM(K)";Expression={int}}, `</ph> @{Label="PM(K)";Expression={int}}, <ph id="ph2">`
@{Label="WS(K)";Expression={int}}, `</ph> @{Label="VM(M)";Expression={int}}, <ph id="ph3">`
@{Label="CPU(s)";Expression={if ($.CPU -ne $()){ $.CPU.ToString("N")}}}, `</ph> Id, ProcessName, MachineName -auto</source>
          <target state="translated">C:\PS &gt; $p |表の書式設定のプロパティのハンドル、 <ph id="ph1">`
@{Label="NPM(K)";Expression={int}}, `</ph> @{Label="PM(K)";式 = {int}}、 <ph id="ph2">`
@{Label="WS(K)";Expression={int}}, `</ph> @{Label="VM(M)";式 = {int}}、 <ph id="ph3">`
@{Label="CPU(s)";Expression={if ($.CPU -ne $()){ $.CPU.ToString("N")}}}, `</ph> Id、プロセス名、MachineName-自動</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Handles NPM(K) PM(K)  WS(K) VM(M) CPU(s)   Id ProcessName MachineName</source>
          <target state="translated">Npm (k) の pm (k) ws (k) の vm (m) [CPU Id の ProcessName MachineName を処理します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>920     38 97560 114532   576        2648 PowerShell  Server02 192      6 24132  32028   140        3020 PowerShell  Server01 438     26 48436  59132   565        4796 PowerShell  Server02</source>
          <target state="translated">920 38 97560 114532 576 2648 PowerShell Server02 192 6 24132 32028 140 3020 PowerShell Server01 438 26 48436 59132 565 4796 PowerShell Server02</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>DESERIALIZED OBJECTS</source>
          <target state="translated">逆シリアル化されたオブジェクト</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you run remote commands that generate output, the command output is transmitted across the network back to the local computer.</source>
          <target state="translated">出力を生成するリモート コマンドを実行すると、コマンドの出力は、ローカル コンピューターにネットワーク経由で送信されます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because most live Microsoft .NET Framework objects (such as the objects that Windows PowerShell cmdlets return) cannot be transmitted over the network, the live objects are "serialized".</source>
          <target state="translated">(このオブジェクトは、Windows PowerShell コマンドレットで返されます) などのほとんどのライブ Microsoft .NET Framework オブジェクトは、ネットワーク経由で送信されることはできませんので、有効なオブジェクトは「シリアル化」します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In other words, the live objects are converted into XML representations of the object and its properties.</source>
          <target state="translated">つまり、実際のオブジェクトは、オブジェクトとそのプロパティの XML 表現に変換されます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Then, the XML-based serialized object is transmitted across the network.</source>
          <target state="translated">次に、XML ベースのシリアル化されるオブジェクトは、ネットワーク経由で送信されます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>On the local computer, Windows PowerShell receives the XML-based serialized object and "deserializes" it by converting the XML-based object into a standard .NET Framework object.</source>
          <target state="translated">ローカル コンピューターで Windows PowerShell は XML ベースのシリアル化されるオブジェクトを受信し、XML ベースのオブジェクトを標準の .NET Framework オブジェクトに変換することによって「逆」します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, the deserialized object is not a live object.</source>
          <target state="translated">ただし、逆シリアル化されたオブジェクトは、有効なオブジェクトではありません。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It is a snapshot of the object at the time that it was serialized, and it includes properties but no methods.</source>
          <target state="translated">シリアル化された時に、オブジェクトのスナップショットであるが、プロパティ、メソッドのない付属しています。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can use and manage these objects in Windows PowerShell, including passing them in pipelines, displaying selected properties, and formatting them.</source>
          <target state="translated">使用し、パイプラインで渡し、選択したプロパティの表示、およびそれらを書式設定を含む、Windows PowerShell でこれらのオブジェクトを管理することができます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Most deserialized objects are automatically formatted for display by entries in the Types.ps1xml or Format.ps1xml files.</source>
          <target state="translated">ほとんどの逆シリアル化されたオブジェクトは、Types.ps1xml または Format.ps1xml ファイル内のエントリで表示するために自動的に書式設定されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, the local computer might not have formatting files for all of the deserialized objects that were generated on a remote computer.</source>
          <target state="translated">ただし、ローカル コンピューターがないリモート コンピューターで生成された逆シリアル化されたオブジェクトのすべてのファイルの書式設定します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When objects are not formatted, all of the properties of each object appear in the console in a streaming list.</source>
          <target state="translated">オブジェクトがフォーマットされていないすべての各オブジェクトのプロパティ、ストリーミング リストでコンソールに表示されます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When objects are not formatted automatically, you can use the formatting cmdlets, such as Format-Table or Format-List, to format and display selected properties.</source>
          <target state="translated">オブジェクトが自動的にフォーマットされていない場合は、書式設定し、選択したプロパティを表示する Format-table や Format-list などの書式設定コマンドレットを使用できます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Or, you can use the Out-GridView cmdlet to display the objects in a table.</source>
          <target state="translated">または、Out-gridview コマンドレットを表示して、テーブルでオブジェクトを使用することができます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Also, if you run a command on a remote computer that uses cmdlets that you do not have on your local computer, the objects that the command returns might not be formatted properly because you do not have the formatting files for those objects on your computer.</source>
          <target state="translated">また、ローカル コンピューターがないコマンドレットを使用するリモート コンピューターでコマンドを実行する場合コマンドが返すオブジェクト可能性がありますいない適切にフォーマットされてコンピューターに、それらのオブジェクトの書式ファイルはないためです。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To get formatting data from another computer, use the Get-FormatData and Export-FormatData cmdlets.</source>
          <target state="translated">別のコンピューターからデータを書式設定を取得するには、Get-formatdata と Export-formatdata コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Some object types, such as DirectoryInfo objects and GUIDs, are converted back into live objects when they are received.</source>
          <target state="translated">DirectoryInfo オブジェクトと、Guid など、オブジェクトの種類は、受信したときに、ライブ オブジェクトに変換されます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These objects do not need any special handling or formatting.</source>
          <target state="translated">これらのオブジェクトは、特別な処理や書式設定は不要です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>ORDERING THE RESULTS</source>
          <target state="translated">結果の順序付け</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The order of the computer names in the ComputerName parameter of cmdlets determines the order in which Windows PowerShell connects to the remote computers.</source>
          <target state="translated">コマンドレットの ComputerName パラメーターにコンピューター名の順序では、Windows PowerShell がリモート コンピューターに接続する順序を決定します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, the results appear in the order in which the local computer receives them, which might be a different order.</source>
          <target state="translated">ただし、結果は、ローカル コンピューターの受信順に、順序が異なる場合がありますに表示されます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To change the order of the results, use the Sort-Object cmdlet.</source>
          <target state="translated">結果の順序を変更するには、Sort-object コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can sort on the PSComputerName or MachineName property.</source>
          <target state="translated">PSComputerName または MachineName プロパティを並べ替えることができます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can also sort on another property of the object so that the results from different computers are interspersed.</source>
          <target state="translated">別のコンピューターからの結果が混在しているためも、目的のオブジェクトの別のプロパティで並べ替えることができます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>about_Remote about_Remote_Variables Format-Table Get-EventLog Get-Process Get-Service Get-WmiObject Invoke-Command Out-GridView Select-Object</source>
          <target state="translated">about_Remote about_Remote_Variables Format-table Get-eventlog Get-process Get-service Get-wmiobject Invoke-command Out-gridview Select-object</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>