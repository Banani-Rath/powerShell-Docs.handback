<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d7e71797a91a7557c8222274e961ded55c18954</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Arrays.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">453c2dda6dcbc293c1f9f33458bb312469eb7dac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebdbf2165af51d00ef07a49e89db2b57b51b773b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_Arrays</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Arrays</source>
          <target state="translated">配列の概要</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_Arrays</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">トピック</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_Arrays</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes arrays, which are data structures designed to store collections of items.</source>
          <target state="translated">項目のコレクションを格納するためのデータ構造体である配列について説明します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An array is a data structure that is designed to store a collection of items.</source>
          <target state="translated">配列は、項目のコレクションを格納するように設計されたデータ構造です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The items can be the same type or different types.</source>
          <target state="translated">項目には、同じ型またはさまざまな種類を指定できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, a collection of zero or one object has some properties of arrays.</source>
          <target state="translated">Windows PowerShell 3.0 以降では、0 個または 1 つのオブジェクトのコレクションは、配列のプロパティを持ちます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CREATING AND INITIALIZING AN ARRAY</source>
          <target state="translated">作成して、配列の初期化</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create and initialize an array, assign multiple values to a variable.</source>
          <target state="translated">作成し、配列を初期化、複数の値を変数に代入します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The values stored in the array are delimited with a comma and separated from the variable name by the assignment operator (=).</source>
          <target state="translated">配列に格納された値は、コンマで区切られたし、代入演算子 (=) によって、変数名から分離します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, to create an array named $A that contains the seven numeric (int) values of 22, 5, 10, 8, 12, 9, and 80, type:</source>
          <target state="translated">たとえば、22、5、10、8、12、9、および 80 の 7 つの数値型 (int) 値を含む $A という名前の配列を作成するには、次のように入力します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>$A = 22,5,10,8,12,9,80</source>
          <target state="translated">$A 22,5,10,8,12,9,80 =</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also create and initialize an array by using the range operator (..).</source>
          <target state="translated">作成し、[範囲演算子 (.) を使用して配列を初期化することもできます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, to create and initialize an array named "$B" that contains the values 5 through 8, type:</source>
          <target state="translated">たとえばを作成し、5 ~ 8 の値を含む"$B"という名前の配列を初期化する次のように入力します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>$B = 5..8</source>
          <target state="translated">$B 5..8 =</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a result, $B contains four values: 5, 6, 7, and 8.</source>
          <target state="translated">その結果、$B が 4 つの値が含まれます: 5、6、7、および 8 です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When no data type is specified, Windows PowerShell creates each array as an object array (type: System.Object[]).</source>
          <target state="translated">Windows PowerShell がオブジェクトの配列には、各配列を作成するデータ型が指定されていない場合 (種類: System.Object[]) です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To determine the data type of an array, use the GetType() method.</source>
          <target state="translated">配列のデータ型を判断するには、GetType() メソッドを使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, to determine the data type of the $a array, type:</source>
          <target state="translated">たとえば、配列、$a のデータ型を調べるには、次のように入力します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>$a.GetType()</source>
          <target state="translated">$a.GetType()</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To create a strongly typed array, that is, an array that can contain only values of a particular type, cast the variable as an array type, such as string[], long[], or int32[].</source>
          <target state="translated">厳密に型指定された配列をつまり、特定の型の値のみを含めることができる配列を作成するには、string[]、長い [は、int32 など、配列型として変数をキャストします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To cast an array, precede the variable name with an array type enclosed in brackets.</source>
          <target state="translated">配列をキャストするには、角かっこで囲む配列型の変数名の前に付けます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, to create a 32-bit integer array named $ia containing four integers (1500, 2230, 3350, and 4000), type:</source>
          <target state="translated">たとえば、4 つの整数 (1500、2230、3350、および 4000) を含む $ia をという名前の 32 ビット整数配列を作成する次のように入力します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>[int32[]]$ia = 1500,2230,3350,4000</source>
          <target state="translated">[int32] $ia 1500,2230,3350,4000 =</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As a result, the $ia array can contain only integers.</source>
          <target state="translated">その結果、$ia 配列では、整数のみを含めることができます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can create arrays that are cast to any supported type in the Microsoft .NET Framework.</source>
          <target state="translated">Microsoft .NET Framework でサポートされている型にキャストされる配列を作成できます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the objects that Get-Process retrieves to represent processes are of the System.Diagnostics.Process type.</source>
          <target state="translated">たとえば、Get-process の取得プロセスを表すオブジェクトは、System.Diagnostics.Process 型です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create a strongly typed array of process objects, enter the following command:</source>
          <target state="translated">プロセス オブジェクトの厳密に型指定された配列を作成するには、次のコマンドを入力します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>[Diagnostics.Process[]]$zz = Get-Process</source>
          <target state="translated">[Diagnostics.Process[]]$zz = Get-process</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>THE ARRAY SUB-EXPRESSION OPERATOR</source>
          <target state="translated">配列のサブ式演算子</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The array sub-expression operator creates an array, even if it contains zero or one object.</source>
          <target state="translated">配列のサブ式演算子は、0 個または 1 つのオブジェクトが含まれている場合でも、配列を作成します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The syntax of the array operator is as follows:</source>
          <target state="translated">配列の演算子の構文は次のとおりです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>@( ... )</source>
          <target state="translated">@( ... )</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use the array operator to create an array of zero or one object.</source>
          <target state="translated">配列の演算子を使用すると、0 個または 1 つのオブジェクトの配列を作成します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>PS C:&gt;$a = @("One") PS C:&gt;$a.Count</source>
          <target state="translated">PS c: &gt;$、= @("One") PS c: &gt; $a.Count</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>PS C:&gt;$b = @() PS C:&gt;$b.Count</source>
          <target state="translated">PS c: &gt; $b = @ () PS c: &gt; $b.Count</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The array operator is particularly useful in scripts when you are getting objects, but do not know how many objects you will get.</source>
          <target state="translated">オブジェクトを取得する場合、配列の演算子がスクリプトに特に便利ですが、表示されるオブジェクトの数がわからない。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $p = @(Get-Process Notepad)</source>
          <target state="translated">PS c: &gt; $p = @(Get-process Notepad)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about the array sub-expression operator, see about_Operators.</source>
          <target state="translated">配列のサブ式演算子の詳細については、about_Operators を参照してください。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>READING AN ARRAY</source>
          <target state="translated">配列の読み取り</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can refer to an array by using its variable name.</source>
          <target state="translated">配列変数名を使用して参照することができます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To display all the elements in the array, type the array name.</source>
          <target state="translated">配列内のすべての要素を表示するには、配列名を入力します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">たとえば、次のように入力します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$a</source>
          <target state="translated">$、</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can refer to the elements in an array by using an index, beginning at position 0.</source>
          <target state="translated">ご覧配列内の要素、インデックスを使用して位置 0 から開始します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Enclose the index number in brackets.</source>
          <target state="translated">インデックス番号をかっこで囲みます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, to display the first element in the $a array, type:</source>
          <target state="translated">たとえば、配列、$a 内の最初の要素を表示する次のように入力します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>$a[0]</source>
          <target state="translated">$[0]</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To display the third element in the $a array, type:</source>
          <target state="translated">3 番目の要素を配列 $a を表示するには、次のように入力します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>$a[2]</source>
          <target state="translated">$a [2]</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Negative numbers count from the end of the array.</source>
          <target state="translated">負の数値は、配列の末尾からカウントします。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, "-1" refers to the last element of the array.</source>
          <target state="translated">たとえば、「-1」は、配列の要素では最後のです。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To display the last three elements of the array, type:</source>
          <target state="translated">配列の最後の 3 つの要素を表示するには、次のように入力します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>$a[-3..-1]</source>
          <target state="translated">$を [-3..-1]</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>However, be cautious when using this notation.</source>
          <target state="translated">ただし、注意この表記法を使用する場合。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>$a[0..-2]</source>
          <target state="translated">$を [0..-2]</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This command does not refer to all the elements of the array, except for the last one.</source>
          <target state="translated">このコマンドは、最後の 1 つを除く、配列のすべての要素を参照していません。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It refers to the first, last, and second-to-last elements in the array.</source>
          <target state="translated">これは first、last を参照し、配列内の最後から 2 番目の要素。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can use the range operator to display a subset of all the values in an array.</source>
          <target state="translated">範囲演算子を使用すると、配列内のすべての値のサブセットを表示します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to display the data elements at index position 1 through 3, type:</source>
          <target state="translated">たとえば、1 ~ 3 のインデックス位置にあるデータ要素を表示する次のように入力します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>$a[1..3]</source>
          <target state="translated">$[1..3]</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can use the plus operator (+) to combine a range with a list of elements in an array.</source>
          <target state="translated">プラス演算子 (+) を使用して、配列内の要素の一覧と、範囲を組み合わせることができます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, to display the elements at index positions 0, 2, and 4 through 6, type:</source>
          <target state="translated">たとえば、0、2、および 4 ~ 6 のインデックス位置にある要素を表示する次のように入力します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>$a[0,2+4..6]</source>
          <target state="translated">$を [0, 2 + 4..6]</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To determine how many items are in an array, use the Length property or its Count alias.</source>
          <target state="translated">配列内のアイテム数がかを確認するには、Length プロパティまたはその数のエイリアスを使用します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>$a.Count</source>
          <target state="translated">$a.Count</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also use looping constructs, such as ForEach, For, and While loops, to refer to the elements in an array.</source>
          <target state="translated">ForEach などのループ構造を使用することもでき、While ループ、配列内の要素を参照します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, to use a ForEach loop to display the elements in the $a array, type:</source>
          <target state="translated">たとえば、ForEach ループを使用して、配列、$a 内の要素を表示する、次のように入力します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>foreach ($element in $a) {$element}</source>
          <target state="translated">foreach ($ $element、) {$element}</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The Foreach loop iterates through the array and returns each value in the array until reaching the end of the array.</source>
          <target state="translated">Foreach ループでは、配列を反復処理し、配列の末尾に到達するまで配列の各値を返します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The For loop is useful when you are incrementing counters while examining the elements in an array.</source>
          <target state="translated">For ループは、配列内の要素を確認しながらカウンターをインクリメントする場合に便利です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, to use a For loop to  return every other value in an array, type:</source>
          <target state="translated">たとえば、For ループを使用して、配列内の他のすべての値を返す、次のように入力します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>for ($i = 0; $i -le ($a.length - 1); $i += 2) {$a[$i]}</source>
          <target state="translated">($i = 0; $i-le ($a.length - 1); $i + = 2) {$[$i]}</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can use a While loop to display the elements in an array until a defined condition is no longer true.</source>
          <target state="translated">While を使用するループを使用して定義された条件が true でなくなるまでに、配列内の要素を表示します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, to display the elements in the $a array while the array index is less than 4, type:</source>
          <target state="translated">たとえば、要素を表示する、配列、$a に配列のインデックスが 4 未満の中に、次のように入力します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>$i=0 while($i -lt 4) {$a[$i]; $i++}</source>
          <target state="translated">$i ($i lt 4) の中に 0 を = {$[$i]; $i++}</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>GET THE MEMBERS OF AN ARRAY</source>
          <target state="translated">配列のメンバーを取得します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To get the properties and methods of an array, such as the Length property and the SetValue method, use the InputObject parameter of the Get-Member cmdlet.</source>
          <target state="translated">プロパティとメソッドの Length プロパティと SetValue メソッドなどの配列を取得するには、Get-member コマンドレットの InputObject パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you pipe an array to Get-Member, Windows PowerShell sends the items one at a time and Get-Member returns the type of each item in the array (ignoring duplicates).</source>
          <target state="translated">Get-member に配列をパイプする Windows PowerShell は、一度に 1 つの項目を送信し、Get-member は、(重複を無視) 配列の各項目の種類を返します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you use the InputObject parameter, Get-Member returns the members of the array.</source>
          <target state="translated">InputObject パラメーターを使用すると、Get-member は、配列のメンバーを返します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the members of the array in the $a variable.</source>
          <target state="translated">たとえば、次のコマンドは、$a 変数に配列のメンバーを取得します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Get-Member -InputObject $a</source>
          <target state="translated">Get-member-inputobject $a、</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can also get the members of an array by typing a comma (,) before the value that is piped to the Get-Member cmdlet.</source>
          <target state="translated">Get-member コマンドレットにパイプは、値の前にコンマ (,) を入力してが配列のメンバーを取得もできます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The comma makes the array the second item in an array of arrays.</source>
          <target state="translated">コンマの配列、配列の配列の 2 番目の項目を取得します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Windows PowerShell pipes the arrays one at a time and Get-Member returns the members of the array.</source>
          <target state="translated">Windows PowerShell は、一度に 1 つの配列をパイプし、Get-member は、配列のメンバーを返します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>,$a | Get-Member</source>
          <target state="translated">,$a |メンバーの取得</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>,(1,2,3) | Get-Member</source>
          <target state="translated">、(1,2,3) |メンバーの取得</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>MANIPULATING AN ARRAY</source>
          <target state="translated">配列を操作します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can change the elements in an array, add an element to an array, and combine the values from two arrays into a third array.</source>
          <target state="translated">配列内の要素を変更し、配列に要素を追加して、3 つ目の配列に 2 つの配列から値を結合できます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To change the value of a particular element in an array, specify the array name and the index of the element that you want to change, and then use the assignment operator (=) to specify a new value for the element.</source>
          <target state="translated">配列内の特定の要素の値を変更するには、配列名と、変更する要素のインデックスを指定し、代入演算子 (=) を使用して、要素の新しい値を指定します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, to change the value of the second item in the $a array (index position 1) to 10, type:</source>
          <target state="translated">たとえば、配列、$a 内の 2 番目の項目の値を変更する (インデックス位置 1) に 10 を入力します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>$a[1] = 10</source>
          <target state="translated">$[1] = 10</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can also use the SetValue method of an array to change a value.</source>
          <target state="translated">また、値を変更するのに、配列の SetValue メソッドを使用することができます。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following example changes the second value (index position 1) of the $a array to 500:</source>
          <target state="translated">次の例は、2 番目の値を変更 (インデックス位置 1) を 500 配列 $a の。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>$a.SetValue(500,1)</source>
          <target state="translated">$a.SetValue(500,1)</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can use the += operator to add an element to an array.</source>
          <target state="translated">+ = 演算子を使用すると、配列に要素を追加します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When you use it, Windows PowerShell actually creates a new array with the values of the original array and the added value.</source>
          <target state="translated">を使用すると Windows PowerShell は実際には、元の配列や付加価値の値を新しい配列を作成します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, to add an element with a value of 200 to the array in the $a variable, type:</source>
          <target state="translated">たとえば、200 の値を持つ要素を $a 変数の配列を追加する次のように入力します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>$a += 200</source>
          <target state="translated">+ = 200 $a</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>It is not easy to delete elements from an array, but you can create a new array that contains only selected elements of an existing array.</source>
          <target state="translated">配列から要素を削除する簡単ではありませんが、選択した要素のみ、既存の配列を含む新しい配列を作成できます。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, to create the $t array with all the elements in the $a array except for the value at index position 2, type:</source>
          <target state="translated">たとえば、配列のインデックス位置 2 にある値を除く、$a 内のすべての要素を $t 配列を作成する次のように入力します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>$t = $a[0,1 + 3..($a.length - 1)]</source>
          <target state="translated">$t = $、[0, 1 + 3.. ($a.length - 1)]</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To combine two arrays into a single array, use the plus operator (+).</source>
          <target state="translated">1 つの配列に 2 つの配列を結合するには、プラス演算子 (+) を使用します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example creates two arrays, combines them, and then displays the resulting combined array.</source>
          <target state="translated">次の例は、2 つの配列を作成、これらには、結合し、結果として得られる、結合配列を表示します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>$x = 1,3 $y = 5,9 $z = $x + $y</source>
          <target state="translated">$x = 1, 3 $y = 5,9 $z = $x + $y</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>As a result, the $z array contains 1, 3, 5, and 9.</source>
          <target state="translated">その結果、$z 配列には、1、3、5、および 9 が含まれています。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To delete an array, assign a value of $null to the array.</source>
          <target state="translated">配列を削除するには、配列に $null の値を割り当てます。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following command deletes the array in the $a variable.</source>
          <target state="translated">次のコマンドでは、$a 変数の配列を削除します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>$a = $null</source>
          <target state="translated">$、$null を =</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can also use the Remove-Item cmdlet, but assigning a value of $null is faster, especially for large arrays.</source>
          <target state="translated">Remove-item コマンドレットを使用することもできますが、$null の値を割り当てることが、高速で特に大きな配列。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>ARRAYS OF ZERO OR ONE</source>
          <target state="translated">0 または 1 つの配列</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, a collection of zero or one object has the Count and Length property.</source>
          <target state="translated">Windows PowerShell 3.0 以降では、0 個または 1 つのオブジェクトのコレクションが、数と長さのプロパティです。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Also, you can index into an array of one object.</source>
          <target state="translated">また、1 つのオブジェクトの配列にインデックスを作成できます。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This feature helps you to avoid scripting errors that occur when a command that expects a collection gets fewer than two items.</source>
          <target state="translated">この機能を使用して、コレクションを要求するコマンドを 2 つ未満の項目を取得するときに発生するスクリプトのエラーを回避するのに役立ちます。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate this feature.</source>
          <target state="translated">次の例では、この機能を説明します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Zero objects</source>
          <target state="translated">0 個のオブジェクト</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>$a = $null $a.Count</source>
          <target state="translated">$、$null $a.Count =</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>$a.Length</source>
          <target state="translated">$a.Length</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>One object</source>
          <target state="translated">1 つのオブジェクト</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>$a = 4 $a.Count</source>
          <target state="translated">$、= 4 $a.Count</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>$a.Length</source>
          <target state="translated">$a.Length</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>$a[0]</source>
          <target state="translated">$[0]</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>$a[-1]</source>
          <target state="translated">$[-1]</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators about_Hash_Tables about_Operators about_For about_Foreach about_While</source>
          <target state="translated">about_Assignment_Operators about_Hash_Tables about_Operators about_For about_Foreach about_While</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>