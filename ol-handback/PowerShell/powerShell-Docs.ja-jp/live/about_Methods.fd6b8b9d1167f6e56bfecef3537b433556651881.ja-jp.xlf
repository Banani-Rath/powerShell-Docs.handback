<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f5b55ef0e68d267936e083e6defb0d31d4df6e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e8b1276aa40ed7e28ff98cf59aa4d332f794fe4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">353d62fac859ec6df86fc2836233a7e9182defea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>about_methods</source>
          <target state="translated">about_methods</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About methods</source>
          <target state="translated">メソッドについて</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_methods</source>
          <target state="translated">about_methods</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_methods</source>
          <target state="translated">about_methods</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use methods to perform actions on objects in  Windows PowerShell�.</source>
          <target state="translated">Windows PowerShell でのオブジェクトに対する操作を行うメソッドを使用する方法について説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses objects to represent the items in data stores or the state of the computer.</source>
          <target state="translated">Windows PowerShell では、オブジェクトを使用して、データ ストアまたはコンピューターの状態のアイテムを表します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, FileInfo objects represent the files in file system drives and ProcessInfo objects represent the processes on the computer.</source>
          <target state="translated">たとえば、FileInfo オブジェクトはファイル システム ドライブでファイルを表し ProcessInfo のオブジェクトは、コンピューター上のプロセスを表します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Objects have properties, which store data about the object, and methods that let you change the object.</source>
          <target state="translated">オブジェクトは、プロパティで、オブジェクトのデータを格納、およびオブジェクトを変更するのに便利なメソッドがあります。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A "method" is a set of instructions that specify an action you can perform on the object.</source>
          <target state="translated">「メソッド」は、オブジェクトに対して実行できるアクションを指定する命令のセットです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, the FileInfo object includes the CopyTo method that copies the file that the FileInfo object represents.</source>
          <target state="translated">たとえば、FileInfo オブジェクトには、FileInfo オブジェクトによって表されるファイルをコピーする CopyTo メソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To get the methods of any object, use the Get-Member cmdlet.</source>
          <target state="translated">任意のオブジェクトのメソッドを取得するには、Get-member コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use its MemberType property with a value of "Method".</source>
          <target state="translated">「メソッド」の値を持つ、MemberType プロパティを使用します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following command gets the methods of process objects.</source>
          <target state="translated">次のコマンドは、プロセス オブジェクトのメソッドを取得します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To perform or "invoke" a method of an object, type a dot (.), the method name, and a set of parentheses "()".</source>
          <target state="translated">実行するか、「オブジェクトのメソッドの呼び出し」、ドット (.)、メソッド名、およびかっこ「()」のセットを入力します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the method has arguments, place the argument values inside the parentheses.</source>
          <target state="translated">メソッドに引数がある場合は、かっこで囲んで引数の値を配置します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The parentheses are required for every method call, even when there are no arguments.</source>
          <target state="translated">かっこは、引数がない場合でもすべてのメソッド呼び出しでは、必要です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the following command invokes the Kill method of processes to end the Notepad process on the computer.</source>
          <target state="translated">たとえば、次のコマンドは、コンピューターでメモ帳プロセスを終了するプロセスの強制終了メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a result, the instance of Notepad closes.</source>
          <target state="translated">その結果、メモ帳のインスタンスを閉じます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>(The Get-Process command is enclosed in parentheses to insure that it runs before the Kill method is invoked.</source>
          <target state="translated">(Get-process コマンドは、Kill メソッドが呼び出される前に実行されるようにかっこで囲まれます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another very useful process is the Split method of strings.</source>
          <target state="translated">別の非常に便利なプロセスは、文字列の分割方法です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The split method takes a delimiter character argument that tells the method where to split the string.</source>
          <target state="translated">Split メソッドは、メソッドに文字列を分割する場所を指示する区切り記号の文字引数を受け取りません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>As shown in the previous examples, you can invoke a method on an object that you get by using a command or an object in a variable.</source>
          <target state="translated">前の例に示すように、コマンドを使用して取得するオブジェクトまたは変数内のオブジェクトのメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Starting in  Windows PowerShell 4.0, method invocation by using dynamic method names is supported.</source>
          <target state="translated">Windows PowerShell 4.0 以降、動的なメソッド名を使用して、メソッド呼び出しがサポートされています。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>LEARNING ABOUT METHODS</source>
          <target state="translated">方法について学習してください。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To find definitions of the methods of an object, go to help topic for the object type in MSDN and look for its methods page.</source>
          <target state="translated">オブジェクトのメソッドの定義を確認するには、MSDN 内のオブジェクト型のオンライン ヘルプをその方法] ページを探します参照します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, the following page describes the methods of process objects (System.Diagnostics.Process).</source>
          <target state="translated">たとえば、次のページは、プロセス オブジェクト (System.Diagnostics.Process) の方法を説明します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To determine the arguments of a method, review the method definition, which is like the syntax diagram of a  Windows PowerShell cmdlet.</source>
          <target state="translated">メソッドの引数を確認するのには、Windows PowerShell コマンドレットの構文図のように、メソッドの定義を確認します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A method definition might have one or more method signatures, which are like the parameter sets of  Windows PowerShell cmdlets.</source>
          <target state="translated">メソッドの定義には、Windows PowerShell コマンドレットのパラメーター セットのように、1 つまたは複数のメソッド シグネチャがあります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The signatures show all of the valid formats of commands to invoke the method.</source>
          <target state="translated">署名は、メソッドを呼び出すためのコマンドの有効な形式のすべてを表示します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, the CopyTo method of the FileInfo class contains the following two method signatures:</source>
          <target state="translated">たとえば、FileInfo クラスの CopyTo メソッドには、次の 2 つのメソッド シグネチャが含まれています。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The first method signature takes the destination file name (and a path).</source>
          <target state="translated">最初のメソッド シグネチャでは、名前のファイル (およびパス) を取得します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example use The first CopyTo method to copy the Final.txt file to the C:\Bin directory.</source>
          <target state="translated">次の例では、最初の CopyTo メソッドを使用して、C:\Bin ディレクトリに Final.txt ファイルをコピーします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The second method signature take a destination file name and a Boolean value that determines whether the destination file should be overwritten, if it already exists.</source>
          <target state="translated">2 番目のメソッド シグネチャには、対象のファイル名が既に存在する場合、リンク先のファイルを上書きするかどうかを決定するブール値が実行されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example use The second CopyTo method to copy the Final.txt file to the C:\Bin directory, and to overwrite existing files.</source>
          <target state="translated">次の例は、Final.txt ファイルを C:\Bin ディレクトリにコピーし、既存のファイルを上書きする、2 つ目の CopyTo メソッドを使用します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>METHODS OF SCALAR OBJECTS AND COLLECTIONS</source>
          <target state="translated">スカラー オブジェクトとコレクションのメソッド</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The methods of one ("scalar") object of a particular type are often different from the methods of a collection of objects of the same type.</source>
          <target state="translated">特定の種類の 1 つ (「スカラー」) のオブジェクトの方法は、同じ型のオブジェクトのコレクションのメソッドと異なる多くの場合。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, every process has a Kill method, but a collection of processes does not have a Kill method.</source>
          <target state="translated">たとえば、すべてのプロセスに Kill メソッドが、プロセスのコレクションには、Kill メソッドはありません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Beginning in  Windows PowerShell 3.0,  Windows PowerShell tries to prevent scripting errors that result from the differing methods of scalar objects and collections.</source>
          <target state="translated">Windows PowerShell 3.0 以降では、Windows PowerShell は、スカラー オブジェクトとコレクションのさまざまな方法に起因するスクリプトのエラーを回避することを試みます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Beginning in  Windows PowerShell 4.0, collection filtering by using a method syntax is supported.</source>
          <target state="translated">Windows PowerShell 4.0 以降では、収集メソッド構文を使用してフィルター処理はサポートされています。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you submit a collection, but request a method that exists only on single ("scalar") objects, Windows invokes the method on every object in the collection.</source>
          <target state="translated">、コレクションを送信 (「スカラー」) の 1 つのオブジェクトにのみ存在するメソッドを要求する場合は、Windows は、コレクション内のすべてのオブジェクトに対してメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the method exists on the individual objects and on the collection,  Windows PowerShell does not alter the result.</source>
          <target state="translated">メソッドには、個々 のオブジェクトとコレクションが存在する場合、Windows PowerShell には、結果は変わりません。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This feature also works on properties of scalar objects and collections.</source>
          <target state="translated">この機能は、スカラー オブジェクトおよびコレクションのプロパティでも機能します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see about_Properties.</source>
          <target state="translated">詳細については、about_Properties を参照してください。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example runs the Kill method of individual process objects on a collection of process objects.</source>
          <target state="translated">次の例では、プロセス オブジェクトのコレクションの個々 のプロセス オブジェクトの強制終了メソッドを実行します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example works only on  Windows PowerShell 3.0 and later versions of  Windows PowerShell.</source>
          <target state="translated">この例では、Windows PowerShell 3.0 と以降のバージョンの Windows PowerShell でのみ動作します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The first command starts three instances of the Notepad process.</source>
          <target state="translated">最初のコマンドは、メモ帳のプロセスの 3 つのインスタンスを開始します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The second command uses the Get-Process command to get all three instance of the Notepad process and save them in the $p variable.</source>
          <target state="translated">2 番目のコマンドでは、Get-process コマンドを使用して Notepad プロセスの 3 つすべてのインスタンスを取得し、$p 変数に保存します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The third command uses the Count property of all collections to verify that there are three processes in the $p variable.</source>
          <target state="translated">3 番目のコマンドでは、すべてのコレクションの Count プロパティを使用して、$p 変数に 3 つのプロセスがあることを確認します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The fourth command runs the Kill method on all three processes in the $p variable.</source>
          <target state="translated">4 番目のコマンドは、$p 変数に 3 つすべてのプロセスの強制終了メソッドを実行します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This command works even though a collection of processes does not have a Kill method.</source>
          <target state="translated">このコマンドは、プロセスのコレクションが強制終了メソッドを持っていなくては機能します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The fifth command uses the Get-Process command to confirm that the Kill command worked.</source>
          <target state="translated">5 番目のコマンドでは、Get-process コマンドを使用して、Kill コマンドが成功したことを確認します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To perform the same task on  Windows PowerShell 2.0, use the Foreach-Object cmdlet to run the method on each object in the collection.</source>
          <target state="translated">Windows PowerShell 2.0 で同じタスクを実行するには、Foreach-object コマンドレットを使用して、コレクション内の各オブジェクトにメソッドが実行します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>about_Objects</source>
          <target state="translated">about_Objects</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>about_Properties</source>
          <target state="translated">about_Properties</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Get-Member</source>
          <target state="translated">Get-Member</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>