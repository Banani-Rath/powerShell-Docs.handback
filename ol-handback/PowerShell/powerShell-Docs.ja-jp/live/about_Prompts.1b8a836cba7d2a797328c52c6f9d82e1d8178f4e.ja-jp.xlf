<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdb1a39b4d63abc6657a1d3e1af299f30a1ef692</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Prompts.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a80ee9e15c09091e959629a6234f2ef08d7a1fe4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">274a8c66b2801bc0536b6ae166d4bc680a79492a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Prompts</source>
          <target state="translated">about_Prompts</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Prompts</source>
          <target state="translated">プロンプトについて</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Prompts</source>
          <target state="translated">about_Prompts</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Prompts</source>
          <target state="translated">about_Prompts</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the Prompt function and demonstrates how to create a custom Prompt function.</source>
          <target state="translated">プロンプトの関数をについて説明し、カスタムの Prompt 関数を作成する方法を示します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The  Windows PowerShell� command prompt indicates that  Windows PowerShell is ready to run a command:</source>
          <target state="translated">Windows PowerShell コマンド プロンプトは、Windows PowerShell がコマンドを実行できる状態であることを示します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The  Windows PowerShell prompt is determined by the built-in Prompt function.</source>
          <target state="translated">Windows PowerShell プロンプトは、組み込みのプロンプト関数によって決まります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can customize the prompt by creating your own Prompt function and saving it in your  Windows PowerShell profile.</source>
          <target state="translated">独自の Prompt 関数を作成して、Windows PowerShell プロファイルに保存することで、プロンプトをカスタマイズできます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>ABOUT THE PROMPT FUNCTION</source>
          <target state="translated">プロンプトの関数について</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Prompt function determines the appearance of the  Windows PowerShell prompt.</source>
          <target state="translated">プロンプトの関数では、Windows PowerShell プロンプトの外観を決定します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Windows PowerShell comes with a built-in Prompt function, but you can override it by defining your own Prompt function.</source>
          <target state="translated">Windows PowerShell には組み込みのプロンプト関数が、Prompt 関数を定義することでメソッドをオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Prompt function has the following syntax:</source>
          <target state="translated">プロンプト関数には、次の構文があります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Prompt function must return an object.</source>
          <target state="translated">プロンプトの関数は、オブジェクトを返す必要があります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As a best practice, return a string or an object that is formatted as a string.</source>
          <target state="translated">ベスト プラクティスとして、文字列型または文字列として書式設定されたオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The maximum recommended length is 80 characters.</source>
          <target state="translated">推奨される最大の長さは 80 文字です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, the following prompt function returns a "Hello, World" string followed by a caret (&gt;).</source>
          <target state="translated">たとえば、次のプロンプト関数は、caret (&gt;) の後に「こんにちは, World」文字列を返します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>GETTING THE PROMPT FUNCTION</source>
          <target state="translated">プロンプトの関数を取得します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To get the Prompt function, use the Get-Command cmdlet or use the Get-Item cmdlet in the Function drive.</source>
          <target state="translated">プロンプトの関数は、Get-command コマンドレットを使用してか関数ドライブで Get-item コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Functions are commands.</source>
          <target state="translated">関数は、コマンドです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>So, you can use the Get-Command cmdlet to get functions, including the Prompt function.</source>
          <target state="translated">そのため、Get-command コマンドレットを使用すると、Prompt 関数を含む関数を取得します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">たとえば、次のように入力します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To get the script that sets the value of the prompt, use the dot method to get the ScriptBlock property of the Prompt function.</source>
          <target state="translated">プロンプトの値を設定するスクリプトを取得するのにには、プロンプト関数の ScriptBlock プロパティを取得するのに、ドット メソッドを使用します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">たとえば、次のように入力します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Like all functions, the Prompt function is stored in the Function: drive.</source>
          <target state="translated">すべての関数のようにプロンプトの関数は、関数に格納します。 ドライブです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To display the script that creates the current Prompt function, type:</source>
          <target state="translated">現在の Prompt 関数を作成するスクリプトを表示するには、次のように入力します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>THE DEFAULT PROMPT</source>
          <target state="translated">既定のプロンプト</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The default prompt appears only when the Prompt function generates an error or does not return an object.</source>
          <target state="translated">既定のプロンプトは、プロンプト関数がエラーを発生またはオブジェクトを返さない場合にのみ表示されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default  Windows PowerShell prompt is:</source>
          <target state="translated">既定の Windows PowerShell プロンプトでは。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the following command sets the Prompt function to $null, which is invalid.</source>
          <target state="translated">たとえば、次のコマンドは、$null は無効に設定するプロンプト関数を設定します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As a result, the default prompt appears.</source>
          <target state="translated">その結果、既定のプロンプトが表示されます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Because  Windows PowerShell comes with a built-in prompt, you usually do not see the default prompt.</source>
          <target state="translated">Windows PowerShell には、組み込みのプロンプトで、通常表示されない既定のプロンプトです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>BUILT-IN PROMPT</source>
          <target state="translated">組み込みのプロンプト</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Windows PowerShell includes a built-in prompt function.</source>
          <target state="translated">Windows PowerShell には、組み込みのプロンプト関数が含まれています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In  Windows PowerShell 3.0, the built-in prompt function is:</source>
          <target state="translated">Windows PowerShell 3.0 では、組み込みのプロンプト関数。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This simplified prompt starts with "PS" followed by the current location, and one "&gt;" for each nested prompt level.</source>
          <target state="translated">この簡略化されたメッセージが"PS"の後に、現在の場所と 1 で始まる"&gt;"ごとにプロンプトのレベルをネストします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In  Windows PowerShell 2.0, the built-in prompt function is:</source>
          <target state="translated">Windows PowerShell 2.0 では、組み込みのプロンプト関数。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The function uses the Test-Path cmdlet to determine whether the $PSDebugContext automatic variable is populated.</source>
          <target state="translated">関数では、Test-path コマンドレットを使用して、$PSDebugContext 自動変数を作成するかどうかを決定します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If $PSDebugContext is populated, you are in debugging mode, and "[DBG]" is added to the prompt, as follows:</source>
          <target state="translated">$PSDebugContext が設定されている場合は、デバッグ モードであるし、"[DBG]"は、プロンプトに次のように追加。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If $PSDebugContext is not populated, the function adds "PS" to the prompt.</source>
          <target state="translated">$PSDebugContext が設定されていない場合、関数は、プロンプトに"PS"を追加します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>And, the function uses the Get-Location cmdlet to get the current file system directory location.</source>
          <target state="translated">関数では、Get-location コマンドレットを使用して、現在のファイル システム ディレクトリの場所を取得します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Then, it adds a right angle bracket (&gt;).</source>
          <target state="translated">次に、右の山かっこ (&gt;) を追加します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you are in a nested prompt, the function adds two angle brackets (&gt;&gt;) to the prompt.</source>
          <target state="translated">関数が 2 つの山かっこを追加するプロンプトを入れ子になった場合は、(&gt;&gt;) プロンプトにします。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>(You are in a nested prompt if the value of the $NestedPromptLevel automatic variable is greater than 1.)</source>
          <target state="translated">(プロンプトを入れ子になった場合は、$NestedPromptLevel 自動変数の値が 1 より大きい。)</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, when you are debugging in a nested prompt, the prompt resembles the following prompt:</source>
          <target state="translated">たとえば、入れ子になったプロンプトをデバッグするとき、プロンプトには次のようなダイアログようになります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CHANGES TO THE PROMPT</source>
          <target state="translated">プロンプトへの変更</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The Enter-PSSession cmdlet prepends the name of the remote computer to the current Prompt function.</source>
          <target state="translated">Enter-pssession コマンドレットは、現在の Prompt 関数をリモート コンピューターの名前の前に付加します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When you use the Enter-PSSession cmdlet to start a session with a remote computer, the command prompt changes to include the name of the remote computer.</source>
          <target state="translated">Enter-pssession コマンドレットを使用してリモート コンピューターでセッションを開始する場合は、リモート コンピューターの名前を含めますコマンド プロンプトが変更されます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">たとえば、次のように入力します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Other  Windows PowerShell host applications and alternate shells might have their own custom command prompts.</source>
          <target state="translated">その他のアプリケーションを Windows PowerShell ホストおよび代替シェルには、独自のカスタム コマンド プロンプトがある場合があります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about the $PSDebugContext and $NestedPromptLevel automatic variables, see about_Automatic_Variables.</source>
          <target state="translated">$PSDebugContext と $NestedPromptLevel 自動変数の詳細については、「about_automatic_variables」を参照してください。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>HOW TO CUSTOMIZE THE PROMPT</source>
          <target state="translated">プロンプトをカスタマイズするには、方法</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To customize the prompt, write a new Prompt function.</source>
          <target state="translated">プロンプトをカスタマイズするには、新しい Prompt 関数を記述します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The function is not protected, so you can overwrite it.</source>
          <target state="translated">関数は保護されないため、これを上書きすることができます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To write a prompt function, type the following:</source>
          <target state="translated">Prompt 関数を記述するには、次のように入力します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Then, between the braces, enter the commands or the string that creates your prompt.</source>
          <target state="translated">次に、中かっこ、コマンドまたはプロンプトを作成する文字列を入力します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following prompt includes your computer name:</source>
          <target state="translated">たとえば、次のようなダイアログには、コンピューター名が含まれています。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>On the Server01 computer, the prompt resembles the following prompt:</source>
          <target state="translated">Server01 コンピューターでは、プロンプトには、次のようなダイアログがようになります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following prompt function includes the current date and time:</source>
          <target state="translated">次のプロンプト関数には、現在の日付と時刻が含まれています。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The prompt resembles the following prompt:</source>
          <target state="translated">プロンプトには、次のようなダイアログがようになります。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can also change the default Prompt function:</source>
          <target state="translated">既定のプロンプト関数を変更することもできます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, the following modified Prompt function adds "[ADMIN]:" to the built-in  Windows PowerShell prompt when  Windows PowerShell is opened by using the "Run as administrator" option:</source>
          <target state="translated">たとえば、次変更関数は、追加プロンプト"[管理者]:""管理者として実行] オプションを使用して Windows PowerShell が開かれたときに、組み込みの Windows PowerShell プロンプトに。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When you start  Windows PowerShell by using the "Run as administrator" option, a prompt that resembles the following prompt appears:</source>
          <target state="translated">[管理者として実行] オプションを使用して Windows PowerShell を起動すると、次のプロンプトのようなプロンプトが表示されます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following Prompt function displays the history ID of the next command.</source>
          <target state="translated">次のプロンプト関数には、次のコマンドの履歴 ID が表示されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To view the command history, use the Get-History cmdlet.</source>
          <target state="translated">コマンド履歴を表示するには、Get-history コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following prompt uses the Write-Host and Get-Random cmdlets to create a prompt that changes color randomly.</source>
          <target state="translated">次のようなダイアログでは、Write-host、Get-random コマンドレットを使用して、色をランダムに変更するプロンプトを作成します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Because Write-Host writes to the current host application but does not return an object, this function includes a Return statement.</source>
          <target state="translated">Write-host が現在のホスト アプリケーションに書き込みますが、オブジェクトを返さないことであるために、この関数には、Return ステートメントが含まれます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Without it,  Windows PowerShell uses the default prompt, "PS&gt;".</source>
          <target state="translated">これがないと、Windows PowerShell は、既定のプロンプトを使用して"PS &gt;"です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>SAVING THE PROMPT FUNCTION</source>
          <target state="translated">プロンプトの関数の保存</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Like any function, the Prompt function exists only in the current session.</source>
          <target state="translated">任意の関数のようにプロンプトの関数は、現在のセッションでのみ存在します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To save the Prompt function for future sessions, add it to your  Windows PowerShell profiles.</source>
          <target state="translated">今後のセッションのプロンプト関数を保存するには、Windows PowerShell プロファイルに追加します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information about profiles, see about_Profiles.</source>
          <target state="translated">プロファイルに関する詳細については、「about_Profiles」を参照してください。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Get-Location</source>
          <target state="translated">Get-location</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Enter-PSSession</source>
          <target state="translated">Enter-PSSession</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Get-History</source>
          <target state="translated">Get-History</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Get-Random</source>
          <target state="translated">Get-Random</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Write-Host</source>
          <target state="translated">Write-Host</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Profiles</source>
          <target state="translated">about_Profiles</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>about_Debuggers</source>
          <target state="translated">about_Debuggers</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>about_Automatic_Variables</source>
          <target state="translated">about_Automatic_Variables</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>