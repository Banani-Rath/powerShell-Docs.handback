<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65d5bd701009b432d662103368f387402ae06f59</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Assignment_Operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f126ff1ffad139b08ffaa77b15f76d1d7c7aabec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c403214c5d4507878e0a7e6bf398e5fc7b9e4c11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Assignment Operators</source>
          <target state="translated">代入演算子の概要</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_assignment_operators</source>
          <target state="translated">about_assignment_operators</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use operators to assign values to variables.</source>
          <target state="translated">演算子を使用して変数に値を代入する方法について説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Assignment operators assign one or more values to a variable.</source>
          <target state="translated">代入演算子は、1 つまたは複数の値を変数に代入します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They can perform numeric operations on the values before the assignment.</source>
          <target state="translated">割り当て前に、の値に数値の操作を実行できます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the following assignment operators.</source>
          <target state="translated">Windows PowerShell には、次の代入演算子がサポートしています。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Operator  Description</source>
          <target state="translated">演算子の説明</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>=         Sets the value of a variable to the specified value.</source>
          <target state="translated">= 変数の値を指定した値に設定します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>+=        Increases the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">+ = 指定した値によって、変数の値が増加または既存の値に指定された値を追加します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-=        Decreases the value of a variable by the specified value.</source>
          <target state="translated">-= 指定した値によって、変数の値が減少します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>*=        Multiplies the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">* = 指定した値によって、変数の値を乗算または既存の値に指定された値を追加します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>/=        Divides the value of a variable by the specified value.</source>
          <target state="translated">/=、変数の値を指定した値で除算します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>%=        Divides the value of a variable by the specified value and then assigns the remainder (modulus) to the variable.</source>
          <target state="translated">% = 指定した値によって、変数の値を除算し、余り (剰余) を変数に代入します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>++        Increases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">は、変数、割り当て可能なプロパティは、配列要素の値を 1 つずつ増加します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>--        Decreases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">-変数、割り当て可能なプロパティ、または配列要素の値を 1 つずつ減少します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The syntax of the assignment operators is as follows:</source>
          <target state="translated">代入演算子の構文は次のとおりです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt; &lt;assignment-operator&gt;</source>
          <target state="translated">&lt; 割り当て可能な式 &gt;&lt; 代入演算子 &gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Assignable expressions include variables and properties.</source>
          <target state="translated">割り当て可能な式には、変数とプロパティが含まれます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The value can be a single value, an array of values, or a command, expression, or statement.</source>
          <target state="translated">値には、1 つの値、値の配列、または、コマンド、式、またはステートメントを指定できます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The increment and decrement operators are unary operators.</source>
          <target state="translated">インクリメントおよびデクリメント演算子は、単項演算子です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each has prefix and postfix versions.</source>
          <target state="translated">前置と後置のバージョンがあります。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt;assignable-expression&gt;</source>
          <target state="translated">&lt; 割り当て可能な式 &gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt; 割り当て可能な式 &gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The assignable expression must a number or it must be convertible to a number.</source>
          <target state="translated">数値に変換できる場合がありますか割り当て可能な式には、数値が必要があります。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ASSIGNING VALUES</source>
          <target state="translated">値の割り当てください。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Variables are named memory spaces that store values.</source>
          <target state="translated">変数に値を格納するメモリ領域は、. します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You store the values in variables by using the assignment operator (=).</source>
          <target state="translated">代入演算子 (=) を使用してには、変数の値を格納します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The new value can replace the existing value of the variable, or you can append a new value to the existing value.</source>
          <target state="translated">新しい値は、変数の既存の値を置き換えることができますか、既存の値に新しい値を追加することができます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The basic assignment operator is the equal sign (=)(ASCII 61).</source>
          <target state="translated">基本的な代入演算子は、等号 (=) (ASCII 61) です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following statement assigns the value Windows PowerShell to the $MyShell variable:</source>
          <target state="translated">たとえば、次のステートメントは、$MyShell 変数に Windows PowerShell の値を代入します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>$MyShell = "Windows PowerShell"</source>
          <target state="translated">$MyShell ="Windows PowerShell"</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you assign a value to a variable in Windows PowerShell, the variable is created if it did not already exist.</source>
          <target state="translated">Windows PowerShell 内の変数に値を割り当てると、まだ存在しなかった場合、変数が作成されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the first of the following two assignement statements creates the $a variable and assigns a value of 6 to $a.</source>
          <target state="translated">たとえば、次の 2 つの assignement ステートメントの最初は、$a 変数を作成し、$ に 6 の値を割り当てます、します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The second assignment statement assigns a value of 12 to $a.</source>
          <target state="translated">2 番目の代入ステートメントは、$ に 12 の値を代入します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The first statement creates a new variable.</source>
          <target state="translated">最初のステートメントでは、新しい変数を作成します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The second statement changes only its value:</source>
          <target state="translated">2 番目のステートメントでは、その値のみを変更します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>$a = 6 $a = 12</source>
          <target state="translated">$、6 = $、= 12</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Variables in Windows PowerShell do not have a specific data type unless you cast them.</source>
          <target state="translated">Windows PowerShell の変数にキャストする場合を除き、特定のデータ型の必要はありません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When a variable contains only one object, the variable takes the data type of that object.</source>
          <target state="translated">変数には、1 つのオブジェクトが含まれている、変数は、そのオブジェクトのデータ型をとります。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When a variable contains a collection of objects, the variable has the System.Object data type.</source>
          <target state="translated">変数にオブジェクトのコレクションが含まれている場合、変数は、System.Object のデータ型を持っています。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, you can assign any type of object to the collection.</source>
          <target state="translated">そのため、コレクションにどの型のオブジェクトを割り当てることができます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example shows that you can add process objects, service objects, strings, and integers to a variable without generating an error:</source>
          <target state="translated">次の例では、するを追加することオブジェクトの処理、サービス オブジェクト、文字列、および整数変数しなくてもエラーを示しています。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>$a = get-process $a += get-service $a += "string" $a += 12</source>
          <target state="translated">$を get-process $ + = get-service が $ を =、+ =「文字列」12 + = $</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because the assignment operator (=) has a lower precedence than the pipeline operator (|), parentheses are not required to assign the result of a command pipeline to a variable.</source>
          <target state="translated">代入演算子 (=) は、パイプライン演算子 (|) よりも優先順位の低いがあるために、かっこでは、コマンド パイプラインの結果を変数に代入する必要はありません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, the following command sorts the services on the computer and then assigns the sorted services to the $a variable:</source>
          <target state="translated">たとえば、次のコマンドは、コンピューター上のサービスを並べ替え、次に、並べ替えられたサービスを $a 変数に割り当てます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$a = get-service | sort name</source>
          <target state="translated">$、get サービスを = |並べ替えの名前</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also assign the value created by a statement to a variable, as in the following example:</source>
          <target state="translated">次の例のように、変数にステートメントによって作成された値を代入することもできます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>$a = if ($b -lt 0) { 0 } else { $b }</source>
          <target state="translated">$、= ($b lt 0) {0} else {$b}</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example assigns 0 to the $a variable if the value of $b is less than 0.</source>
          <target state="translated">この例では、$b の値が 0 より小さい場合に、$a 変数に 0 を割り当てます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It assigns the value of $b to $a if the value of $b is not less than zero.</source>
          <target state="translated">これは、場合は、$b に $a の値の値を割り当てます $b が小さくない以上。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT OPERATOR (=)</source>
          <target state="translated">代入演算子 (=)</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The assignment operator (=) assigns values to variables.</source>
          <target state="translated">代入演算子 (=) は、値を変数に代入します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the variable already has a value, the assignment operator (=) replaces the value without warning.</source>
          <target state="translated">変数には、値が割り当てられている場合、代入演算子 (=) は警告なしの値を置き換えます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following statement assigns the integer value 6 to the $a variable:</source>
          <target state="translated">次のステートメントは、$a 変数に 6 の整数値を代入します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$、6 =</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To assign a string value to a variable, enclose the string value in quotation marks, as follows:</source>
          <target state="translated">変数に割り当てる文字列値には、次のように引用符で囲まれた、文字列値を囲みます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>$a = "baseball"</source>
          <target state="translated">a =「野球」$</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To assign an array (multiple values) to a variable, separate the values with commas, as follows:</source>
          <target state="translated">変数に割り当てる配列 (複数の値) には、次のようにコンマで区切りの値を区切ってください。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>$a = "apple", "orange", "lemon", "grape"</source>
          <target state="translated">$a ="apple"、「オレンジ」、「レモン」、「ぶどう」</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To assign a hash table to a variable, use the standard hash table notation in Windows PowerShell.</source>
          <target state="translated">ハッシュ テーブルを変数に割り当てるには、Windows PowerShell で標準的なハッシュ テーブルの表記を使用します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Type an at sign (@) followed by key/value pairs that are separated by semicolons (;) and enclosed in braces ({ }).</source>
          <target state="translated">型、アット マーク (@) 後にセミコロン (;) で区切られたキーと値のペアと、中かっこ ({}) で囲まれています。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to assign a hash table to the $a variable, type:</source>
          <target state="translated">たとえば、ハッシュ テーブルを $a 変数に割り当てるに次のように入力します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>$a = @{one=1; two=2; three=3}</source>
          <target state="translated">$、= @{1 つ = 1; 2 = 2; 3 = 3}</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To assign hexadecimal values to a variable, precede the value with "0x".</source>
          <target state="translated">16 進値を変数に割り当てるには、"0 x"値を付けます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Windows PowerShell converts the hexadecimal value (0x10) to a decimal value (in this case, 16) and assigns that value to the $a variable.</source>
          <target state="translated">Windows PowerShell では、16 進数値 (0x10) を 10 進数値 (この場合は 16) に変換し、$a 変数にその値を代入します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 0x10 to the $a variable, type:</source>
          <target state="translated">たとえば、0x10 の値を $a 変数に割り当てる、次のように入力します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>$a = 0x10</source>
          <target state="translated">$、0x10 =</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To assign an exponential value to a variable, type the root number, the letter "e", and a number that represents a multiple of 10.</source>
          <target state="translated">指数値を変数に割り当てるには、ルートの数、文字"e"、および 10 の倍数を表す数値を入力します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 3.1415 to the power of 1,000 to the $a variable, type:</source>
          <target state="translated">たとえば、3.1415 は入力の値を変数 $a に 1,000 の機能に割り当てるに次のように入力します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>$a = 3.1415e3</source>
          <target state="translated">$、3.1415e3 =</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Windows PowerShell can also convert kilobytes (KB), megabytes (MB), and gigabytes (GB) into bytes.</source>
          <target state="translated">Windows PowerShell は、バイト、キロバイト (KB)、メガバイト (MB) とギガバイト (GB) を変換できるもします。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 10 kilobytes to the $a variable, type:</source>
          <target state="translated">たとえば、10 キロバイト単位の値を $a 変数に割り当てる、次のように入力します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>$a = 10kb</source>
          <target state="translated">$、10 kb 以下</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY ADDITION OPERATOR (+=)</source>
          <target state="translated">加算演算子 (+ =) による割り当て</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The assignment by addition operator (+=) either increments the value of a variable or appends the specified value to the existing value.</source>
          <target state="translated">加算演算子 (+ =) によって割り当ては、変数の値が増加するか、既存の値に指定された値を追加します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The action depends on whether the variable has a numeric or string type and whether the variable contains a single value (a scalar) or multiple values (a collection).</source>
          <target state="translated">アクションは、変数が数値または文字列型を持つかどうかと、変数が 1 つの値 (スカラー) を含むかどうかによって異なります。 または、複数の値 (コレクション)。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The += operator combines two operations.</source>
          <target state="translated">+ = 演算子は、2 つの操作を結合します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>First, it adds, and then it assigns.</source>
          <target state="translated">最初に、それを追加して、それを割り当てます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">そのため、次のステートメントは同等です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>$a += 2 $a = ($a + 2)</source>
          <target state="translated">$a = 2 + = $ ($、+ 2)</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When the variable contains a single numeric value, the += operator increments the existing value by the amount on the right side of the operator.</source>
          <target state="translated">変数には、1 つの数値が含まれている、+ = 演算子は、演算子の右側にある量によって、既存の値をインクリメントします。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Then, the operator assigns the resulting value to the variable.</source>
          <target state="translated">次に、オペレーターは、結果の値を変数に代入します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the += operator to increase the value of a variable:</source>
          <target state="translated">次の例では、+ = 演算子を使用して、変数の値を大きく方法を示します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 4 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 4 C:\PS &gt; $ + = 2 C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When the value of the variable is a string, the value on the right side of the operator is appended to the string, as follows:</source>
          <target state="translated">変数の値が文字列の場合は、次のとおりに演算子の右側にある値を文字列に追加します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "Windows" C:\PS&gt; $a += " PowerShell" C:\PS&gt; $a Windows PowerShell</source>
          <target state="translated">C:\PS &gt; $a ="Windows"C:\PS &gt; + ="PowerShell"C:\PS $&gt; $ Windows PowerShell</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When the value of the variable is an array, the += operator appends the values on the right side of the operator to the array.</source>
          <target state="translated">変数の値が配列の場合は、+ = 演算子は、配列に、演算子の右側にある値を追加します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Unless the array is explicitly typed by casting, you can append any type of value to the array, as follows:</source>
          <target state="translated">配列は明示的にキャストすることで入力されている場合を除き、次のように、配列にあらゆるタイプの値に追加できます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 1,2,3 C:\PS &gt; $ + = 2 C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a += "String" C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; + ="String"C:\PS $&gt; $、</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When the value of a variable is a hash table, the += operator appends the value on the right side of the operator to the hash table.</source>
          <target state="translated">変数の値がハッシュ テーブルの場合は、+ = 演算子は、演算子の右側にある値をハッシュ テーブルに追加します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, because the only type that you can add to a hash table is another hash table, all other assignments fail.</source>
          <target state="translated">ただし、ハッシュ テーブルに追加できる唯一の種類は別のハッシュ テーブルでは、その他のすべての割り当てが失敗します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a hash table to the $a variable.</source>
          <target state="translated">たとえば、次のコマンドは、$a 変数にハッシュ テーブルを割り当てます。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Then, it uses the += operator to append another hash table to the existing hash table, effectively adding a new key/value pair to the existing hash table.</source>
          <target state="translated">次に、+ = 演算子を使用して別のハッシュ テーブルを効率的に既存のハッシュ テーブルに新しいキー/値ペアを追加、既存のハッシュ テーブルに追加します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This command succeeds, as shown in the output:</source>
          <target state="translated">出力に示すように、このコマンドは成功します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += @{mode = "write"} C:\PS&gt; $a Name                           Value</source>
          <target state="translated">C:\PS &gt; $、= @{、= 1; b = 2; c = 3} C:\PS &gt; + = $ @{モード ="write"} C:\PS &gt; $a 名前値</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 mode                           write c                              3</source>
          <target state="translated">a                              1 b                              2 mode                           write c                              3</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following command attempts to append an integer (1) to the hash table in the $a variable.</source>
          <target state="translated">次のコマンドは、整数 (1) を追加する、$a 変数にハッシュ テーブルを試みます。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This command fails:</source>
          <target state="translated">このコマンドは失敗します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += 1 You can add another hash table only to a hash table.</source>
          <target state="translated">C:\PS &gt; $、= @{、= 1; b = 2; c = 3} C:\PS &gt; $a + = 1 はハッシュ テーブルのみに別のハッシュ テーブルを追加することができます。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>At line:1 char:6</source>
          <target state="translated">6: 行: 1 文字の位置</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>$a += &lt;&lt;&lt;&lt;  1</source>
          <target state="translated">+ = $ &lt;&lt;&lt;&lt; 1</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY SUBTRACTION OPERATOR (-=)</source>
          <target state="translated">減算演算子 (-) による割り当て</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The assignment by subtraction operator (-=) decrements the value of a variable by the value that is specified on the right side of the operator.</source>
          <target state="translated">減算演算子 (-) デクリメント代入演算子の右側にある指定された値により、変数の値。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This operator cannot be used with string variables, and it cannot be used to remove an element from a collection.</source>
          <target state="translated">この演算子は、文字列変数では使用できませんし、コレクションから要素を削除するために使用できません。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The -= operator combines two operations.</source>
          <target state="translated">-= 演算子は、2 つの操作を結合します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>First, it subtracts, and then it assigns.</source>
          <target state="translated">最初に、それを減算してそれを割り当てます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">そのため、次のステートメントは同等です。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>$a -= 2 $a = ($a - 2)</source>
          <target state="translated">-= 2、$ $a = (a - 2$)</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following example shows how to use of the -= operator to decrease the value of a variable:</source>
          <target state="translated">次の例では、-= 演算子の使用して、変数の値を小さく方法を示します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a -= 2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 8 C:\PS &gt; $a-= 2 C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You can also use the -= assignment operator to decrease the value of a member of a numeric array.</source>
          <target state="translated">-= 代入演算子は、数値の配列のメンバーの値を減らすも行えます。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To do this, specify the index of the array element that you want to change.</source>
          <target state="translated">これを行うには、変更する配列要素のインデックスを指定します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the third element of an array (element 2) is decreased by 1:</source>
          <target state="translated">次の例では、配列 (要素 2) の 3 番目の要素の値は 1 ずつ減少します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a[2] -= 1.</source>
          <target state="translated">C:\PS &gt; $、= 1,2,3 C:\PS &gt; $[2] = 1 です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You cannot use the -= operator to delete the values of a variable.</source>
          <target state="translated">-= 演算子を使用して、変数の値を削除することはできません。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To delete all the values that are assigned to a variable, use the Clear-Item or Clear-Variable cmdlets to assign a value of $null or "" to the variable.</source>
          <target state="translated">変数に割り当てられているすべての値を削除するには、$null の値を代入する Clear-item または Clear-variable コマンドレットを使用または""変数にします。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>$a = $null</source>
          <target state="translated">$、$null を =</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To delete a particular value from an array, use array notation to assign a value of $null to the particular item.</source>
          <target state="translated">特定の値を配列から削除するには、配列表記を使用して、特定の項目に $null の値を割り当てます。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For example, the following statement deletes the second value (index position 1) from an array:</source>
          <target state="translated">たとえば、次のステートメントが 2 番目の値を削除 (インデックス位置 1)、配列から。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 1,2,3 C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a[1] = $null C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $[1] = $null C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1 で保護されたプロセスとして起動されました</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To delete a variable, use the Remove-Variable cmdlet.</source>
          <target state="translated">変数を削除するには、Remove-variable コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This method is useful when the variable is explicitly cast to a particular data type, and you want an untyped variable.</source>
          <target state="translated">このメソッドは、変数が特定のデータ型に明示的にキャストし、型指定されていない変数が必要な場合に便利です。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following command deletes the $a variable:</source>
          <target state="translated">次のコマンドでは、$a 変数を削除します。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>remove-variable a</source>
          <target state="translated">削除する変数の値が、</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY MULTIPLICATION OPERATOR (*=)</source>
          <target state="translated">乗算演算子による代入 (* =)</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The assignment by multiplication operator (*=) multiplies a numeric value or appends the specified number of copies of the string value of a variable.</source>
          <target state="translated">乗算演算子による代入 (* =) の数値を乗算または指定した変数の文字列値のコピー数を追加します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When a variable contains a single numeric value, that value is multiplied by the value on the right side of the operator.</source>
          <target state="translated">変数に 1 つの数値が含まれている場合、その値は、演算子の右側にある値で乗算されます。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For example, the following example shows how to use the *= operator to multiply the value of a variable:</source>
          <target state="translated">たとえば、次の例を使用する方法を示しています。、* = 演算子を変数の値を乗算します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a *= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 3 C:\PS &gt; $、* = 4 C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In this case, the *= operator combines two operations.</source>
          <target state="translated">ここで、* = 演算子を組み合わせたものの 2 つの操作です。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>First, it multiplies, and then it assigns.</source>
          <target state="translated">最初に、それを乗算して、それを割り当てます。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">そのため、次のステートメントは同等です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</source>
          <target state="translated">$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When a variable contains a string value, Windows PowerShell appends the specified number of strings to the value, as follows:</source>
          <target state="translated">変数には、文字列値が含まれている、Windows PowerShell 文字列の指定した数に追加、値には、次のようにします。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a *= 4 C:\PS&gt; $a filefilefilefile</source>
          <target state="translated">C:\PS &gt; $a ="file"C:\PS &gt; $、* = 4 C:\PS &gt; filefilefilefile $a</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>To multiply an element of an array, use an index to identify the element that you want to multiply.</source>
          <target state="translated">配列の要素を乗算するには、インデックスを使用して、乗算する要素を識別します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For example, the following command multiplies the first element in the array (index position 0) by 2:</source>
          <target state="translated">次のコマンドが、配列の最初の要素を乗算するたとえば、(インデックス位置 0) を 2。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>$a[0] *= 2</source>
          <target state="translated">$[0] * = 2</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY DIVISION OPERATOR (/=)</source>
          <target state="translated">除算演算子による代入 (/=)</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The assignment by division operator (/=) divides a numeric value by the value that is specified on the right side of the operator.</source>
          <target state="translated">除算演算子による代入 (/=) 演算子の右側に指定されている値が数値で除算します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The operator cannot be used with string variables.</source>
          <target state="translated">演算子は、文字列変数では使用できません。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The /= operator combines two operations.</source>
          <target state="translated">/= 演算子を組み合わせたものの 2 つの操作です。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>First, it divides, and then it assigns.</source>
          <target state="translated">最初を分割して、それを割り当てます。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Therefore, the following two statements are equivalent:</source>
          <target state="translated">そのため、次の 2 つのステートメントは同等です。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>$a /= 2 $a = ($a / 2)</source>
          <target state="translated">$、/= 2 =、$ ($、/2)</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For example, the following command uses the /= operator to divide the value of a variable:</source>
          <target state="translated">たとえば、次のコマンドを使用して、/= 演算子、変数の値の除算をします。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a /=2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 8 C:\PS &gt; $、/= 2 C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To divide an element of an array, use an index to identify the element that you want to change.</source>
          <target state="translated">配列の要素を分割するのにには、変更する要素を識別するために、インデックスを使用します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, the following command divides the second element in the array (index position 1) by 2:</source>
          <target state="translated">次のコマンドが、配列の 2 番目の要素を分割するなど、(1) 2 での位置のインデックスを作成します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>$a[1] /= 2</source>
          <target state="translated">$[1]/2 =</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>THE  ASSIGNMENT BY MODULUS OPERATOR (%=)</source>
          <target state="translated">剰余演算子による代入 (% =)</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The assignment by modulus operator (%=) divides the value of a variable by the value on the right side of the operator.</source>
          <target state="translated">剰余演算子による代入 (% =) 演算子の右側にある値で変数の値を除算します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Then, the %= operator assigns the remainder (known as the modulus) to the variable.</source>
          <target state="translated">%、演算子の割り当てを変数に余り (剰余と呼ばれます) = です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You can use this operator only when a variable contains a single numeric value.</source>
          <target state="translated">変数には、1 つの数値が含まれている場合にのみ、この演算子を使用することができます。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You cannot use this operator when a variable contains a string variable or an array.</source>
          <target state="translated">文字列変数または配列変数が含まれている場合は、この演算子を使用することはできません。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The %= operator combines two operations.</source>
          <target state="translated">% = 演算子を組み合わせたものの 2 つの操作です。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>First, it divides and determines the remainder, and then it assigns the remainder to the variable.</source>
          <target state="translated">まずに分割し、残りの部分を決定し、残りの部分を変数に割り当てられます。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">そのため、次のステートメントは同等です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>$a %= 2 $a = ($a % 2)</source>
          <target state="translated">%、$ 2 = a = (%2 $a) $</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the %= operator to save the modulus of a quotient:</source>
          <target state="translated">次の例では、% を使用する方法を保存し、商の剰余演算子を =。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $a %= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 7 C:\PS &gt; %、$= 4 C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>THE INCREMENT AND DECREMENT OPERATORS</source>
          <target state="translated">インクリメントおよびデクリメント演算子</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The increment operator (++) increases the value of a variable by 1.</source>
          <target state="translated">インクリメント演算子 (+ +) は、変数の値を 1 つずつ増加します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When you use the increment operator in a simple statement, no value is returned.</source>
          <target state="translated">単純なステートメントで、インクリメント演算子を使用する場合、値は返されません。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To view the result, display the value of the variable, as follows:</source>
          <target state="translated">結果を表示するには、よう、変数の値を表示します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 7 C:\PS &gt; では $a C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To force a value to be returned, enclose the variable and the operator in parentheses, as follows:</source>
          <target state="translated">返される値には、変数および演算子をかっこで囲みます、次のようになります。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; (++$a)</source>
          <target state="translated">C:\PS &gt; $、= 7 C:\PS &gt; (+ + $を)</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The increment operator can be placed before (prefix) or after (postfix) a variable.</source>
          <target state="translated">インクリメント演算子 (プレフィックス) する前に配置できる以降 (後置) 変数です。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator increments a variable before its value is used in the statement, as follows:</source>
          <target state="translated">演算子の前置バージョンは、その値がステートメントでは、次のように使用する前に、変数をインクリメントします。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、7 C:\PS &gt; $c = = では $a C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\PS &gt; $c</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator increments a variable after its value is used in the statement.</source>
          <target state="translated">後置形式の演算子は、ステートメントでその値を使用した後、変数をインクリメントします。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In the following example, the $c and $a variables have different values because the value is assigned to $c before $a changes:</source>
          <target state="translated">次の例では、$c および $ では、変数は、値が変更された $c $ 前に割り当てられるために異なる値を持ちます。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = $a++ C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、7 C:\PS &gt; $c = $a++ C:\PS を = &gt; $、</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\PS &gt; $c</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The decrement operator (--) decreases the value of a variable by 1.</source>
          <target state="translated">デクリメント演算子 (-) は、変数の値を 1 つずつ減少します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>As with the increment operator, no value is returned when you use the operator in a simple statement.</source>
          <target state="translated">としてインクリメント演算子と値は返されません単純なステートメントで、演算子を使用する場合。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Use parentheses to return a value, as follows:</source>
          <target state="translated">かっこを使用すると、次のように、値を返します。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; --$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 7 C:\PS &gt;--$a C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (--$a)</source>
          <target state="translated">C:\PS &gt; (--$を)</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator decrements a variable before its value is used in the statement, as follows:</source>
          <target state="translated">変数の値は次のように、ステートメントで使用する前に、演算子減分の前置バージョン:</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = --$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、7 C:\PS &gt; $c = =--$a C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\PS &gt; $c</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator decrements a variable after its value is used in the statement.</source>
          <target state="translated">変数の値の後に、演算子減分の後置バージョンは、ステートメントで使用されます。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>In the following example, the $d and $a variables have different values because the value is assigned to $d before $a changes:</source>
          <target state="translated">次の例では、$d および $ では、変数は、値が変更された $ する前に $d に割り当てられるために異なる値を持ちます。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $d = $a-- C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、7 C:\PS &gt; $d = $ を--C:\PS = &gt; $、</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $d</source>
          <target state="translated">C:\PS &gt; $d</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>MICROSOFT .NET FRAMEWORK TYPES</source>
          <target state="translated">MICROSOFT .NET FRAMEWORK 型</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>By default, when a variable has only one value, the value that is assigned to the variable determines the data type of the variable.</source>
          <target state="translated">既定では、変数の値の 1 つだけの場合、変数に割り当てられている値は、変数のデータ型を決定します。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For example, the following command creates a variable that has the Integer (System.Int32) type:</source>
          <target state="translated">たとえば、次のコマンドは、整数 (System.Int32) 型を持つ変数を作成します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$、6 =</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>To find the .NET Framework type of a variable, use the GetType method and its FullName property, as follows.</source>
          <target state="translated">変数の .NET Framework 型を検索するには、とおり、GetType メソッドと、FullName プロパティを使用します。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Be sure to include the parentheses after the GetType method name, even though the method call has no arguments:</source>
          <target state="translated">メソッドの呼び出しに引数があるない場合でも、GetType メソッド名の後にかっこを含めることを確認します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a.gettype().fullname System.Int32</source>
          <target state="translated">C:\PS &gt; $、= 6 C:\PS &gt; $a.gettype () の System.Int32</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>To create a variable that contains a string, assign a string value to the variable.</source>
          <target state="translated">文字列を含む変数を作成するには、変数に文字列値を割り当てます。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>To indicate that the value is a string, enclose it in quotation marks, as follows:</source>
          <target state="translated">値が文字列であることを示す、引用符で囲みます、次のようになります。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "6" C:\PS&gt; $a.gettype().fullname System.String</source>
          <target state="translated">C:\PS &gt; $ =「6」C:\PS &gt; $a.gettype () の System.String</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If the first value that is assigned to the variable is a string, Windows PowerShell treats all operations as string operations and casts new values to strings.</source>
          <target state="translated">変数に割り当てられている最初の値が文字列の場合は、Windows PowerShell は文字列操作としてすべての操作を処理して、文字列に新しい値をキャストできます。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">これは、次の例で発生します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a += 3 C:\PS&gt; $a file3</source>
          <target state="translated">C:\PS &gt; $a ="file"C:\PS &gt; + = 3 $ C:\PS &gt; $a ファイル 3 と指定</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If the first value is an integer, Windows PowerShell treats all operations as integer operations and casts new values to integers.</source>
          <target state="translated">最初の値が整数である場合は、Windows PowerShell は整数演算としてすべての操作を処理して、整数への新しい値をキャストできます。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">これは、次の例で発生します。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a += "3" C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $、= 6 C:\PS &gt; $ + =「3」C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>You can cast a new scalar variable as any .NET Framework type by placing the type name in brackets that precede either the variable name or the first assignment value.</source>
          <target state="translated">変数名または最初の代入値のいずれかの前に角かっこで型名を配置することで、任意の .NET Framework 型として新しいスカラー変数をキャストできます。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>When you cast a variable, you can determine the types of data that can be stored in the variable.</source>
          <target state="translated">変数をキャストするときに、変数に格納できるデータの種類を指定できます。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>And, you can determine how the variable behaves when you manipulate it.</source>
          <target state="translated">また、操作するときに、変数の動作を指定できます。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string type:</source>
          <target state="translated">たとえば、次のコマンドは、文字列型として変数をキャストします。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = 27 C:\PS&gt; $a += 3 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; [string] $、= 27 C:\PS &gt; + = 3 $ C:\PS &gt; $、</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>273</source>
          <target state="translated">273</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The following example casts the first value, instead of casting the variable:</source>
          <target state="translated">次の例では、変数をキャストではなく、最初の値をキャストします。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>$a = [string]27</source>
          <target state="translated">a = [string] 27 $</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>When you cast a variable to a specific type, the common convention is to cast the variable, not the value.</source>
          <target state="translated">特定の型に変数をキャストするときに共通の命名規則では、値ではなく、変数をキャストします。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>However, you cannot recast the data type of an existing variable if its value cannot be converted to the new data type.</source>
          <target state="translated">ただし、その値は、新しいデータ型に変換できない場合は、既存の変数のデータ型を見直すことはできません。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>To change the data type, you must replace its value, as follows:</source>
          <target state="translated">データ型を変更するには次のように、その値を置き換える必要があります。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "string" C:\PS&gt; [int]$a Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\PS &gt; $a ="string"C:\PS &gt; [int] $、"System.Int32"を入力するには、"string"の値に変換できません。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">エラー:「入力文字列が正しい形式にします。」</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>At line:1 char:8</source>
          <target state="translated">行: 1 文字: 8</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>[int]$a &lt;&lt;&lt;&lt;</source>
          <target state="translated">[int] $、&lt;&lt;&lt;&lt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a =3</source>
          <target state="translated">C:\PS &gt; [int] $、3 =</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In addition, when you precede a variable name with a data type, the type of that variable is locked unless you explicitly override the type by specifying another data type.</source>
          <target state="translated">さらに、データ型の変数の名前を付けるときは、その変数の型は別のデータ型を指定することによって、型を明示的にオーバーライドしない限り、ロックされています。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If you try to assign a value that is incompatible with the existing type, and you do not explicitly override the type, Windows PowerShell displays an error, as shown in the following example:</source>
          <target state="translated">既存の型と互換性がない値を割り当てようとすると、型を明示的にオーバーライドしていない場合は、次の例で示すように、エラーが [Windows PowerShell に表示されます。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a = "string"</source>
          <target state="translated">C:\PS &gt; $、= 3 C:\PS &gt; $a ="string"</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a = 3 C:\PS&gt; $a = "string" Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\PS &gt; [int] $、= 3 C:\PS &gt; a ="string"$"System.Int32"を入力するには、"string"の値に変換できません。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">エラー:「入力文字列が正しい形式にします。」</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>At line:1 char:3</source>
          <target state="translated">行: 1 文字: 3</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>$a &lt;&lt;&lt;&lt;  = "string"</source>
          <target state="translated">$、&lt;&lt;&lt;&lt; ="string"</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = "string"</source>
          <target state="translated">C:\PS &gt; [文字列] ="string"$a</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, the data types of variables that contain multiple items in an array are handled differently from the data types of variables that contain a single item.</source>
          <target state="translated">Windows PowerShell を 1 つの項目を含む変数のデータ型から異なる方法で配列内の複数の項目を含む変数のデータ型が処理されます。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Unless a data type is specifically assigned to an array variable, the data type is always System.Object [].</source>
          <target state="translated">データ型が具体的には、配列変数に割り当てられている場合を除き、データ型は常に System.Object にします。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This data type is specific to arrays.</source>
          <target state="translated">このデータ型は、配列に固有です。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Sometimes, you can override the default type by specifying another type.</source>
          <target state="translated">場合によっては、別の種類を指定することで、既定の種類をオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string [] array type:</source>
          <target state="translated">たとえば、次のコマンドは、文字列配列の型として変数をキャストします。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>[string []] $a = "one", "two", "three"</source>
          <target state="translated">[文字列] =「1」$a「2」、「3」</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Windows PowerShell variables can be any .NET Framework data type.</source>
          <target state="translated">Windows PowerShell 変数には、任意の .NET Framework データ型を指定できます。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>In addition, you can assign any fully qualified .NET Framework data type that is available in the current process.</source>
          <target state="translated">さらに、現在のプロセスで使用できる .NET Framework のデータの完全修飾型を割り当てることができます。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For example, the following command specifies a System.DateTime data type:</source>
          <target state="translated">たとえば、次のコマンドは、System.DateTime データ型を指定します。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>[system.datetime]$a = "5/31/2005"</source>
          <target state="translated">[system.datetime]$a =「5/31/2005」</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The variable will be assigned a value that conforms to the System.DateTime data type.</source>
          <target state="translated">変数に割り当てられる準拠した値、System.DateTime データ型。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The value of the $a variable would be the following:</source>
          <target state="translated">$A 変数の値は、次になります。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Tuesday, May 31, 2005 12:00:00 AM</source>
          <target state="translated">2005 年 5 月 31 日火曜日 12時 00分: 00 AM</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>ASSIGNING MULTIPLE VARIABLES</source>
          <target state="translated">複数の変数を割り当てる</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, you can assign values to multiple variables by using a single command.</source>
          <target state="translated">Windows PowerShell では、1 つのコマンドを使用して、複数の変数に値を代入できます。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The first element of the assignment value is assigned to the first variable, the second element is assigned to the second variable, the third element to the third variable, and so on.</source>
          <target state="translated">代入値の最初の要素が最初の変数に割り当てられている、2 番目の要素が 2 番目の変数では、3 番目の変数を示すには、3 番目の要素に割り当てられます。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns the value 1 to the $a variable, the value 2 to the $b variable, and the value 3 to the $c variable:</source>
          <target state="translated">たとえば、次のコマンドは、変数、$b 変数に値 2 および $c 変数に値 3、$ に値 1 を割り当てます。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a, $b, $c = 1, 2, 3</source>
          <target state="translated">C:\PS &gt; $b、$a $c = 1, 2, 3</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the assignment value contains more elements than variables, all the remaining values are assigned to the last variable.</source>
          <target state="translated">割り当ての値に変数より多くの要素が含まれている場合変数残りのすべての値が最後に割り当てられます。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>For example, the following command contains three variables and five values:</source>
          <target state="translated">たとえば、次のコマンドには、3 つの変数と 5 つの値が含まれています。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>$a, $b, $c = 1, 2, 3, 4, 5</source>
          <target state="translated">$a、$b $c = 1、2、3、4、5</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Therefore, Windows PowerShell assigns the value 1 to the $a variable and the value 2 to the $b variable.</source>
          <target state="translated">そのため、Windows PowerShell は、変数 $a と $b 変数に値 2 に、値 1 を割り当てます。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>It assigns the values 3, 4, and 5 to the $c variable.</source>
          <target state="translated">$C 変数に値 3、4、および 5 を割り当てます。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>To assign the values in the $c variable to three other variables, use the following format:</source>
          <target state="translated">$C 変数に値をその他の 3 つの変数に割り当てるには、次の形式を使用します。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>$d, $e, $f = $c</source>
          <target state="translated">$d、$e、$f $c =</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This command assigns the value 3 to the $d variable, the value 4 to the $e variable, and the value 5 to the $f variable.</source>
          <target state="translated">このコマンドは、$d 変数に値 3、4、$e 変数の値および $f 変数に値 5 を割り当てます。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>You can also assign a single value to multiple variables by chaining the variables.</source>
          <target state="translated">変数を連鎖させることにより複数の変数を 1 つの値を割り当てることもできます。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a value of "three" to all four variables:</source>
          <target state="translated">たとえば、次のコマンドの値を割り当てられます。 すべての 4 つの変数に"3"。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>$a = $b = $c = $d = "three"</source>
          <target state="translated">$、$b の = = $c $d の = =「3」</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>VARIABLE-RELATED CMDLETS</source>
          <target state="translated">変数に関連するコマンドレット</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>In addition to using an assignment operation to set a variable value, you can also use the Set-Variable cmdlet.</source>
          <target state="translated">代入演算を使用して、変数値を設定するだけでなくも Set-variable コマンドレットを使用することができます。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>For example, the following command uses Set-Variable to assign an array of 1, 2, 3 to the $a variable.</source>
          <target state="translated">たとえば、次のコマンドは、変数の設定を使用して、$a 変数に 1、2、3 の配列を割り当てます。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Set-Variable -name a -value 1, 2, 3</source>
          <target state="translated">セット変数の値 1、2、3 を名</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>about_Arrays about_Hash_Tables about_Variables Clear-Variable Remove-Variable Set-Variable</source>
          <target state="translated">about_Arrays about_Hash_Tables about_Variables Clear-variable Remove-variable Set-variable</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>