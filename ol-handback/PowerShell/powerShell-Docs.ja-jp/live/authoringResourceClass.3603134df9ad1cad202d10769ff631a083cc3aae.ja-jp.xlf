<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="ja-jp">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Writing a custom DSC resource with PowerShell classes</source>
          <target state="translated">PowerShell クラスを使用したカスタム DSC リソースの記述</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Applies To: Windows Windows PowerShell 5.0</source>
          <target state="translated">適用先: Windows PowerShell 5.0</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>With the introduction of PowerShell classes in Windows PowerShell 5.0, you can now define a DSC resource by creating a class.</source>
          <target state="translated">Windows PowerShell 5.0 の PowerShell クラスの導入により、クラスを作成して DSC リソースを定義できるようになりました。</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The class defines both the schema and the implementation of the resource, so there is no need to create a separate MOF file.</source>
          <target state="translated">クラスでは、スキーマとリソースの実装の両方を定義するため、MOF ファイルを別途作成する必要がありません。</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The folder structure for a class-based resource is also simpler, because a <bpt id="p1">**</bpt>DSCResources<ept id="p1">**</ept> folder is not necessary.</source>
          <target state="translated"><bpt id="p1">**</bpt>DSCResources<ept id="p1">**</ept> フォルダーが必要ないため、クラスベースのリソースのフォルダー構造は単純になりました。</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In a class-based DSC resource, the schema is defined as properties of the class which can be modified with attributes to specify the property type..</source>
          <target state="translated">クラスベースの DSC リソースでは、スキーマは、プロパティの型を指定する属性で変更できるクラスのプロパティとして定義されます。</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The resource is implemented by <bpt id="p2">**</bpt>Get()<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Set()<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Test()<ept id="p4">**</ept> methods (equivalent to the <bpt id="p5">**</bpt>Get-TargetResource<ept id="p5">**</ept>, <bpt id="p6">**</bpt>Set-TargetResource<ept id="p6">**</ept>, and <bpt id="p7">**</bpt>Test-TargetResource<ept id="p7">**</ept> functions in a script resource.</source>
          <target state="translated">リソースは、<bpt id="p2">**</bpt>Get()<ept id="p2">**</ept>、<bpt id="p3">**</bpt>Set()<ept id="p3">**</ept>、および <bpt id="p4">**</bpt>Test()<ept id="p4">**</ept> メソッド (スクリプト リソースの <bpt id="p5">**</bpt>Get-TargetResource<ept id="p5">**</ept>、<bpt id="p6">**</bpt>Set-TargetResource<ept id="p6">**</ept>、および <bpt id="p7">**</bpt>Test-TargetResource<ept id="p7">**</ept> 関数に相当します) によって実装されます。</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this topic, we will create a simple resource named <bpt id="p8">**</bpt>FileResource<ept id="p8">**</ept> that manages a file in a specified path.</source>
          <target state="translated">このトピックでは、指定されたパス内のファイルを管理する <bpt id="p8">**</bpt>FileResource<ept id="p8">**</ept> という名前の単純なリソースを作成します。</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about DSC resources, see <bpt id="p9">[</bpt>Build Custom Windows PowerShell Desired State Configuration Resources<ept id="p9">](authoringResource.md)</ept></source>
          <target state="translated">DSC リソースの詳細については、「<bpt id="p9">[</bpt>カスタム Windows PowerShell Desired State Configuration のビルド<ept id="p9">](authoringResource.md)</ept>」を参照してください。</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Folder structure for a class resource</source>
          <target state="translated">クラス リソースのフォルダー構造</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To implement a DSC custom resource with a PowerShell class, create the following folder structure.</source>
          <target state="translated">PowerShell クラスを使用して DSC カスタム リソースを実装するには、次のフォルダー構造を作成します。</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The class is defined in <bpt id="p10">**</bpt>MyDscResource.psm1<ept id="p10">**</ept> and the module manifest is defined in <bpt id="p11">**</bpt>MyDscResource.psd1<ept id="p11">**</ept>.</source>
          <target state="translated">クラスは <bpt id="p10">**</bpt>MyDscResource.psm1<ept id="p10">**</ept> で定義し、モジュール マニフェストは <bpt id="p11">**</bpt>MyDscResource.psd1<ept id="p11">**</ept> で定義します。</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Nested modules</source>
          <target state="translated">入れ子のモジュール</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Alternatively, you can split resources across several <ph id="ph1">`.psm1`</ph> files and include them as nested modules.</source>
          <target state="translated">リソースを複数の <ph id="ph1">`.psm1`</ph> ファイルに分割し、それらのファイルを入れ子のモジュールとして含めることもできます。</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It's reasonable, when you have a lot of resources and putting them all in one file would make it hard to manage.</source>
          <target state="translated">これは、リソースの数が多く、すべてを 1 つのファイルに配置すると管理が困難になる場合に適切です。</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can put one class in each file, or several of them.</source>
          <target state="translated">1 つのクラスを各ファイルに配置するか、いくつかを配置できます。</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It can be useful to group resources by a sub-area inside one nested module.</source>
          <target state="translated">リソースを 1 つの入れ子のモジュール内のサブエリアにグループ化すると役立つ場合があります。</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>From the user point of view, there is no difference in usage.</source>
          <target state="translated">ユーザーが使用する方法に違いはありません。</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>All resource will show up in <ph id="ph2">`MyDscResource`</ph> module.</source>
          <target state="translated">すべてのリソースは <ph id="ph2">`MyDscResource`</ph> モジュールに表示されます。</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Think about these nested modules as implementation details and use it for your convinience.</source>
          <target state="translated">これらの入れ子のモジュールは、実装の詳細と考え、都合に合わせて使用してください。</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create the class</source>
          <target state="translated">クラスの作成</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You use the class keyword to create a PowerShell class.</source>
          <target state="translated">PowerShell クラスを作成するには、class キーワードを使用します。</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To specify that a class is a DSC resource, use the <bpt id="p12">**</bpt>DscResource()<ept id="p12">**</ept> attribute.</source>
          <target state="translated">クラスを DSC リソースとして指定するには、<bpt id="p12">**</bpt>DscResource()<ept id="p12">**</ept> 属性を使用します。</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The name of the class is the name of the DSC resource.</source>
          <target state="translated">クラスの名前は、DSC リソースの名前です。</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Declare properties</source>
          <target state="translated">プロパティの宣言</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The DSC resource schema is defined as properties of the class.</source>
          <target state="translated">DSC リソースのスキーマは、クラスのプロパティとして定義します。</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We declare three properties as follows.</source>
          <target state="translated">3 つのプロパティを次のように宣言します。</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Notice that the properties are modified by attributes.</source>
          <target state="translated">属性によってプロパティが変更されることに注意してください。</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The meaning of the attributes is as follows:</source>
          <target state="translated">属性の意味は次のとおりです。</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p13">**</bpt>DscProperty(Key)<ept id="p13">**</ept>: The property is required.</source>
          <target state="translated"><bpt id="p13">**</bpt>DscProperty(Key)<ept id="p13">**</ept>: プロパティは必須です。</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The property is a key.</source>
          <target state="translated">プロパティはキーです。</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The values of all properties marked as keys must combine to uniquely identify a resource instance within a configuration.</source>
          <target state="translated">キーとしてマークされたすべてのプロパティの値を組み合わせて、構成内のリソース インスタンスを一意に識別する必要があります。</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p14">**</bpt>DscProperty(Mandatory)<ept id="p14">**</ept>: The property is required.</source>
          <target state="translated"><bpt id="p14">**</bpt>DscProperty(Mandatory)<ept id="p14">**</ept>: プロパティは必須です。</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p15">**</bpt>DscProperty(NotConfigurable)<ept id="p15">**</ept>: The property is read-only.</source>
          <target state="translated"><bpt id="p15">**</bpt>DscProperty(NotConfigurable)<ept id="p15">**</ept>: プロパティは読み取り専用です。</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Properties marked with this attribute cannot be set by a configuration, but are populated by the <bpt id="p16">**</bpt>Get()<ept id="p16">**</ept> method when present.</source>
          <target state="translated">この属性でマークされたプロパティは、構成で設定できませんが、<bpt id="p16">**</bpt>Get()<ept id="p16">**</ept> メソッド (存在する場合) によって設定されます。</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p17">**</bpt>DscProperty()<ept id="p17">**</ept>: The property is configurable, but it is not required.</source>
          <target state="translated"><bpt id="p17">**</bpt>DscProperty()<ept id="p17">**</ept>: プロパティは構成可能ですが、必須ではありません。</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p18">**</bpt>$Path<ept id="p18">**</ept> and <bpt id="p19">**</bpt>$SourcePath<ept id="p19">**</ept> properties are both strings.</source>
          <target state="translated"><bpt id="p18">**</bpt>$Path<ept id="p18">**</ept> と <bpt id="p19">**</bpt>$SourcePath<ept id="p19">**</ept> プロパティは、両方とも文字列です。</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p20">**</bpt>$CreationTime<ept id="p20">**</ept> is a <bpt id="p21">[</bpt>DateTime<ept id="p21">](https://technet.microsoft.com/en-us/library/system.datetime.aspx)</ept> property.</source>
          <target state="translated"><bpt id="p20">**</bpt>$CreationTime<ept id="p20">**</ept> は、<bpt id="p21">[</bpt>DateTime<ept id="p21">](https://technet.microsoft.com/en-us/library/system.datetime.aspx)</ept> プロパティです。</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p22">**</bpt>$Ensure<ept id="p22">**</ept> property is an enumeration type, defined as follows.</source>
          <target state="translated"><bpt id="p22">**</bpt>$Ensure<ept id="p22">**</ept> プロパティは、次のように定義された列挙型です。</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Implementing the methods</source>
          <target state="translated">メソッドの実装</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p23">**</bpt>Get()<ept id="p23">**</ept>, <bpt id="p24">**</bpt>Set()<ept id="p24">**</ept>, and <bpt id="p25">**</bpt>Test()<ept id="p25">**</ept> methods are analogous to the <bpt id="p26">**</bpt>Get-TargetResource<ept id="p26">**</ept>, <bpt id="p27">**</bpt>Set-TargetResource<ept id="p27">**</ept>, and <bpt id="p28">**</bpt>Test-TargetResource<ept id="p28">**</ept> functions in a script resource.</source>
          <target state="translated"><bpt id="p23">**</bpt>Get()<ept id="p23">**</ept>、<bpt id="p24">**</bpt>Set()<ept id="p24">**</ept>、および <bpt id="p25">**</bpt>Test()<ept id="p25">**</ept> メソッドは、スクリプト リソースの <bpt id="p26">**</bpt>Get-TargetResource<ept id="p26">**</ept>、<bpt id="p27">**</bpt>Set-TargetResource<ept id="p27">**</ept>、および <bpt id="p28">**</bpt>Test-TargetResource<ept id="p28">**</ept> 関数に似ています。</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This code also includes the CopyFile() function, a helper function that copies the file from <bpt id="p29">**</bpt>$SourcePath<ept id="p29">**</ept> to <bpt id="p30">**</bpt>$Path<ept id="p30">**</ept>.</source>
          <target state="translated">このコードには、ファイルを <bpt id="p29">**</bpt>$SourcePath<ept id="p29">**</ept> から <bpt id="p30">**</bpt>$Path<ept id="p30">**</ept> にコピーするヘルパー関数である CopyFile() 関数も含まれています。</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The complete file</source>
          <target state="translated">完全なファイル</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The complete class file follows.</source>
          <target state="translated">完全なクラス ファイルは次のとおりです。</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Create a manifest</source>
          <target state="translated">マニフェストの作成</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To make a class-based resource available to the DSC engine, you must include a <bpt id="p31">**</bpt>DscResourcesToExport<ept id="p31">**</ept> statement in the manifest file that instructs the module to export resources.</source>
          <target state="translated">クラスベースのリソースを DSC エンジンで使用できるようにするには、マニフェスト ファイルに、リソースをエクスポートするようにモジュールに指示する <bpt id="p31">**</bpt>DscResourcesToExport<ept id="p31">**</ept> ステートメントを含める必要があります。</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you are using <bpt id="p32">**</bpt>Nested modules<ept id="p32">**</ept> to split resources into few files, you should put the list of nested modules in <ph id="ph3">`NestedModules`</ph> key</source>
          <target state="translated"><bpt id="p32">**</bpt>入れ子のモジュール<ept id="p32">**</ept>を使用してリソースをいくつかのファイルに分割する場合は、入れ子のモジュールの一覧を <ph id="ph3">`NestedModules`</ph> キーに配置する必要があります。</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Test the resource</source>
          <target state="translated">リソースのテスト</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>After saving the class and manifest files in the folder structure as described earlier, you can create a configuration that uses the new resource.</source>
          <target state="translated">既に説明したように、クラスとマニフェスト ファイルをフォルダー構造で保存した後で、新しいリソースを使用する構成を作成できます。</target>         
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For information about how to run a DSC configuration, see <bpt id="p33">[</bpt>Enacting configurations<ept id="p33">](enactingConfigurations.md)</ept>.</source>
          <target state="translated">DSC 構成を実行する方法については、「<bpt id="p33">[</bpt>構成の適用<ept id="p33">](enactingConfigurations.md)</ept>」を参照してください。</target>         
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following configuration will check to see whether the file at <ph id="ph4">`c:\test\test.txt`</ph> exists, and, if not, copies the file from <ph id="ph5">`c:\test.txt`</ph> (you should create <ph id="ph6">`c:\test.txt`</ph> before you run the configuration).</source>
          <target state="translated">次の構成では、<ph id="ph4">`c:\test\test.txt`</ph> のファイルが存在するかどうかを確認し、存在しない場合は、ファイルを <ph id="ph5">`c:\test.txt`</ph> からコピーします (構成を実行する前に <ph id="ph6">`c:\test.txt`</ph> を作成する必要があります)。</target>         
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">参照</target>         
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="translated">概念</target>         
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Build Custom Windows PowerShell Desired State Configuration Resources</source>
          <target state="translated">カスタム Windows PowerShell Desired State Configuration のビルド</target>         
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09fdf376a7001ef6e43d4c4a6b8d14516b616fc5</xliffext:olfilehash>
  </header>
</xliff>