<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3e6bb8f2069bc911873cd74c321d9f8aa04de47</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Remote_Output.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">081d2ad8d7507ee2da30d2e8e61bd2362a68b90a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b47b67a14bcf01e165206fd160b3e8099bce0fb6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Remote_Output</source>
          <target state="translated">about_Remote_Output</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell-Cmdlets</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Remote Output</source>
          <target state="translated">Zur Remote-Ausgabe</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Remote_Output</source>
          <target state="translated">about_Remote_Output</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">THEMA</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Remote_Output</source>
          <target state="translated">about_Remote_Output</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">KURZE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes how to interpret and format the output of remote commands.</source>
          <target state="translated">Beschreibt das interpretieren und Formatieren der Ausgabe der remote-Befehle.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">LANGE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The output of a command that was run on a remote computer might look like output of the same command run on a local computer, but there are some significant differences.</source>
          <target state="translated">Die Ausgabe eines Befehls, der auf einem Remotecomputer ausgeführt wurde auf einem lokalen Computer Ausführen desselben Befehls Ausgabe aussehen könnte, aber es gibt einige wichtige Unterschiede.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic explains how to interpret, format, and display the output of commands that are run on remote computers.</source>
          <target state="translated">In diesem Thema wird erläutert, wie interpretieren, formatieren und Anzeigen der Ausgabe von Befehlen, die auf Remotecomputern ausgeführt werden wird.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DISPLAYING THE COMPUTER NAME</source>
          <target state="translated">ANZEIGEN DES NAMENS DES COMPUTERS</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you use the Invoke-Command cmdlet to run a command on a remote computer, the command returns an object that includes the name of the computer that generated the data.</source>
          <target state="translated">Wenn Sie das Invoke-Command-Cmdlet verwenden, um einen Befehl auf einem Remotecomputer auszuführen, gibt der Befehl ein Objekt, das den Namen des Computers enthält, die die Daten generiert.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The remote computer name is stored in the PSComputerName property.</source>
          <target state="translated">Namen des Remotecomputers ist in der PSComputerName-Eigenschaft gespeichert.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For many commands, the PSComputerName is displayed by default.</source>
          <target state="translated">Bei vielen Befehlen wird der PSComputerName standardmäßig angezeigt.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the following command runs a Get-Culture command on two remote computers, Server01 and Server02.</source>
          <target state="translated">Beispielsweise wird mit der folgende Befehl einen Get-Culture-Befehl auf zwei Remotecomputern "SERVER01" und "server02" ausgeführt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The output, which appears below, includes the names of the remote computers on which the command ran.</source>
          <target state="translated">Die Ausgabe, die unter angezeigt wird, enthält die Namen der Remotecomputer, auf denen der Befehl ausgeführt wurde.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -script {get-culture} -comp Server01, Server02</source>
          <target state="translated">C:\PS &gt; invoke-Command - Skript {Get-Culture} - Comp Server01, Server02</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>LCID  Name    DisplayName                PSComputerName</source>
          <target state="translated">LCID Namen DisplayName PSComputerName</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>1033  en-US   English (United States)    Server01 1033  es-AR   Spanish (Argentina)        Server02</source>
          <target state="translated">1033 US-Englisch (Vereinigte Staaten) Server01 1033 es AR Spanisch (Argentinien) "server02"</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use the HideComputerName parameter of Invoke-Command to hide the PSComputerName property.</source>
          <target state="translated">Sie können den HideComputerName-Parameter von Invoke-Command Ausblenden der PSComputerName-Eigenschaft verwenden.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This parameter is designed for commands that collect data from only one remote computer.</source>
          <target state="translated">Dieser Parameter ist für Befehle konzipiert, die nur ein remote-Computer sammeln.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following command runs a Get-Culture command on the Server01 remote computer.</source>
          <target state="translated">Der folgende Befehl führt einen Get-Culture-Befehl auf dem Remotecomputer Server01.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It uses the HideComputerName parameter to hide the PSComputerName property and related properties.</source>
          <target state="translated">Er verwendet den HideComputerName-Parameter, um die PSComputerName-Eigenschaft und die zugehörigen Eigenschaften ausblenden.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scr {get-culture} -comp Server01 -HideComputerName</source>
          <target state="translated">C:\PS &gt; {Get-Culture} invoke-Command - Scr-comp Server01 - HideComputerName</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>LCID             Name             DisplayName</source>
          <target state="translated">LCID-Name "DisplayName"</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>1033             en-US            English (United States)</source>
          <target state="translated">1033 US-Englisch (USA)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also display the PSComputerName property if it is not displayed by default.</source>
          <target state="translated">Wenn sie nicht standardmäßig angezeigt wird, können Sie auch die PSComputerName-Eigenschaft anzeigen.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, the following commands use the Format-Table cmdlet to add the PSComputerName property to the output of a remote Get-Date command.</source>
          <target state="translated">Die folgenden Befehle werden z. B. mit dem Cmdlet "Format-Table" zum Hinzufügen der PSComputerName-Eigenschaft mit der Ausgabe des Get-Date-Befehl verwenden.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $dates = invoke-command -script {get-date} -computername Server01, Server02 C:\PS&gt; $dates | format-table DateTime, PSComputerName -auto</source>
          <target state="translated">C:\PS &gt; $dates = invoke-Command-Skript {Get-Date} - Computername Server01, Server02 C:\PS &gt; $dates | Format-Table "DateTime", PSComputerName-automatisch</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>DateTime                            PSComputerName</source>
          <target state="translated">DateTime-PSComputerName</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Monday, July 21, 2008 7:16:58 PM    Server01 Monday, July 21, 2008 7:16:58 PM    Server02</source>
          <target state="translated">Montag, 21. Juli 2008 19:16:58 Uhr Server01 Montag, 21. Juli 2008 19:16:58 Uhr "server02"</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>DISPLAYING THE MACHINENAME PROPERTY</source>
          <target state="translated">ANZEIGEN DER MACHINENAME-EIGENSCHAFT</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Several cmdlets, including Get-Process, Get-Service, and Get-EventLog, have a ComputerName parameter that gets the objects on a remote computer.</source>
          <target state="translated">Mehrere Cmdlets, einschließlich der Get-Process "," Get-Service, und Get-EventLog, haben einen ComputerName-Parameter, der die Objekte auf einem Remotecomputer abgerufen werden.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These cmdlets do not use Windows PowerShell remoting, so you can use them even on computers that are not configured for remoting in Windows PowerShell.</source>
          <target state="translated">Diese Cmdlets verwenden keine Windows PowerShell-Remoting, Sie verwenden können, auch auf Computern, die nicht für Remoting in Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The objects that these cmdlets return store the name of the remote computer in the MachineName property.</source>
          <target state="translated">Die Objekte, die diese Cmdlets zurückgeben speichern den Namen des Remotecomputers in die MachineName-Eigenschaft.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(These objects do not have a PSComputerName property.)</source>
          <target state="translated">(Diese Objekte müssen eine PSComputerName-Eigenschaft.)</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, this command gets the PowerShell process on the Server01 and Server02 remote computers.</source>
          <target state="translated">Dieser Befehl ruft z. B. den PowerShell-Prozess, auf den Remotecomputern "SERVER01" und "server02".</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default display does not include the MachineName property.</source>
          <target state="translated">Die Standardanzeige umfasst nicht die MachineName-Eigenschaft.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; get-process PowerShell -computername server01, server02</source>
          <target state="translated">C:\PS &gt; Get-Process PowerShell - Computername "SERVER01", "server02"</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">Npm(k): PM(k): ws(k): VM(m): CPU(s) Id Prozessname behandelt</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>920      38    97524     114504   575     9.66   2648 PowerShell 194       6    24256      32384   142            3020 PowerShell 352      27    63472      63520   577     3.84   4796 PowerShell</source>
          <target state="translated">920 38 97524 114504 575 9.66 2648 PowerShell 194 6 24256 32384 142 3020 PowerShell 352 27 63472 63520 577 3,84 4796 PowerShell</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use the Format-Table cmdlet to display the MachineName property of the process objects.</source>
          <target state="translated">Die Format-Table-Cmdlet können Sie die MachineName-Eigenschaft der Process-Objekte anzeigen.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, the following command saves the processes in the $p variable and then uses a pipeline operator (|) to send the processes in $p to the Format-Table command.</source>
          <target state="translated">Der folgende Befehl wird beispielsweise die Prozesse in der $p-Variablen gespeichert und verwendet dann einen Pipelineoperator (|), um die Prozesse in $p an den Format-Table-Befehl zu senden.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the Property parameter of Format-Table to include the MachineName property in the display.</source>
          <target state="translated">Der Befehl verwendet den Property-Parameter von Format-Table, um die MachineName-Eigenschaft in die Anzeige aufgenommen.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $p = get-process PowerShell -comp Server01, Server02 C:\PS&gt; $P | format-table -property ID, ProcessName, MachineName -auto</source>
          <target state="translated">C:\PS &gt; $p = Get-Process PowerShell-Comp Server01, Server02 C:\PS &gt; $P | Format-Table-Eigenschafts-ID, Prozessname, MachineName-automatisch</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Id ProcessName MachineName</source>
          <target state="translated">ID Prozessname MachineName</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>2648 PowerShell  Server02 3020 PowerShell  Server01 4796 PowerShell  Server02</source>
          <target state="translated">2648 PowerShell Server02 3020 PowerShell Server01 4796 PowerShell "server02"</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following more complex command adds the MachineName property to the default process display.</source>
          <target state="translated">Im folgenden komplexeren Befehl fügt die MachineName-Eigenschaft auf die Standardanzeige für den Prozess.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It uses hash tables to specify calculated properties.</source>
          <target state="translated">Es verwendet Hashtabellen mit berechnete Eigenschaften angeben.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Fortunately, you do not have to understand it to use it.</source>
          <target state="translated">Glücklicherweise müssen Sie keinen zu verwenden.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>(Note that the backtick [`] is the continuation character.)</source>
          <target state="translated">(Beachten Sie, dass das Hochkomma ['] das Fortsetzungszeichen ist.)</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $p = get-process PowerShell -comp Server01, Server02</source>
          <target state="translated">C:\PS &gt; $p = Get-Process PowerShell-Comp Server01, Server02</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $p | format-table -property Handles, <ph id="ph1">`
@{Label="NPM(K)";Expression={int}}, `</ph> @{Label="PM(K)";Expression={int}}, <ph id="ph2">`
@{Label="WS(K)";Expression={int}}, `</ph> @{Label="VM(M)";Expression={int}}, <ph id="ph3">`
@{Label="CPU(s)";Expression={if ($.CPU -ne $()){ $.CPU.ToString("N")}}}, `</ph> Id, ProcessName, MachineName -auto</source>
          <target state="translated">C:\PS &gt; $p | Format-Table-Eigenschaft Handles, <ph id="ph1">`
@{Label="NPM(K)";Expression={int}}, `</ph> @{Label="PM(K)"; Ausdruck = {Int}}, <ph id="ph2">`
@{Label="WS(K)";Expression={int}}, `</ph> @{Label="VM(M)"; Ausdruck = {Int}}, <ph id="ph3">`
@{Label="CPU(s)";Expression={if ($.CPU -ne $()){ $.CPU.ToString("N")}}}, `</ph> -Id, Prozessname, MachineName-automatisch</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Handles NPM(K) PM(K)  WS(K) VM(M) CPU(s)   Id ProcessName MachineName</source>
          <target state="translated">Npm(k): PM(k): ws(k): VM(m): CPU(s) Id Prozessname MachineName behandelt</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>920     38 97560 114532   576        2648 PowerShell  Server02 192      6 24132  32028   140        3020 PowerShell  Server01 438     26 48436  59132   565        4796 PowerShell  Server02</source>
          <target state="translated">920 38 97560 114532 576 2648 PowerShell Server02 192 6 24132 32028 140 3020 PowerShell Server01 438 26 48436 59132 565 4796 PowerShell "server02"</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>DESERIALIZED OBJECTS</source>
          <target state="translated">DESERIALISIERTE OBJEKTE</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you run remote commands that generate output, the command output is transmitted across the network back to the local computer.</source>
          <target state="translated">Wenn Sie remote-Befehle, die Ausgabe zu generieren ausführen, wird die Ausgabe des Befehls über das Netzwerk zurück an den lokalen Computer übertragen.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because most live Microsoft .NET Framework objects (such as the objects that Windows PowerShell cmdlets return) cannot be transmitted over the network, the live objects are "serialized".</source>
          <target state="translated">Da die meisten aktiven Microsoft .NET Framework-Objekte (z. B. die Objekte, die Windows PowerShell-Cmdlets zurückgeben) über das Netzwerk übertragen werden können, werden die live-Objekte "serialisiert".</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In other words, the live objects are converted into XML representations of the object and its properties.</source>
          <target state="translated">Das heißt, die live-Objekte in XML-Darstellung des Objekts und dessen Eigenschaften konvertiert.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Then, the XML-based serialized object is transmitted across the network.</source>
          <target state="translated">Das XML-basierte serialisierte Objekt wird dann über das Netzwerk übertragen.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>On the local computer, Windows PowerShell receives the XML-based serialized object and "deserializes" it by converting the XML-based object into a standard .NET Framework object.</source>
          <target state="translated">Auf dem lokalen Computer wird Windows PowerShell empfängt das XML-basierte serialisierte Objekt und wird durch das XML-basierte Objekt in standardmäßigen .NET Framework-Objekt konvertieren "deserialisiert".</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, the deserialized object is not a live object.</source>
          <target state="translated">Das deserialisierte Objekt ist jedoch nicht über ein aktives Objekt.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It is a snapshot of the object at the time that it was serialized, and it includes properties but no methods.</source>
          <target state="translated">Es ist eine Momentaufnahme des Objekts an die Zeit, die Sie auch serialisiert wurden und enthält Eigenschaften, jedoch keine Methoden.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can use and manage these objects in Windows PowerShell, including passing them in pipelines, displaying selected properties, and formatting them.</source>
          <target state="translated">Sie können verwenden und verwalten diese Objekte in Windows PowerShell, einschließlich Übergabe in Pipelines, ausgewählte Eigenschaften anzeigen und formatieren.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Most deserialized objects are automatically formatted for display by entries in the Types.ps1xml or Format.ps1xml files.</source>
          <target state="translated">Die meisten deserialisierte Objekte werden automatisch die Einträge in der Types. ps1xml "oder" Format. ps1xml-Dateien für die Anzeige formatiert.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, the local computer might not have formatting files for all of the deserialized objects that were generated on a remote computer.</source>
          <target state="translated">Allerdings der lokale Computer verfügen möglicherweise nicht Formatieren von Dateien für alle von der deserialisierten Objekte, die auf einem Remotecomputer generiert wurden.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When objects are not formatted, all of the properties of each object appear in the console in a streaming list.</source>
          <target state="translated">Wenn Objekte nicht formatiert werden, werden alle Eigenschaften der einzelnen Objekte in der Konsole in einer streaming-Liste angezeigt.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When objects are not formatted automatically, you can use the formatting cmdlets, such as Format-Table or Format-List, to format and display selected properties.</source>
          <target state="translated">Wenn Objekte nicht automatisch formatiert sind, können Sie die Formatierung-Cmdlets wie Format-Table "oder" Format-List zum Formatieren und Anzeigen von ausgewählten Eigenschaften.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Or, you can use the Out-GridView cmdlet to display the objects in a table.</source>
          <target state="translated">Alternativ können Sie das Cmdlet "Out-GridView" die Objekte in einer Tabelle angezeigt.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Also, if you run a command on a remote computer that uses cmdlets that you do not have on your local computer, the objects that the command returns might not be formatted properly because you do not have the formatting files for those objects on your computer.</source>
          <target state="translated">Auch wenn Sie einen Befehl auf einem Remotecomputer auszuführen, die Cmdlets verwendet werden, die sich nicht auf dem lokalen Computer befinden, möglicherweise mit dem Befehl zurückgegebenen Objekte nicht ordnungsgemäß formatiert werden, da Sie nicht über die Formatierungsdateien für die Objekte auf dem Computer verfügen.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To get formatting data from another computer, use the Get-FormatData and Export-FormatData cmdlets.</source>
          <target state="translated">Verwenden Sie die Get-FormatData und Export-FormatData-Cmdlets, zum Formatieren von Daten aus einem anderen Computer abrufen.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Some object types, such as DirectoryInfo objects and GUIDs, are converted back into live objects when they are received.</source>
          <target state="translated">Einige Objekttypen, z. B. DirectoryInfo-Objekten und GUIDs, werden wieder in der live-Objekte konvertiert, wenn sie empfangen werden.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These objects do not need any special handling or formatting.</source>
          <target state="translated">Diese Objekte müssen keine spezielle Behandlung oder formatieren.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>ORDERING THE RESULTS</source>
          <target state="translated">SORTIERUNG DER ERGEBNISSE</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The order of the computer names in the ComputerName parameter of cmdlets determines the order in which Windows PowerShell connects to the remote computers.</source>
          <target state="translated">Die Reihenfolge der Computernamen in den ComputerName-Parameter der Cmdlets bestimmt die Reihenfolge, in der Windows PowerShell auf dem Remotecomputer verbunden.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, the results appear in the order in which the local computer receives them, which might be a different order.</source>
          <target state="translated">Allerdings werden die Ergebnisse in der Reihenfolge, in der der lokale Computer, empfängt der möglicherweise mit einer anderen Reihenfolge, angezeigt.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To change the order of the results, use the Sort-Object cmdlet.</source>
          <target state="translated">Um die Reihenfolge der Ergebnisse zu ändern, verwenden Sie das Sort-Object-Cmdlet.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can sort on the PSComputerName or MachineName property.</source>
          <target state="translated">Sie können die PSComputerName oder MachineName-Eigenschaft sortieren.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can also sort on another property of the object so that the results from different computers are interspersed.</source>
          <target state="translated">Sie können auch auf eine andere Eigenschaft des Objekts sortieren, damit die Ergebnisse von verschiedenen Computern kombiniert werden.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">SIEHE AUCH</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>about_Remote about_Remote_Variables Format-Table Get-EventLog Get-Process Get-Service Get-WmiObject Invoke-Command Out-GridView Select-Object</source>
          <target state="translated">About_Remote About_Remote_Variables Format-Table "Get-EventLog" Get-Process Get-Service-Get-WmiObject Invoke-Command Out-GridView Select-Object</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>