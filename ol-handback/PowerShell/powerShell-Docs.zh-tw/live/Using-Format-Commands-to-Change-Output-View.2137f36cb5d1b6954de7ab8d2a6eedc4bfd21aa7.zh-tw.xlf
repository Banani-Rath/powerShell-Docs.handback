<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">411923bac650f0f4a11808a86acaca1de7e1c076</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Using-Format-Commands-to-Change-Output-View.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43edc5775ead4c6f1a3658611ef24f3f44da15ec</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Format Commands to Change Output View</source>
          <target state="translated">使用格式命令變更輸出檢視</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using Format Commands to Change Output View</source>
          <target state="translated">使用格式命令變更輸出檢視</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has a set of cmdlets that allow you to control which properties are displayed for particular objects.</source>
          <target state="translated">Windows PowerShell 的一組 Cmdlet 可讓您控制針對特定物件所顯示的屬性。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The names of all the cmdlets begin with the verb <bpt id="p1">**</bpt>Format<ept id="p1">**</ept>.</source>
          <target state="translated">所有 Cmdlet 名稱的開頭都是動詞 <bpt id="p1">**</bpt>Format<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>They let you select one or more properties to show.</source>
          <target state="translated">它們可讓您選取要顯示的一或多個屬性。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlets are <bpt id="p2">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Format<ph id="ph2">\-</ph>List<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Format<ph id="ph3">\-</ph>Table<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Format<ph id="ph4">\-</ph>Custom<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ept id="p1">**</ept> Cmdlet 為 <bpt id="p2">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p2">**</ept>、<bpt id="p3">**</bpt>Format<ph id="ph2">\-</ph>List<ept id="p3">**</ept>、<bpt id="p4">**</bpt>Format<ph id="ph3">\-</ph>Table<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>Format<ph id="ph4">\-</ph>Custom<ept id="p5">**</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We will only describe the <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Format<ph id="ph2">\-</ph>List<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Format<ph id="ph3">\-</ph>Table<ept id="p3">**</ept> cmdlets in this user's guide.</source>
          <target state="translated">本使用者手冊只會說明 <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p1">**</ept>、<bpt id="p2">**</bpt>Format<ph id="ph2">\-</ph>List<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Format<ph id="ph3">\-</ph>Table<ept id="p3">**</ept> Cmdlet。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each format cmdlet has default properties that will be used if you do not specify specific properties to display.</source>
          <target state="translated">每個 Format Cmdlet 都有預設屬性，可在未指定要顯示的特定屬性時使用。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each cmdlet also uses the same parameter name, <bpt id="p1">**</bpt>Property<ept id="p1">**</ept>, to specify which properties you want to display.</source>
          <target state="translated">每個 Cmdlet 也都會使用相同的參數名稱 (<bpt id="p1">**</bpt>Property<ept id="p1">**</ept>) 來指定您想要顯示的屬性。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p1">**</ept> only shows a single property, its <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter only takes a single value, but the property parameters of <bpt id="p3">**</bpt>Format<ph id="ph2">\-</ph>List<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Format<ph id="ph3">\-</ph>Table<ept id="p4">**</ept> will accept a list of property names.</source>
          <target state="translated">因為 <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p1">**</ept> 只會顯示單一屬性，所以其 <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> 參數只使用單一值，但 <bpt id="p3">**</bpt>Format<ph id="ph2">\-</ph>List<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>Format<ph id="ph3">\-</ph>Table<ept id="p4">**</ept> 的屬性參數會接受屬性名稱清單。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you use the command <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Process <ph id="ph2">\-</ph>Name powershell<ept id="p1">**</ept> with two instances of Windows PowerShell running, you get output that looks like this:</source>
          <target state="translated">如果您搭配使用 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Process <ph id="ph2">\-</ph>Name powershell<ept id="p1">**</ept> 命令與兩個執行中 Windows PowerShell 執行個體，則會收到與下面類似的輸出︰</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the rest of this section, we will explore how to use <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlets to change the way the output of this command is displayed.</source>
          <target state="translated">在本節的其餘部分，我們將探討如何使用 <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> Cmdlet 來變更這個命令的輸出顯示方式。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using Format<ph id="ph1">\-</ph>Wide for Single<ph id="ph2">\-</ph>Item Output</source>
          <target state="translated">針對單一項目輸出使用 Format<ph id="ph1">\-</ph>Wide</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p1">**</ept> cmdlet, by default, displays only the default property of an object.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p1">**</ept> Cmdlet 預設只會顯示物件的預設屬性。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The information associated with each object is displayed in a single column:</source>
          <target state="translated">與每個物件相關聯的資訊會顯示在單一資料行中︰</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can also specify a non<ph id="ph1">\-</ph>default property:</source>
          <target state="translated">您也可以指定非預設屬性：</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Controlling Format<ph id="ph1">\-</ph>Wide Display with Column</source>
          <target state="translated">使用資料行控制 Format<ph id="ph1">\-</ph>Wide 顯示</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>With the <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p1">**</ept> cmdlet, you can only display a single property at a time.</source>
          <target state="translated">使用 <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Wide<ept id="p1">**</ept> Cmdlet，一次只能顯示單一屬性。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This makes it useful for displaying simple lists that show only one element per line.</source>
          <target state="translated">這樣適用於顯示一行只顯示一個元素的簡單清單。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To get a simple listing, set the value of the <bpt id="p1">**</bpt>Column<ept id="p1">**</ept> parameter to 1 by typing:</source>
          <target state="translated">若要取得簡單清單，請將 <bpt id="p1">**</bpt>Column<ept id="p1">**</ept> 屬性的值設為 1，方法是輸入：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Using Format<ph id="ph1">\-</ph>List for a List View</source>
          <target state="translated">針對清單檢視使用 Format<ph id="ph1">\-</ph>List</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>List<ept id="p1">**</ept> cmdlet displays an object in the form of a listing, with each property labeled and displayed on a separate line:</source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>List<ept id="p1">**</ept> Cmdlet 以清單形式顯示物件，並在個別行上標記和顯示每個屬性：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can specify as many properties as you want:</source>
          <target state="translated">您可以指定您想要的任意數目的屬性︰</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Getting Detailed Information by Using Format<ph id="ph1">\-</ph>List with Wildcards</source>
          <target state="translated">搭配使用 Format<ph id="ph1">\-</ph>List 與萬用字元以取得詳細資訊</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>List<ept id="p1">**</ept> cmdlet lets you use a wildcard as the value of its <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>List<ept id="p1">**</ept> Cmdlet 可讓您使用萬用字元作為其 <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> 參數的值。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This lets you display detailed information.</source>
          <target state="translated">這可讓您顯示詳細資訊。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Often, objects include more information than you need, which is why Windows PowerShell does not show all property values by default.</source>
          <target state="translated">通常，物件所含的資訊會比您需要的資訊還要多，這是 Windows PowerShell 預設未顯示所有屬性值的原因。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To show all of properties of an object, use the <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>List <ph id="ph2">\-</ph>Property <ph id="ph3">\&amp;</ph>#42;<ept id="p1">**</ept> command.</source>
          <target state="translated">若要顯示物件的所有屬性，請使用 <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>List <ph id="ph2">\-</ph>Property <ph id="ph3">\&amp;</ph>#42;<ept id="p1">**</ept> 命令。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following command generates over 60 lines of output for a single process:</source>
          <target state="translated">下列命令會針對單一處理程序產生 60 行以上的輸出︰</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although the <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>List<ept id="p1">**</ept> command is useful for showing detail, if you want an overview of output that includes many items, a simpler tabular view is often more useful.</source>
          <target state="translated">雖然 <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>List<ept id="p1">**</ept> 命令適用於顯示詳細資訊，但是，如果您想要輸出包括許多項目的概觀，則較簡單的表格式檢視通常更為有用。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Using Format<ph id="ph1">\-</ph>Table for Tabular Output</source>
          <target state="translated">針對表格式輸出使用 Format<ph id="ph1">\-</ph>Table</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> cmdlet with no property names specified to format the output of the <bpt id="p2">**</bpt>Get<ph id="ph2">\-</ph>Process<ept id="p2">**</ept> command, you get exactly the same output as you do without performing any formatting.</source>
          <target state="translated">如果您使用未指定屬性名稱的 <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> Cmdlet 來格式化 <bpt id="p2">**</bpt>Get<ph id="ph2">\-</ph>Process<ept id="p2">**</ept> 命令的輸出，則收到的輸出會與未執行任何格式化所收到的輸出完全相同。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The reason is that processes are usually displayed in a tabular format, as are most Windows PowerShell objects.</source>
          <target state="translated">原因是處理程序通常會以表格式格式顯示，這與大部分的 Windows PowerShell 物件一樣。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Improving Format<ph id="ph1">\-</ph>Table Output (AutoSize)</source>
          <target state="translated">改善 Format<ph id="ph1">\-</ph>Table 輸出 (AutoSize)</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Although a tabular view is useful for displaying a lot of comparable information, it may be difficult to interpret if the display is too narrow for the data.</source>
          <target state="translated">雖然表格式檢視適用於顯示許多類似資訊，但是可能難以解譯顯示是否太窄無法顯示資料。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, if you try to display process path, ID, name, and company, you get truncated output for the process path and the company column:</source>
          <target state="translated">例如，如果您嘗試顯示處理程序路徑、識別碼、名稱和公司，則會截斷處理程序路徑和公司資料行的輸出︰</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you specify the <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> parameter when you run the <bpt id="p2">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p2">**</ept> command, Windows PowerShell will calculate column widths based on the actual data you are going to display.</source>
          <target state="translated">如果您在執行 <bpt id="p2">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p2">**</ept> 命令時指定 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> 參數，則 Windows PowerShell 會根據您要顯示的實際資料來計算資料行寬度。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This makes the <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> column readable, but the company column remains truncated:</source>
          <target state="translated">這讓 <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> 資料行更容易閱讀，但是仍然會截斷公司資料行︰</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> cmdlet might still truncate data, but it will only do so at the end of the screen.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> Cmdlet 可能仍然會截斷資料，但是只會在畫面結尾才這麼做。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Properties, other than the last one displayed, are given as much size as they need for their longest data element to display correctly.</source>
          <target state="translated">如果屬性不是最後一個顯示的屬性，則會提供其所需的大小來正確顯示其最長的資料元素。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can see that company name is visible but path is truncated if you swap the locations of <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Company<ept id="p2">**</ept> in the <bpt id="p3">**</bpt>Property<ept id="p3">**</ept> value list:</source>
          <target state="translated">如果您在 <bpt id="p3">**</bpt>Property<ept id="p3">**</ept> 值清單中交換 <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>Company<ept id="p2">**</ept> 的位置，則可以看到顯示公司名稱，但截斷路徑：</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> command assumes that the nearer a property is to the beginning of the property list, the more important it is.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> 命令假設屬性越接近屬性清單開頭，就越重要。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>So it attempts to display the properties nearest the beginning completely.</source>
          <target state="translated">因此，它會嘗試完整顯示最接近開頭的屬性。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> command cannot display all the properties, it will remove some columns from the display and provide a warning.</source>
          <target state="translated">如果 <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> 命令無法顯示所有屬性，則會從顯示中移除一些資料行，並提供警告。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can see this behavior if you make <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> the last property in the list:</source>
          <target state="translated">如果您將 <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> 設為清單中的最後一個屬性，則可以看到這項行為：</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the output above, the ID column is truncated to make it fit into the listing, and the column headings are stacked up.</source>
          <target state="translated">在上面的輸出中，會截斷識別碼資料行，以將其放入清單中，並堆疊資料行標題。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Automatically resizing the columns does not always do what you want.</source>
          <target state="translated">自動重新調整資料行大小，不一定會執行您要的作業。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Wrapping Format<ph id="ph1">\-</ph>Table Output in Columns (Wrap)</source>
          <target state="translated">在資料行中讓 Format<ph id="ph1">\-</ph>Table 換行 (Wrap)</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can force lengthy <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> data to wrap within its display column by using the <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> parameter.</source>
          <target state="translated">您可以使用 <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> 參數，強制冗長的 <bpt id="p1">**</bpt>Format<ph id="ph1">\-</ph>Table<ept id="p1">**</ept> 資料在其顯示資料行中換行。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> parameter alone will not necessarily do what you expect, since it uses default settings if you do not also specify <bpt id="p2">**</bpt>AutoSize<ept id="p2">**</ept>:</source>
          <target state="translated">因為未一併指定 <bpt id="p2">**</bpt>AutoSize<ept id="p2">**</ept> 時會使用預設設定，所以單獨使用 <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> 參數不一定會執行您預期的作業：</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An advantage of using the <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> parameter by itself is that it does not slow down processing very much.</source>
          <target state="translated">單獨使用 <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> 參數的優點是不會讓處理變的太慢。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you perform a recursive file listing of a large directory system, it might take a very long time and use a lot of memory before displaying the first output items if you use <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept>.</source>
          <target state="translated">如果您執行大型目錄系統的遞迴檔案清單，則使用 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> 時，可能需要很長的時間，並會在顯示第一個輸出項目之前使用大量記憶體。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you are not concerned about system load, then <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> works well with the <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> parameter.</source>
          <target state="translated">如果您不在意系統負載，則搭配使用 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> 與 <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> 參數的運作效果極佳。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The initial columns are always allotted as much width as they need to display items on one line, just as when you specify <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> without the <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> parameter.</source>
          <target state="translated">初始資料行一律會獲分配在一行上顯示項目所需的寬度，就像指定沒有 <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> 參數的 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> 一樣。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The only difference is that the final column will be wrapped if necessary:</source>
          <target state="translated">唯一的差異在於，必要時會讓最後一個資料行換行︰</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Some columns might not be displayed if you specify the widest columns first, so it is safest to specify the smallest data elements first.</source>
          <target state="translated">如果您先指定最寬的資料行，則可能不會顯示部分資料行，因此最安全的方式是先指定最小的資料元素。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the following example, we specify the extremely wide path element first, and even with wrapping, we still lose the final <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> column:</source>
          <target state="translated">在下列範例中，我們先指定極寬的路徑元素，甚至進行換行，但仍然遺失最後的 <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> 資料行︰</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Organizing Table Output (<ph id="ph1">\-</ph>GroupBy)</source>
          <target state="translated">組織資料表輸出 (<ph id="ph1">\-</ph>GroupBy)</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Another useful parameter for tabular output control is <bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept>.</source>
          <target state="translated">表格式輸出控制項的另一個有用參數是 <bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Longer tabular listings in particular may be hard to compare.</source>
          <target state="translated">較長的表格式清單尤其很難進行比較。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept> parameter groups output based on a property value.</source>
          <target state="translated"><bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept> 參數會根據屬性值將輸出群組在一起。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, we can group processes by company for easier inspection, omitting the company value from the property listing:</source>
          <target state="translated">例如，我們可以依據公司將處理程序群組在一起，並省略屬性清單中的公司值，讓公司更容易進行檢查︰</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>