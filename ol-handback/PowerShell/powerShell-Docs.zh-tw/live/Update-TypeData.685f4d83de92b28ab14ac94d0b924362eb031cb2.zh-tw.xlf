<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">69f56cea389f098833d17c19f1aa4fbe77875224</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Update-TypeData.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">163da7fbabd34cdbc9c3f9b9740ed0bb69e61bab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0603ad451e66f134c242885aad378e51119079d6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Update-TypeData</source>
          <target state="translated">Update-TypeData</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Update-TypeData</source>
          <target state="translated">Update-TypeData</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Updates the extended type data in the session.</source>
          <target state="translated">更新工作階段中的延伸類型資料。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>FileSet (Default)</source>
          <target state="translated">FileSet （預設值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>DynamicTypeSet</source>
          <target state="translated">DynamicTypeSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>TypeDataSet</source>
          <target state="translated">TypeDataSet</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> cmdlet updates the extended type data in the session by reloading the Types.ps1xml files into memory and adding new extended type data.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 指令程式更新工作階段中的延伸的類型資料的 Types.ps1xml 檔案重新載入記憶體並新增延伸類型資料。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By default, Windows PowerShell loads extended type data as it is needed.</source>
          <target state="translated">依預設，Windows PowerShell 會在需要時載入延伸類型資料。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Without parameters, <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> reloads all of the Types.ps1xml files that it has loaded in the session, including any type files that you added.</source>
          <target state="translated">如果沒有參數， <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 重新載入所有工作階段，包括您新增的任何類型檔案中載入的 Types.ps1xml 檔案。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use the parameters of <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> to add new type files and add and replace extended type data.</source>
          <target state="translated">您可以使用的參數 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 新增類型檔案以及加入和取代延伸的類型資料。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> cmdlet can be used to preload all type data.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 指令程式可以用來預先載入所有型別資料。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This feature is particularly useful when you are developing types and want to load those new types for testing purposes.</source>
          <target state="translated">當您正在開發類型並且想要基於測試目的載入這些新的類型，這個功能就特別有用。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, you can use <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> to add and replace extended type data in the session without using a Types.ps1xml file.</source>
          <target state="translated">從 Windows PowerShell 3.0 開始，您可以使用 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 新增及取代工作階段中的延伸的類型資料，而不需要使用 Types.ps1xml 檔案。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Type data that is added dynamically, that is, without a file, is added only to the current session.</source>
          <target state="translated">動態方式加入的類型資料 (也就是不具有檔案) 僅新增到目前的工作階段。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To add the type data to all sessions, add an <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> command to your Windows PowerShell profile.</source>
          <target state="translated">若要加入的所有工作階段的型別資料，請新增 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 命令到您的 Windows PowerShell 設定檔。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see about_Profiles (http://go.microsoft.com/fwlink/?LinkID=113729).</source>
          <target state="translated">如需詳細資訊，請參閱 about_Profiles (http://go.microsoft.com/fwlink/?LinkID=113729)。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Also, beginning in Windows PowerShell 3.0, you can use the Get-TypeData cmdlet to get the extended types in the current session and the Remove-TypeData cmdlet to delete extended types from the current session.</source>
          <target state="translated">此外，透過從 Windows PowerShell 3.0 開始，您可以在目前的工作階段和 Remove-typedata cmdlet，從目前的工作階段刪除延伸的類型取得擴充的型別使用 Get-typedata 指令程式。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Exceptions that occur in properties, or from adding properties to an <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> command, do not report errors to StdErr.</source>
          <target state="translated">發生在屬性中，或將屬性新增到的例外狀況 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 命令，不報告錯誤給 StdErr。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is to suppress exceptions that would occur in many common types during formatting and outputting.</source>
          <target state="translated">這是為了在進行格式化與輸出期間，抑制在許多常見類型中可能會出現的例外狀況。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you are getting .NET Framework properties, you can work around the suppression of exceptions by using method syntax instead, as shown in the following example:</source>
          <target state="translated">如果您要取得 .NET Framework 屬性，您可以改用方法語法來避開例外狀況的抑制，如下列範例所示：</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that method syntax can only be used with .NET Framework properties.</source>
          <target state="translated">請注意方法語法只可以使用於 .NET Framework 屬性。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Properties that are added by running the <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> cmdlet cannot use method syntax.</source>
          <target state="translated">加入執行屬性 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 指令程式不能使用方法語法。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information about the *types.ps1xml files in Windows PowerShell, see about_Types.ps1xml (http://technet.microsoft.com/library/hh847881.aspx).</source>
          <target state="translated">如需 Windows PowerShell 中 * types.ps1xml 檔案的詳細資訊，請參閱 about_Types.ps1xml (http://technet.microsoft.com/library/hh847881.aspx)。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example 1: Update extended types</source>
          <target state="translated">範例 1︰ 更新擴充型別</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This command updates the extended type configuration from the *.types.ps1xml files that have already been used in the session.</source>
          <target state="translated">此命令會更新已經使用在工作階段中之 *.types.ps1xml 檔案的延伸類型設定。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example 2: Update types multiple times</source>
          <target state="translated">範例 2︰ 更新的型別多次</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This example shows how to update the types in a type file multiple times in the same session.</source>
          <target state="translated">這個範例示範如何在相同的工作階段中多次更新類型檔案中的類型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 3: Add a script property to DateTime objects</source>
          <target state="translated">範例 3︰ 將指令碼屬性加入至日期時間物件</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example uses <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> to add the Quarter script property to <bpt id="p2">**</bpt>System.DateTime<ept id="p2">**</ept> objects in the current session, such as those returned by the Get-Date cmdlet.</source>
          <target state="translated">這個範例會使用 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 到 Quarter 指令碼將屬性新增至 <bpt id="p2">**</bpt>System.DateTime<ept id="p2">**</ept> 中目前的工作階段，例如 Get-date 指令程式所傳回的物件。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> command uses the <bpt id="p2">*</bpt>TypeName<ept id="p2">*</ept> parameter to specify <bpt id="p3">**</bpt>the System.DateTime<ept id="p3">**</ept> type, the <bpt id="p4">*</bpt>MemberName<ept id="p4">*</ept> parameter to specify a name for the new property, the MemberType property to specify the ScriptProperty type, and the <bpt id="p5">*</bpt>Value<ept id="p5">*</ept> parameter to specify the script that determines the annual quarter.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 命令會使用 <bpt id="p2">*</bpt>TypeName<ept id="p2">*</ept> 參數來指定 <bpt id="p3">**</bpt>System.DateTime<ept id="p3">**</ept> 型別， <bpt id="p4">*</bpt>MemberName<ept id="p4">*</ept> 參數來指定新屬性，指定 ScriptProperty 類型和 MemberType 屬性的名稱和 <bpt id="p5">*</bpt>值<ept id="p5">*</ept> 參數來指定決定年度季別的指令碼。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The value of the Value property is a script that calculates the current annual quarter.</source>
          <target state="translated">Value 屬性的值是計算目前年度季別的指令碼。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The script block uses the $this automatic variable to represent the current instance of the object and the In operator to determine whether the month value appears in each integer array.</source>
          <target state="translated">指令碼區塊會使用 $this 自動變數來代表目前的執行個體的物件並使用 In 運算子來決定月份值是否出現在各個整數陣列。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information about the In operator, see about_Comparison_Operators (http://go.microsoft.com/fwlink/?LinkID=113217).</source>
          <target state="translated">如需有關 In 運算子的詳細資訊，請參閱 about_Comparison_Operators (http://go.microsoft.com/fwlink/?LinkID=113217)。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The second command gets the new Quarter property of the current date.</source>
          <target state="translated">第二個命令會取得目前日期的新 Quarter 屬性。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example 4: Update a type that displays in lists by default</source>
          <target state="translated">範例 4︰ 更新預設會顯示在清單中的型別</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This example shows how to set the properties of a type that displays in lists by default, that is, when no properties are specified.</source>
          <target state="translated">這個範例示範如何設定預設會顯示在清單中，也就是當未不指定任何內容類型的屬性。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because the type data is not specified in a Types.ps1xml file, it is effective only in the current session.</source>
          <target state="translated">因為類型資料不是指定在 Types.ps1xml 檔案中，所以只有在目前的工作階段中有效。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> cmdlet to set the default list properties for the <bpt id="p2">**</bpt>System.DateTime<ept id="p2">**</ept> type.</source>
          <target state="translated">第一個命令使用 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 指令程式可設定的預設清單屬性 <bpt id="p2">**</bpt>System.DateTime<ept id="p2">**</ept> 型別。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>TypeName<ept id="p1">*</ept> parameter to specify the type and the <bpt id="p2">*</bpt>DefaultDisplayPropertySet<ept id="p2">*</ept> parameter to specify the default properties for a list.</source>
          <target state="translated">此命令會使用 <bpt id="p1">*</bpt>TypeName<ept id="p1">*</ept> 參數指定的型別和 <bpt id="p2">*</bpt>DefaultDisplayPropertySet<ept id="p2">*</ept> 參數來指定清單的預設屬性。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The selected properties include the new Quarter script property that was added in a previous example.</source>
          <target state="translated">選取的屬性包含上一個範例中已新增的新 Quarter 指令碼屬性。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The second command uses the Get-Date cmdlet to get a <bpt id="p1">**</bpt>System.DateTime<ept id="p1">**</ept> object that represents the current date.</source>
          <target state="translated">第二個命令使用 Get-date cmdlet 取得 <bpt id="p1">**</bpt>System.DateTime<ept id="p1">**</ept> 物件，代表目前的日期。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The command uses a pipeline operator (|) to send the <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> object to the Format-List cmdlet.</source>
          <target state="translated">命令使用管線運算子 (|) 將傳送 <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> Format-list 指令程式的物件。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> command does not specify the properties to display in the list, Windows PowerShell uses the default values that were established by the <bpt id="p2">**</bpt>Update-TypeData<ept id="p2">**</ept> command.</source>
          <target state="translated">因為 <bpt id="p1">**</bpt>Format-list<ept id="p1">**</ept> 命令未指定要顯示在清單中的屬性，Windows PowerShell 會使用所建立的預設值 <bpt id="p2">**</bpt>Update-typedata<ept id="p2">**</ept> 命令。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example 5: Update type data for a piped object</source>
          <target state="translated">範例 5︰ 更新類型資料管線的物件</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This example demonstrates that when you pipe an object to <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Update-TypeData<ept id="p2">**</ept> adds extended type data for the object type.</source>
          <target state="translated">這個範例示範當您使用管線傳送物件 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>Update-typedata<ept id="p2">**</ept> 新增延伸的類型資料的物件型別。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This technique is quicker than using the Get-Member cmdlet or the <bpt id="p1">**</bpt>Get-Type<ept id="p1">**</ept> method to get the object type.</source>
          <target state="translated">這項技術會快於使用 Get-member 指令程式或 <bpt id="p1">**</bpt>Get-type<ept id="p1">**</ept> 方法來取得物件類型。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, if you pipe a collection of objects to <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept>, it updates the type data of the first object type and then returns an error for all other objects in the collection because the member is already defined on the type.</source>
          <target state="translated">不過，如果您使用管線傳送至物件的集合 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept>, ，它更新的第一個物件類型的類型資料，然後傳回集合中所有其他物件發生錯誤，因為成員已定義型別上。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Module cmdlet to get the PSScheduledJob module.</source>
          <target state="translated">第一個命令使用 Get-module cmdlet 取得 PSScheduledJob 模組。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The command pipes the module object to the <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> cmdlet, which updates the type data for the <bpt id="p2">**</bpt>System.Management.Automation.PSModuleInfo<ept id="p2">**</ept> type and the types derived from it, such as the ModuleInfoGrouping type that <bpt id="p3">**</bpt>Get-Module<ept id="p3">**</ept> returns when you use the <bpt id="p4">*</bpt>ListAvailable<ept id="p4">*</ept> parameter in the command.</source>
          <target state="translated">此命令將模組物件輸送到 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 指令程式，以更新的類型資料 <bpt id="p2">**</bpt>System.Management.Automation.PSModuleInfo<ept id="p2">**</ept> 型別和型別從其衍生，例如 ModuleInfoGrouping 類型 <bpt id="p3">**</bpt>Get-module<ept id="p3">**</ept> 傳回當您使用 <bpt id="p4">*</bpt>ListAvailable<ept id="p4">*</ept> 命令中的參數。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept> commands adds the <bpt id="p2">**</bpt>SupportsUpdatableHelp<ept id="p2">**</ept> script property to all imported modules.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept> 命令會新增 <bpt id="p2">**</bpt>SupportsUpdatableHelp<ept id="p2">**</ept> 指令碼匯入的所有模組的屬性。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">*</bpt>Value<ept id="p1">*</ept> parameter is a script that returns $True if the HelpInfoUri property of the module is populated and $False otherwise.</source>
          <target state="translated">值 <bpt id="p1">*</bpt>值<ept id="p1">*</ept> 參數是指令碼，否則會傳回 $True 如果已填入模組的 HelpInfoUri 屬性和 $False。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The second command pipes the module objects from <bpt id="p1">**</bpt>Get-Module<ept id="p1">**</ept> to the <bpt id="p2">**</bpt>Format-Table<ept id="p2">**</ept> cmdlet, which displays the Name and SupportsUpdatableHelp properties of all modules in a list.</source>
          <target state="translated">第二個命令使用管線傳送模組物件從 <bpt id="p1">**</bpt>Get-module<ept id="p1">**</ept> 至 <bpt id="p2">**</bpt>Format-table<ept id="p2">**</ept> 指令程式，以顯示所有模組的名稱和 SupportsUpdatableHelp 屬性清單中。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">參數</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>-AppendPath</source>
          <target state="translated">-AppendPath</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Specifies the path to optional .ps1xml files.</source>
          <target state="translated">指定選用的 .ps1xml 檔案的路徑。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The specified files are loaded in the order that they are listed after the built-in files are loaded.</source>
          <target state="translated">指定的檔案會依載入內建檔案之後所列出的順序載入。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can also pipe an <bpt id="p1">**</bpt>AppendPath<ept id="p1">**</ept> value to <bpt id="p2">**</bpt>Update-TypeData<ept id="p2">**</ept>.</source>
          <target state="translated">您也可以使用管線 <bpt id="p1">**</bpt>AppendPath<ept id="p1">**</ept> 值 <bpt id="p2">**</bpt>Update-typedata<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>-Confirm</source>
          <target state="translated">-Confirm</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Prompts you for confirmation before running the cmdlet.Prompts you for confirmation before running the cmdlet.</source>
          <target state="translated">會提示您進行確認，然後再執行此指令程式。會提示您進行確認，然後再執行此指令程式。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>-DefaultDisplayProperty</source>
          <target state="translated">-DefaultDisplayProperty</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Specifies the property of the type that is displayed by the Format-Wide cmdlet when no other properties are specified.</source>
          <target state="translated">不指定 Format-wide cmdlet 時顯示未指定任何其他內容類型的屬性。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Type the name of a standard or extended property of the type.</source>
          <target state="translated">輸入類型的標準或延伸屬性的名稱。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The value of this parameter can be the name of a type that is added in the same command.</source>
          <target state="translated">此參數的值可以是相同命令中新增之類型的名稱。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This value is effective only when there are no wide views defined for the type in a Format.ps1xml file.</source>
          <target state="translated">只有在 Format.ps1xml 檔案中的類型沒有定義寬幅檢視時，這個值才有效。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>-DefaultDisplayPropertySet</source>
          <target state="translated">-DefaultDisplayPropertySet</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Specifies one or more properties of the type.</source>
          <target state="translated">指定類型的一或多個屬性。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>These properties are displayed by the Format-List cmdlet when no other properties are specified.</source>
          <target state="translated">當未不指定任何其他內容，Format-list 指令程式會顯示這些屬性。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Type the names of standard or extended properties of the type.</source>
          <target state="translated">輸入類型的標準或延伸屬性的名稱。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The value of this parameter can be the names of types that are added in the same command.</source>
          <target state="translated">此參數的值可以是相同命令中新增之類型的名稱。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This value is effective only when there are no list views defined for the type in a Format.ps1xml file.</source>
          <target state="translated">只有在 Format.ps1xml 檔案中的類型沒有定義清單檢視時，這個值才有效。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>-DefaultKeyPropertySet</source>
          <target state="translated">-DefaultKeyPropertySet</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Specifies one or more properties of the type.</source>
          <target state="translated">指定類型的一或多個屬性。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>These properties are used by the Group-Object and Sort-Object cmdlets when no other properties are specified.</source>
          <target state="translated">當未不指定任何其他內容的群組物件和 Sort-object cmdlet 會使用這些屬性。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Type the names of standard or extended properties of the type.</source>
          <target state="translated">輸入類型的標準或延伸屬性的名稱。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The value of this parameter can be the names of types that are added in the same command.</source>
          <target state="translated">此參數的值可以是相同命令中新增之類型的名稱。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Indicates that the cmdlet uses the specified type data, even if type data has already been specified for that type.</source>
          <target state="translated">表示此指令程式會使用指定的型別資料，即使該型別已指定型別資料。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>-InheritPropertySerializationSet</source>
          <target state="translated">-InheritPropertySerializationSet</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Indicates whether the set of properties that are serialized is inherited.</source>
          <target state="translated">指出是否要繼承已序列化的屬性集。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The default value is $Null.</source>
          <target state="translated">預設值是 $Null。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">此參數接受的值包括：</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>$True.</source>
          <target state="translated">$True。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The property set is inherited.</source>
          <target state="translated">已繼承屬性集。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>$False.</source>
          <target state="translated">$False。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The property set is not inherited.</source>
          <target state="translated">未繼承屬性集。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>$Null.</source>
          <target state="translated">$Null。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Inheritance is not defined.</source>
          <target state="translated">未定義繼承。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This parameter is valid only when the value of the <bpt id="p1">*</bpt>SerializationMethod<ept id="p1">*</ept> parameter is SpecificProperties.</source>
          <target state="translated">這個參數是時才有效的值 <bpt id="p1">*</bpt>SerializationMethod<ept id="p1">*</ept> 參數是 SpecificProperties。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When the value of this parameter is $False, the <bpt id="p1">*</bpt>PropertySerializationSet<ept id="p1">*</ept> parameter is required.</source>
          <target state="translated">此參數的值時 $False， <bpt id="p1">*</bpt>PropertySerializationSet<ept id="p1">*</ept> 是必要參數。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>-MemberName</source>
          <target state="translated">-MemberName</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Specifies the name of a property or method.</source>
          <target state="translated">指定屬性或方法的名稱。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">*</bpt>TypeName<ept id="p1">*</ept>, <bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Value<ept id="p3">*</ept> and <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此參數與 <bpt id="p1">*</bpt>TypeName<ept id="p1">*</ept>, ，<bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, ，<bpt id="p3">*</bpt>值<ept id="p3">*</ept> 和 <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> 參數，新增或變更屬性或方法的型別。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>-MemberType</source>
          <target state="translated">-MemberType</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Specifies the type of the member to add or change.</source>
          <target state="translated">指定要新增或變更的成員類型。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">*</bpt>TypeName<ept id="p1">*</ept>, <bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Value<ept id="p3">*</ept> and <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此參數與 <bpt id="p1">*</bpt>TypeName<ept id="p1">*</ept>, ，<bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, ，<bpt id="p3">*</bpt>值<ept id="p3">*</ept> 和 <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> 參數，新增或變更屬性或方法的型別。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">此參數接受的值包括：</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>AliasProperty</source>
          <target state="translated">AliasProperty</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CodeMethod</source>
          <target state="translated">CodeMethod</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CodeProperty</source>
          <target state="translated">CodeProperty</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Noteproperty</source>
          <target state="translated">Noteproperty</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>ScriptMethod</source>
          <target state="translated">ScriptMethod</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>ScriptProperty</source>
          <target state="translated">ScriptProperty</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For information about these values, see PSMemberTypes Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.psmembertypes(v=vs.85).aspx (http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.psmembertypes(v=vs.85).aspx) in MSDN.</source>
          <target state="translated">這些值的相關資訊，請參閱 PSMemberTypes Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.psmembertypes (vs.85 (在 MSDN http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.psmembertypes (vs.85)。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>-PrependPath</source>
          <target state="translated">-PrependPath</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Specifies the path to the optional .ps1xml files.</source>
          <target state="translated">指定選用的 .ps1xml 檔案的路徑。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The specified files are loaded in the order that they are listed before the built-in files are loaded.</source>
          <target state="translated">指定的檔案會依載入內建檔案之前所列出的順序載入。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>-PropertySerializationSet</source>
          <target state="translated">-PropertySerializationSet</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Specifies the names of properties that are serialized.</source>
          <target state="translated">指定已序列化的屬性名稱。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Use this parameter when the value of the <bpt id="p1">*</bpt>SerializationMethod<ept id="p1">*</ept> parameter is <bpt id="p2">**</bpt>SpecificProperties<ept id="p2">**</ept>.</source>
          <target state="translated">使用此參數時的值 <bpt id="p1">*</bpt>SerializationMethod<ept id="p1">*</ept> 參數是 <bpt id="p2">**</bpt>SpecificProperties<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>-SecondValue</source>
          <target state="translated">-SecondValue</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Specifies additional values for <bpt id="p1">**</bpt>AliasProperty<ept id="p1">**</ept>, <bpt id="p2">**</bpt>ScriptProperty<ept id="p2">**</ept>, <bpt id="p3">**</bpt>CodeProperty<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>CodeMethod<ept id="p4">**</ept> members.</source>
          <target state="translated">指定其他值 <bpt id="p1">**</bpt>AliasProperty<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>ScriptProperty<ept id="p2">**</ept>, ，<bpt id="p3">**</bpt>CodeProperty<ept id="p3">**</ept>, ，或 <bpt id="p4">**</bpt>CodeMethod<ept id="p4">**</ept> 成員。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">*</bpt>TypeName<ept id="p1">*</ept>, <bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Value<ept id="p3">*</ept>, and <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此參數與 <bpt id="p1">*</bpt>TypeName<ept id="p1">*</ept>, ，<bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, ，<bpt id="p3">*</bpt>值<ept id="p3">*</ept>, ，和 <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> 參數，新增或變更屬性或方法的型別。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When the value of the <bpt id="p1">*</bpt>MemberType<ept id="p1">*</ept> parameter is AliasProperty, the value of the <bpt id="p2">*</bpt>SecondValue<ept id="p2">*</ept> parameter must be a data type.</source>
          <target state="translated">時數 <bpt id="p1">*</bpt>MemberType<ept id="p1">*</ept> 參數是 AliasProperty，值 <bpt id="p2">*</bpt>SecondValue<ept id="p2">*</ept> 參數必須是資料型別。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Windows PowerShell converts (that is, casts) the value of the alias property to the specified type.</source>
          <target state="translated">Windows PowerShell 轉換 （也就是轉型） 為指定型別的別名屬性的值。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For example, if you add an alias property that provides an alternate name for a string property, you can also specify a <bpt id="p1">**</bpt>SecondValue<ept id="p1">**</ept> of System.Int32 to convert the aliased string value to an integer.</source>
          <target state="translated">例如，如果您加入提供替代名稱的字串屬性的別名屬性，您也可以指定 <bpt id="p1">**</bpt>SecondValue<ept id="p1">**</ept> 的 System.Int32 別名字串值轉換成整數。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>When the value of the <bpt id="p1">*</bpt>MemberType<ept id="p1">*</ept> parameter is ScriptProperty, you can use the <bpt id="p2">*</bpt>SecondValue<ept id="p2">*</ept> parameter to specify an additional script block.</source>
          <target state="translated">時數 <bpt id="p1">*</bpt>MemberType<ept id="p1">*</ept> 參數為 ScriptProperty，您可以使用 <bpt id="p2">*</bpt>SecondValue<ept id="p2">*</ept> 參數來指定其他指令碼區塊。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The script block in the value of the <bpt id="p1">*</bpt>Value<ept id="p1">*</ept> parameter gets the value of a variable.</source>
          <target state="translated">指令碼區塊中的值 <bpt id="p1">*</bpt>值<ept id="p1">*</ept> 參數取得變數的值。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The script block in the value of the <bpt id="p1">*</bpt>SecondValue<ept id="p1">*</ept> parameter set the value of the variable.</source>
          <target state="translated">指令碼區塊中的值 <bpt id="p1">*</bpt>SecondValue<ept id="p1">*</ept> 參數設定變數的值。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>-SerializationDepth</source>
          <target state="translated">-SerializationDepth</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Specifies how many levels of type objects are serialized as strings.</source>
          <target state="translated">指定要將多少層的類型物件序列化為字串。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The default value, 1, serializes the object and its properties.</source>
          <target state="translated">預設值 1 會序列化物件和其屬性。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A value of 0 serializes the object, but not its properties.</source>
          <target state="translated">值 0 會序列化物件，但不序列化其屬性。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A value of 2 serializes the object, its properties, and any objects in property values.</source>
          <target state="translated">值 2 會序列化物件、其屬性與屬性值中的任何物件。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>-SerializationMethod</source>
          <target state="translated">-SerializationMethod</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Specifies a serialization method for the type.</source>
          <target state="translated">指定類型的序列化方法。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A serialization method determines which properties of the type are serialized and the technique that is used to serialize them.</source>
          <target state="translated">序列化方法決定哪些類型的屬性會序列化，以及用來序列化它們的技術。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">此參數接受的值包括：</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>AllPublicProperties.</source>
          <target state="translated">AllPublicProperties。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Serialize all public properties of the type.</source>
          <target state="translated">序列化類型的所有公用屬性。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>SerializationDepth<ept id="p1">**</ept> parameter to determine whether child properties are serialized.</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>SerializationDepth<ept id="p1">**</ept> 參數，來判斷是否要序列化子屬性。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>String.</source>
          <target state="translated">字串。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Serialize the type as a string.</source>
          <target state="translated">將類型序列化為字串。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>StringSerializationSource<ept id="p1">**</ept> to specify a property of the type to use as the serialization result.</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>StringSerializationSource<ept id="p1">**</ept> 來指定要做為序列化結果類型的屬性。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Otherwise, the type is serialized by using the <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> method of the object.</source>
          <target state="translated">否則，使用序列化的型別 <bpt id="p1">**</bpt>ToString<ept id="p1">**</ept> 物件的方法。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>SpecificProperties.</source>
          <target state="translated">SpecificProperties。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Serialize only the specified properties of this type.</source>
          <target state="translated">序列化此類型的指定的屬性。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">*</bpt>PropertySerializationSet<ept id="p1">*</ept> parameter to specify the properties of the type that are serialized.</source>
          <target state="translated">使用 <bpt id="p1">*</bpt>PropertySerializationSet<ept id="p1">*</ept> 參數來指定序列化的型別屬性。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">*</bpt>InheritPropertySerializationSet<ept id="p1">*</ept> parameter to determine whether the property set is inherited and the <bpt id="p2">*</bpt>SerializationDepth<ept id="p2">*</ept> parameter to determine whether child properties are serialized.</source>
          <target state="translated">您也可以使用 <bpt id="p1">*</bpt>InheritPropertySerializationSet<ept id="p1">*</ept> 參數，來判斷是否要繼承屬性集和 <bpt id="p2">*</bpt>SerializationDepth<ept id="p2">*</ept> 參數，來判斷是否要序列化子屬性。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, serialization methods are stored in <bpt id="p1">**</bpt>PSStandardMembers<ept id="p1">**</ept> internal objects.</source>
          <target state="translated">在 Windows PowerShell 中，序列化方法會儲存在 <bpt id="p1">**</bpt>PSStandardMembers<ept id="p1">**</ept> 內部物件。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>-StringSerializationSource</source>
          <target state="translated">-StringSerializationSource</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Specifies the name of a property of the type.</source>
          <target state="translated">指定類型的屬性名稱。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The value of specified property is used as the serialization result.</source>
          <target state="translated">指定屬性的值可做為序列化結果。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This parameter is valid only when the value of the <bpt id="p1">*</bpt>SerializationMethod<ept id="p1">*</ept> parameter is String.</source>
          <target state="translated">這個參數是時才有效的值 <bpt id="p1">*</bpt>SerializationMethod<ept id="p1">*</ept> 參數是字串。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>-TargetTypeForDeserialization</source>
          <target state="translated">-TargetTypeForDeserialization</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Specifies the type to which object of this type are converted when they are deserialized.</source>
          <target state="translated">指定此類型物件還原序列化時所轉換成為的類型。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>-TypeAdapter</source>
          <target state="translated">-TypeAdapter</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Specifies the type of a type adapter, such as <bpt id="p1">**</bpt>Microsoft.PowerShell.Cim.CimInstanceAdapter<ept id="p1">**</ept>.</source>
          <target state="translated">指定的型別配接器類型，例如 <bpt id="p1">**</bpt>Microsoft.PowerShell.Cim.CimInstanceAdapter<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A type adapter enables Windows PowerShell to get the members of a type.</source>
          <target state="translated">類型配接器可讓 Windows PowerShell 取得類型的成員。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>-TypeConverter</source>
          <target state="translated">-TypeConverter</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Specifies a type converter to convert values between different types.</source>
          <target state="translated">指定類型轉換器來轉換不同類型之間的值。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>If a type converter is defined for a type, an instance of the type converter is used for the conversion.</source>
          <target state="translated">如果定義了類型的類型轉換器，類型轉換器的執行個體將會用於轉換。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Enter a <bpt id="p1">**</bpt>System.Type<ept id="p1">**</ept> value that is derived from the <bpt id="p2">**</bpt>System.ComponentModel.TypeConverter<ept id="p2">**</ept> or <bpt id="p3">**</bpt>System.Management.Automation.PSTypeConverter<ept id="p3">**</ept> classes.</source>
          <target state="translated">輸入 <bpt id="p1">**</bpt>System.Type<ept id="p1">**</ept> 值衍生自 <bpt id="p2">**</bpt>System.ComponentModel.TypeConverter<ept id="p2">**</ept> 或 <bpt id="p3">**</bpt>System.type<ept id="p3">**</ept> 類別。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>-TypeData</source>
          <target state="translated">-TypeData</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Specifies an array of type data that this cmdlet adds to the session.</source>
          <target state="translated">指定這個指令程式新增至工作階段的型別資料的陣列。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains a <bpt id="p1">**</bpt>TypeData<ept id="p1">**</ept> object or a command that gets a <bpt id="p2">**</bpt>TypeData<ept id="p2">**</ept> object, such as a Get-TypeData command.</source>
          <target state="translated">輸入變數，其中包含 <bpt id="p1">**</bpt>TypeData<ept id="p1">**</ept> 物件或取得命令 <bpt id="p2">**</bpt>TypeData<ept id="p2">**</ept> 物件，例如 Get-typedata 命令。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>You can also pipe a <bpt id="p1">**</bpt>TypeData<ept id="p1">**</ept> object to <bpt id="p2">**</bpt>Update-TypeData<ept id="p2">**</ept>.</source>
          <target state="translated">您也可以使用管線 <bpt id="p1">**</bpt>TypeData<ept id="p1">**</ept> 物件傳遞給 <bpt id="p2">**</bpt>Update-typedata<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>-TypeName</source>
          <target state="translated">-TypeName</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Specifies the name of the type to extend.</source>
          <target state="translated">指定要延伸的類型名稱。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For types in the <bpt id="p1">**</bpt>System<ept id="p1">**</ept> namespace, enter the short name.</source>
          <target state="translated">在別的 <bpt id="p1">**</bpt>系統<ept id="p1">**</ept> 命名空間中，輸入簡短名稱。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Otherwise, the full type name is required.</source>
          <target state="translated">否則，需要完整類型名稱。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Wildcards are not supported.</source>
          <target state="translated">不支援萬用字元。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>You can pipe type names to <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept>.</source>
          <target state="translated">您可以透過管道傳送至型別名稱 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>When you pipe an object to <bpt id="p1">**</bpt>Update-TypeData<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Update-TypeData<ept id="p2">**</ept> gets the type name of the object and type data to the object type.</source>
          <target state="translated">當您使用管線傳送物件 <bpt id="p1">**</bpt>Update-typedata<ept id="p1">**</ept>, ，<bpt id="p2">**</bpt>Update-typedata<ept id="p2">**</ept> 取得的物件和型別資料的型別名稱的物件型別。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">*</bpt>MemberName<ept id="p1">*</ept>, <bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Value<ept id="p3">*</ept> and <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此參數與 <bpt id="p1">*</bpt>MemberName<ept id="p1">*</ept>, ，<bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, ，<bpt id="p3">*</bpt>值<ept id="p3">*</ept> 和 <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> 參數，新增或變更屬性或方法的型別。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>-Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Specifies the value of the property or method.</source>
          <target state="translated">指定屬性或方法的值。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If you add an AliasProperty, CodeProperty, ScriptProperty, or CodeMethod member, you can use the <bpt id="p1">*</bpt>SecondValue<ept id="p1">*</ept> parameter to add additional information.</source>
          <target state="translated">如果您新增 AliasProperty、 CodeProperty、 ScriptProperty、 或 CodeMethod 的成員，您可以使用 <bpt id="p1">*</bpt>SecondValue<ept id="p1">*</ept> 參數，以新增其他的資訊。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Use this parameter with the <bpt id="p1">*</bpt>MemberName<ept id="p1">*</ept>, <bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Value<ept id="p3">*</ept> and <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> parameters to add or change a property or method of a type.</source>
          <target state="translated">使用此參數與 <bpt id="p1">*</bpt>MemberName<ept id="p1">*</ept>, ，<bpt id="p2">*</bpt>MemberType<ept id="p2">*</ept>, ，<bpt id="p3">*</bpt>值<ept id="p3">*</ept> 和 <bpt id="p4">*</bpt>SecondValue<ept id="p4">*</ept> 參數，新增或變更屬性或方法的型別。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>-WhatIf</source>
          <target state="translated">-WhatIf</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Shows what would happen if the cmdlet runs.</source>
          <target state="translated">顯示執行 Cmdlet 後會發生的情況。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.Shows what would happen if the cmdlet runs.</source>
          <target state="translated">無法執行此指令程式。顯示執行此指令程式會發生什麼事。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.</source>
          <target state="translated">未執行 Cmdlet。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">這個 cmdlet 支援一般參數:-偵錯、-ErrorAction、-ErrorVariable、-InformationAction-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 以及-WarningVariable。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">如需詳細資訊，請參閱 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">輸入</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>You can pipe a string that contains the values of the <bpt id="p1">*</bpt>AppendPath<ept id="p1">*</ept>, <bpt id="p2">*</bpt>TypeName<ept id="p2">*</ept>, or <bpt id="p3">*</bpt>TypeData<ept id="p3">*</ept> parameters to <bpt id="p4">**</bpt>Update-TypeData<ept id="p4">**</ept>.</source>
          <target state="translated">字串，其中包含的值可以透過管道傳送 <bpt id="p1">*</bpt>AppendPath<ept id="p1">*</ept>, ，<bpt id="p2">*</bpt>TypeName<ept id="p2">*</ept>, ，或 <bpt id="p3">*</bpt>TypeData<ept id="p3">*</ept> 參數 <bpt id="p4">**</bpt>Update-typedata<ept id="p4">**</ept>。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">輸出</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This cmdlet does not return any output.</source>
          <target state="translated">此 Cmdlet 不會傳回任何輸出。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">附註</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相關的連結</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Get-TypeData</source>
          <target state="translated">Get-TypeData</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Remove-TypeData</source>
          <target state="translated">Remove-TypeData</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>