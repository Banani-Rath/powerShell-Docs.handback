<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b34db3f79c3148bf0f32970c3b7d7e3ba252ae66</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04046aa" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Understanding Important Windows PowerShell Concepts</source>
          <target state="translated">了解 Windows PowerShell 重要概念</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Understanding Important Windows PowerShell Concepts</source>
          <target state="translated">了解 Windows PowerShell 重要概念</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Windows PowerShell design integrates concepts from many different environments.</source>
          <target state="translated">Windows PowerShell 設計整合許多不同環境的概念。</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Several of them are familiar to people with experience in specific shells or programming environments, but very few people will know about all of them.</source>
          <target state="translated">具有特定殼層或程式設計環境經驗的人員會熟悉其中一些概念，但只有極少數的人員才知道所有這些概念。</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Looking at some of these concepts provides a useful overview of the shell.</source>
          <target state="translated">查看其中一些概念，可提供有用的殼層概觀。</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Commands Are Not Text\-Based</source>
          <target state="translated">命令不是以文字為基礎</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Unlike traditional command\-line interface commands, Windows PowerShell cmdlets are designed to deal with objects \- structured information that is more than just a string of characters appearing on the screen.</source>
          <target state="translated">與傳統命令列介面命令不同，Windows PowerShell Cmdlet 設計成處理不只是畫面上所出現字串的物件結構化資訊。</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Command output always carries along extra information that you can use if you need it.</source>
          <target state="translated">命令輸出一律會攜帶您在需要時可使用的額外資訊。</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We will discuss this topic in depth in this document.</source>
          <target state="translated">我們將在本文件中深入討論此主題。</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you have used text\-processing tools to process command\-line data in the past, you will find that they behave differently if you try to use them in Windows PowerShell.</source>
          <target state="translated">如果您過去已經使用文字處理工具來處理命令列資料，則嘗試在 Windows PowerShell 中使用它們時會發現它們的行為不同。</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In most cases, you do not need text\-processing tools to extract specific information.</source>
          <target state="translated">在大部分情況下，您不需要文字處理工具擷取特定資訊。</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can access portions of the data directly by using standard Windows PowerShell object manipulation commands.</source>
          <target state="translated">您可以使用標準 Windows PowerShell 物件操作命令來直接存取資料的各部分。</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Command Family Is Extensible</source>
          <target state="translated">命令系列可進行擴充</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Interfaces such as Cmd.exe do not provide a way for you to directly extend the built\-in command set.</source>
          <target state="translated">Cmd.exe 這類介面未提供可讓您直接擴充內建命令集的方法。</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can create external command\-line tools that run in Cmd.exe, but these external tools do not have services, such as Help integration, and Cmd.exe does not automatically know that they are valid commands.</source>
          <target state="translated">您可以建立在 Cmd.exe 中執行的外部命令列工具，但這些外部工具沒有服務 (例如說明整合)，而且 Cmd.exe 不會自動得知它們是否為有效命令。</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The native binary commands in Windows PowerShell, known as <bpt id="p1">*</bpt>cmdlets<ept id="p1">*</ept> (pronounced command\-lets), can be augmented by cmdlets that you create and that you add to Windows PowerShell by using snap\-ins.</source>
          <target state="translated">您所建立的 Cmdlet 以及使用嵌入式管理單元新增至 Windows PowerShell 的 Cmdlet，可以增強 Windows PowerShell 中的原生二進位命令 (稱為 <bpt id="p1">*</bpt>Cmdlet<ept id="p1">*</ept>，唸成 command-let)。</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Windows PowerShell <bpt id="p1">*</bpt>snap\-ins<ept id="p1">*</ept> are compiled, just like binary tools in any other interface.</source>
          <target state="translated">Windows PowerShell <bpt id="p1">*</bpt>嵌入式管理單元<ept id="p1">*</ept>會進行編譯，就像任何其他介面中的二進位工具一樣。</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can use them to add Windows PowerShell providers to the shell, as well as new cmdlets.</source>
          <target state="translated">您可以使用它們將 Windows PowerShell 提供者新增至殼層，以及新的 Cmdlet。</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because of the special nature of the Windows PowerShell internal commands, we will refer to them as <bpt id="p1">*</bpt>cmdlets<ept id="p1">*</ept>.</source>
          <target state="translated">基於 Windows PowerShell 內部命令的特殊本質，我們將其稱為 <bpt id="p1">*</bpt>Cmdlet<ept id="p1">*</ept>。</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Windows PowerShell can run commands other than cmdlets.</source>
          <target state="translated">Windows PowerShell 可以執行 Cmdlet 以外的命令。</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>We will not be discussing them in detail in the Windows PowerShell User's Guide, but they are useful to know about as categories of command types.</source>
          <target state="translated">我們將不會在《Windows PowerShell 使用者手冊》中詳細討論它們，但它們對於了解命令類型類別十分有用。</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports scripts that are analogous to UNIX shell scripts and Cmd.exe batch files, but have a .ps1 file name extension.</source>
          <target state="translated">Windows PowerShell 支援與 UNIX 殼層指令碼和 Cmd.exe 批次檔類似的指令碼，但副檔名是 .ps1。</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Windows PowerShell also allows you to create internal functions that can be used directly in the interface or in scripts.</source>
          <target state="translated">Windows PowerShell 也可讓您建立可直接在介面或指令碼中使用的內部函式。</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Windows PowerShell Handles Console Input and Display</source>
          <target state="translated">Windows PowerShell 處理主控台輸入和顯示</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you type a command, Windows PowerShell always processes the command\-line input directly.</source>
          <target state="translated">當您輸入命令時，Windows PowerShell 一律會直接處理命令列輸入。</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Windows PowerShell also formats the output that you see on the screen.</source>
          <target state="translated">Windows PowerShell 也會格式化您在畫面上看到的輸出。</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is significant because it reduces the work required of each cmdlet and ensures that you can always do things the same way regardless of which cmdlet you are using.</source>
          <target state="translated">這十分重要，因為它會減少每個 Cmdlet 所需的工作，並確保您一律可以使用相同的方式來執行動作，而不管使用的 Cmdlet 為何。</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>One example of how this simplifies life for both tool developers and users is command\-line Help.</source>
          <target state="translated">如何簡化工具開發人員和使用者作業的其中一個範例是命令列說明。</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Traditional command\-line tools have their own schemes for requesting and displaying Help.</source>
          <target state="translated">傳統命令列工具有其專屬方法來要求和顯示說明。</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Some command\-line tools use <bpt id="p1">**</bpt>\/?<ept id="p1">**</ept></source>
          <target state="translated">部分命令列工具使用 <bpt id="p1">**</bpt>\/?<ept id="p1">**</ept></target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>to trigger the Help display; others use <bpt id="p1">**</bpt>\-?<ept id="p1">**</ept>, <bpt id="p2">**</bpt>\/H<ept id="p2">**</ept>, or even <bpt id="p3">**</bpt>\/\/<ept id="p3">**</ept>.</source>
          <target state="translated">來觸發說明顯示；其他則使用 <bpt id="p1">**</bpt>-?<ept id="p1">**</ept>、<bpt id="p2">**</bpt>\/H<ept id="p2">**</ept> 甚至 <bpt id="p3">**</bpt>\/\/<ept id="p3">**</ept>。</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Some will display Help in a GUI window, rather than in the console display.</source>
          <target state="translated">有一部分會在 GUI 視窗中顯示說明，而不是在主控台顯示中。</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Some complex tools, such as application updaters, unpack internal files before displaying their Help.</source>
          <target state="translated">有些複雜工具 (例如應用程式更新程式) 會先解壓縮內部檔案，再顯示其說明。</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you use the wrong parameter, the tool might ignore what you typed and begin performing a task automatically.</source>
          <target state="translated">如果您使用錯誤的參數，則工具可能會忽略您輸入的內容，並開始自動執行工作。</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you enter a command in Windows PowerShell, everything you enter is automatically parsed and pre\-processed by Windows PowerShell.</source>
          <target state="translated">當您在 Windows PowerShell 中輸入命令時，Windows PowerShell 會自動剖析並預先處理輸入的所有內容。</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">**</bpt>\-?<ept id="p1">**</ept></source>
          <target state="translated">如果您使用 <bpt id="p1">**</bpt>-?<ept id="p1">**</ept></target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>parameter with a Windows PowerShell cmdlet, it always means "show me Help for this command".</source>
          <target state="translated">參數與 Windows PowerShell Cmdlet，則一律表示「顯示此命令的說明」。</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Cmdlet developers do not have to parse the command; they only need to provide the Help text.</source>
          <target state="translated">Cmdlet 開發人員不需要剖析命令，只需要提供說明文字。</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is important to understand that the Help features of Windows PowerShell are available even when you run traditional command\-line tools in Windows PowerShell.</source>
          <target state="translated">請務必了解，即使在 Windows PowerShell 中執行傳統命令列工具，還是會提供 Windows PowerShell 的說明功能。</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Windows PowerShell processes the parameters and passes the results to the external tools.</source>
          <target state="translated">Windows PowerShell 會處理參數，並將結果傳遞給外部工具。</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you run an graphic application in Windows PowerShell, the window for the application opens.</source>
          <target state="translated">如果您在 Windows PowerShell 中執行圖形應用程式，則會開啟應用程式的視窗。</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Windows PowerShell intervenes only when processing the command\-line input you supply or the application output returned to the console window; it does not affect how the application works internally.</source>
          <target state="translated">只有在處理您提供的命令列輸入或傳回給主控台視窗的應用程式輸出時，Windows PowerShell 才會干擾，否則不會影響應用程式的內部運作方式。</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Windows PowerShell Uses Some C\# Syntax</source>
          <target state="translated">Windows PowerShell 使用某個 C# 語法</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has syntax features and keywords that are very similar to those used in the C\# programming language, because Windows PowerShell is based on the .NET Framework.</source>
          <target state="translated">Windows PowerShell 的語法功能和關鍵字與 C# 程式設計語言中所使用的語法功能和關鍵字十分類似，因為 Windows PowerShell 是以 .NET Framework 為基礎。</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Learning Windows PowerShell will make it much easier to learn C\#, if you are interested in the language.</source>
          <target state="translated">如果您對 C# 語言感興趣，則學習 Windows PowerShell 更容易了解該語言。</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If you are not a C\# programmer, this similarity is not important.</source>
          <target state="translated">如果您不是 C# 程式設計人員，則這項相似性不重要。</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>However, if you are already familiar with C\#, the similarities can make learning Windows PowerShell much easier.</source>
          <target state="translated">不過，如果您已經熟悉 C#，則相似性可讓學習 Windows PowerShell 更為簡單。</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>