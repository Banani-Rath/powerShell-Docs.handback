<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0fa388c2ff9cde50cf57fc6481c8133f65d71ca</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\Where-Object.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b6ce0411b94f7888d60548945ff32d78e9a824f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3de833064e40c11733aec10204a39f12d3707fba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Where-Object</source>
          <target state="translated">Where-Object</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Where-Object</source>
          <target state="translated">Where-Object</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Selects objects from a collection based on their property values.</source>
          <target state="translated">根據屬性值從集合中選取物件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>EqualSet (Default)</source>
          <target state="translated">EqualSet （預設值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ScriptBlockSet</source>
          <target state="translated">ScriptBlockSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CaseSensitiveLessThanSet</source>
          <target state="translated">CaseSensitiveLessThanSet</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>LessOrEqualSet</source>
          <target state="translated">LessOrEqualSet</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>NotContainsSet</source>
          <target state="translated">NotContainsSet</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotContainsSet</source>
          <target state="translated">CaseSensitiveNotContainsSet</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CaseSensitiveLessOrEqualSet</source>
          <target state="translated">CaseSensitiveLessOrEqualSet</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>InSet</source>
          <target state="translated">內凹</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CaseSensitiveInSet</source>
          <target state="translated">CaseSensitiveInSet</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>NotInSet</source>
          <target state="translated">NotInSet</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotInSet</source>
          <target state="translated">CaseSensitiveNotInSet</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>IsSet</source>
          <target state="translated">顯示設為</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>LikeSet</source>
          <target state="translated">LikeSet</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CaseSensitiveEqualSet</source>
          <target state="translated">CaseSensitiveEqualSet</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>NotEqualSet</source>
          <target state="translated">NotEqualSet</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotEqualSet</source>
          <target state="translated">CaseSensitiveNotEqualSet</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>GreaterThanSet</source>
          <target state="translated">GreaterThanSet</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CaseSensitiveGreaterThanSet</source>
          <target state="translated">CaseSensitiveGreaterThanSet</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>MatchSet</source>
          <target state="translated">MatchSet</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CaseSensitiveLikeSet</source>
          <target state="translated">CaseSensitiveLikeSet</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CaseSensitiveMatchSet</source>
          <target state="translated">CaseSensitiveMatchSet</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>IsNotSet</source>
          <target state="translated">IsNotSet</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>NotLikeSet</source>
          <target state="translated">NotLikeSet</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotMatchSet</source>
          <target state="translated">CaseSensitiveNotMatchSet</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>ContainsSet</source>
          <target state="translated">ContainsSet</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CaseSensitiveContainsSet</source>
          <target state="translated">CaseSensitiveContainsSet</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>LessThanSet</source>
          <target state="translated">LessThanSet</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotLikeSet</source>
          <target state="translated">CaseSensitiveNotLikeSet</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>NotMatchSet</source>
          <target state="translated">NotMatchSet</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>GreaterOrEqualSet</source>
          <target state="translated">GreaterOrEqualSet</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CaseSensitiveGreaterOrEqualSet</source>
          <target state="translated">CaseSensitiveGreaterOrEqualSet</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet selects objects that have particular property values from the collection of objects that are passed to it.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> cmdlet 會選取具有特定屬性值傳遞給它的物件集合中的物件。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example you can use the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet to select files that were created after a certain date, events with a particular ID, or computers with a particular version of Windows.</source>
          <target state="translated">例如，您可以使用 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> cmdlet 以選取檔案在特定日期之後所建立的事件具有特定識別碼或使用特定版本的 Windows 電腦。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, there are two different ways to construct a <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> command.</source>
          <target state="translated">從 Windows PowerShell 3.0 開始，有兩種不同的方式來建構 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 命令。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Script block<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>指令碼區塊<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use a script block to specify the property name, a comparison operator, and a property value.</source>
          <target state="translated">您可以使用指令碼區塊來指定屬性名稱、比較運算子及屬性值。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Where-Object returns all objects for which the script block statement is true.</source>
          <target state="translated">Where-Object 會傳回指令碼區塊陳述式為 True 的所有物件。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, the following command gets processes in the Normal priority class, that is, processes where the value of the <bpt id="p1">**</bpt>PriorityClass<ept id="p1">**</ept> property equals "Normal".</source>
          <target state="translated">例如，下列命令也就是在一般優先順序類別中，取得處理程序，處理位置的值 <bpt id="p1">**</bpt>PriorityClass<ept id="p1">**</ept> 屬性值等於"Normal"。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All Windows PowerShell comparison operators are valid in the script block format.</source>
          <target state="translated">在指令碼區塊格式中，所有 Windows PowerShell 比較運算子都是有效的。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about comparison operators, see about_Comparison_Operators (http://go.microsoft.com/fwlink/?LinkID=113217).</source>
          <target state="translated">如需比較運算子的詳細資訊，請參閱 about_Comparison_Operators (http://go.microsoft.com/fwlink/?LinkID=113217)。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Comparison statement<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>比較陳述式<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also write a comparison statement, which is much more like natural language.</source>
          <target state="translated">您也可以撰寫較像自然語言的比較陳述式。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Comparison statements were introduced in Windows PowerShell 3.0.</source>
          <target state="translated">比較陳述式是在 Windows PowerShell 3.0 中引進。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, the following commands also get processes that have a priority class of "Normal".</source>
          <target state="translated">例如，下列命令也會取得優先順序類別為 "Normal" 的處理程序。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These commands are equivalent and can be used interchangeably.</source>
          <target state="translated">這些命令是相等的，可以交換使用。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> adds comparison operators as parameters in a <bpt id="p2">**</bpt>Where-Object<ept id="p2">**</ept> command.</source>
          <target state="translated">在 Windows PowerShell 3.0 中，從 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 加入做為參數中的比較運算子 <bpt id="p2">**</bpt>Where-object<ept id="p2">**</ept> 命令。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Unless specified, all operators are case-insensitive.</source>
          <target state="translated">除非另有指定，否則所有運算子都不區分大小寫。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Prior to Windows PowerShell 3.0, the comparison operators in the Windows PowerShell language could be used only in script blocks.</source>
          <target state="translated">在 Windows PowerShell 3.0 之前，Windows PowerShell 語言中的比較運算子只能在指令碼區塊中使用。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 範例 1 --------------------------</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This command gets a list of all services that are currently stopped.</source>
          <target state="translated">此命令會取得一份所有目前已停止之服務的清單。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The "$_" symbol represents each object that is passed to the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">"$_"符號代表每個物件傳遞至 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 指令程式。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first command uses the script block format.</source>
          <target state="translated">第一個命令使用指令碼區塊格式。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second command uses the comparison statement format.</source>
          <target state="translated">第二個命令使用比較陳述式格式。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The commands are equivalent and can be used interchangeably.</source>
          <target state="translated">這些命令是相等的，可以交換使用。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This command lists processes that have a working set greater than 25,000 kilobytes (KB).</source>
          <target state="translated">此命令會列出擁有超過 25,000 KB 之工作集的處理程序。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Because the value of the WorkingSet property is stored in bytes, the value of 25,000 is multiplied by 1,024.</source>
          <target state="translated">由於 WorkingSet 屬性的值是以位元組為儲存單位，因此 25,000 的值會乘以 1,024。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The first command uses the script block format.</source>
          <target state="translated">第一個命令使用指令碼區塊格式。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The second command uses the comparison statement format.</source>
          <target state="translated">第二個命令使用比較陳述式格式。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The commands are equivalent and can be used interchangeably.</source>
          <target state="translated">這些命令是相等的，可以交換使用。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This command gets the processes that have a <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> property value that begins with the letter "p".</source>
          <target state="translated">此命令會取得處理程序 <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> 字母"p"開頭的屬性值。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The match operator lets you use regular expression matches.</source>
          <target state="translated">Match 運算子可讓您使用規則運算式相符項目。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The first command uses the script block format.</source>
          <target state="translated">第一個命令使用指令碼區塊格式。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The second command uses the comparison statement format.</source>
          <target state="translated">第二個命令使用比較陳述式格式。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The commands are equivalent and can be used interchangeably.</source>
          <target state="translated">這些命令是相等的，可以交換使用。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 5 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 5 --------------------------</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This example shows how to use the new comparison statement  format of the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">這個範例示範如何使用新的比較陳述式格式的 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 指令程式。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The first command uses the comparison statement format.</source>
          <target state="translated">第一個命令使用比較陳述式格式。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this command, no aliases are used and all parameters include the parameter name.</source>
          <target state="translated">此命令中不會使用任何別名，並且所有的參數都包括參數名稱。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The second command is the more natural use of the comparison command format.</source>
          <target state="translated">第二個命令是更自然的比較命令格式使用方式。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The "where" alias is substituted for the "Where-Object" cmdlet name and all optional parameter names are omitted.</source>
          <target state="translated">"Where" 別名是用來替代 "Where-Object" Cmdlet 名稱，並且所有選擇性參數名稱都會省略。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 6 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 6 --------------------------</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This example shows how to write commands that return items that are true or false or have any value for a specified property.</source>
          <target state="translated">此範例示範如何撰寫會傳回 True 或 False 的項目，或撰寫具有任何指定屬性值的命令。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The example shows both the script block and comparison statement formats for the command.</source>
          <target state="translated">此範例示範命令的指令碼區塊格式和比較陳述式格式。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 7 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 7 --------------------------</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This example shows how to create a <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> command with multiple conditions.</source>
          <target state="translated">這個範例示範如何建立 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 命令搭配多個條件。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This command gets non-core modules that support the Updatable Help feature.</source>
          <target state="translated">此命令取得支援可更新之說明功能的非核心模組。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>ListAvailable<ept id="p1">**</ept> parameter of the Get-Module cmdlet to get all modules on the computer.</source>
          <target state="translated">此命令會使用 <bpt id="p1">**</bpt>ListAvailable<ept id="p1">**</ept> Get-module cmdlet 取得電腦上的所有模組的參數。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A pipeline operator sends the modules to the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet, which gets modules whose names do not begin with "Microsoft" or "PS" and have  a value for the <bpt id="p2">**</bpt>HelpInfoURI<ept id="p2">**</ept> property, which tells Windows PowerShell where to find updated help files for the module.</source>
          <target state="translated">管線運算子會傳送到模組 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 指令程式，以取得的模組名稱不是以"Microsoft"或"PS"和的值 <bpt id="p2">**</bpt>HelpInfoURI<ept id="p2">**</ept> 屬性，它會告訴 Windows PowerShell 模組的已更新的說明檔中找到的位置。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The comparison statements are connected by the <bpt id="p1">**</bpt>-And<ept id="p1">**</ept> logical operator.</source>
          <target state="translated">比較陳述式由連接 <bpt id="p1">**</bpt>-和<ept id="p1">**</ept> 邏輯運算子。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The example uses the script block command format.</source>
          <target state="translated">此範例使用指令碼區塊命令格式。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Logical operators, such as -And and -Or, are valid only in script blocks.</source>
          <target state="translated">邏輯運算子 (例如 -And 或 -Or) 僅適用於指令碼區塊。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You cannot use them in the comparison statement format of a Where-Object command.</source>
          <target state="translated">您無法在 Where-Object 命令的比較陳述式格式中使用它們。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For more information about Windows PowerShell logical operators, see about_Logical_Operators (http://go.microsoft.com/fwlink/?LinkID=113238).</source>
          <target state="translated">如需有關 Windows PowerShell 邏輯運算子的詳細資訊，請參閱 about_Logical_Operators (http://go.microsoft.com/fwlink/?LinkID=113238)。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information about the Updatable Help feature, see about_Updatable_Help (http://go.microsoft.com/fwlink/?LinkID=235801).</source>
          <target state="translated">如需可更新之說明功能的詳細資訊，請參閱 about_Updatable_Help (http://go.microsoft.com/fwlink/?LinkID=235801)。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">參數</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>-CContains</source>
          <target state="translated">-包含</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Contains operator, which gets objects from a collection when the property value of the object is an exact match for the specified value</source>
          <target state="translated">指定區分大小寫的 Contains 運算子，就會在物件的屬性值與指定的值完全相符時從集合取得物件。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>"Contains" refers to a collection of values and is true when the collection contains an item that is an exact match for the specified value.</source>
          <target state="translated">"Contains" 是指值的集合，並且在集合包含與指定的值完全相符的項目時為 True。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If the input is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">如果輸入是一個單一物件，Windows PowerShell 會將它轉換成一個物件的集合。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>-CEQ</source>
          <target state="translated">-CEQ</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Equals operator, which gets objects when the property value is the same as the specified value.</source>
          <target state="translated">指定區分大小寫的 Equals 運算子，就會在屬性值與指定的值相同時取得物件。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>-CGE</source>
          <target state="translated">-CGE</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Greater-than-or-equal value, which gets objects when the property value is greater than or equal to the specified value.</source>
          <target state="translated">指定區分大小寫的 Greater-Than-Or-Equal 值，就會在屬性值大於或等於指定的值時取得物件。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>-CGT</source>
          <target state="translated">-CGT</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Greater-than property, which gets objects when the property value is greater than the specified value.</source>
          <target state="translated">指定區分大小寫的 Greater-Than 屬性，就會在屬性值大於指定的值時取得物件。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>-CIn</source>
          <target state="translated">-CIn</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive In operator, which gets objects when the property value includes the specified value.</source>
          <target state="translated">指定區分大小寫的 In 運算子，就會在屬性值包含指定的值時取得物件。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example: Get-Process | where -Value "svchost" -CIn ProcessName</source>
          <target state="translated">例如︰ Get-process |其中-Value"svchost"-CIn ProcessName</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The In operator is much like the Contains operator, except that the property and value positions are reversed.</source>
          <target state="translated">In 運算子類似於 Contains 運算子，差別在於屬性和值的位置是相反的。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, the following statements are both true.</source>
          <target state="translated">例如，下列陳述式都是 True。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>"abc", "def" -CContains "abc"</source>
          <target state="translated">"abc", "def" -CContains "abc"</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>"abc" -CIn "abc", "def"</source>
          <target state="translated">"abc" -CIn "abc", "def"</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>-CLE</source>
          <target state="translated">-CLE</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Less-than-or-equal operator, which gets objects when the property value is less-than or equal to the specified value.</source>
          <target state="translated">指定區分大小寫的 Less-Than-Or-Equal 運算子，就會在屬性值小於或等於指定的值時取得物件。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>-CLT</source>
          <target state="translated">-CLT</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Less-than operator, which gets objects when the property value is less-than the specified value.</source>
          <target state="translated">指定區分大小寫的 Less-Than 運算子，就會在屬性值小於指定的值時取得物件。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>-CLike</source>
          <target state="translated">-CLike</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Like operator, which gets objects when the property value matches a value that includes wildcard characters.</source>
          <target state="translated">指定區分大小寫的 Like 運算子，就會在屬性值與包含萬用字元的值相符時指取得物件。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>-CMatch</source>
          <target state="translated">-CMatch</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Match operator, which gets objects when the property value matches the specified regular expression.</source>
          <target state="translated">指定區分大小寫的 Match 運算子，就會在屬性值與指定的規則運算式相符時取得物件。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When the input is scalar, the matched value is saved in $Matches automatic variable.</source>
          <target state="translated">當輸入是純量輸入時，相符的值會儲存在 $Matches 自動變數中。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>-CNE</source>
          <target state="translated">-但是 CNE</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-Equals operator, which gets objects when the property value is different than the specified value.</source>
          <target state="translated">指定區分大小寫的 Not-Equals 運算子，就會在屬性值與指定的值不同時取得物件。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>-CNotContains</source>
          <target state="translated">-CNotContains</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-Contains operator, which gets objects when the property value of the object is not an exact match for the specified value.</source>
          <target state="translated">指定區分大小寫的 Not-Contains 運算子，就會在物件的屬性值與指定的值不完全相符時取得物件。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>"NotContains" and "CNotContains refer to a collection of values and are true when the collection does not contains any items that are an exact match for the specified value.</source>
          <target state="translated">"NotContains" 與 "CNotContains" 是指值的集合，並且在集合未包含任何與指定的值完全相符的項目時為 True。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If the input is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">如果輸入是一個單一物件，Windows PowerShell 會將它轉換成一個物件的集合。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>-CNotIn</source>
          <target state="translated">-CNotIn</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-In operator, which gets objects when the property value is not an exact match for the specified value.</source>
          <target state="translated">指定區分大小寫的 Not-In 運算子，就會在屬性值與指定的值不完全相符時取得物件。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The Not-In  and CNot-In operators are much like the Not-Contains and CNot-Contains operators, except that the property and value positions are reversed.</source>
          <target state="translated">Not-In 和 CNot-In 運算子類似於 Not-Contains 和 CNot-Contains 運算子，差別在於屬性和值的位置是相反的。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For example, the following statements are true.</source>
          <target state="translated">例如，下列陳述式為 True。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>"abc", "def" -CNotContains "Abc"</source>
          <target state="translated">"abc", "def" -CNotContains "Abc"</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>"abc" -CNotIn "Abc", "def"</source>
          <target state="translated">"abc" -CNotIn "Abc", "def"</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>-CNotLike</source>
          <target state="translated">-CNotLike</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-Like operator, which gets objects when the property value does not match a value that includes wildcard characters.</source>
          <target state="translated">指定區分大小寫的 Not-Like 運算子，就會在屬性值與包含萬用字元的值不相符時指取得物件。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>-CNotMatch</source>
          <target state="translated">-CNotMatch</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-match operator, which gets objects when the property value does not match the specified regular expression.</source>
          <target state="translated">指定區分大小寫的 Not-Match 運算子，就會在屬性值與指定的規則運算式不相符時取得物件。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>When the input is scalar, the matched value is saved in $Matches automatic variable.</source>
          <target state="translated">當輸入是純量輸入時，相符的值會儲存在 $Matches 自動變數中。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>-Contains</source>
          <target state="translated">-包含</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Specifies the Contains operator, which gets objects when any item in the property value of the object is an exact match for the specified value.</source>
          <target state="translated">指定 Contains 運算子，就會在物件的屬性值中有任何項目與指定的值完全相符時取得物件。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If the property value contains a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">如果屬性值包含單一物件，Windows PowerShell 會將它轉換成一個物件的集合。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>-EQ</source>
          <target state="translated">-EQ</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Specifies the equals operator, which gets objects when the property value is the same as the specified value.</source>
          <target state="translated">指定 Equals 運算子，就會在屬性值與指定的值相同時取得物件。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>-FilterScript</source>
          <target state="translated">-FilterScript</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specifies the script block that is used to filter the objects.</source>
          <target state="translated">指定用來篩選物件的指令碼區塊。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Enclose the script block in braces ( {} ).</source>
          <target state="translated">以大括號 ({}) 括住指令碼區塊。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The parameter name (-FilterScript) is optional.</source>
          <target state="translated">參數名稱 (-FilterScript) 為選擇性。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>-GE</source>
          <target state="translated">-GE</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Specifies the Greater-than-or-equal operator, which gets objects when the property value is greater than or equal to the specified value.</source>
          <target state="translated">指定 Greater-Than-Or-Equal 運算子，就會在屬性值大於或等於指定的值時取得物件。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>-GT</source>
          <target state="translated">-GT</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Specifies the Greater-than operator, which gets objects when the property value is greater than the specified value.</source>
          <target state="translated">指定 Greater-Than 運算子，就會在屬性值大於指定的值時取得物件。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>-In</source>
          <target state="translated">單元</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Specifies the In operator, which gets objects when the property value matches any of the specified values.</source>
          <target state="translated">指定 In 運算子，就會在屬性值與任一個指定的值相符時取得物件。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For example: Get-Process | where -Property ProcessName -in -Value "Svchost", "TaskHost", "WsmProvHost"</source>
          <target state="translated">例如︰ Get-process |where-ProcessName 屬性--值"Svchost"、"TaskHost"、"WsmProvHost"</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>If the value of the <bpt id="p1">**</bpt>Value<ept id="p1">**</ept> parameter is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">如果值 <bpt id="p1">**</bpt>值<ept id="p1">**</ept> 參數是單一物件，Windows PowerShell 將它轉換成一個物件的集合。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>If the property value of an object is an array, Windows PowerShell uses reference equality to determine a match.</source>
          <target state="translated">如果物件的屬性值是陣列，Windows PowerShell 會使用參考相等來判斷相符項目。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> returns the object only if the value of the <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter and any value of the <bpt id="p3">**</bpt>Value<ept id="p3">**</ept> parameter are the same instance of an object.</source>
          <target state="translated"><bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 物件才會傳回的值 <bpt id="p2">**</bpt>屬性<ept id="p2">**</ept> 參數，而且任何值的 <bpt id="p3">**</bpt>值<ept id="p3">**</ept> 參數是相同物件執行個體。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Specifies the objects to be filtered.</source>
          <target state="translated">指定要篩選的物件。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You can also pipe the objects to <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept>.</source>
          <target state="translated">您也可以使用管線的物件 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>When you use the InputObject parameter with Where-Object, instead of piping command results to Where-Object, the InputObject value-even if the value is a collection that is the result of a command, such as <bpt id="p1">**</bpt>-InputObject (Get-Process)<ept id="p1">**</ept>-is treated as a single object.</source>
          <target state="translated">當您使用 InputObject 參數與 Where-object，而不是管線命令結果至 Where-object 時，InputObject 值即使如果值為集合之結果的命令，例如 <bpt id="p1">**</bpt>-InputObject (Get-process)<ept id="p1">**</ept>-會被視為單一物件。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Because InputObject cannot return individual properties from an array or collection of objects, it is recommended that if you use Where-Object to filter a collection of objects for those objects that have specific values in defined properties, you use Where-Object in the pipeline, as shown in the examples in this topic.</source>
          <target state="translated">因為 InputObject 無法從物件陣列或集合傳回個別屬性，因此建議您若使用 Where-Object 篩選物件集合，以篩選出在定義屬性中具有特定值的物件，則可以在管線中使用 Where-Object，如這個主題的範例所示。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>-Is</source>
          <target state="translated">-這是</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Specifies the Is operator, which gets objects when the property value is an instance of the specified .NET Framework type.</source>
          <target state="translated">指定 Is 運算子，就會在屬性值為指定之.NET Framework 型別的執行個體時取得物件。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Enclose the type name in square brackets.</source>
          <target state="translated">使用方括號括住型別名稱。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例如，</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>-IsNot</source>
          <target state="translated">-IsNot</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Specifies the Is-Not operator, which gets objects when the property value is not an instance of the specified .NET Framework type.</source>
          <target state="translated">指定 Is-Not 運算子，就會在屬性值不是指定之.NET Framework 型別的執行個體時取得物件。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例如，</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>-LE</source>
          <target state="translated">-LE</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Specifies the Less-than-or-equals operator.</source>
          <target state="translated">指定 Less-Than-Or-Equals 運算子。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>-LT</source>
          <target state="translated">-LT</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Specifies the Less-than operator, which gets objects when the property value is less than the specified value.</source>
          <target state="translated">指定 Less-Than 運算子，就會在屬性值小於指定的值時取得物件。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>-Like</source>
          <target state="translated">的類似</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Specifies the Like operator, which gets objects when the property value matches a value that includes wildcard characters.</source>
          <target state="translated">指定 Like 運算子，就會在屬性值與包含萬用字元的值相符時指取得物件。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>-Match</source>
          <target state="translated">比對</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Specifies the Match operator, which gets objects when the property value matches the specified regular expression.</source>
          <target state="translated">指定 Match 運算子，就會在屬性值與指定的規則運算式相符時取得物件。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>When the input is scalar, the matched value is saved in $Matches automatic variable.</source>
          <target state="translated">當輸入是純量輸入時，相符的值會儲存在 $Matches 自動變數中。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>-NE</source>
          <target state="translated">-NE</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Specifies the Not-equals operator, which gets objects when the property value is different than the specified value.</source>
          <target state="translated">指定 Not-Equals 運算子，就會在屬性值與指定的值不同時取得物件。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>-NotContains</source>
          <target state="translated">-NotContains</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Specifies the  Not-Contains operator, which gets objects when none of the items in the  property value is an exact match for the specified value.</source>
          <target state="translated">指定 Not-Contains 運算子，就會在屬性值中沒有任何項目與指定的值完全相符時取得物件。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>"NotContains" refers to a collection of values and is true when the collection does not contain any items that are an exact match for the specified value.</source>
          <target state="translated">"NotContains" 是指值的集合，並且在集合未包含任何與指定的值完全相符的項目時為 True。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If the input is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">如果輸入是一個單一物件，Windows PowerShell 會將它轉換成一個物件的集合。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>-NotIn</source>
          <target state="translated">-NotIn</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Specifies the  Not-In operator, which gets objects when the property value is not an exact match for any of the specified values.</source>
          <target state="translated">指定 Not-In 運算子，就會在屬性值與任何指定的值不完全相符時取得物件。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>If the value of the <bpt id="p1">**</bpt>Value<ept id="p1">**</ept> parameter is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">如果值 <bpt id="p1">**</bpt>值<ept id="p1">**</ept> 參數是單一物件，Windows PowerShell 將它轉換成一個物件的集合。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If the property value of an object is an array, Windows PowerShell uses reference equality to determine a match.</source>
          <target state="translated">如果物件的屬性值是陣列，Windows PowerShell 會使用參考相等來判斷相符項目。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> returns the object only if the value of the <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter and any value of the <bpt id="p3">**</bpt>Value<ept id="p3">**</ept> parameter are not the same instance of an object.</source>
          <target state="translated"><bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 物件才會傳回的值 <bpt id="p2">**</bpt>屬性<ept id="p2">**</ept> 參數，而且任何值的 <bpt id="p3">**</bpt>值<ept id="p3">**</ept> 參數不是相同物件執行個體。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>-NotLike</source>
          <target state="translated">-NotLike</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Specifies the Not-Like operator, which gets objects when the property value does not match a value that includes wildcard characters.</source>
          <target state="translated">指定 Not-Like 運算子，就會在屬性值與包含萬用字元的值不相符時指取得物件。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>-NotMatch</source>
          <target state="translated">-Notmatch 會</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Specifies the not-match operator, which gets objects when the property value does not match the specified regular expression.</source>
          <target state="translated">指定 Not-Match 運算子，就會在屬性值與指定的規則運算式不相符時取得物件。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>When the input is scalar, the matched value is saved in $Matches automatic variable.</source>
          <target state="translated">當輸入是純量輸入時，相符的值會儲存在 $Matches 自動變數中。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>-Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Specifies the name of an object property.</source>
          <target state="translated">指定物件屬性的名稱。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The parameter name (-Property) is optional.</source>
          <target state="translated">參數名稱 (-Property) 為選擇性。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>-Value</source>
          <target state="translated">值</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Specifies a property value.</source>
          <target state="translated">指定屬性值。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The parameter name (-Value) is optional.</source>
          <target state="translated">參數名稱 (-Value) 為選擇性。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">這個 cmdlet 支援一般參數:-偵錯、-ErrorAction、-ErrorVariable、-InformationAction-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 以及-WarningVariable。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">如需詳細資訊，請參閱 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">輸入</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>You can pipe the objects to be filtered to Where-Object.</source>
          <target state="translated">您可以使用管線將要篩選的物件傳送至 Where-object。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">輸出</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">物件</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Where-Object returns selected items from the input object set.</source>
          <target state="translated">Where-Object 會從輸入物件集傳回選取的項目。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">附註</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 4.0, Where() operator behavior has changed.</source>
          <target state="translated">從 Windows PowerShell 4.0 開始，Where () 運算子的行為已經變更。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Collection.Where('property -match name') no longer accepts string expressions in the format "Property -CompareOperator Value".</source>
          <target state="translated">Collection.Where (' 屬性為相符項目名稱 ') 不會再接受"Property-CompareOperator Value"格式的字串運算式。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>However, the Where() operator accepts string expressions in the format of a scriptblock; this is still supported.</source>
          <target state="translated">不過，Where() 運算子仍然支援接受指令碼區塊格式的字串運算式。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The following examples show the behavior that has changed.</source>
          <target state="translated">下列範例顯示已變更的行為。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The following two examples show Where() object behavior that is no longer supported.</source>
          <target state="translated">下列兩個範例會示範已不再支援的 Where() 物件行為。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The following three examples show Where() object behavior that is supported in Windows PowerShell 4.0 and forward.</source>
          <target state="translated">下列三個範例會示範 Windows PowerShell 4.0 與更新版本中所支援的 Where() 物件行為。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相關的連結</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Compare-Object</source>
          <target state="translated">Compare-Object</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>ForEach-Object</source>
          <target state="translated">ForEach-Object</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Group-Object</source>
          <target state="translated">Group-Object</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Measure-Object</source>
          <target state="translated">Measure-Object</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>New-Object</source>
          <target state="translated">新物件</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Select-Object</source>
          <target state="translated">Select-Object</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Sort-Object</source>
          <target state="translated">Sort-Object</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Tee-Object</source>
          <target state="translated">Tee-object</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Where-Object</source>
          <target state="translated">Where-Object</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>