<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae8964d134d4e01aa9196823402e9c209f4b36a3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\Wait-Job.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">487c11cd5d8414d346808a4e184d8b9edc83ade6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">187c388ee01e0fc9a82cb262d967b95d55517fc0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Wait-Job</source>
          <target state="translated">等候工作</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Wait-Job</source>
          <target state="translated">等候工作</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Suppresses the command prompt until one or all of the Windows PowerShell background jobs running in the session are completed.</source>
          <target state="translated">抑制命令提示字元，直到其中一個或所有工作階段中執行的 Windows PowerShell 背景工作完成。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SessionIdParameterSet (Default)</source>
          <target state="translated">SessionIdParameterSet （預設值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>JobParameterSet</source>
          <target state="translated">JobParameterSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>NameParameterSet</source>
          <target state="translated">NameParameterSet</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>InstanceIdParameterSet</source>
          <target state="translated">InstanceIdParameterSet</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>StateParameterSet</source>
          <target state="translated">StateParameterSet</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>FilterParameterSet</source>
          <target state="translated">FilterParameterSet</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet waits for Windows PowerShell background jobs to finish before it displays the command prompt.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet 會等待 Windows PowerShell 背景工作完成後，才能顯示命令提示字元。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can wait until any background job is complete, or until all background jobs are complete, and you can set a maximum wait time for the job.</source>
          <target state="translated">您可以等到任一背景工作完成，或等到所有背景工作都完成，而且可以設定工作的最長等待時間。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the commands in the job are complete, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> displays the command prompt and returns a job object so that you can pipe it to another command.</source>
          <target state="translated">當工作中的命令都已完成， <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 顯示命令提示字元，並傳回工作物件，以便您可以將它傳送到另一個命令。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet to wait for background jobs, such as those that were started by using the Start-Job cmdlet or the <bpt id="p2">*</bpt>AsJob<ept id="p2">*</ept> parameter of the Invoke-Command cmdlet.</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet 來等待背景工作，例如使用 Start-job cmdlet 或 <bpt id="p2">*</bpt>AsJob<ept id="p2">*</ept> Invoke-command cmdlet 的參數。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about Windows PowerShell background jobs, see about_Jobs.</source>
          <target state="translated">如需有關 Windows PowerShell 背景工作的詳細資訊，請參閱 about_Jobs。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Starting in Windows PowerShell 3.0, the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet also waits for custom job types, such as workflow jobs and instances of scheduled jobs.</source>
          <target state="translated">在 Windows PowerShell 3.0 中，啟動 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 指令程式也可等待自訂工作類型，例如工作流程工作和排程工作的執行個體。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To enable <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to wait for jobs of a particular type, import the module that supports the custom job type into the session before you run the Get-Job cmdlet, either by using the Import-Module cmdlet or by using or getting a cmdlet in the module.</source>
          <target state="translated">若要啟用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 等待特定類型的工作，匯入支援工作階段之前使用 Import-module cmdlet 或使用或 cmdlet 取得模組中，執行 Get-job cmdlet，將自訂工作類型的模組。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For information about a particular custom job type, see the documentation of the custom job type feature.</source>
          <target state="translated">如需有關特定自訂工作類型的資訊，請參閱自訂工作類型功能的文件。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example 1: Wait for all jobs</source>
          <target state="translated">範例 1︰ 等待所有工作</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This command waits for all of the background jobs running in the session to finish.</source>
          <target state="translated">此命令會等到所有完成的工作階段中執行背景工作。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example 2: Wait for jobs started on remote computers by using Start-Job</source>
          <target state="translated">範例 2︰ 等待使用 Start-job 啟動遠端電腦上的工作</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet with jobs started on remote computers by using the <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">這個範例示範如何使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 指令程式與工作啟動遠端電腦上使用 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept> 指令程式。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Both <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> commands are submitted to the remote computer by using the <bpt id="p3">**</bpt>Invoke-Command<ept id="p3">**</ept> cmdlet.</source>
          <target state="translated">同時 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 命令提交給遠端電腦使用 <bpt id="p3">**</bpt>叫用命令<ept id="p3">**</ept> 指令程式。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example uses <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to determine whether a Get-Date command running as a background job on three different computers is finished.</source>
          <target state="translated">這個範例會使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 來判斷是否已完成的三個不同的電腦上執行背景工作的 Get-date 命令。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The first command creates a Windows PowerShell session (<bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept>) on each of the three remote computers and stores them in the $s variable.</source>
          <target state="translated">第一個命令會建立 Windows PowerShell 工作階段 (<bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept>) 每三部遠端電腦上並將它們儲存在 $s 變數中。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The second command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept> in each of the three sessions in $s.</source>
          <target state="translated">第二個命令會使用 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 執行 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept> 每個 $s 中的三個工作階段中。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All of the jobs are named Date1.</source>
          <target state="translated">所有的作業會命名為 Date1。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The third command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept>.</source>
          <target state="translated">第三個命令會使用 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 執行 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This command waits for the Date1 jobs on each computer to finish.</source>
          <target state="translated">此命令會等待完成每一部電腦上的 Date1 工作。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It stores the resulting collection (array) of job objects in the $done variable.</source>
          <target state="translated">它將產生的工作物件集合 (陣列) 儲存在 $done 變數中。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The fourth command uses the <bpt id="p1">**</bpt>Count<ept id="p1">**</ept> property of the array of job objects in the $done variable to determine how many of the jobs are finished.</source>
          <target state="translated">第四個命令會使用 <bpt id="p1">**</bpt>計數<ept id="p1">**</ept> 在 $done 變數來判斷多少工作已完成的工作物件的陣列的屬性。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example 3: Determine when the first background job finishes</source>
          <target state="translated">範例 3︰ 決定第一個背景工作完成時</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This example uses the <bpt id="p1">*</bpt>Any<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> to determine when the first of many background jobs running in the current session are completed.</source>
          <target state="translated">這個範例會使用 <bpt id="p1">*</bpt>任何<ept id="p1">*</ept> 參數 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 來判斷何時會完成目前的工作階段中執行的許多背景工作的第一個。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It also shows how to use the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet to wait for remote jobs to finish.</source>
          <target state="translated">它也示範如何使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet 來等待遠端作業完成。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The first command creates a <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> on each of the computers listed in the Machines.txt file and stores the <bpt id="p2">**</bpt>PSSession<ept id="p2">**</ept> objects in the $s variable.</source>
          <target state="translated">第一個命令會建立 <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> Machines.txt 檔案和儲存體中所列每一部電腦上 <bpt id="p2">**</bpt>PSSession<ept id="p2">**</ept> $s 變數中的物件。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The command uses the Get-Content cmdlet to get the contents of the file.</source>
          <target state="translated">此命令使用 Get-content cmdlet 取得檔案的內容。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> command is enclosed in parentheses to make sure that that it runs before the New-PSSession command.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Get-content<ept id="p1">**</ept> 命令被括在括號，以確保能夠 New-pssession 命令之前執行。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The second command stores a <bpt id="p1">**</bpt>Get-EventLog<ept id="p1">**</ept> command string, in quotation marks, in the $c variable.</source>
          <target state="translated">第二個命令儲存 <bpt id="p1">**</bpt>Get-eventlog<ept id="p1">**</ept> 命令字串，以引號 $c 變數中。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The third command uses Invoke-Command cmdlet to run <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> in each of the sessions in $s.</source>
          <target state="translated">第三個命令使用 Invoke-command cmdlet 執行 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 在每個 $s 中的工作階段。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> command starts a background job that runs the <bpt id="p2">**</bpt>Get-EventLog<ept id="p2">**</ept> command in the $c variable.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 命令會啟動背景工作執行 <bpt id="p2">**</bpt>Get-eventlog<ept id="p2">**</ept> $c 變數中的命令。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier to indicate that the $c variable was defined on the local computer.</source>
          <target state="translated">此命令會使用 <bpt id="p1">**</bpt>使用<ept id="p1">**</ept> 範圍修飾符以指出在本機電腦上已定義 $c 變數。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier is introduced in Windows PowerShell 3.0.</source>
          <target state="translated"> <bpt id="p1">**</bpt>使用<ept id="p1">**</ept> 範圍修飾符在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier, see about_Remote_Variables (http://go.microsoft.com/fwlink/?LinkID=252653).</source>
          <target state="translated">如需詳細資訊 <bpt id="p1">**</bpt>使用<ept id="p1">**</ept> 範圍修飾詞，請參閱 about_Remote_Variables (http://go.microsoft.com/fwlink/?LinkID=252653)。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The fourth command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run a <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> command in the sessions.</source>
          <target state="translated">第四個命令會使用 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 執行 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 命令的工作階段中。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>Any<ept id="p1">*</ept> parameter to wait until the first job on the remote computers is completed.</source>
          <target state="translated">它會使用 <bpt id="p1">*</bpt>任何<ept id="p1">*</ept> 參數，以等候遠端電腦上的第一個工作完成為止。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example 4: Set a wait time for jobs on remote computers</source>
          <target state="translated">範例 4︰ 在遠端電腦上設定工作的等候時間</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>Timeout<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> to set a maximum wait time for the jobs running on remote computers.</source>
          <target state="translated">這個範例示範如何使用 <bpt id="p1">*</bpt>逾時<ept id="p1">*</ept> 參數 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 設定的最長等待時間，在遠端電腦上執行的工作。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first command creates a <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> on each of three remote computers (Server01, Server02, and Server03), and then stores the <bpt id="p2">**</bpt>PSSession<ept id="p2">**</ept> objects in the $s variable.</source>
          <target state="translated">第一個命令會建立 <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> 三部遠端電腦 （Server01、 Server02 和 Server03），然後將儲存的每個上 <bpt id="p2">**</bpt>PSSession<ept id="p2">**</ept> $s 變數中的物件。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept> in each of the <bpt id="p3">**</bpt>PSSession<ept id="p3">**</ept> objects in $s.</source>
          <target state="translated">第二個命令會使用 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 執行 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept> 在每個 <bpt id="p3">**</bpt>PSSession<ept id="p3">**</ept> $s 中的物件。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It stores the resulting job objects in the $jobs variable.</source>
          <target state="translated">它會產生的工作物件儲存在 $jobs 變數。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The third command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> in each of the sessions in $s.</source>
          <target state="translated">第三個命令會使用 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 執行 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 在每個 $s 中的工作階段。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> command determines whether all of the commands have completed within 30 seconds.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 命令會判斷所有命令是否已在 30 秒內完成。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>Timeout<ept id="p1">*</ept> parameter with a value of 30 to establish the maximum wait time, and then stores the results of the command in the $done variable.</source>
          <target state="translated">它會使用 <bpt id="p1">*</bpt>逾時<ept id="p1">*</ept> 參數值來建立最大值為 30 的等待時間，並將命令的結果儲存在 $done 變數中。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this case, after 30 seconds, only the command on the Server02 computer has completed.</source>
          <target state="translated">在本例中，30 秒之後，只有 Server02 電腦上的命令已完成。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> ends the wait, displays the command prompt, and returns the object that represents the job that was completed.</source>
          <target state="translated"><bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 結束等待、 顯示命令提示字元中，並傳回代表已完成之工作的物件。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The $done variable contains a job object that represents the job that ran on Server02.</source>
          <target state="translated">$done 變數包含代表已在 Server02 上執行之工作的工作物件。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example 5: Wait until one of several jobs finishes</source>
          <target state="translated">範例 5︰ 等候一個工作完成</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This command identifies three jobs by their IDs and waits until any one of them are completed.</source>
          <target state="translated">此命令會識別三個工作依其識別碼，並等候其中任何一項已完成。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The command prompt returns when the first job finishes.</source>
          <target state="translated">在第一個工作完成時，就會返回命令提示字元。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Example 6: Wait for a period, then allow job to continue in background</source>
          <target state="translated">範例 6︰ 等候一段時間，然後允許在背景中繼續工作</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This command waits 120 seconds (two minutes) for the DailyLog job to finish.</source>
          <target state="translated">此命令等待 120 秒 （兩分鐘） 讓 DailyLog 工作完成。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the job does not finish in the next two minutes, the command prompt returns anyway, and the job continues to run in the background.</source>
          <target state="translated">如果作業沒有在接下來的兩分鐘內完成，命令提示字元傳回，並會繼續在背景執行作業。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Example 7: Wait for a job by name</source>
          <target state="translated">範例 7︰ 依名稱等工作</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This command uses the job name to identify the job for which to wait.</source>
          <target state="translated">此命令會使用此工作名稱來識別要等待的作業。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example 8: Wait for jobs on local computer started with Start-Job</source>
          <target state="translated">範例 8︰ 等待啟動工作以啟動本機電腦上工作</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet with jobs started on the local computer by using <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept>.</source>
          <target state="translated">這個範例示範如何使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 指令程式與工作啟動本機電腦上使用 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>These commands start a job that gets the Windows PowerShell script files that were added or updated in the last week.</source>
          <target state="translated">這些命令啟動可取得上週新增或更新之 Windows PowerShell 指令檔的工作。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The first command uses <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> to start a background job on the local computer.</source>
          <target state="translated">第一個命令使用 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 到本機電腦上啟動背景工作。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The job runs a Get-ChildItem command that gets all of the files that have a .ps1 file name extension that were added or updated in the last week.</source>
          <target state="translated">工作會執行 Get-childitem 命令可取得的所有.ps1 副檔名的新增或更新在過去一週的檔案。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The third command uses <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to wait until the job is completed.</source>
          <target state="translated">第三個命令會使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 等候，直到工作完成。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When the job finishes, the command displays the job object, which contains information about the job.</source>
          <target state="translated">當工作完成時，此命令會顯示工作物件，其中包含工作的相關資訊。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example 9: Wait for jobs started on remote computers by using Invoke-Command</source>
          <target state="translated">範例 9︰ 等待使用叫用命令來啟動遠端電腦上的工作</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This example shows how to use <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> with jobs started on remote computers by using the <bpt id="p2">*</bpt>AsJob<ept id="p2">*</ept> parameter of <bpt id="p3">**</bpt>Invoke-Command<ept id="p3">**</ept>.</source>
          <target state="translated">這個範例示範如何使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 啟動遠端電腦上使用的工作與 <bpt id="p2">*</bpt>AsJob<ept id="p2">*</ept> 參數 <bpt id="p3">**</bpt>叫用命令<ept id="p3">**</ept>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When using <bpt id="p1">*</bpt>AsJob<ept id="p1">*</ept>, the job is created on the local computer and the results are automatically returned to the local computer, even though the job runs on the remote computers.</source>
          <target state="translated">當使用 <bpt id="p1">*</bpt>AsJob<ept id="p1">*</ept>, 工作建立在本機電腦上，結果會自動傳回到本機電腦，即使工作是在遠端電腦上執行。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This example uses <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to determine whether a <bpt id="p2">**</bpt>Get-Process<ept id="p2">**</ept> command running in the sessions on three remote computers is completed.</source>
          <target state="translated">這個範例會使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 來判斷是否 <bpt id="p2">**</bpt>Get-process<ept id="p2">**</ept> 三部遠端電腦上執行的工作階段中的命令完成。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The first command creates <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> objects on three computers and stores them in the $s variable.</source>
          <target state="translated">第一個命令會建立 <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> 三部電腦上的物件，並將它們儲存在 $s 變數。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The second command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Get-Process<ept id="p2">**</ept> in each of the three sessions in $s.</source>
          <target state="translated">第二個命令會使用 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 執行 <bpt id="p2">**</bpt>Get-process<ept id="p2">**</ept> 在每個 $s 中的三個工作階段。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>AsJob<ept id="p1">*</ept> parameter to run the command asynchronously as a background job.</source>
          <target state="translated">此命令會使用 <bpt id="p1">*</bpt>AsJob<ept id="p1">*</ept> 背景工作以非同步方式執行命令的參數。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The command returns a job object, just like the jobs started by using <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept>, and the job object is stored in the $j variable.</source>
          <target state="translated">命令傳回工作物件，就像使用啟動工作 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept>, ，而工作物件會儲存在 $j 變數。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The third command uses a pipeline operator (|) to send the job object in $j to the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">第三個命令使用管線運算子 (|) 的工作物件中傳送 $j 至 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 指令程式。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> command is not required in this case, because the job resides on the local computer.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 命令不需要在此情況下，因為工作位於本機電腦上。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example 10: Wait for a job that has an ID</source>
          <target state="translated">等待工作 id 的範例 10:</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This command waits for the job with an ID value of 1.</source>
          <target state="translated">此命令等待 ID 值為 1 的工作。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">參數</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>-Any</source>
          <target state="translated">-任何</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet displays the command prompt, and returns the job object, when any job finishes.</source>
          <target state="translated">這個指令程式會顯示命令提示字元中，以及任何作業完成時，傳回工作物件，表示。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> waits until all of the specified jobs are complete before it displays the prompt.</source>
          <target state="translated">根據預設， <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 會等到所有指定的工作都完成，才顯示提示。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-Filter</source>
          <target state="translated">篩選器</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Specifies a hash table of conditions.</source>
          <target state="translated">指定條件的雜湊表。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This cmdlet waits for jobs that satisfy all of the conditions in the hash table.</source>
          <target state="translated">這個指令程式會等到符合雜湊表中的條件之所有工作。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Enter a hash table where the keys are job properties and the values are job property values.</source>
          <target state="translated">輸入索引鍵為工作屬性且值為工作屬性值的雜湊表。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This parameter works only on custom job types, such as workflow jobs and scheduled jobs.</source>
          <target state="translated">這個參數只適用於自訂工作類型，例如，工作流程工作和已排程的工作。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It does not work on standard background jobs, such as those created by using the <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">它無法在標準背景工作，例如所建立的使用上 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 指令程式。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For information about support for this parameter, see the help topic for the job type.</source>
          <target state="translated">如需支援此參數的詳細資訊，請參閱工作類型的說明主題。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet continues to wait for jobs in the Suspended or Disconnected state.</source>
          <target state="translated">表示此指令程式會繼續等待工作已暫停或中斷連線狀態。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> returns, or ends  the wait, when jobs are in one of the following states:</source>
          <target state="translated">根據預設， <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 傳回，或結束等待，當工作處於下列狀態之一︰</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Completed</source>
          <target state="translated">Completed</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Failed</source>
          <target state="translated">Failed</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Stopped</source>
          <target state="translated">已停止</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Suspended</source>
          <target state="translated">Suspended</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Disconnected</source>
          <target state="translated">Disconnected</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>-Id</source>
          <target state="translated">識別碼</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Specifies an array of IDs of jobs for which this cmdlet waits.</source>
          <target state="translated">指定工作等候這個指令程式的識別碼的陣列。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The ID is an integer that uniquely identifies the job in the current session.</source>
          <target state="translated">整數，可唯一識別目前工作階段中的 [工作 ID。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It is easier to remember and type than the instance ID, but it is unique only in the current session.</source>
          <target state="translated">很容易記得和輸入與執行個體識別碼，但只在目前工作階段中是唯一。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can type one or more IDs, separated by commas.</source>
          <target state="translated">您可以輸入一個或多個識別碼，以逗號分隔。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To find the ID of a job, type <ph id="ph1">`Get-Job`</ph>.</source>
          <target state="translated">若要尋找工作識別碼，請輸入 <ph id="ph1">`Get-Job`</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-InstanceId</source>
          <target state="translated">-執行個體識別碼</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Specifies an array of instance IDs of jobs for which this cmdlet waits.</source>
          <target state="translated">指定的工作等候這個指令程式的執行個體識別碼的陣列。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The default is all jobs.</source>
          <target state="translated">預設為所有工作。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>An instance ID is a GUID that uniquely identifies the job on the computer.</source>
          <target state="translated">執行個體識別碼是 GUID，可唯一識別電腦上的工作。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To find the instance ID of a job, use <bpt id="p1">**</bpt>Get-Job<ept id="p1">**</ept>.</source>
          <target state="translated">若要尋找工作的執行個體識別碼，請使用 <bpt id="p1">**</bpt>Get-job<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>-Job</source>
          <target state="translated">作業</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Specifies the jobs for which this cmdlet waits.</source>
          <target state="translated">指定用來等候這個指令程式的工作。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the job objects or a command that gets the job objects.</source>
          <target state="translated">輸入包含工作物件的變數，或輸入可取得工作物件的命令。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You can also use a pipeline operator to send job objects to the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">您也可以使用管線運算子將工作物件來傳送 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 指令程式。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> waits for all jobs created in the current session.</source>
          <target state="translated">根據預設， <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 等候目前的工作階段中建立的所有工作。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>-Name</source>
          <target state="translated">-Name</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Specifies friendly names of jobs for which this cmdlet waits.</source>
          <target state="translated">指定用來等候這個指令程式的工作的好記名稱。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>-State</source>
          <target state="translated">狀態</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Specifies a job state.</source>
          <target state="translated">指定工作狀態。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This cmdlet waits only for jobs in the specified state.</source>
          <target state="translated">這個指令程式只等待處於指定狀態的工作。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">此參數接受的值包括：</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>NotStarted</source>
          <target state="translated">NotStarted</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Running</source>
          <target state="translated">Running</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Completed</source>
          <target state="translated">Completed</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Failed</source>
          <target state="translated">Failed</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Stopped</source>
          <target state="translated">已停止</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Blocked</source>
          <target state="translated">封鎖</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Suspended</source>
          <target state="translated">Suspended</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Disconnected</source>
          <target state="translated">Disconnected</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Suspending</source>
          <target state="translated">暫止</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Stopping</source>
          <target state="translated">Stopping</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information about job states, see JobState Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx (http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx) in the Microsoft Developer Network (MSDN).</source>
          <target state="translated">如需工作狀態的詳細資訊，請參閱 &lt; JobState Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate (vs.85 (http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate (vs.85) 在 Microsoft Developer Network (MSDN)。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>-Timeout</source>
          <target state="translated">逾時</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Specifies the maximum wait time for each background job, in seconds.</source>
          <target state="translated">指定等待每個背景工作，以秒為單位的時間上限。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The default value, -1, indicates that the cmdlet waits until the job finishes.</source>
          <target state="translated">預設值為-1，表示此指令程式等待作業完成為止。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The timing starts when you submit the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> command, not the <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept> command.</source>
          <target state="translated">在計時開始，當您送出 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 命令時，不 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept> 命令。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If this time is exceeded, the wait ends and the command prompt returns, even if the job is still running.</source>
          <target state="translated">如果超過這個時間，即使工作仍在執行，也會結束等待並返回命令提示字元。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The command does not display any error message.</source>
          <target state="translated">此命令不會顯示任何錯誤訊息。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">這個 cmdlet 支援一般參數:-偵錯、-ErrorAction、-ErrorVariable、-InformationAction-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 以及-WarningVariable。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">如需詳細資訊，請參閱 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">輸入</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.RemotingJob</source>
          <target state="translated">System.Management.Automation.RemotingJob</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You can pipe a job object to this cmdlet.</source>
          <target state="translated">您可以使用管線將工作物件，此指令程式。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">輸出</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSRemotingJob</source>
          <target state="translated">System.Management.Automation.PSRemotingJob</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This cmdlet returns job objects that represent the completed jobs.</source>
          <target state="translated">此 cmdlet 會傳回代表已完成的工作的工作物件。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If the wait ends because the value of the <bpt id="p1">*</bpt>Timeout<ept id="p1">*</ept> parameter is exceeded, <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> does not return any objects.</source>
          <target state="translated">如果結束等待，因為值 <bpt id="p1">*</bpt>逾時<ept id="p1">*</ept> 超過參數時， <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 不會傳回任何物件。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">附註</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> returns, or ends the wait, when jobs are in one of the following states:</source>
          <target state="translated">根據預設， <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 傳回，或結束等待，當工作處於下列狀態之一︰</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Completed</source>
          <target state="translated">Completed</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Failed</source>
          <target state="translated">Failed</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Stopped</source>
          <target state="translated">已停止</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Suspended</source>
          <target state="translated">Suspended</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Disconnected To direct <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to continue to wait for Suspended and Disconnected jobs, use the <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> parameter.</source>
          <target state="translated">中斷連線到直接 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 若要繼續等候暫止和已中斷連線的工作，請使用 <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> 參數。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相關的連結</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">取得工作</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Invoke-Command</source>
          <target state="translated">Invoke-Command</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Receive-Job</source>
          <target state="translated">接收工作</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remove-Job</source>
          <target state="translated">移除工作</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Resume-Job</source>
          <target state="translated">Resume-Job</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Start-Job</source>
          <target state="translated">啟動工作</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Stop-Job</source>
          <target state="translated">停止工作</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Suspend-Job</source>
          <target state="translated">Suspend-Job</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>about_Remote_Jobs</source>
          <target state="translated">about_Remote_Jobs</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>about_Remote_Variables</source>
          <target state="translated">about_Remote_Variables</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>