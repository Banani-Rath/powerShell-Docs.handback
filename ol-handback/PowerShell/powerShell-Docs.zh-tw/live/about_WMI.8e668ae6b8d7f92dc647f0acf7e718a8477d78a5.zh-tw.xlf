<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26170559e1720c3afb90a7bc461c8e183fc4d8f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_WMI.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b047983fdfaf27f698326c9310e47b7f02609e6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68b540d4c9f6790f17e57e1b9cd515304fd0953d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_WMI</source>
          <target state="translated">about_WMI</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About WMI</source>
          <target state="translated">有關 WMI</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_WMI</source>
          <target state="translated">about_WMI</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_WMI</source>
          <target state="translated">about_WMI</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">簡短描述</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Windows Management Instrumentation (WMI) uses the Common Information Model (CIM) to represent systems, applications, networks, devices, and other manageable components of the modern enterprise.</source>
          <target state="translated">Windows Management Instrumentation (WMI) 來代表系統、 應用程式、 網路、 裝置和其他可管理元件的現代企業使用通用訊息模型 (CIM)。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細描述</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows Management Instrumentation (WMI) is Microsoft’s implementation of Web-Based Enterprise Management (WBEM), the industry standard.</source>
          <target state="translated">Windows Management Instrumentation (WMI) 是 Microsoft Web 架構企業管理 (WBEM)，業界標準的實作。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Classic WMI uses DCOM to communicate with networked devices to manage remote systems.</source>
          <target state="translated">傳統的 WMI 使用 DCOM 來與網路裝置來管理遠端系統通訊。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell� 3.0 introduces a CIM provider model that uses WinRM to remove the dependency on DCOM.</source>
          <target state="translated">Windows PowerShell 3.0 引進了使用 WinRM 來移除的相依性 DCOM CIM 提供者模型。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This CIM provider model also uses new WMI provider APIs that enable developers to write  Windows PowerShell cmdlets in native code (C<ph id="ph1">\+\+</ph>).</source>
          <target state="translated">此 CIM 提供者模型也會使用新的 WMI 提供者 Api 可讓開發人員在原生程式碼中撰寫 Windows PowerShell cmdlet (C<ph id="ph1">\+\+</ph>)。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Do not confuse WMI providers with  Windows PowerShell providers.</source>
          <target state="translated">請勿混淆與 Windows PowerShell 提供者的 WMI 提供者。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Many Windows features have an associated WMI provider that exposes their management capabilities.</source>
          <target state="translated">多項 Windows 功能有關聯的 WMI 提供者會公開其管理功能。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To get WMI providers, run a WMI query that gets instances of the __Provider WMI class, such as the following query.</source>
          <target state="translated">若要取得 WMI 提供者，執行 WMI 查詢並取得 __Provider WMI 類別，例如下列查詢的執行個體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>THREE COMPONENTS OF WMI</source>
          <target state="translated">WMI 的三大元件</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following three components of WMI interact with  Windows PowerShell: Namespaces, Providers, and Classes.</source>
          <target state="translated">WMI 的下列三個元件使用 Windows PowerShell 互動︰ 命名空間、 提供者和類別。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>WMI Namespaces organize WMI providers and WMI classes into groups of related components.</source>
          <target state="translated">WMI 命名空間會將 WMI 提供者和 WMI 類別組織成相關元件的群組。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this way, they are similar to .NET Framework namespaces.</source>
          <target state="translated">如此一來，它們是類似於.NET Framework 命名空間。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Namespaces are not physical locations, but are more like logical databases.</source>
          <target state="translated">命名空間不是實體位置，而比較像是邏輯資料庫。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All WMI namespaces are instances of the __Namespace system class.</source>
          <target state="translated">所有的 WMI 命名空間是 __Namespace 系統類別的執行個體。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The default WMI namespace is Root<ph id="ph1">\/</ph>CIMV2 (since Microsoft Windows 2000).</source>
          <target state="translated">預設 WMI 命名空間是根<ph id="ph1">\/</ph>CIMV2 （從 Microsoft Windows 2000)。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To use  Windows PowerShell to get WMI namespaces in the current session, use a command with the following format.</source>
          <target state="translated">若要使用 Windows PowerShell 取得目前工作階段中的 WMI 命名空間，使用下列格式的命令。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To get WMI namespaces in other namespaces, use the Namespace parameter to change the location of the search.</source>
          <target state="translated">若要取得其他命名空間中的 WMI 命名空間，使用命名空間參數來變更搜尋的位置。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following command finds WMI namespaces that reside in the Root<ph id="ph1">\/</ph>Cimv2<ph id="ph2">\/</ph>Applications namespace.</source>
          <target state="translated">下列命令會尋找位於根目錄中的 WMI 命名空間<ph id="ph1">\/</ph>Cimv2<ph id="ph2">\/</ph>應用程式命名空間。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>WMI namespaces are hierarchical.</source>
          <target state="translated">WMI 命名空間是階層式組織。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Therefore, obtaining a list of all namespaces on a particular system requires performing a recursive query starting at the root namespace.</source>
          <target state="translated">因此，取得特定的系統上的所有命名空間的清單，必須執行遞迴查詢開始的根命名空間。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>WMI Providers expose information about Windows manageable objects.</source>
          <target state="translated">WMI 提供者公開 Windows 可管理物件的相關資訊。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A provider retrieves data from a component, and passes that data through WMI to a management application, such as  Windows PowerShell.</source>
          <target state="translated">提供者元件，請從擷取資料，並傳送該資料透過 WMI 管理應用程式，例如 Windows PowerShell。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Most WMI providers are dynamic providers, which means that they obtain the data dynamically when it is requested through the management application.</source>
          <target state="translated">大部分的 WMI 提供者是動態的提供者，這表示它們先以動態方式取得的資料會透過管理應用程式要求時。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>FINDING WMI CLASSES</source>
          <target state="translated">尋找 WMI 類別</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In a default installation of Windows 8, there are more than 1,100 WMI classes in Root<ph id="ph1">\/</ph>Cimv2.</source>
          <target state="translated">在預設安裝的 Windows 8 中，多個 1100 WMI 類別中有根<ph id="ph1">\/</ph>Cimv2。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>With this many WMI classes, the challenge becomes identifying the appropriate WMI class to use to perform a specific task.</source>
          <target state="translated">這麼多的 WMI 類別中，所面臨的挑戰會變成用來識別適當的 WMI 類別，用來執行特定工作。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Windows PowerShell 3.0 provides two ways to find WMI classes that are related to a specific topic.</source>
          <target state="translated">Windows PowerShell 3.0 提供兩種方式來尋找特定主題相關的 WMI 類別。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example,to find WMI classes in the root\CIMV2 WMI namespace that are related to disks, you can use a query such as the one shown here.</source>
          <target state="translated">例如，若要尋找 root\CIMV2 WMI 命名空間與磁碟相關的 WMI 類別，您可以使用查詢，如以下所示。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To find WMI classes that are related to memory, you might use a query such as the one shown here.</source>
          <target state="translated">若要尋找與記憶體相關的 WMI 類別，您可以使用查詢，如以下所示。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The CIM cmdlets also provide the ability to discover WMI classes.</source>
          <target state="translated">CIM cmdlet 也提供了可探索的 WMI 類別。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To do this, use the Get-CIMClass cmdlet.</source>
          <target state="translated">若要這樣做，請使用 Get CIMClass 指令程式。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The command shown here lists WMI classes related to video.</source>
          <target state="translated">此處顯示清單 WMI 類別的命令與相關的影片。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Tab expansion works when changing WMI namespaces, and therefore use of tab expansion makes sub-WMI namespaces easily discoverable.</source>
          <target state="translated">變更 WMI 命名空間時，索引標籤上的展開方式，因此使用 tab 鍵擴充功能會使子 WMI 命名空間輕易地找到。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the following example, the Get-CimClass cmdlet lists WMI classes related to power settings.</source>
          <target state="translated">在下列範例中，Get CimClass cmdlet 會列出與電源設定相關的 WMI 類別。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To find it, type the root<ph id="ph1">\/</ph>CIMV2<ph id="ph2">\/</ph> WMI namespace, and then press type the root<ph id="ph3">\/</ph>CIMV2<ph id="ph4">\/</ph> WMI namespace, and then press the Tab key several times until the power namespace appears.</source>
          <target state="translated">若要尋找它，輸入根<ph id="ph1">\/</ph>CIMV2<ph id="ph2">\/</ph> WMI 命名空間，然後按下輸入根<ph id="ph3">\/</ph>CIMV2<ph id="ph4">\/</ph> WMI 命名空間，，然後按下 Tab 鍵數次，直到出現電源命名空間。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Here is the command:</source>
          <target state="translated">命令如下︰</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>