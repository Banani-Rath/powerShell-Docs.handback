<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3c2087bf369456b20a16a8cb57793c7fcaebe79</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Try_Catch_Finally.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00842595bbbf58525893553e3c10f4a203254ab3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac22de6e0ef9736ca56bc0e3cd3772e6f5faa735</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell, командлет</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Try Catch Finally</source>
          <target state="translated">О Try Catch Finally</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">КРАТКОЕ ОПИСАНИЕ</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use the Try, Catch, and Finally blocks to handle terminating errors.</source>
          <target state="translated">В данной статье описывается использование Try, Catch и Finally блоки обработки прерывающие ошибки.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">ПОДРОБНОЕ ОПИСАНИЕ</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use Try, Catch, and Finally blocks to respond to or handle terminating errors in scripts.</source>
          <target state="translated">Используйте Try, Catch и Finally блоки ответить или обрабатывать прерывающие ошибки в сценарии.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Trap statement can also be used to handle terminating errors in scripts.</source>
          <target state="translated">Оператор Trap также может использоваться для обработки прерывающие ошибки в сценарии.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see about_Trap.</source>
          <target state="translated">Дополнительные сведения см. в разделе about_Trap.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">Неустранимая ошибка останавливает выполнение инструкции.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script using the current pipeline.</source>
          <target state="translated">Если Windows PowerShell не обрабатывает неустранимую ошибку каким-либо образом, Windows PowerShell также останавливает выполнение функции или скрипт, используя текущий конвейер.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">В других языках, например C<ph id="ph1">\#</ph>, прерывающие ошибки, рассматриваются как исключения.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about errors, see about_Errors.</source>
          <target state="translated">Дополнительные сведения об ошибках см. в разделе about_Errors.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the Try block to define a section of a script in which you want  Windows PowerShell to monitor for errors.</source>
          <target state="translated">Используйте блока Try, чтобы определить раздел сценария, в котором требуется Windows PowerShell для отслеживания ошибок.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When an error occurs within the Try block, the error is first saved to the $Error automatic variable.</source>
          <target state="translated">При возникновении ошибки в блоке Try ошибка сначала сохраняется в автоматической переменной $Error.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Windows PowerShell then searches for a Catch block to handle the error.</source>
          <target state="translated">Windows PowerShell выполняет поиск блок Catch для обработки ошибки.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the Try statement does not have a  matching Catch block,  Windows PowerShell continues to search for an appropriate Catch block or Trap statement in the parent scopes.</source>
          <target state="translated">Если оператор Try не имеет соответствующего блока Catch, Windows PowerShell продолжает найдите соответствующий блок Catch или оператор Trap в родительских областей.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After a Catch block is completed or if no appropriate Catch block or Trap statement is found, the Finally block is run.</source>
          <target state="translated">После завершения блока Catch, или если нет соответствующий блок Catch или оператор Trap обнаруживается, и, наконец, блок выполняется.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the error cannot be handled, the error is written to the error stream.</source>
          <target state="translated">Если ошибка не обрабатывается, ошибка записывается в поток ошибок.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A Catch block can include commands for tracking the failure or for recovering the expected flow of the script.</source>
          <target state="translated">Блок Catch может содержать команды для отслеживания сбоя или восстановления из ожидаемого потока сценария.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A Catch block can specify which error types it catches.</source>
          <target state="translated">Блок Catch можно указать, какая именно ошибка типы перехватываются.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for different kinds of errors.</source>
          <target state="translated">Оператор Try может содержать несколько блоков Catch для различных видов ошибок.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A Finally block can be used to free any resources that are no longer needed by your script.</source>
          <target state="translated">Объект наконец блок может использоваться для освобождения любых ресурсов, которые больше не требуются сценария.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Try, Catch, and Finally resemble the Try, Catch, and Finally keywords used in the C<ph id="ph1">\#</ph> programming language.</source>
          <target state="translated">Try, Catch и Finally напоминают Try, Catch и Finally ключевые слова, используемые в языке C<ph id="ph1">\#</ph> языка программирования.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">СИНТАКСИС</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A Try statement contains a Try block, zero or more Catch blocks, and zero or one Finally block.</source>
          <target state="translated">Оператор Try содержит блок Try, ноль или несколько блоков Catch и ноль или один блок Finally.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A Try statement must have at least one Catch block or one Finally block.</source>
          <target state="translated">Оператор Try должен иметь по крайней мере один блок Catch или один блок Finally.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following shows the Try block syntax:</source>
          <target state="translated">Ниже приведен синтаксис блока Try.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Try keyword is followed by a statement list in braces.</source>
          <target state="translated">Ключевое слово Try следует список инструкций в фигурные скобки.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs while the statements in the statement list are being run, the script passes the error object from the Try block to an appropriate Catch block.</source>
          <target state="translated">Если происходит неустранимая ошибка во время выполнения инструкции в список операторов, сценарий передает объект error из блока Try в соответствующий блок Catch.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following shows the Catch block syntax:</source>
          <target state="translated">Ниже приведен синтаксис блока Catch.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Error types appear in brackets.</source>
          <target state="translated">Типы ошибок отображаются в квадратных скобках.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The outermost brackets indicate the element is optional.</source>
          <target state="translated">Внешняя скобки указывают, что этот элемент является необязательным.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Catch keyword is followed by an optional list of error type specifications and a statement list.</source>
          <target state="translated">Ключевое слово Catch следуют необязательный список спецификации типов ошибок и список инструкций.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the Try block,  Windows PowerShell searches for an appropriate Catch block.</source>
          <target state="translated">Если в блоке Try, происходит неустранимая ошибка, Windows PowerShell выполняет поиск соответствующего блока Catch.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If one is found, the statements in the Catch block are executed.</source>
          <target state="translated">Если он найден, выполняются операторы в блоке Catch.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The Catch block can specify one or more error types.</source>
          <target state="translated">Блок Catch можно указать один или несколько типов ошибок.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An error type is a Microsoft .NET Framework exception or an exception that is derived from a .NET Framework exception.</source>
          <target state="translated">Тип ошибки: исключение Microsoft .NET Framework или исключение, которое является производным от исключения .NET Framework.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">Блок Catch обрабатывает ошибки указанного класса исключения .NET Framework или любого класса, производного от указанного класса.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a Catch block specifies an error type, that Catch block handles that type of error.</source>
          <target state="translated">Если блок Catch, указывающий тип ошибки, этот блок Catch обрабатывает ошибок такого типа.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If a Catch block does not specify an error type, that Catch block handles any error encountered in the Try block.</source>
          <target state="translated">Если блок Catch не указывает тип ошибки, этот блок Catch обрабатывает любая ошибка возникла в блоке Try.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for the different specified error types.</source>
          <target state="translated">Оператор Try может содержать несколько блоков Catch для разных указанной ошибки типов.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following shows the Finally block syntax:</source>
          <target state="translated">Показано в следующем блоке Finally синтаксис:</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Finally keyword is followed by a statement list that runs every time the script is run, even if the Try statement ran without error or an error was caught in a Catch statement.</source>
          <target state="translated">Наконец следует ключевое слово список инструкций, который выполняется каждый раз, чтобы запустить сценарий, даже если оператор Try выполнена без ошибок или ошибка была перехвачена в оператор Catch.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that pressing CTRL<ph id="ph1">\+</ph>C stops the pipeline.</source>
          <target state="translated">Обратите внимание, что нажатие клавиши CTRL<ph id="ph1">\+</ph>C останавливает конвейера.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Objects that are sent to the pipeline will not be displayed as output.</source>
          <target state="translated">Объекты, которые отправляются в конвейер, не должны отображаться как выходные данные.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, if you include a statement to be displayed, such as "Finally block has run", it will not be displayed after you press CTRL<ph id="ph1">\+</ph>C, even if the Finally block ran.</source>
          <target state="translated">Таким образом Если вы включите инструкцию для отображения, например «Наконец выполнен блок», он будет отображаться после нажатия клавиши CTRL<ph id="ph1">\+</ph>C, даже если наконец выполнения блока.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CATCHING ERRORS</source>
          <target state="translated">ПЕРЕХВАТ ОШИБОК</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following sample script shows a Try block with a Catch block:</source>
          <target state="translated">В следующем образце сценария показано блок Try с блоком CATCH.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Catch keyword must immediately follow the Try block or another Catch block.</source>
          <target state="translated">Ключевое слово Catch должен следовать непосредственно за Try или другой блок Catch.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Windows PowerShell does not recognize "NonsenseString" as a cmdlet or other item.</source>
          <target state="translated">Windows PowerShell не распознает «NonsenseString» как командлет или другого элемента.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Running this script returns the following result:</source>
          <target state="translated">Выполнение этого сценария возвращает следующий результат:</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the script encounters "NonsenseString", it causes a terminating error.</source>
          <target state="translated">Когда сценарий обнаруживает «NonsenseString», он вызывает неустранимую ошибку.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Catch block handles the error by running the statement list inside the block.</source>
          <target state="translated">Блок Catch обрабатывает ошибки, выполнение списка операторов внутри блока.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>USING MULTIPLE CATCH STATEMENTS</source>
          <target state="translated">С ПОМОЩЬЮ НЕСКОЛЬКИХ ОПЕРАТОРОВ CATCH</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A Try statement can have any number of Catch blocks.</source>
          <target state="translated">Оператор Try может иметь любое количество блоков Catch.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script has a Try block that downloads MyFile.doc, and it contains two Catch blocks:</source>
          <target state="translated">Например следующий сценарий содержит блок Try, который загружает MyFile.doc и он содержит два блока Catch:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first Catch block handles errors of the System.Net.WebException and System.IO.IOException types.</source>
          <target state="translated">Первый блок Catch обрабатывает ошибки System.Net.WebException и System.IO.IOException типов.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second Catch block does not specify an error type.</source>
          <target state="translated">Второй блок Catch не указывает тип ошибки.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second Catch block handles any other terminating errors that occur.</source>
          <target state="translated">Второй блок Catch обрабатывает другие возникающие прерывающие ошибки.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Windows PowerShell matches error types by inheritance.</source>
          <target state="translated">Windows PowerShell сопоставляет типы ошибок путем наследования.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">Блок Catch обрабатывает ошибки указанного класса исключения .NET Framework или любого класса, производного от указанного класса.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example contains a Catch block that catches a "Command Not Found" error:</source>
          <target state="translated">В следующем примере содержится блок Catch, который перехватывает ошибку «Команда не найдена»:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The specified error type, CommandNotFoundException, inherits from the System.SystemException type.</source>
          <target state="translated">Тип ошибки с заданными CommandNotFoundException, наследует от типа System.SystemException.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example also catches a Command Not Found error:</source>
          <target state="translated">Следующий пример также перехватывает ошибку, команда не найдена:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This Catch block handles the "Command Not Found" error and other errors that inherit from the SystemException type.</source>
          <target state="translated">Этот блок Catch обрабатывает ошибки «Команда не найдена» и другие ошибки, которые наследуют от типа SystemException.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you specify an error class and one of its derived classes, place the Catch block for the derived class before the Catch block for the general class.</source>
          <target state="translated">Если указать класс ошибки и один из его производных классов, поместите блок Catch для производного класса перед блоком Catch для общего класса.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>FREEING RESOURCES BY USING FINALLY</source>
          <target state="translated">ОСВОБОЖДЕНИЕ РЕСУРСОВ С ПОМОЩЬЮ FINALLY</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To free resources used by a script, add a Finally block after the Try and Catch blocks.</source>
          <target state="translated">Чтобы освободить ресурсы, используемые сценарием, добавьте блок Finally после блоков Try и Catch.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The Finally block statements run regardless of whether the Try block encounters a terminating error.</source>
          <target state="translated">Блок Finally инструкций, независимо от того, является ли блок Try обнаруживает неустранимую ошибку.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Windows PowerShell runs the Finally block before the script terminates or before the current block goes out of scope.</source>
          <target state="translated">Windows PowerShell выполняет блок Finally перед сценарий завершает или текущий блок выходит за пределы области.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A Finally block runs even if you use CTRL<ph id="ph1">\+</ph>C to stop the script.</source>
          <target state="translated">Объект блок Finally выполняется даже при использовании CTRL<ph id="ph1">\+</ph>C, чтобы остановить выполнение сценария.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A Finally block also runs if an Exit keyword stops the script from within a Catch block.</source>
          <target state="translated">Объект блока Finally также запускается при остановке ключевое слово Exit сценария из блока Catch.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">СМ. ТАКЖЕ</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>