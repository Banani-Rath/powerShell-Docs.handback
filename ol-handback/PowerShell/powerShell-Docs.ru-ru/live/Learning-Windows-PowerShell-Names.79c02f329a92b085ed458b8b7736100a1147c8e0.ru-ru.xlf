<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ru-ru">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b19e1d4e36e86cb0048e9303277b968a341fa19</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04046aa" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Learning Windows PowerShell Names</source>
          <target state="translated">Изучение имен Windows PowerShell</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learning Windows PowerShell Names</source>
          <target state="translated">Изучение имен Windows PowerShell</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Learning names of commands and command parameters is a significant time investment with most command\-line interfaces.</source>
          <target state="translated">В большинстве интерфейсов командной строки должно уделяться значительное время изучению имен команд и их параметров.</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The issue is that there are very few patterns, so the only way to learn is by memorizing each command and each parameter that you need to use on a regular basis.</source>
          <target state="translated">Проблема заключается в том, что существует очень мало шаблонов имени, поэтому единственным способом изучить команды является запоминание каждой команды и каждого параметра, которые приходится регулярно использовать.</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you work with a new command or parameter, you cannot generally use what you already know; you have to find and learn a new name.</source>
          <target state="translated">При работе с новой командой или параметром обычно нельзя использовать то, что вы уже знаете; необходимо найти и запомнить новое имя.</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you look at how interfaces grow from a small set of tools with incremental additions to functionality, it is easy to see why the structure is nonstandard.</source>
          <target state="translated">Если рассмотреть, как интерфейсы расширяются из небольшого набора средств при постепенном добавлении функциональных возможностей, легко понять, почему их структура нестандартна.</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>With command names in particular, this may sound logical since each command is a separate tool, but there is a better way to handle command names.</source>
          <target state="translated">В особенности, что касается имен команд, это может выглядеть логичным, так как каждая команда является отдельным средством, но при работе с именами команд есть способ лучше.</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Most commands are built to manage elements of the operating system or applications, such as services or processes.</source>
          <target state="translated">Большинство команд создано для управления элементами операционной системы или приложений, такими как службы или процессы.</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The commands have a variety of names that may or may not fit into a family.</source>
          <target state="translated">Команды имеют разнообразные имена, которые могут соответствовать или не соответствовать семейству.</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, on Windows systems, you can use the <bpt id="p1">**</bpt>net start<ept id="p1">**</ept> and <bpt id="p2">**</bpt>net stop<ept id="p2">**</ept> commands to start and stop a service.</source>
          <target state="translated">Например, в системах Windows можно использовать команды <bpt id="p1">**</bpt>net start<ept id="p1">**</ept> и <bpt id="p2">**</bpt>net stop<ept id="p2">**</ept> для запуска или остановки службы.</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There is another more generalized service control tool for Windows that has a completely different name, <bpt id="p1">**</bpt>sc<ept id="p1">**</ept>, that does not fit into the naming pattern for the <bpt id="p2">**</bpt>net<ept id="p2">**</ept> service commands.</source>
          <target state="translated">Есть другое, более обобщенное средство управления службами для Windows с совершенно другим именем — <bpt id="p1">**</bpt>sc<ept id="p1">**</ept>, не соответствующим шаблону именования для команд службы <bpt id="p2">**</bpt>net<ept id="p2">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For process management, Windows has the <bpt id="p1">**</bpt>tasklist<ept id="p1">**</ept> command to list processes and the <bpt id="p2">**</bpt>taskkill<ept id="p2">**</ept> command to kill processes.</source>
          <target state="translated">В целях управления процессами в Windows есть команда <bpt id="p1">**</bpt>tasklist<ept id="p1">**</ept> для предоставления списка процессов и команда <bpt id="p2">**</bpt>taskkill<ept id="p2">**</ept> для завершения процессов.</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Commands that take parameters have irregular parameter specifications.</source>
          <target state="translated">Команды, принимающие параметры, имеют нестандартные спецификации параметров.</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You cannot use the <bpt id="p1">**</bpt>net start<ept id="p1">**</ept> command to start a service on a remote computer.</source>
          <target state="translated">Команду <bpt id="p1">**</bpt>net start<ept id="p1">**</ept> нельзя использовать для запуска службы на удаленном компьютере.</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>sc<ept id="p1">**</ept> command will start a service on a remote computer, but to specify the remote computer, you must prefix its name with a double backslash.</source>
          <target state="translated">Команда <bpt id="p1">**</bpt>sc<ept id="p1">**</ept> запускает службу на удаленном компьютере, но для задания удаленного компьютера перед его именем нужно поставить две обратные косые черты.</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, to start the spooler service on a remote computer named DC01, you would type <bpt id="p1">**</bpt>sc \\\\DC01 start spooler<ept id="p1">**</ept>.</source>
          <target state="translated">Например, для запуска службы Spooler на удаленном компьютере с именем DC01 следует ввести <bpt id="p1">**</bpt>sc \\DC01 start spooler<ept id="p1">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To list tasks running on DC01, you need to use the <bpt id="p1">**</bpt>\/S<ept id="p1">**</ept> (for "system") parameter and supply the name DC01 without backslashes, like this: <bpt id="p2">**</bpt>tasklist \/S DC01<ept id="p2">**</ept>.</source>
          <target state="translated">Для перечисления задач, выполняющихся на DC01, следует использовать параметр <bpt id="p1">**</bpt>/S<ept id="p1">**</ept> (от system — система) и задать имя DC01 без обратных косых черт, например <bpt id="p2">**</bpt>tasklist /S DC01<ept id="p2">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Although there are important technical distinctions between a service and a process, they are both examples of manageable elements on a computer that have a well\-defined life cycle.</source>
          <target state="translated">Хотя между службой и процессом имеются важные технические различия, это два примера управляемых элементов на компьютере, имеющем хорошо определенный жизненный цикл.</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You may want to start or stop a service or process, or get a list of all currently running services or processes.</source>
          <target state="translated">Вам может потребоваться запустить или остановить службу или процесс, либо получить список всех выполняющихся в настоящее время служб или процессов.</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In other words, although a service and a process are different things, the actions we perform on a service or a process are often conceptually the same.</source>
          <target state="translated">Другими словами, хотя служба и процесс — это разные вещи, действия, производимые с ними, концептуально часто являются одинаковыми.</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Furthermore, choices we may make to customize an action by specifying parameters may be conceptually similar as well.</source>
          <target state="translated">Более того, выбор, который мы можем сделать для настройки действия заданием параметров, концептуально также может быть таким же.</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Windows PowerShell exploits these similarities to reduce the number of distinct names you need to know to understand and use cmdlets.</source>
          <target state="translated">Windows PowerShell использует это сходство для уменьшения количества различающихся имен, которые требуется знать для понимания и использования командлетов.</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Cmdlets Use Verb\-Noun Names to Reduce Command Memorization</source>
          <target state="translated">Сокращение количества обязательных для запоминания команд с помощью шаблона глагол-существительное</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses a "verb\-noun" naming system, where each cmdlet name consists of a standard verb hyphenated with a specific noun.</source>
          <target state="translated">Windows PowerShell использует систему именования "глагол-существительное", где имя каждого командлета состоит из обычного глагола, после которого через дефис идет специальное существительное.</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Windows PowerShell verbs are not always English verbs, but they express specific actions in Windows PowerShell.</source>
          <target state="translated">Глаголы Windows PowerShell не всегда являются глаголами английского языка, но они выражают определенное действие в оболочке Windows PowerShell.</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Nouns are very much like nouns in any language, they describe specific types of objects that are important in system administration.</source>
          <target state="translated">Существительные во многом сходны с существительными любого языка, они описывают объекты определенных типов, важные для администрирования системы.</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is easy to demonstrate how these two\-part names reduce learning effort by looking at a few examples of verbs and nouns.</source>
          <target state="translated">Несложно продемонстрировать, как эти состоящие из двух частей имена уменьшают необходимые для изучения усилия. Рассмотрим для этого несколько примеров глаголов и существительных.</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Nouns are less restricted, but they should always describe what a command acts upon.</source>
          <target state="translated">Глаголы менее ограничены, но они должны всегда описывать, на что действует команда.</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has commands such as <bpt id="p1">**</bpt>Get\-Process<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Stop\-Process<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Get\-Service<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Stop\-Service<ept id="p4">**</ept>.</source>
          <target state="translated">В Windows PowerShell используются такие команды как <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Stop-Process<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Get-Service<ept id="p3">**</ept> и <bpt id="p4">**</bpt>Stop-Service<ept id="p4">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the case of two nouns and two verbs, consistency does not simplify learning that much.</source>
          <target state="translated">В случае двух существительных и двух глаголов согласованность не слишком упрощает изучение.</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, if you look at a standard set of 10 verbs and 10 nouns, you then have only 20 words to understand, but those words can be used to form 100 distinct command names.</source>
          <target state="translated">Однако если взглянуть на обычный набор из десяти глаголов и десяти существительных, то нужно изучить только 20 слов, но с их помощью можно образовать 100 различных имен команд.</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Frequently, you can recognize what a command does by reading its name, and it is usually apparent what name should be used for a new command.</source>
          <target state="translated">Часто по имени команды можно понять, что она выполняет, и обычно бывает очевидным, какое имя должно использоваться для новой команды.</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, a computer shutdown command might be <bpt id="p1">**</bpt>Stop\-Computer<ept id="p1">**</ept>.</source>
          <target state="translated">Например, команда завершения работы компьютера может выглядеть как <bpt id="p1">**</bpt>Stop-Computer<ept id="p1">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A command that lists all computers on a network might be <bpt id="p1">**</bpt>Get\-Computer<ept id="p1">**</ept>.</source>
          <target state="translated">Команда, формирующая список всех компьютеров в сети, может выглядеть как <bpt id="p1">**</bpt>Get-Computer<ept id="p1">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The command that gets the system date is <bpt id="p1">**</bpt>Get\-Date<ept id="p1">**</ept>.</source>
          <target state="translated">Командой получения даты системы является команда <bpt id="p1">**</bpt>Get-Date<ept id="p1">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can list all commands that include a particular verb with the <bpt id="p1">**</bpt>\-Verb<ept id="p1">**</ept> parameter for <bpt id="p2">**</bpt>Get\-Command<ept id="p2">**</ept> (We will discuss <bpt id="p3">**</bpt>Get\-Command<ept id="p3">**</ept> in detail in the next section).</source>
          <target state="translated">Можно перечислить все команды, включающие определенный глагол, задав параметр <bpt id="p1">**</bpt>-Verb<ept id="p1">**</ept> для <bpt id="p2">**</bpt>Get-Command<ept id="p2">**</ept> (команда <bpt id="p3">**</bpt>Get-Command<ept id="p3">**</ept> будет подробно рассмотрена в следующем разделе).</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, to see all cmdlets that use the verb <bpt id="p1">**</bpt>Get<ept id="p1">**</ept>, type:</source>
          <target state="translated">Например, для вывода списка всех командлетов, в которых используется глагол <bpt id="p1">**</bpt>Get<ept id="p1">**</ept>, введите:</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>\-Noun<ept id="p1">**</ept> parameter is even more useful because it allows you to see a family of commands that affect the same type of object.</source>
          <target state="translated">Параметр <bpt id="p1">**</bpt>-Noun<ept id="p1">**</ept> еще полезнее, так как позволяет просмотреть семейство команд, влияющих на объекты одного типа:</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, if you want to see which commands are available for managing services, type following command:</source>
          <target state="translated">Например, если необходимо видеть, какие команды имеются для управления службами, введите следующую команду:</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A command is not necessarily a cmdlet, just because it has a verb\-noun naming scheme.</source>
          <target state="translated">Команда — это не обязательно командлет только из-за того, что он имеет схему именования глагол-существительное.</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>One example of a native Windows PowerShell command that is not a cmdlet but has a verb\-noun name, is the command for clearing a console window, Clear\-Host.</source>
          <target state="translated">Примером собственной команды Windows PowerShell, не являющейся командлетом, но имеющей имя типа глагол-существительное, является команда очистки окна консоли Clear-Host.</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The Clear\-Host command is actually an internal function, as you can see if you run Get\-Command against it:</source>
          <target state="translated">Команда Clear-Host в действительности является внутренней функцией, в чем можно убедиться, выполнив для нее команду Get-Command:</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Cmdlets Use Standard Parameters</source>
          <target state="translated">Командлеты используют стандартные параметры</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As noted earlier, commands used in traditional command\-line interfaces do not generally have consistent parameter names.</source>
          <target state="translated">Как уже отмечалось ранее, команды, используемые в традиционных интерфейсах командной строки, обычно не применяют согласованные имена параметров.</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Sometimes parameters do not have names at all.</source>
          <target state="translated">Иногда параметры вообще не имеют имен.</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When they do, they are often single\-character or abbreviated words that can be typed rapidly but are not easily understood by new users.</source>
          <target state="translated">Если же они имеют имя, это имя часто состоит из одного знака или аббревиатуры, которую можно быстро ввести, но которая трудно осмысливается новыми пользователями.</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Unlike most other traditional command\-line interfaces, Windows PowerShell processes parameters directly, and it uses this direct access to the parameters along with developer guidance to standardize parameter names.</source>
          <target state="translated">В отличие от большинства других традиционных интерфейсов командной строки, оболочка Windows PowerShell обрабатывает параметры непосредственно и использует этот непосредственный доступ к параметрам наряду с рекомендациями разработчика для стандартизации имен параметров.</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Although this does not guarantee that every cmdlet will always conform to the standards, it does encourage it.</source>
          <target state="translated">Хотя это не гарантирует того, что каждый командлет будет всегда соответствовать стандартам, такая рекомендация способствует стандартизации.</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Parameter names always have a '\-' prepended to them when you use them, to allow Windows PowerShell to clearly identify them as parameters.</source>
          <target state="translated">При использовании параметров перед их именами всегда стоит "-", что позволяет оболочке Windows PowerShell легко идентифицировать их как параметры.</target>         
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Get\-Command \-Name Clear\-Host<ept id="p1">**</ept> example, the parameter's name is <bpt id="p2">**</bpt>Name<ept id="p2">**</ept>, but it is entered as \-<bpt id="p3">**</bpt>Name<ept id="p3">**</ept>.</source>
          <target state="translated">В примере <bpt id="p1">**</bpt>Get-Command -Name Clear-Host<ept id="p1">**</ept> параметр имеет имя <bpt id="p2">**</bpt>Name<ept id="p2">**</ept>, но вводится как <bpt id="p3">**</bpt>-Name<ept id="p3">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Here are some of the general characteristics of the standard parameter names and usages.</source>
          <target state="translated">Далее приводятся некоторые из общих характеристик обычных имен параметров и использования этих параметров.</target>         
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Help Parameter (?)</source>
          <target state="translated">Параметр справки (?)</target>         
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When you specify the <bpt id="p1">**</bpt>\-?<ept id="p1">**</ept></source>
          <target state="translated">При указании параметра <bpt id="p1">**</bpt>-?<ept id="p1">**</ept></target>         
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>parameter to any cmdlet, the cmdlet is not executed.</source>
          <target state="translated">в каком-либо командлете последний не исполняется.</target>         
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Instead, Windows PowerShell displays help for the cmdlet.</source>
          <target state="translated">Вместо этого Windows PowerShell отображает справку для командлета.</target>         
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Common Parameters</source>
          <target state="translated">Общие параметры</target>         
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has several parameters known as <bpt id="p1">*</bpt>common parameters<ept id="p1">*</ept>.</source>
          <target state="translated">Оболочка Windows PowerShell содержит несколько параметров, называемых <bpt id="p1">*</bpt>общими<ept id="p1">*</ept>.</target>         
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Because these parameters are controlled by the Windows PowerShell engine, whenever they are implemented by a cmdlet, they will always behave the same way.</source>
          <target state="translated">Так как эти параметры контролируются подсистемой Windows PowerShell, при каждом использовании командлетом их поведение будет всегда одинаковым.</target>         
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The common parameters are <bpt id="p1">**</bpt>WhatIf<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Confirm<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Verbose<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Debug<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Warn<ept id="p5">**</ept>, <bpt id="p6">**</bpt>ErrorAction<ept id="p6">**</ept>, <bpt id="p7">**</bpt>ErrorVariable<ept id="p7">**</ept>, <bpt id="p8">**</bpt>OutVariable<ept id="p8">**</ept>, and <bpt id="p9">**</bpt>OutBuffer<ept id="p9">**</ept>.</source>
          <target state="translated">Общие параметры — это <bpt id="p1">**</bpt>WhatIf<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Confirm<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Verbose<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Debug<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Warn<ept id="p5">**</ept>, <bpt id="p6">**</bpt>ErrorAction<ept id="p6">**</ept>, <bpt id="p7">**</bpt>ErrorVariable<ept id="p7">**</ept>, <bpt id="p8">**</bpt>OutVariable<ept id="p8">**</ept> и <bpt id="p9">**</bpt>OutBuffer<ept id="p9">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Suggested Parameters</source>
          <target state="translated">Рекомендуемые параметры</target>         
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The Windows PowerShell core cmdlets use standard names for similar parameters.</source>
          <target state="translated">Командлеты ядра Windows PowerShell используют стандартные имена для одинаковых параметров.</target>         
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Although the use of parameter names is not enforced, there is explicit guidance for usage to encourage standardization.</source>
          <target state="translated">Хотя использование имен параметров не является принудительным, имеется явная рекомендация по их использованию в целях стандартизации.</target>         
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, the guidance recommends naming a parameter that refers to a computer by name as <bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept>, rather than Server, Host, System, Node, or other common alternative words.</source>
          <target state="translated">Например, рекомендуется именовать параметры, обращающиеся к компьютеру по имени как <bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept>, а не как Server (сервер), Host (узел), System (система), Node (узел) или другие общие альтернативные слова.</target>         
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Among the important suggested parameter names are <bpt id="p1">**</bpt>Force<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Exclude<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Include<ept id="p3">**</ept>, <bpt id="p4">**</bpt>PassThru<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Path<ept id="p5">**</ept>, and <bpt id="p6">**</bpt>CaseSensitive<ept id="p6">**</ept>.</source>
          <target state="translated">Важными рекомендуемыми именами параметров являются <bpt id="p1">**</bpt>Force<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Exclude<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Include<ept id="p3">**</ept>, <bpt id="p4">**</bpt>PassThru<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Path<ept id="p5">**</ept> и <bpt id="p6">**</bpt>CaseSensitive<ept id="p6">**</ept>.</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>