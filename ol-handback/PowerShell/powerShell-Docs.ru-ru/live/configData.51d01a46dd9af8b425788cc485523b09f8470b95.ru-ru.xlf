<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-db30baf" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a3ae5fdf5d70de999ca6b992efb14533408c305</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dsc\configData.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Separating Configuration and Environment Data</source>
          <target state="translated">Разделение данных конфигурации и данных среды</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Separating Configuration and Environment Data</source>
          <target state="translated">Разделение данных конфигурации и данных среды</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0</source>
          <target state="translated">Область применения: Windows PowerShell 4.0, Windows PowerShell 5.0</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell Desired State Configuration (DSC), it is possible to separate configuration data from the logic of your configuration.</source>
          <target state="translated">Настройка требуемого состояния Windows PowerShell позволяет отделить данные конфигурации от логики конфигурации.</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Another way to look at this is to consider the structural configuration (for example, a configuration might require that IIS be installed) as separate from the environmental configuration (that is, whether the situation is a test environment vs. a production one—the node names would be different, but the configuration applied to them would be the same).</source>
          <target state="translated">Это можно рассматривать как отделение структурной конфигурации (например, конфигурации, которая требует установки IIS) от конфигурации среды (т. е. при существовании тестовой и рабочей среды имена узлов различаются, но к каждому из них применяется одна и та же конфигурация).</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This has the following advantages:</source>
          <target state="translated">Подобное разделение обеспечивает следующие преимущества.</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It allows you to reuse your configuration data for different resources, nodes, and configurations.</source>
          <target state="translated">Возможность применения одних и тех же данных конфигурации для различных источников, узлов и конфигураций.</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Configuration logic is more reusable if it does not contain hard-coded data.</source>
          <target state="translated">Логика настройки без жестко прописанных в коде данных более удобна для повторного использования.</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is similar to good scripting guidelines for functions.</source>
          <target state="translated">В этом случае она работает как рекомендации по составлению сценариев для функций.</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If some of the data needs to change, you can make the changes in one location, thereby saving time and reducing errors.</source>
          <target state="translated">Если некоторые данные необходимо изменить, изменения достаточно внести только в одном месте, сэкономив тем самым время и уменьшив вероятность ошибок.</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Basic concepts and examples</source>
          <target state="translated">Базовые концепции и примеры</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To specify the environmental part of the configuration, DSC uses the <bpt id="p1">**</bpt>ConfigurationData<ept id="p1">**</ept> parameter, which is a hash table (or it can take a .psd1 file which contains the hash table).</source>
          <target state="translated">Для указания на среду как часть конфигурации в DSC используется параметр <bpt id="p1">**</bpt>ConfigurationData<ept id="p1">**</ept>, который представляет собой хэш-таблицу (или принимает PSD1-файл, содержащий хэш-таблицу).</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This hash table must have at least one key <bpt id="p1">**</bpt>AllNodes<ept id="p1">**</ept>, which has a structured value.</source>
          <target state="translated">Хэш-таблица должна содержать по меньшей мере один ключ <bpt id="p1">**</bpt>AllNodes<ept id="p1">**</ept> со структурированными значениями.</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note the AllNodes key, whose value is an array.</source>
          <target state="translated">Обратите внимание на ключ AllNodes, значение которого представляет собой массив.</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each element of this array is also a hash table, which requires NodeName as a key:</source>
          <target state="translated">Кроме того, каждый элемент этого массива является хэш-таблицей, для которой ключом служит ключ NodeName:</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each hash table entry in AllNodes corresponds to configuration data to a node in the configuration.</source>
          <target state="translated">Каждая запись хэш-таблицы в ключе AllNodes соответствует данным конфигурации для узла в конфигурации.</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In addition to the required NodeName key, you can add other keys to the hash table as well, for example:</source>
          <target state="translated">Наряду с обязательным ключом NodeName в хэш-таблицу можно добавлять и другие ключи, например:</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>DSC offers three special variables to use in the configuration script:</source>
          <target state="translated">В DSC есть три специальные переменные для использования в сценарии настройки:</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$AllNodes<ept id="p1">**</ept>: Refers to all of the nodes.</source>
          <target state="translated"><bpt id="p1">**</bpt>$AllNodes<ept id="p1">**</ept>: ссылается на все узлы.</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use filtering with <bpt id="p1">**</bpt>.Where()<ept id="p1">**</ept> and <bpt id="p2">**</bpt>.ForEach()<ept id="p2">**</ept>, so instead of hard-coding node names to select particular nodes for action, you could write something like this to select VM-1 and VM-3 in the above example:</source>
          <target state="translated">Если применить фильтрацию с параметрами <bpt id="p1">**</bpt>.Where()<ept id="p1">**</ept> и <bpt id="p2">**</bpt>.ForEach()<ept id="p2">**</ept>, то для выбора узлов VM-1 и VM-3 в приведенном выше примере можно не прописывать их имена в коде, а написать следующее:</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$Node<ept id="p1">**</ept>: Once the set of nodes is filtered, you can use $Node to refer to the particular entry.</source>
          <target state="translated"><bpt id="p1">**</bpt>$Node<ept id="p1">**</ept>: отфильтровав набор узлов, можно сослаться на определенную запись с помощью переменной $Node.</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To apply a property to all nodes, you can set NodeName = “*”.</source>
          <target state="translated">Чтобы применить свойство ко всем узлам, используйте запись NodeName = “*”.</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, to give every node the LogPath property, you could do this:</source>
          <target state="translated">Например, чтобы присвоить свойство LogPath каждому узлу, можно написать следующее:</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$ConfigurationData<ept id="p1">**</ept>: You can use this variable inside a configuration to access the configuration data hash table passed as a parameter.</source>
          <target state="translated"><bpt id="p1">**</bpt>$ConfigurationData<ept id="p1">**</ept>: эта переменная используется в конфигурации для доступа к хэш-таблице данных конфигурации, передаваемой в виде параметра.</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can find a full example included in the <bpt id="p1">[</bpt>xWebAdministration module<ept id="p1">](https://powershellgallery.com/packages/xWebAdministration)</ept>.</source>
          <target state="translated">Полный пример входит в <bpt id="p1">[</bpt>модуль xWebAdministration<ept id="p1">](https://powershellgallery.com/packages/xWebAdministration)</ept>.</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>