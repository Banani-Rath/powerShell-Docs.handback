<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\fundamental\Understanding-the-Windows-PowerShell-Pipeline.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">233ec6fafbf1e770190601750be3bdcef2337b7f</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-39517ae" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Understanding the Windows PowerShell Pipeline</source>
          <target state="translated">Общие сведения о конвейере Windows PowerShell</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Understanding the Windows PowerShell Pipeline</source>
          <target state="translated">Общие сведения о конвейере Windows PowerShell</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Piping works virtually everywhere in Windows PowerShell.</source>
          <target state="translated">Конвейер участвует в работе практически всех аспектов Windows PowerShell.</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Although you see text on the screen, Windows PowerShell does not pipe text between commands.</source>
          <target state="translated">Хотя вы видите текст на экране, Windows PowerShell не передает текст между командами.</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Instead, it pipes objects.</source>
          <target state="translated">Вместо этого он передает объекты.</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The notation used for pipelines is similar to that used in other shells, so at first glance, it may not be apparent that Windows PowerShell introduces something new.</source>
          <target state="translated">Нотация, используемая для конвейеров, аналогична нотации в других оболочках, поэтому на первый взгляд нововведения Windows PowerShell могут остаться незамеченными.</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, if you use the <bpt id="p1">**</bpt>Out\-Host<ept id="p1">**</ept> cmdlet to force a page\-by\-page display of output from another command, the output looks just like the normal text displayed on the screen, broken up into pages:</source>
          <target state="translated">Например, если вы используете командлет <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> для принудительного постраничного отображения выходных данных из другой команды, на экране они имеют вид обычного текста, разбитого на страницы:</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Out\-Host \-Paging command is a useful pipeline element whenever you have lengthy output that you would like to display slowly.</source>
          <target state="translated">Команду Out-Host -Paging удобно использовать при наличии длинных выходных данных, которые требуется отображать медленно.</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is especially useful if the operation is very CPU\-intensive.</source>
          <target state="translated">Это особенно полезно, если операция потребляет много ресурсов ЦП.</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because processing is transferred to the Out\-Host cmdlet when it has a complete page ready to display, cmdlets that precede it in the pipeline halt operation until the next page of output is available.</source>
          <target state="translated">Поскольку обработка передается в командлет Out-Host, когда в нем готова целая страница для отображения, командлеты, расположенные перед ним в конвейере, прекращают работу, пока не станет доступна следующая страница выходных данных.</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can see this if you use the Windows Task Manager to monitor CPU and memory use by Windows PowerShell.</source>
          <target state="translated">Это можно увидеть, используя диспетчер задач Windows для наблюдения за использованием Windows PowerShell ЦП и памяти.</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Run the following command: <bpt id="p1">**</bpt>Get\-ChildItem C:\\Windows \-Recurse<ept id="p1">**</ept>.</source>
          <target state="translated">Выполните следующую команду: <bpt id="p1">**</bpt>Get-ChildItem C:\Windows -Recurse<ept id="p1">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Compare the CPU and memory usage to this command: <bpt id="p1">**</bpt>Get\-ChildItem C:\\Windows \-Recurse | Out\-Host \-Paging<ept id="p1">**</ept>.</source>
          <target state="translated">Сравните использование ЦП и памяти с этой командой: <bpt id="p1">**</bpt>Get-ChildItem C:\Windows -Recurse | Out-Host -Paging<ept id="p1">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>What you see on the screen is text, but that is because it is necessary to represent objects as text in a console window.</source>
          <target state="translated">На экране отображается текст, однако это вызвано тем, что объекты в окне консоли необходимо представлять в виде текста.</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is just a representation of what is really going on inside Windows PowerShell.</source>
          <target state="translated">Это просто представление того, что действительно происходит внутри Windows PowerShell.</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, consider the Get\-Location cmdlet.</source>
          <target state="translated">Рассмотрим, например, командлет Get-Location.</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you type <bpt id="p1">**</bpt>Get\-Location<ept id="p1">**</ept> while your current location is the root of the C drive, you would see the following output:</source>
          <target state="translated">Если ввести <bpt id="p1">**</bpt>Get-Location<ept id="p1">**</ept>, когда текущим расположением является корень диска C, отображаются следующие выходные данные:</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If Windows PowerShell pipelined text, issuing a command such as <bpt id="p1">**</bpt>Get\-Location | Out\-Host<ept id="p1">**</ept>, would pass from <bpt id="p2">**</bpt>Get\-Location<ept id="p2">**</ept> to <bpt id="p3">**</bpt>Out\-Host<ept id="p3">**</ept> a set of characters in the order they are displayed onscreen.</source>
          <target state="translated">Если Windows PowerShell передал текст по конвейеру, при выполнении такой команды, как <bpt id="p1">**</bpt>Get-Location | Out-Host<ept id="p1">**</ept>, из <bpt id="p2">**</bpt>Get-Location<ept id="p2">**</ept> в <bpt id="p3">**</bpt>Out-Host<ept id="p3">**</ept> передается набор символов в порядке их отображения на экране.</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In other words, if you were to ignore the heading information, <bpt id="p1">**</bpt>Out\-Host<ept id="p1">**</ept> would first receive the character '<bpt id="p2">**</bpt>C'<ept id="p2">**</ept>, then the character '<bpt id="p3">**</bpt>:'<ept id="p3">**</ept>, then the character '<bpt id="p4">**</bpt>\\'<ept id="p4">**</ept>.</source>
          <target state="translated">Другими словами, если бы вы пропустили информацию заголовка, <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> сначала получает символ "<bpt id="p2">**</bpt>C"<ept id="p2">**</ept>, затем символ "<bpt id="p3">**</bpt>:"<ept id="p3">**</ept>, а затем символ "<bpt id="p4">**</bpt>\"<ept id="p4">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Out\-Host<ept id="p1">**</ept> cmdlet could not determine what meaning to associate with the characters output by the <bpt id="p2">**</bpt>Get\-Location<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">Командлет <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> не может определить, какое значение следует сопоставить с выходными символами командлета <bpt id="p2">**</bpt>Get-Location<ept id="p2">**</ept>.</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Instead of using text to let commands in a pipeline communicate, Windows PowerShell uses objects.</source>
          <target state="translated">Для взаимодействия команд в конвейере Windows PowerShell использует объекты, а не текст.</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>From the standpoint of a user, objects package related information into a form that makes it easier to manipulate the information as a unit, and extract specific items that you need.</source>
          <target state="translated">С точки зрения пользователя объекты упаковывают связанные данные в форму, которая упрощает обработку информации единым блоком и извлечение нужных элементов.</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get\-Location<ept id="p1">**</ept> command does not return text that contains the current path.</source>
          <target state="translated">Команда <bpt id="p1">**</bpt>Get-Location<ept id="p1">**</ept> не возвращает текст, содержащий текущий путь.</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It returns a package of information called a <bpt id="p1">**</bpt>PathInfo<ept id="p1">**</ept> object that contains the current path along with some other information.</source>
          <target state="translated">Она возвращает пакет данных, называемый объектом <bpt id="p1">**</bpt>PathInfo<ept id="p1">**</ept>, который содержит текущий путь и другую информацию.</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Out\-Host<ept id="p1">**</ept> cmdlet then sends this <bpt id="p2">**</bpt>PathInfo<ept id="p2">**</ept> object to the screen, and Windows PowerShell decides what information to display and how to display it based on its formatting rules.</source>
          <target state="translated">После этого командлет <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> отправляет объект <bpt id="p2">**</bpt>PathInfo<ept id="p2">**</ept> на экран, а Windows PowerShell решает, какие сведения и каким образом следует отобразить, основываясь на правилах форматирования.</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In fact, the heading information output by the <bpt id="p1">**</bpt>Get\-Location<ept id="p1">**</ept> cmdlet is added only at the end of the process, as part of the process of formatting the data for onscreen display.</source>
          <target state="translated">На самом деле, выходные данные заголовка из командлета <bpt id="p1">**</bpt>Get-Location<ept id="p1">**</ept> добавляются только в конце процесса — во время форматирования данных для вывода на экран.</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>What you see onscreen is a summary of information, and not a complete representation of the output object.</source>
          <target state="translated">На экране отображаются сводные сведения, а не полное представление выходного объекта.</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Given that there may be more information output from a Windows PowerShell command than what we see displayed in the console window, how can you retrieve the non\-visible elements?</source>
          <target state="translated">Учитывая, что команда Windows PowerShell может выводить больше сведений, чем отображается в окне консоли, как можно получить непоказанные элементы?</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>How do you view the extra data?</source>
          <target state="translated">Как просмотреть дополнительные данные?</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>And what if you want to view the data in a format different than the one Windows PowerShell normally uses?</source>
          <target state="translated">И что делать, если требуется просмотреть данные в формате, отличном от стандартного для Windows PowerShell?</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The rest of this chapter discusses how you can discover the structure of specific Windows PowerShell objects, selecting specific items and formatting them for easier display, and how to send this information to alternative output locations such as files and printers.</source>
          <target state="translated">В оставшейся части этой главы описано, как определить структуру конкретных объектов Windows PowerShell, выбирая определенные элементы и форматируя их для упрощения отображения, и как отправить эти сведения в альтернативные расположения вывода, такие как файлы и принтеры.</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>