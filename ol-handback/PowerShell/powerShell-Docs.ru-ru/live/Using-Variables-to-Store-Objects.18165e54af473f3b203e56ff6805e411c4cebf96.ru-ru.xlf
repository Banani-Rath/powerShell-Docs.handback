<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4fb33c9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6216f3e1a766c57a7549a3e3b4fbe76d043a8a41</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\fundamental\Using-Variables-to-Store-Objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">759072b966b448b4da5468e5855d1bbc7a9ca1c8</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Variables to Store Objects</source>
          <target state="translated">Использование переменных для хранения объектов</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,командлет</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using Variables to Store Objects</source>
          <target state="translated">Использование переменных для хранения объектов</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Windows PowerShell works with objects.</source>
          <target state="translated">Windows PowerShell работает с объектами.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Windows PowerShell lets you create variables - essentially named objects - to preserve output to use later.</source>
          <target state="translated">Можно создавать переменные, главным образом — именованные объекты, чтобы сохранять выходные данные для последующего использования.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you are used to working with variables in other shells, remember that Windows PowerShell variables are objects, not text.</source>
          <target state="translated">Если вы привыкли работать с переменными в других оболочках, помните, что переменные Windows PowerShell являются объектами, а не текстом.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Variables are always specified with the initial character $, and can include any alphanumeric characters or the underscore in their names.</source>
          <target state="translated">Имена переменных всегда начинаются с символа $ и могут включать любые буквенно-цифровые символы или знаки подчеркивания.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating a Variable</source>
          <target state="translated">Создание переменной</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can create a variable by typing a valid variable name:</source>
          <target state="translated">Чтобы создать переменную, можно ввести для нее допустимое имя:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This returns no result because <bpt id="p1">**</bpt>$loc<ept id="p1">**</ept> does not have a value.</source>
          <target state="translated">Это не возвращает никаких результатов, так как <bpt id="p1">**</bpt>$loc<ept id="p1">**</ept> не имеет значения.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can create a variable and assign it a value in the same step.</source>
          <target state="translated">Создать переменную и присвоить ей значение можно в одном шаге.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Windows PowerShell only creates the variable if it does not exist; otherwise, it assigns the specified value to the existing variable.</source>
          <target state="translated">Windows PowerShell создает переменную, только если она не существует; в противном случае указанное значение назначается существующей переменной.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To store your current location in the variable <bpt id="p1">**</bpt>$loc<ept id="p1">**</ept>, type:</source>
          <target state="translated">Для сохранения текущего расположения в переменной <bpt id="p1">**</bpt>$loc<ept id="p1">**</ept> введите:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There is no output displayed when you type this command because the output is sent to $loc.</source>
          <target state="translated">При вводе этой команды выходные данные не отображаются, поскольку они отправляются в $loc.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, displayed output is a side effect of the fact that data which is not otherwise directed always gets sent to the screen.</source>
          <target state="translated">В Windows PowerShell отображаемые выходные данные являются побочным эффектом той особенности, что данные, не ориентированные каким либо образом, всегда выводятся на экран.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Typing $loc will show your current location:</source>
          <target state="translated">При вводе $loc отображается ваше текущее расположение:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> to display information about the contents of variables.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> можно использовать для отображения сведений о содержимом переменных.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Piping $loc to Get-Member will show you that it is a <bpt id="p1">**</bpt>PathInfo<ept id="p1">**</ept> object, just like the output from Get-Location:</source>
          <target state="translated">Передача $loc в Get-Member покажет, что это объект <bpt id="p1">**</bpt>PathInfo<ept id="p1">**</ept>, так же как и выходные данные Get-Location:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Manipulating Variables</source>
          <target state="translated">Работа с переменными</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Windows PowerShell provides several commands to manipulate variables.</source>
          <target state="translated">Windows PowerShell предоставляет несколько команд для работы с переменными.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can see a complete listing in a readable form by typing:</source>
          <target state="translated">Полный список в удобочитаемой форме можно получить, введя следующее:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In addition to the variables you create in your current Windows PowerShell session, there are several system-defined variables.</source>
          <target state="translated">Кроме переменных, создаваемых в текущем сеансе Windows PowerShell, существует несколько системных переменных.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Remove-Variable<ept id="p1">**</ept> cmdlet to clear out all of the variables which are not controlled by Windows PowerShell.</source>
          <target state="translated">Можно использовать командлет <bpt id="p1">**</bpt>Remove-Variable<ept id="p1">**</ept>, чтобы очистить все переменные, которые не управляются с помощью Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Type the following command to clear all variables:</source>
          <target state="translated">Введите следующую команду для очистки всех переменных:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This will produce the confirmation prompt you see below.</source>
          <target state="translated">В результате выводится приведенный ниже запрос на подтверждение.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you then run the <bpt id="p1">**</bpt>Get-Variable<ept id="p1">**</ept> cmdlet, you will see the remaining Windows PowerShell variables.</source>
          <target state="translated">Если вы запустите командлет <bpt id="p1">**</bpt>Get-Variable<ept id="p1">**</ept>, то увидите остальные переменные Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Since there is also a variable Windows PowerShell drive, you can also display all Windows PowerShell variables by typing:</source>
          <target state="translated">Поскольку существует и переменный диск Windows PowerShell, можно также отобразить все переменные Windows PowerShell, введя следующее:</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using Cmd.exe Variables</source>
          <target state="translated">Использование переменных Cmd.exe</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Although Windows PowerShell is not Cmd.exe, it runs in a command shell environment and can use the same variables available in any environment in Windows.</source>
          <target state="translated">Хотя система Windows PowerShell — это не Cmd.exe, она выполняется в среде командной оболочки и может использовать переменные, доступные в любой среде в Windows.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These variables are exposed through a drive named <bpt id="p1">**</bpt>env<ept id="p1">**</ept>:.</source>
          <target state="translated">Эти переменные предоставляются посредством диска с именем <bpt id="p1">**</bpt>env:<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can view these variables by typing:</source>
          <target state="translated">Эти переменные можно просмотреть, введя следующее:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Although the standard variable cmdlets are not designed to work with <bpt id="p1">**</bpt>env:<ept id="p1">**</ept> variables, you can still use them by specifying the <bpt id="p2">**</bpt>env:<ept id="p2">**</ept> prefix.</source>
          <target state="translated">Хотя стандартные командлеты переменных не предназначены для работы с переменными <bpt id="p1">**</bpt>env:<ept id="p1">**</ept>, их все равно можно использовать, указав префикс <bpt id="p2">**</bpt>env:<ept id="p2">**</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, to see the operating system root directory, you can use the command-shell <bpt id="p1">**</bpt>%SystemRoot%<ept id="p1">**</ept> variable from within Windows PowerShell by typing:</source>
          <target state="translated">Например, для просмотра корневого каталога операционной системы можно использовать переменную <bpt id="p1">**</bpt>%SystemRoot%<ept id="p1">**</ept> командной оболочки из Windows PowerShell, введя следующее:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can also create and modify environment variables from within Windows PowerShell.</source>
          <target state="translated">В Windows PowerShell также можно создавать и изменять переменные среды.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Environment variables accessed from Windows PowerShell conform to the normal rules for environment variables elsewhere in Windows.</source>
          <target state="translated">Переменные среды из Windows PowerShell соответствует обычным правилам для переменных среды в рамках всей системы Windows.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>