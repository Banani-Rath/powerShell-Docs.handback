<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e354f90592fe25fb1fdbc65b6f379a7888491dc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Trap.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25a2b14cceeba975a9ba56b2ac74f201dde9a541</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d1f7251f91415e5add590eeb0192550614f2d8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell, командлет</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Trap</source>
          <target state="translated">О ловушки</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">КРАТКОЕ ОПИСАНИЕ</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes a keyword that handles a terminating error.</source>
          <target state="translated">Описывает ключевое слово, которое обрабатывает неустранимую ошибку.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">ПОДРОБНОЕ ОПИСАНИЕ</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">Неустранимая ошибка останавливает выполнение инструкции.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script in the current pipeline.</source>
          <target state="translated">Если Windows PowerShell не обрабатывает неустранимую ошибку каким-либо образом, Windows PowerShell также прекращается функции или скрипте в текущий конвейер.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">В других языках, например C<ph id="ph1">\#</ph>, прерывающие ошибки, рассматриваются как исключения.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Trap keyword specifies a list of statements to run when a terminating error occurs.</source>
          <target state="translated">Ключевое слово Trap задает список инструкций, которые выполняются, когда происходит неустранимая ошибка.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Trap statements handle the terminating errors and allow execution of the script or function to continue instead of stopping.</source>
          <target state="translated">Ловушки инструкции обработки прерывающие ошибки и выполнения сценария или функции, чтобы продолжить вместо остановки.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">СИНТАКСИС</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Trap statement has the following syntax:</source>
          <target state="translated">Оператор Trap имеет следующий синтаксис:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Trap statement includes a list of statements to run when a terminating error occurs.</source>
          <target state="translated">Оператор Trap содержит список инструкций, которые выполняются, когда происходит неустранимая ошибка.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Trap keyword can optionally specify an error type.</source>
          <target state="translated">Ключевое слово Trap можно указать тип ошибки.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">Тип ошибки требует квадратные скобки.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A script or command can have multiple Trap statements.</source>
          <target state="translated">Сценарий или команда может иметь несколько инструкций ловушки.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Trap statements can appear anywhere in the script or command.</source>
          <target state="translated">Инструкции ловушек может находиться в любом месте сценария или команды.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>TRAPPING ALL TERMINATING ERRORS</source>
          <target state="translated">ПЕРЕХВАТ ВСЕХ ПРЕРЫВАЮЩИЕ ОШИБКИ</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When a terminating error occurs that is not handled in another way in a script or command,  Windows PowerShell checks for a Trap statement that handles the error.</source>
          <target state="translated">Если происходит неустранимая ошибка, которая не обрабатывается другим способом, в сценарии или команды, Windows PowerShell проверяет оператор Trap, который обрабатывает ошибку.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a Trap statement is present,  Windows PowerShell continues running the script or command in the Trap statement.</source>
          <target state="translated">При наличии оператор Trap Windows PowerShell продолжит работать сценария или команды в оператор Trap.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example is a very simple Trap statement:</source>
          <target state="translated">Ниже приведен очень простой оператор Trap:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This Trap statement traps any terminating error.</source>
          <target state="translated">Этот оператор Trap перехватывает любые неустранимую ошибку.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example is a function that contains this Trap statement:</source>
          <target state="translated">Приведенный ниже – это функция, которая содержит оператор ловушки:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This function includes a nonsense string that causes an error.</source>
          <target state="translated">Эта функция включает в себя не имеет смысла строки, которая вызывает ошибку.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Running this function returns the following:</source>
          <target state="translated">Выполнение данной функции возвращает следующее:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example includes a Trap statement that displays the error by using the $_ automatic variable:</source>
          <target state="translated">Следующий пример включает оператор Trap, отображающий ошибку с помощью автоматической переменной $_:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Running this version of the function returns the following:</source>
          <target state="translated">Данной версии функция возвращает следующее:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Trap statements can also be more complex.</source>
          <target state="translated">Также можно более сложные ловушки инструкций.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A Trap statement can include multiple conditions or function calls.</source>
          <target state="translated">Оператор Trap может включать несколько условий или вызовы функций.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It can log, test, or even run another program.</source>
          <target state="translated">Можно войти, тестирования или даже запустить другую программу.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>TRAPPING SPECIFIED TERMINATING ERRORS</source>
          <target state="translated">ПЕРЕХВАТ УКАЗАННОГО ПРЕРЫВАЮЩИЕ ОШИБКИ</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example is a Trap statement that traps the CommandNotFoundException error type:</source>
          <target state="translated">Следующий пример является оператор Trap, который перехватывает CommandNotFoundException тип ошибки:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When a function or script encounters a string that does not match a known command, this Trap statement displays the "Command error trapped" string.</source>
          <target state="translated">Когда функции или скрипте встречается строка, которая не соответствует известной командой, этот оператор Trap отображает строку «Ошибка команды перехват».</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After running any statements in the Trap statement list,  Windows PowerShell writes the error object to the error stream and then continues the script.</source>
          <target state="translated">После выполнения любых операторов в списке инструкции ловушек, Windows PowerShell записывает объект error поток сообщений об ошибках, а затем продолжает скрипт.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the Microsoft .NET Framework exception types.</source>
          <target state="translated">Windows PowerShell использует типы исключений платформы Microsoft .NET Framework.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example specifies the System.Exception error type:</source>
          <target state="translated">В следующем примере задается тип System.Exception ошибки:</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The CommandNotFoundException error type inherits from the System.Exception type.</source>
          <target state="translated">Тип ошибки CommandNotFoundException наследует от типа System.Exception.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This statement traps an error that is created by an unknown command.</source>
          <target state="translated">Этот оператор перехватывает ошибку, которая создается с неизвестной команды.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It also traps other error types.</source>
          <target state="translated">Она также улавливает других типов ошибок.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can have more than one Trap statement in a script.</source>
          <target state="translated">В сценарии может иметь более одной инструкции ловушки.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each error can be trapped by only one Trap statement.</source>
          <target state="translated">Каждая ошибка можно перехватить, только один оператор Trap.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If an error occurs, and more than one Trap statement is available,  Windows PowerShell uses the Trap statement with the most specific error type that matches the error.</source>
          <target state="translated">Если возникает ошибка и доступен более чем один оператор Trap Windows PowerShell использует оператор Trap с наиболее конкретных типов ошибок, соответствующую ошибке.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following script example contains an error.</source>
          <target state="translated">В следующем примере скрипта содержит ошибку.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The script includes a general Trap statement that traps any terminating error and a specific Trap statement that specifies the CommandNotFoundException type.</source>
          <target state="translated">Сценарий содержит общие инструкции ловушек, который перехватывает любые неустранимую ошибку и определенной инструкции ловушек, указывающее тип CommandNotFoundException.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">Этот сценарий выдает следующий результат:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because  Windows PowerShell does not recognize "nonsenseString" as a cmdlet or other item, it returns a CommandNotFoundException error.</source>
          <target state="translated">Поскольку Windows PowerShell не распознает «nonsenseString» как командлет или другой элемент, возвращается ошибка CommandNotFoundException.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This terminating error is trapped by the specific Trap statement.</source>
          <target state="translated">Это неустранимая ошибка улавливается определенной инструкции ловушки.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following script example contains the same Trap statements with a different error:</source>
          <target state="translated">В следующем примере скрипта содержит те же инструкции ловушек с другой ошибкой:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">Этот сценарий выдает следующий результат:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The attempt to divide by zero does not create a CommandNotFoundException error.</source>
          <target state="translated">Попытка деления на ноль не создает ошибку CommandNotFoundException.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Instead, that error is trapped by the other Trap statement, which traps any terminating error.</source>
          <target state="translated">Вместо этого, ошибка улавливается другим ловушка оператором, который перехватывает любые неустранимую ошибку.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>TRAPPING ERRORS AND SCOPE</source>
          <target state="translated">ПЕРЕХВАТ ОШИБОК И ОБЛАСТИ</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the same scope as the Trap statement, after running the Trap statements,  Windows PowerShell continues at the statement after the error.</source>
          <target state="translated">Если происходит неустранимая ошибка в той же области, оператор Trap, после выполнения этих инструкций ловушек Windows PowerShell продолжается с оператора после возникновения ошибки.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the Trap statement is in a different scope from the error, execution continues at the next statement that is in the same scope as the Trap statement.</source>
          <target state="translated">Если оператор Trap находится в другой области из-за ошибки, выполняется следующий оператор, который находится в той же области, оператор Trap.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For instance, if an error occurs in a function, and the Trap statement is in the function, the script continues at the next statement.</source>
          <target state="translated">Для экземпляра Если происходит ошибка в функции, а оператор Trap является функция, сценарий продолжается со следующего оператора.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script contains an error and a Trap statement:</source>
          <target state="translated">Например следующий сценарий содержит ошибки, а оператор Trap.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function1 function produces the following result:</source>
          <target state="translated">Далее в скрипте выполнение функции функция1 выдает следующий результат:</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The Trap statement in the function traps the error.</source>
          <target state="translated">Оператор Trap в функции перехватывает ошибку.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>After displaying the message,  Windows PowerShell resumes running the function.</source>
          <target state="translated">После отображения сообщения, Windows PowerShell возобновляет выполнение функции.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that Function1 was completed.</source>
          <target state="translated">Обратите внимание, что функция 1 была выполнена.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compare this with the following example, which has the same error and Trap statement.</source>
          <target state="translated">Сравните это с следующем примере, где же ошибка, и оператор Trap.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this example, the Trap statement occurs outside the function:</source>
          <target state="translated">В этом примере оператор Trap происходит за пределами функции.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function2 function produces the following result:</source>
          <target state="translated">Далее в скрипте выполнение функции функция2 выдает следующий результат:</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this example, the "function2 was completed" command was not run.</source>
          <target state="translated">В этом примере команда «функция2 было завершено» не была запущена.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Although both terminating errors occur within a function, if the Trap statement is outside the function,  Windows PowerShell does not go back into the function after the Trap statement runs.</source>
          <target state="translated">Хотя оба прерывающие ошибки возникают внутри функции, если оператор Trap находится за пределами функции, Windows PowerShell не вернитесь в функцию после выполнения инструкции ловушки.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>USING THE BREAK AND CONTINUE KEYWORDS</source>
          <target state="translated">ИСПОЛЬЗОВАНИЕ BREAK И CONTINUE КЛЮЧЕВЫЕ СЛОВА</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can use the Break and Continue keywords in a Trap statement to determine whether a script or command continues to run after a terminating error.</source>
          <target state="translated">Можно использовать приостановить и продолжить ключевые слова в оператор Trap для определения, является ли скрипт или команду продолжает выполняться после неустранимую ошибку.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you include a Break statement in a Trap statement list,  Windows PowerShell stops the function or script.</source>
          <target state="translated">Если включить инструкцию Break в список инструкций ловушек, Windows PowerShell останавливает функции или скрипта.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Break keyword in a Trap statement:</source>
          <target state="translated">Приведенный ниже образец функции используется ключевое слово Break в инструкции ловушки:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Because the Trap statement included the Break keyword, the function does not continue to run, and the "Function completed" line is not run.</source>
          <target state="translated">Поскольку оператор Trap включено ключевое слово Break, функция не продолжать работу и не выполняется строка «Функция завершено».</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you include a Continue statement in a Trap statement,  Windows PowerShell resumes after the statement that caused the error, just as it would without Break or Continue.</source>
          <target state="translated">При включении инструкцию Continue в оператор Trap Windows PowerShell продолжается после инструкцию, которая вызвала ошибку, как и в случае без Break и Continue.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>With the Continue keyword, however,  Windows PowerShell does not write an error to the error stream.</source>
          <target state="translated">Ключевое слово Continue тем не менее, Windows PowerShell не записывает ошибку в поток ошибок.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Continue keyword in a Trap statement:</source>
          <target state="translated">Приведенный ниже образец функции используется ключевое слово Continue в инструкции ловушки:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The function resumes after the error is trapped, and the "Function completed" statement runs.</source>
          <target state="translated">Функция возобновляется после перехват ошибок и выполняется инструкция «Функция завершено».</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>No error is written to the error stream.</source>
          <target state="translated">Ошибка не записывается в поток ошибок.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">СМ. ТАКЖЕ</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>