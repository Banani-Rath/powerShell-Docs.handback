<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c135bcc035ac439743de259b566e3ef580e50b55</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Arrays.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98c83b81d0d7c655d3dad1e6699ac335560155fd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebdbf2165af51d00ef07a49e89db2b57b51b773b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_Arrays</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">applet de commande PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Arrays</source>
          <target state="translated">À propos des tableaux</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_Arrays</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">RUBRIQUE</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_Arrays</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIPTION COURTE</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes arrays, which are data structures designed to store collections of items.</source>
          <target state="translated">Décrit les tableaux, qui sont des structures de données conçus pour stocker des collections d’éléments.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIPTION DÉTAILLÉE</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An array is a data structure that is designed to store a collection of items.</source>
          <target state="translated">Un tableau est une structure de données qui est conçue pour stocker une collection d’éléments.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The items can be the same type or different types.</source>
          <target state="translated">Les éléments peuvent être du même type ou types différents.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, a collection of zero or one object has some properties of arrays.</source>
          <target state="translated">À compter de Windows PowerShell 3.0, une collection de zéro ou un objet a des propriétés des tableaux.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CREATING AND INITIALIZING AN ARRAY</source>
          <target state="translated">CRÉATION ET INITIALISATION D’UN TABLEAU</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create and initialize an array, assign multiple values to a variable.</source>
          <target state="translated">Pour créer et initialiser un tableau, affecter plusieurs valeurs à une variable.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The values stored in the array are delimited with a comma and separated from the variable name by the assignment operator (=).</source>
          <target state="translated">Les valeurs stockées dans le tableau sont délimités par des virgules et séparés à partir du nom de la variable par l’opérateur d’assignation (=).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, to create an array named $A that contains the seven numeric (int) values of 22, 5, 10, 8, 12, 9, and 80, type:</source>
          <target state="translated">Par exemple, pour créer un tableau nommé $A qui contient les valeurs numériques (int) sept de 22, 5, 10, 8, 12, 9 et 80, tapez :</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>$A = 22,5,10,8,12,9,80</source>
          <target state="translated">$A = 22,5,10,8,12,9,80</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also create and initialize an array by using the range operator (..).</source>
          <target state="translated">Vous pouvez également créer et initialiser un tableau à l’aide de l’opérateur de plage (.).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, to create and initialize an array named "$B" that contains the values 5 through 8, type:</source>
          <target state="translated">Par exemple, pour créer et initialiser un tableau nommé « $B » qui contient les valeurs 5 à 8, tapez :</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>$B = 5..8</source>
          <target state="translated">$B = 5..8</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a result, $B contains four values: 5, 6, 7, and 8.</source>
          <target state="translated">Par conséquent, $B contient quatre valeurs : 5, 6, 7 et 8.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When no data type is specified, Windows PowerShell creates each array as an object array (type: System.Object[]).</source>
          <target state="translated">Si aucun type de données n’est spécifiée, Windows PowerShell crée chaque tableau en tant que tableau d’objets (type : System.Object[]).</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To determine the data type of an array, use the GetType() method.</source>
          <target state="translated">Pour déterminer le type de données d’un tableau, utilisez la méthode GetType().</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, to determine the data type of the $a array, type:</source>
          <target state="translated">Par exemple, pour déterminer le type de données de la baie $a, tapez :</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>$a.GetType()</source>
          <target state="translated">$a.GetType()</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To create a strongly typed array, that is, an array that can contain only values of a particular type, cast the variable as an array type, such as string[], long[], or int32[].</source>
          <target state="translated">Pour créer un tableau fortement typé, autrement dit, un tableau qui peut contenir uniquement des valeurs d’un type particulier, effectuez un cast de la variable comme un type de tableau, tels que string [], [] long ou int32 [].</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To cast an array, precede the variable name with an array type enclosed in brackets.</source>
          <target state="translated">Pour effectuer un cast d’un tableau, faites précéder le nom de variable avec un type de tableau placé entouré crochets.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, to create a 32-bit integer array named $ia containing four integers (1500, 2230, 3350, and 4000), type:</source>
          <target state="translated">Par exemple, pour créer un tableau d’entiers 32 bits et nommé $ia contenant quatre entiers (1500, 2230, 3350 et 4000), tapez :</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>[int32[]]$ia = 1500,2230,3350,4000</source>
          <target state="translated">[int32 []] $ia = 1500,2230,3350,4000</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As a result, the $ia array can contain only integers.</source>
          <target state="translated">Par conséquent, le tableau $ia peut contenir uniquement des entiers.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can create arrays that are cast to any supported type in the Microsoft .NET Framework.</source>
          <target state="translated">Vous pouvez créer des tableaux sont convertis dans n’importe quel type pris en charge dans Microsoft .NET Framework.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the objects that Get-Process retrieves to represent processes are of the System.Diagnostics.Process type.</source>
          <target state="translated">Par exemple, les objets qui Récupère les Get-Process pour représenter les processus sont de type System.Diagnostics.Process.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create a strongly typed array of process objects, enter the following command:</source>
          <target state="translated">Pour créer un tableau d’objets de processus fortement typé, entrez la commande suivante :</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>[Diagnostics.Process[]]$zz = Get-Process</source>
          <target state="translated">[Diagnostics.Process[]]$zz = Get-Process</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>THE ARRAY SUB-EXPRESSION OPERATOR</source>
          <target state="translated">L’OPÉRATEUR DE SOUS-EXPRESSION DE TABLEAU</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The array sub-expression operator creates an array, even if it contains zero or one object.</source>
          <target state="translated">L’opérateur de sous-expression tableau crée un tableau, même si elle contient zéro ou un objet.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The syntax of the array operator is as follows:</source>
          <target state="translated">La syntaxe de l’opérateur de tableau est comme suit :</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>@( ... )</source>
          <target state="translated">@( ... )</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use the array operator to create an array of zero or one object.</source>
          <target state="translated">Vous pouvez utiliser l’opérateur de tableau pour créer un tableau de zéro ou un objet.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>PS C:&gt;$a = @("One") PS C:&gt;$a.Count</source>
          <target state="translated">C: &gt;$ un = @("One") PS C: &gt; $a.Count</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>PS C:&gt;$b = @() PS C:&gt;$b.Count</source>
          <target state="translated">C: &gt; $b = @() PS C: &gt; $b.Count</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The array operator is particularly useful in scripts when you are getting objects, but do not know how many objects you will get.</source>
          <target state="translated">L’opérateur de tableau est particulièrement utile dans les scripts lorsque vous obtenez des objets, mais ne savez pas, vous obtiendrez le nombre d’objets.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $p = @(Get-Process Notepad)</source>
          <target state="translated">PS C: &gt; $p = @(Get-Process Notepad)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about the array sub-expression operator, see about_Operators.</source>
          <target state="translated">Pour plus d’informations sur l’opérateur de sous-expression de tableau, consultez about_Operators.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>READING AN ARRAY</source>
          <target state="translated">LECTURE D’UN TABLEAU</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can refer to an array by using its variable name.</source>
          <target state="translated">Vous pouvez faire référence à un tableau à l’aide de son nom de la variable.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To display all the elements in the array, type the array name.</source>
          <target state="translated">Pour afficher tous les éléments du tableau, tapez le nom du tableau.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Par exemple :</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$a</source>
          <target state="translated">$un</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can refer to the elements in an array by using an index, beginning at position 0.</source>
          <target state="translated">Vous pouvez faire référence aux éléments dans un tableau à l’aide d’un index commençant à la position 0.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Enclose the index number in brackets.</source>
          <target state="translated">Placez le numéro d’index entre crochets.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, to display the first element in the $a array, type:</source>
          <target state="translated">Par exemple, pour afficher le premier élément dans le tableau de $a, tapez :</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>$a[0]</source>
          <target state="translated">$[0]</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To display the third element in the $a array, type:</source>
          <target state="translated">Pour afficher le troisième élément dans le tableau de $a, tapez :</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>$a[2]</source>
          <target state="translated">$a [2]</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Negative numbers count from the end of the array.</source>
          <target state="translated">Nombre de nombres négatifs de la fin du tableau.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, "-1" refers to the last element of the array.</source>
          <target state="translated">Par exemple, « -1 » fait référence au dernier élément du tableau.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To display the last three elements of the array, type:</source>
          <target state="translated">Pour afficher les trois derniers éléments du tableau, tapez :</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>$a[-3..-1]</source>
          <target state="translated">$un [-3.. -1]</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>However, be cautious when using this notation.</source>
          <target state="translated">Toutefois, soyez prudent lorsque vous utilisez cette notation.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>$a[0..-2]</source>
          <target state="translated">$un [0.. -2]</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This command does not refer to all the elements of the array, except for the last one.</source>
          <target state="translated">Cette commande ne fait pas référence à tous les éléments du tableau, à l’exception du dernier.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It refers to the first, last, and second-to-last elements in the array.</source>
          <target state="translated">Il fait référence au premier, dernier et des éléments dans le tableau de la dernière seconde.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can use the range operator to display a subset of all the values in an array.</source>
          <target state="translated">Vous pouvez utiliser l’opérateur de plage pour afficher un sous-ensemble de toutes les valeurs dans un tableau.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to display the data elements at index position 1 through 3, type:</source>
          <target state="translated">Par exemple, pour afficher les éléments de données à la position d’index de 1 à 3, tapez :</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>$a[1..3]</source>
          <target state="translated">$un [1..3]</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can use the plus operator (+) to combine a range with a list of elements in an array.</source>
          <target state="translated">Vous pouvez utiliser l’opérateur plus (+) pour combiner une plage avec une liste d’éléments dans un tableau.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, to display the elements at index positions 0, 2, and 4 through 6, type:</source>
          <target state="translated">Par exemple, pour afficher les éléments aux positions d’index 0, 2 et 4 à 6, tapez :</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>$a[0,2+4..6]</source>
          <target state="translated">$un [0, 2 + 4..6]</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To determine how many items are in an array, use the Length property or its Count alias.</source>
          <target state="translated">Pour déterminer le nombre d’éléments dans un tableau, utilisez la propriété de longueur ou son alias de compte.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>$a.Count</source>
          <target state="translated">$a.Count</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also use looping constructs, such as ForEach, For, and While loops, to refer to the elements in an array.</source>
          <target state="translated">Vous pouvez également utiliser les structures de boucle, telles que ForEach, et effectue une boucle While, pour faire référence aux éléments dans un tableau.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, to use a ForEach loop to display the elements in the $a array, type:</source>
          <target state="translated">Par exemple, pour utiliser une boucle ForEach pour afficher les éléments dans le tableau de $a, tapez :</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>foreach ($element in $a) {$element}</source>
          <target state="translated">foreach ($element dans $un) {$element}</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The Foreach loop iterates through the array and returns each value in the array until reaching the end of the array.</source>
          <target state="translated">La boucle Foreach effectue une itération dans le tableau et retourne chaque valeur dans le tableau jusqu'à atteindre la fin du tableau.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The For loop is useful when you are incrementing counters while examining the elements in an array.</source>
          <target state="translated">La boucle For est utile lors de le vous sont incrémentation des compteurs en examinant les éléments dans un tableau.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, to use a For loop to  return every other value in an array, type:</source>
          <target state="translated">Par exemple, pour utiliser une boucle For pour retourner toutes les valeurs dans un tableau, tapez :</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>for ($i = 0; $i -le ($a.length - 1); $i += 2) {$a[$i]}</source>
          <target state="translated">pour ($i = 0 ; $i-le ($a.length - 1) ; $i += 2) {$un [$i]}</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can use a While loop to display the elements in an array until a defined condition is no longer true.</source>
          <target state="translated">Vous pouvez utiliser un certain temps boucle pour afficher les éléments dans le tableau jusqu'à ce qu’une condition définie n’est plus remplie.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, to display the elements in the $a array while the array index is less than 4, type:</source>
          <target state="translated">Par exemple, pour afficher les éléments dans le tableau de $a tandis que l’index du tableau est inférieure à 4, tapez :</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>$i=0 while($i -lt 4) {$a[$i]; $i++}</source>
          <target state="translated">$i = 0 lors de (4 $i - lt) {$un [$i] ; $i ++}</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>GET THE MEMBERS OF AN ARRAY</source>
          <target state="translated">OBTENIR LES MEMBRES D’UN TABLEAU</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To get the properties and methods of an array, such as the Length property and the SetValue method, use the InputObject parameter of the Get-Member cmdlet.</source>
          <target state="translated">Pour obtenir les propriétés et méthodes d’un tableau, telles que la propriété de longueur et de la méthode SetValue, utilisez le paramètre InputObject de l’applet de commande Get-Member.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you pipe an array to Get-Member, Windows PowerShell sends the items one at a time and Get-Member returns the type of each item in the array (ignoring duplicates).</source>
          <target state="translated">Lorsque vous dirigez un tableau à Get-Member, Windows PowerShell envoie un article à la fois et Get-Member retourne le type de chaque élément du tableau (en ignorant les doublons).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you use the InputObject parameter, Get-Member returns the members of the array.</source>
          <target state="translated">Lorsque vous utilisez le paramètre InputObject, Get-Member retourne les membres du tableau.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the members of the array in the $a variable.</source>
          <target state="translated">Par exemple, la commande suivante obtient les membres du tableau dans la variable $a.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Get-Member -InputObject $a</source>
          <target state="translated">Get-Member - InputObject $un</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can also get the members of an array by typing a comma (,) before the value that is piped to the Get-Member cmdlet.</source>
          <target state="translated">Vous pouvez également obtenir les membres d’un tableau en tapant une virgule (,) avant que la valeur qui est redirigée vers l’applet de commande Get-Member.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The comma makes the array the second item in an array of arrays.</source>
          <target state="translated">La virgule rend le tableau le deuxième élément dans un tableau de tableaux.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Windows PowerShell pipes the arrays one at a time and Get-Member returns the members of the array.</source>
          <target state="translated">Windows PowerShell dirige les tableaux d’un à la fois et Get-Member retourne les membres du tableau.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>,$a | Get-Member</source>
          <target state="translated">,$a | Get-Member</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>,(1,2,3) | Get-Member</source>
          <target state="translated">, (1,2,3) | Get-Member</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>MANIPULATING AN ARRAY</source>
          <target state="translated">MANIPULATION D’UN TABLEAU</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can change the elements in an array, add an element to an array, and combine the values from two arrays into a third array.</source>
          <target state="translated">Vous pouvez modifier les éléments dans un tableau, ajouter un élément à un tableau et combiner les valeurs de deux tableaux en un troisième tableau.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To change the value of a particular element in an array, specify the array name and the index of the element that you want to change, and then use the assignment operator (=) to specify a new value for the element.</source>
          <target state="translated">Pour modifier la valeur d’un élément particulier dans un tableau, spécifiez le nom de tableau et l’index de l’élément que vous souhaitez modifier, puis utilisez l’opérateur d’assignation (=) pour spécifier une nouvelle valeur pour l’élément.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, to change the value of the second item in the $a array (index position 1) to 10, type:</source>
          <target state="translated">Par exemple, pour modifier la valeur du second élément dans le tableau de $a (index de la position 1) à 10, tapez :</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>$a[1] = 10</source>
          <target state="translated">$[1] = 10</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can also use the SetValue method of an array to change a value.</source>
          <target state="translated">Vous pouvez également utiliser la méthode SetValue d’un tableau pour modifier une valeur.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following example changes the second value (index position 1) of the $a array to 500:</source>
          <target state="translated">L’exemple suivant modifie la valeur de seconde (index de la position 1) de la baie à 500 $a :</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>$a.SetValue(500,1)</source>
          <target state="translated">$a.SetValue(500,1)</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can use the += operator to add an element to an array.</source>
          <target state="translated">Vous pouvez utiliser l’opérateur += pour ajouter un élément à un tableau.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When you use it, Windows PowerShell actually creates a new array with the values of the original array and the added value.</source>
          <target state="translated">Lorsque vous l’utilisez, Windows PowerShell crée un nouveau tableau avec les valeurs du tableau d’origine et la valeur ajoutée.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, to add an element with a value of 200 to the array in the $a variable, type:</source>
          <target state="translated">Par exemple, pour ajouter un élément avec la valeur 200 dans le tableau dans la variable $a, tapez :</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>$a += 200</source>
          <target state="translated">$a += 200</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>It is not easy to delete elements from an array, but you can create a new array that contains only selected elements of an existing array.</source>
          <target state="translated">Il n’est pas facile de supprimer des éléments d’un tableau, mais vous pouvez créer un nouveau tableau qui contient uniquement les éléments sélectionnés d’un tableau existant.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, to create the $t array with all the elements in the $a array except for the value at index position 2, type:</source>
          <target state="translated">Par exemple, pour créer le tableau $t avec tous les éléments dans le tableau, à l’exception de la valeur à la position d’index 2 $a, tapez :</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>$t = $a[0,1 + 3..($a.length - 1)]</source>
          <target state="translated">$t = $un [0,1 + 3.. () $a.length - 1)]</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To combine two arrays into a single array, use the plus operator (+).</source>
          <target state="translated">Pour combiner deux tableaux en un seul tableau, utilisez l’opérateur plus (+).</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example creates two arrays, combines them, and then displays the resulting combined array.</source>
          <target state="translated">L’exemple suivant crée deux tableaux, les combine et affiche ensuite le tableau combiné résultant.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>$x = 1,3 $y = 5,9 $z = $x + $y</source>
          <target state="translated">$x = 1,3 $y = 5,9 $z = $x + $y</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>As a result, the $z array contains 1, 3, 5, and 9.</source>
          <target state="translated">Par conséquent, le tableau $z contient 1, 3, 5 et 9.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To delete an array, assign a value of $null to the array.</source>
          <target state="translated">Pour supprimer un tableau, affecter une valeur $null pour le tableau.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following command deletes the array in the $a variable.</source>
          <target state="translated">La commande suivante supprime le tableau dans la variable $a.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>$a = $null</source>
          <target state="translated">$un = $null</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can also use the Remove-Item cmdlet, but assigning a value of $null is faster, especially for large arrays.</source>
          <target state="translated">Vous pouvez également utiliser l’applet de commande Remove-Item, mais l’attribution d’une valeur $null est plus rapide, en particulier pour les grands tableaux.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>ARRAYS OF ZERO OR ONE</source>
          <target state="translated">TABLEAUX DE ZÉRO OU UN</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, a collection of zero or one object has the Count and Length property.</source>
          <target state="translated">À compter de Windows PowerShell 3.0, une collection de zéro ou un objet a la propriété de nombre et la longueur.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Also, you can index into an array of one object.</source>
          <target state="translated">En outre, vous pouvez indexer dans un tableau d’un objet.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This feature helps you to avoid scripting errors that occur when a command that expects a collection gets fewer than two items.</source>
          <target state="translated">Cette fonctionnalité vous aide à éviter les erreurs de scripts qui se produisent lorsqu’une commande qui prévoit une collection récupère moins de deux éléments.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate this feature.</source>
          <target state="translated">Les exemples suivants illustrent cette fonctionnalité.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Zero objects</source>
          <target state="translated">Aucun objet</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>$a = $null $a.Count</source>
          <target state="translated">$un = $null $a.Count</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>$a.Length</source>
          <target state="translated">$a.Length</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>One object</source>
          <target state="translated">Un objet</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>$a = 4 $a.Count</source>
          <target state="translated">$une = 4 $a.Count</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>$a.Length</source>
          <target state="translated">$a.Length</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>$a[0]</source>
          <target state="translated">$[0]</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>$a[-1]</source>
          <target state="translated">$[-1]</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VOIR AUSSI</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators about_Hash_Tables about_Operators about_For about_Foreach about_While</source>
          <target state="translated">about_Assignment_Operators about_Hash_Tables about_Operators about_For about_Foreach about_While</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>