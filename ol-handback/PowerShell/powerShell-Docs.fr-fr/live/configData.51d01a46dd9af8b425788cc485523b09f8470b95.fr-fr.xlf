<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Separating Configuration and Environment Data</source>
          <target state="translated">Séparation des données de configuration et d’environnement</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0</source>
          <target state="translated">S’applique à : Windows PowerShell 4.0, Windows PowerShell 5.0</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell Desired State Configuration (DSC), it is possible to separate configuration data from the logic of your configuration.</source>
          <target state="translated">Avec la configuration de l’état souhaité (DSC) de Windows PowerShell, il est possible de séparer les données de configuration de la logique de configuration.</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Another way to look at this is to consider the structural configuration (for example, a configuration might require that IIS be installed) as separate from the environmental configuration (that is, whether the situation is a test environment vs. a production one—the node names would be different, but the configuration applied to them would be the same).</source>
          <target state="translated">La configuration structurelle (par exemple, une configuration qui nécessiterait l’installation d’IIS) est séparée de la configuration de l’environnement. Autrement dit, qu’il s’agisse d’un environnement de test ou de production, même si les noms des nœuds sont différents, la même configuration est appliquée.</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This has the following advantages:</source>
          <target state="translated">Les avantages sont les suivants :</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It allows you to reuse your configuration data for different resources, nodes, and configurations.</source>
          <target state="translated">Vous pouvez réutiliser vos données de configuration pour plusieurs ressources, nœuds et configurations.</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Configuration logic is more reusable if it does not contain hard-coded data.</source>
          <target state="translated">La logique de configuration est plus facilement réutilisable si elle ne contient pas de données codées en dur.</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is similar to good scripting guidelines for functions.</source>
          <target state="translated">Cette règle se rapproche des recommandations relatives à l’écriture de scripts pour les fonctions.</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If some of the data needs to change, you can make the changes in one location, thereby saving time and reducing errors.</source>
          <target state="translated">Si certaines données doivent être modifiées, vous pouvez effectuer les modifications depuis un seul et même emplacement, ce qui vous permet de gagner du temps et de réduire le risque d’erreurs.</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Basic concepts and examples</source>
          <target state="translated">Exemples et concepts de base</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To specify the environmental part of the configuration, DSC uses the <bpt id="p1">**</bpt>ConfigurationData<ept id="p1">**</ept> parameter, which is a hash table (or it can take a .psd1 file which contains the hash table).</source>
          <target state="translated">Pour spécifier la partie environnement de la configuration, DSC utilise le paramètre <bpt id="p1">**</bpt>ConfigurationData<ept id="p1">**</ept>, qui est une table de hachage (elle peut également accepter un fichier .psd1 contenant la table de hachage).</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This hash table must have at least one key <bpt id="p2">**</bpt>AllNodes<ept id="p2">**</ept>, which has a structured value.</source>
          <target state="translated">Cette table de hachage doit avoir au moins une clé <bpt id="p2">**</bpt>AllNodes<ept id="p2">**</ept> avec une valeur structurée.</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Par exemple :</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Note the AllNodes key, whose value is an array.</source>
          <target state="translated">Notez la clé AllNodes, dont la valeur est un tableau.</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each element of this array is also a hash table, which requires NodeName as a key:</source>
          <target state="translated">Chaque élément de ce tableau est également une table de hachage qui nécessite NodeName comme clé :</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each hash table entry in AllNodes corresponds to configuration data to a node in the configuration.</source>
          <target state="translated">Dans AllNodes, chaque entrée de table de hachage correspond aux données de configuration d’un nœud de la configuration.</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In addition to the required NodeName key, you can add other keys to the hash table as well, for example:</source>
          <target state="translated">Outre la clé NodeName nécessaire, vous pouvez ajouter d’autres clés à la table de hachage, comme par exemple les suivantes :</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>DSC offers three special variables to use in the configuration script:</source>
          <target state="translated">DSC propose trois variables spéciales que vous pouvez utiliser dans le script de configuration :</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p3">**</bpt>$AllNodes<ept id="p3">**</ept>: Refers to all of the nodes.</source>
          <target state="translated"><bpt id="p3">**</bpt>$AllNodes<ept id="p3">**</ept> : référence tous les nœuds.</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use filtering with <bpt id="p4">**</bpt>.Where()<ept id="p4">**</ept> and <bpt id="p5">**</bpt>.ForEach()<ept id="p5">**</ept>, so instead of hard-coding node names to select particular nodes for action, you could write something like this to select VM-1 and VM-3 in the above example:</source>
          <target state="translated">Vous pouvez utiliser le filtrage avec <bpt id="p4">**</bpt>.Where()<ept id="p4">**</ept> et <bpt id="p5">**</bpt>.ForEach()<ept id="p5">**</ept>. Au lieu de coder en dur le nom des nœuds quand vous sélectionnez les nœuds à utiliser, vous pouvez écrire quelque chose comme ceci pour sélectionner VM-1 et VM-3 dans l’exemple ci-dessus :</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p6">**</bpt>$Node<ept id="p6">**</ept>: Once the set of nodes is filtered, you can use $Node to refer to the particular entry.</source>
          <target state="translated"><bpt id="p6">**</bpt>$Node<ept id="p6">**</ept> : une fois que l’ensemble de nœuds est filtré, vous pouvez utiliser $Node pour référencer l’entrée en question.</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Par exemple :</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To apply a property to all nodes, you can set NodeName = “*”.</source>
          <target state="translated">Pour appliquer une propriété à l’ensemble des nœuds, vous pouvez définir ceci : NodeName = “*”.</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, to give every node the LogPath property, you could do this:</source>
          <target state="translated">Par exemple, pour attribuer la propriété LogPath à tous les nœuds, vous pouvez effectuer ceci :</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p7">**</bpt>$ConfigurationData<ept id="p7">**</ept>: You can use this variable inside a configuration to access the configuration data hash table passed as a parameter.</source>
          <target state="translated"><bpt id="p7">**</bpt>$ConfigurationData<ept id="p7">**</ept> : vous pouvez utiliser cette variable à l’intérieur d’une configuration pour accéder à la table de hachage des données de configuration passée comme paramètre.</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Par exemple :</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can find a full example included in the <bpt id="p8">[</bpt>xWebAdministration module<ept id="p8">](https://powershellgallery.com/packages/xWebAdministration)</ept>.</source>
          <target state="translated">Vous trouverez un exemple complet dans le <bpt id="p8">[</bpt>module xWebAdministration<ept id="p8">](https://powershellgallery.com/packages/xWebAdministration)</ept>.</target>         
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">291278563679354d4a21858157c0679914131dd3</xliffext:olfilehash>
  </header>
</xliff>