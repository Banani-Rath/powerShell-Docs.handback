<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be04321fef520aab1683c1e62c1c42c7a4180760</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Wildcards.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ec36ed01d8931ca5ef2dc872741d8878a4c3fc7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5bcad9228269e82926b94e76cd21ac4a9518f8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Wildcards</source>
          <target state="translated">about_Wildcards</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">applet de commande PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Wildcards</source>
          <target state="translated">À propos des caractères génériques</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Wildcards</source>
          <target state="translated">about_Wildcards</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">RUBRIQUE</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Wildcards</source>
          <target state="translated">about_Wildcards</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIPTION COURTE</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes how to use wildcard characters in Windows PowerShell.</source>
          <target state="translated">Décrit comment utiliser des caractères génériques dans Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIPTION DÉTAILLÉE</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Wildcard characters represent one or many characters.</source>
          <target state="translated">Caractères génériques représentent un ou plusieurs caractères.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use them to create word patterns in commands.</source>
          <target state="translated">Vous pouvez les utiliser pour créer des modèles de word dans les commandes.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, to get all the files in the C:\Techdocs directory that have a .ppt file name extension, type:</source>
          <target state="translated">Par exemple, pour obtenir tous les fichiers dans le répertoire C:\Techdocs qui ont une extension de nom de fichier .ppt, tapez :</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Get-ChildItem c:\techdocs<ph id="ph1">\*</ph>.ppt</source>
          <target state="translated">Get-ChildItem c:\techdocs<ph id="ph1">\*</ph>.ppt</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this case, the asterisk (*) wildcard character represents any characters that appear before the .ppt file name extension.</source>
          <target state="translated">Dans ce cas, le caractère générique astérisque (*) représente les caractères qui apparaissent avant l’extension de nom de fichier .ppt.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the following wildcard characters.</source>
          <target state="translated">Windows PowerShell prend en charge les caractères génériques suivants.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Wildcard Description        Example  Match             No match</source>
          <target state="translated">Correspondance de caractère générique Description exemple correspond à aucune</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Matches zero or    aA, ag, Apple      banana more characters</source>
          <target state="translated">Correspond à zéro ou aA, ag, banana d’Apple caractères plus</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>?</source>
          <target state="translated">?</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Matches exactly    ?n       an, in, on        ran one character in the specified position</source>
          <target state="translated">Correspond exactement ? n un, dans, sur exécutait un caractère à la position spécifiée</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>[ ]      Matches a range    [a-l]ook book, cook, look  took of characters</source>
          <target state="translated">[] Correspond à un livre de classeur de la plage [a-l], cook, aspect a eu de caractères</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>[ ]      Matches specified  [bc]ook  book, cook        hook characters</source>
          <target state="translated">[] Correspond au livre de classeur spécifié [bc], cook raccordement caractères</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can include multiple wildcard characters in the same word pattern.</source>
          <target state="translated">Vous pouvez inclure plusieurs caractères génériques dans le même modèle word.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, to find text files whose names begin with the letters "a" through "l", type:</source>
          <target state="translated">Par exemple, pour rechercher des fichiers texte dont les noms commencent par les lettres « a » à « l », tapez :</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Get-ChildItem c:\techdocs[a-l]*.txt</source>
          <target state="translated">Get-ChildItem c:\techdocs[a-l]*.txt</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Many cmdlets accept wildcard characters in parameter values.</source>
          <target state="translated">De nombreuses cmdlets acceptent les caractères génériques dans les valeurs de paramètre.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The Help topic for each cmdlet describes which parameters, if any, permit wildcard characters.</source>
          <target state="translated">La rubrique d’aide pour chaque cmdlet décrit les paramètres, le cas échéant, autoriser des caractères génériques.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For parameters in which wildcard characters are accepted, their use is case-insensitive.</source>
          <target state="translated">Pour les paramètres dans les génériques, les caractères sont acceptés, leur utilisation respecte la casse.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also use wildcard characters in commands and script blocks, such as to create a word pattern that represents property values.</source>
          <target state="translated">Vous pouvez également utiliser des caractères génériques dans les commandes et les blocs de script, par exemple pour créer un modèle word qui représente les valeurs de propriété.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, the following command gets services in which the ServiceType property value includes "Interactive".</source>
          <target state="translated">Par exemple, la commande suivante obtient les services dans lesquels la valeur de propriété ServiceType inclut « Interactif ».</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Get-Service | Where-Object {$_.ServiceType -like "Interactive"}</source>
          <target state="translated">Get-Service | Where-Object {$_. ServiceType-comme « Interactive »}</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the following example, wildcard characters are used to find property values in the conditions of an If statement.</source>
          <target state="translated">Dans l’exemple suivant, les caractères génériques sont utilisés pour rechercher les valeurs de propriété dans les conditions d’une instruction If instruction.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this command, if the Description of a restore point includes "PowerShell", the command adds the value of the CreationTime property of the restore point to a log file.</source>
          <target state="translated">Dans cette commande, si la Description d’un point de restauration inclut « PowerShell », la commande ajoute la valeur de la propriété CreationTime du point de restauration dans un fichier journal.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>$p = Get-ComputerRestorePoint foreach ($point in $p) {if ($point.description -like "PowerShell") {add-content -path C:\TechDocs\RestoreLog.txt "$($point.CreationTime)"}}</source>
          <target state="translated">$p = get-ComputerRestorePoint foreach ($point dans $p) {si ($point.description-comme « PowerShell ») {commande add-content - chemin d’accès C:\TechDocs\RestoreLog.txt » $($point. CreationTime) «}}</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VOIR AUSSI</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords about_If about_Script_Blocks</source>
          <target state="translated">about_Language_Keywords about_If about_Script_Blocks</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>