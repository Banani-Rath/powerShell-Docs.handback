<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">994e06dba97c5ebab1ee959bafbfac613805cc28</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Parsing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79f563c224bbd026be3d7f67492fc57615fb1550</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">755fe011c1c3563ab1fb61ad1889ea72a7ea0ed9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Parsing</source>
          <target state="translated">about_Parsing</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">applet de commande PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Parsing</source>
          <target state="translated">À propos de l’analyse</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Parsing</source>
          <target state="translated">about_Parsing</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">RUBRIQUE</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Parsing</source>
          <target state="translated">about_Parsing</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIPTION COURTE</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes how Windows PowerShell parses commands.</source>
          <target state="translated">Décrit comment Windows PowerShell traite les commandes.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIPTION DÉTAILLÉE</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you enter a command at the command prompt, Windows PowerShell breaks the command text into a series of segments called "tokens" and then determines how to interpret each "token."</source>
          <target state="translated">Lorsque vous entrez une commande à l’invite de commandes, Windows PowerShell découpe le texte de commande en une série de segments appelés « jetons », puis comment déterminer comment interpréter chaque « jeton ».</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, if you type:</source>
          <target state="translated">Par exemple, si vous tapez :</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Write-Host book</source>
          <target state="translated">Livre de Write-Host</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Windows PowerShell breaks the following command into two tokens, "Write-Host" and "book", and interprets each token independently.</source>
          <target state="translated">Windows PowerShell s’arrête la commande suivante en deux jetons, « Write-Host » et « book » et interprète chaque jeton indépendamment.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When processing a command, the Windows PowerShell parser operates in expression mode or in argument mode:</source>
          <target state="translated">Lors du traitement d’une commande, l’Analyseur de Windows PowerShell fonctionne en mode d’expression ou argument :</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In expression mode, character string values must be contained in quotation marks.</source>
          <target state="translated">En mode d’expression, les valeurs de chaîne de caractères doivent figurer entre guillemets.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Numbers not enclosed in quotation marks are treated as numerical values (rather than as a series of characters).</source>
          <target state="translated">Nombres ne pas entourés de guillemets sont traités comme des valeurs numériques (et non comme une série de caractères).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In argument mode, each value is treated as an expandable string unless it begins with one of the following special characters: dollar sign ($), at sign (@), single quotation mark ('), double quotation mark ("), or an opening parenthesis (().</source>
          <target state="translated">En mode d’argument, chaque valeur est traitée comme une chaîne extensible, sauf si elle commence par un des caractères spéciaux suivants : signe dollar ($), signe arobase (@), unique guillemet-apostrophe ('), double guillemet («) ou une parenthèse ouvrante (()).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If preceded by one of these characters, the value is treated as a value expression.</source>
          <target state="translated">Précédé d’un de ces caractères, la valeur est traitée comme une expression de valeur.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following table provides several examples of commands processed in expression mode and argument mode and the results produced by those commands.</source>
          <target state="translated">Le tableau suivant fournit plusieurs exemples de commandes traitées dans le mode d’expression et argument et les résultats générés par ces commandes.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example            Mode         Result</source>
          <target state="translated">Mode des résultats</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>2+2                Expression   4 (integer) Write-Output 2+2   Argument     "2+2" (string) Write-Output (2+2) Expression   4 (integer) $a = 2+2           Expression   $a = 4 (integer) Write-Output $a    Expression   4 (integer) Write-Output $a/H  Argument     "4/H" (string)</source>
          <target state="translated">2 + 2 expression 4 (entier) Write-Output 2 + 2 Argument « 2 + 2 » (chaîne) Write-Output (2 + 2) Expression 4 (entier) $un = 2 + 2 Expression $une = 4 (entier) Write-Output $un Argument d’a/H $ Expression 4 (entier) Write-Output « 4/H » (chaîne)</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Every token can be interpreted as some kind of object type, such as Boolean or string.</source>
          <target state="translated">Chaque jeton peut être interprété comme une sorte de type d’objet, tel que booléen ou chaîne.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Windows PowerShell attempts to determine the object type from the expression.</source>
          <target state="translated">Windows PowerShell tente de déterminer le type d’objet à partir de l’expression.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The object type depends on the type of parameter a command expects and on whether Windows PowerShell knows how to convert the argument to the correct type.</source>
          <target state="translated">Le type d’objet dépend du type de paramètre attendu par une commande et si Windows PowerShell sait comment convertir l’argument de type correct.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following table shows several examples of the types assigned to values returned by the expressions.</source>
          <target state="translated">Le tableau suivant montre plusieurs exemples de types affectées aux valeurs retournées par les expressions.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example            Mode         Result</source>
          <target state="translated">Mode des résultats</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Write-Output !1    argument     "!1" (string) Write-Output (!1)  expression   False (Boolean) Write-Output (2)   expression   2 (integer)</source>
          <target state="translated">Write-Output ! 1 argument » ! 1 » (chaîne) Write-Output ( ! 1) faux (booléenne) de Write-Output (2) d’expression 2 (entier)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>STOP PARSING:  --% The stop-parsing symbol (--%), introduced in Windows PowerShell 3.0, directs Windows PowerShell to refrain from interpreting input as Windows PowerShell commands or expressions.</source>
          <target state="translated">Lors du TRAITEMENT de l’ARRÊT :--% le symbole de l’analyse des mots vides (--%), introduit dans Windows PowerShell 3.0, indique à Windows PowerShell empêche l’interprétation de l’entrée en tant que les commandes Windows PowerShell ou des expressions.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When calling an executable program in Windows PowerShell, place the stop-parsing symbol before the program arguments.</source>
          <target state="translated">Lors de l’appel d’un programme exécutable dans Windows PowerShell, placer le symbole de l’analyse des mots vides avant les arguments du programme.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This technique is much easier than using escape characters to prevent misinterpretation.</source>
          <target state="translated">Cette technique est beaucoup plus facile que l’utilisation de caractères d’échappement pour empêcher toute interprétation erronée.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When it encounters a stop-parsing symbol, Windows PowerShell treats the remaining characters in the line as a literal.</source>
          <target state="translated">Lorsqu’il rencontre un symbole d’analyse de l’arrêt, Windows PowerShell traite les caractères restants dans la ligne comme un littéral.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The only interpretation it performs is to substitute values for environment variables that use standard Windows notation, such as %USERPROFILE%.</source>
          <target state="translated">L’interprétation uniquement, qu'il effectue est de remplacer les valeurs des variables d’environnement qui utilisent la notation Windows standard, telles que % USERPROFILE%.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The stop-parsing symbol is effective only until the next newline or pipeline character.</source>
          <target state="translated">Le symbole de l’analyse de mots vides est efficace uniquement jusqu'à ce que le caractère de saut de ligne ou le pipeline suivant.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You cannot use a continuation character (`) to extend its effect or use a command delimiter (;) to terminate its effect.</source>
          <target state="translated">Vous ne pouvez pas utiliser un caractère de continuation (') pour étendre son effet ou un délimiteur de commande ( ;) pour mettre fin à son effet.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following command calls the Icacls program.</source>
          <target state="translated">Par exemple, la commande suivante appelle le programme Icacls.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>icacls X:\VMS /grant Dom\HVAdmin:(CI)(OI)F</source>
          <target state="translated">icacls X:\VMS/Grant Dom\HVAdmin:(CI) (OI) F</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To run this command in Windows PowerShell 2.0, you must use escape characters to prevent Windows PowerShell from misinterpreting the parentheses.</source>
          <target state="translated">Pour exécuter cette commande dans Windows PowerShell 2.0, vous devez utiliser des caractères d’échappement pour empêcher Windows PowerShell à partir d’une mauvaise interprétation des parenthèses.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>icacls X:\VMS /grant Dom\HVAdmin:<ph id="ph1">`(CI`</ph>)<ph id="ph2">`(OI`</ph>)F</source>
          <target state="translated">icacls X:\VMS/Grant Dom\HVAdmin :<ph id="ph1">`(CI`</ph>)<ph id="ph2">`(OI`</ph>) F</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, you can use the stop-parsing symbol.</source>
          <target state="translated">À compter de Windows PowerShell 3.0, vous pouvez utiliser le symbole de l’analyse des mots vides.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>icacls X:\VMS --% /grant Dom\HVAdmin:(CI)(OI)F</source>
          <target state="translated">/ de Grant icacls X:\VMS--% Dom\HVAdmin:(CI) (OI) F</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Windows PowerShell sends the following command string to the Icacls  program: X:\VMS /grant Dom\HVAdmin:(CI)(OI)F</source>
          <target state="translated">Windows PowerShell envoie la chaîne de commande suivante au programme Icacls : X:\VMS/Grant Dom\HVAdmin:(CI) (OI) F</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VOIR AUSSI</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>about_Command_Syntax</source>
          <target state="translated">about_Command_Syntax</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>