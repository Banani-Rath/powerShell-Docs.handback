<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c8a5abedc639fa4162df0a2f86753c818b3f9a4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Functions_Advanced_Parameters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f11fac504c4b2dc2fe3c4e54de49db9a961d3e2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a6df0f99aece19895c05d69883252558965d64b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Functions_Advanced_Parameters</source>
          <target state="translated">about_Functions_Advanced_Parameters</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">cmdlet de PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Functions Advanced Parameters</source>
          <target state="translated">Acerca de las funciones de los parámetros avanzados</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Functions_Advanced_Parameters</source>
          <target state="translated">about_Functions_Advanced_Parameters</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Functions_Advanced_Parameters</source>
          <target state="translated">about_Functions_Advanced_Parameters</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIPCIÓN BREVE</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Explains how to add parameters to advanced functions.</source>
          <target state="translated">Explica cómo agregar parámetros a las funciones avanzadas.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIPCIÓN LARGA</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can add parameters to the advanced functions that you write, and use parameter attributes and arguments to limit the parameter values that function users submit with the parameter.</source>
          <target state="translated">Puede agregar parámetros a las funciones avanzadas que se escribe y usar atributos de parámetro y los argumentos para limitar los valores de parámetro que envían los usuarios de la función con el parámetro.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The parameters that you add to your function are available to users in addition to the common parameters that Windows PowerShell adds automatically to all cmdlets and advanced functions.</source>
          <target state="translated">Los parámetros que agregue a la función están disponibles para los usuarios además de los parámetros comunes de Windows PowerShell agrega automáticamente a todos los cmdlets y funciones avanzadas.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about the Windows PowerShell common parameters, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">Para obtener más información acerca de los parámetros comunes de Windows PowerShell, consulte about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, you can use splatting with @Args to represent the parameters in a command.</source>
          <target state="translated">A partir de Windows PowerShell 3.0, se puede usar la expansión con @Args para representar los parámetros en un comando.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This technique is valid on simple and advanced functions.</source>
          <target state="translated">Esta técnica es válida en las funciones simples y avanzadas.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see about_Functions (http://go.microsoft.com/fwlink/?LinkID=113231) and about_Splatting (http://go.microsoft.com/fwlink/?LinkID=262720).</source>
          <target state="translated">Para obtener más información, vea about_Functions (http://go.microsoft.com/fwlink/?LinkID=113231) y about_Splatting (http://go.microsoft.com/fwlink/?LinkID=262720).</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Static Parameters Static parameters are parameters that are always available in the function.</source>
          <target state="translated">Parámetros estáticos de parámetros estáticos son parámetros que están siempre disponibles en la función.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Most parameters in Windows PowerShell cmdlets and scripts are static parameters.</source>
          <target state="translated">Mayoría de los parámetros en los cmdlets de Windows PowerShell y secuencias de comandos es parámetros estáticos.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows the declaration of a ComputerName parameter that has the following characteristics:</source>
          <target state="translated">En el ejemplo siguiente se muestra la declaración de un parámetro ComputerName que tiene las siguientes características:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is mandatory (required).</source>
          <target state="translated">Es obligatorio (obligatorio).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It takes input from the pipeline.</source>
          <target state="translated">Toma la entrada de la canalización.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It takes an array of strings as input.</source>
          <target state="translated">Toma una matriz de cadenas como entrada.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ValueFromPipeline=$true)] [String[]] $ComputerName</source>
          <target state="translated">[parámetro (obligatorio = $true, ValueFromPipeline = $true)] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Attributes of Parameters</source>
          <target state="translated">Atributos de parámetros</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This section describes the attributes that you can add to function parameters.</source>
          <target state="translated">En esta sección se describe los atributos que se pueden agregar a los parámetros de función.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>All attributes are optional.</source>
          <target state="translated">Todos los atributos son opcionales.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, if you omit the CmdletBinding attribute, then to be recognized as an advanced function, the function must include the Parameter attribute.</source>
          <target state="translated">Sin embargo, si se omite el atributo CmdletBinding, a continuación, para que se reconozca como una función avanzada, la función debe incluir el atributo de parámetro.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can add one or multiple attributes in each parameter declaration.</source>
          <target state="translated">Puede agregar uno o varios atributos en cada declaración de parámetro.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>There is no limit to the number of attributes that you can add to a parameter declaration.</source>
          <target state="translated">No hay ningún límite para el número de atributos que se pueden agregar a una declaración de parámetro.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Parameter Attribute</source>
          <target state="translated">El atributo de parámetro</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The Parameter attribute is used to declare the attributes of function parameters.</source>
          <target state="translated">El atributo de parámetro se utiliza para declarar los atributos de parámetros de función.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The Parameter attribute is optional, and you can omit it if none of the parameters of your functions need attributes, but to be recognized as an advanced function (rather than a simple function), a function must have either the CmdletBinding attribute or the Parameter attribute, or both.</source>
          <target state="translated">El atributo de parámetro es opcional y puede omitirlo si ninguno de los parámetros de los atributos de la necesidad de funciones, pero se reconozca como una función avanzada (en lugar de una función sencilla), una función debe tener el atributo CmdletBinding o el atributo de parámetro o ambos.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Parameter attribute has arguments that define the characteristics of the parameter, such as whether the parameter is mandatory or optional.</source>
          <target state="translated">El atributo de parámetro tiene argumentos que definen las características del parámetro, por ejemplo, si el parámetro es obligatorio u opcional.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Use the following syntax to declare the Parameter attribute, an argument, and an argument value.</source>
          <target state="translated">Utilice la siguiente sintaxis para declarar el atributo de parámetro y un argumento con un valor de argumento.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The parentheses that enclose the argument and its value must follow "Parameter" with no intervening space.</source>
          <target state="translated">Los paréntesis que rodean el argumento y su valor deben seguir "Parámetro" sin espacios intermedios.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>[parameter(Argument=value)] $ParameterName</source>
          <target state="translated">[parameter(Argument=value)] $ParameterName</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use commas to separate arguments within the parentheses.</source>
          <target state="translated">Use comas para separar los argumentos entre paréntesis.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use the following syntax to declare two arguments of the Parameter attribute.</source>
          <target state="translated">Utilice la siguiente sintaxis para declarar dos argumentos de atributo de parámetro.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>[parameter(Argument1=value1, Argument2=value2)]</source>
          <target state="translated">[parámetro (argumento1 = value1, argumento2 = valor2)]</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you use the Parameter attribute without arguments (as an alternative to using the CmdletBinding attribute), the parentheses that follow the attribute name are still required.</source>
          <target state="translated">Si utiliza el atributo de parámetro sin argumentos (como una alternativa al uso del atributo CmdletBinding), siguen siendo necesarios los paréntesis que siguen al nombre de atributo.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>[parameter()] $ParameterName</source>
          <target state="translated">[parameter()] $ParameterName</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Mandatory Argument</source>
          <target state="translated">Argumento obligatorio</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The Mandatory argument indicates that the parameter is required.</source>
          <target state="translated">El argumento obligatorio indica que el parámetro es necesario.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If this argument is not specified, the parameter is an optional parameter.</source>
          <target state="translated">Si no se especifica este argumento, el parámetro es un parámetro opcional.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example declares the ComputerName parameter.</source>
          <target state="translated">En el ejemplo siguiente se declara el parámetro ComputerName.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It uses the Mandatory argument to make the parameter mandatory.</source>
          <target state="translated">Utiliza el argumento obligatorio para que el parámetro obligatorio.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Position Argument</source>
          <target state="translated">Argumento de posición</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The Position argument determines whether the parameter name is required when the parameter is used in a command.</source>
          <target state="translated">El argumento de posición determina si el nombre del parámetro es necesario cuando se usa el parámetro en un comando.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When a parameter declaration includes the Position argument, the parameter name can be omitted and Windows PowerShell identifies the unnamed parameter value by its position (or order) in the list of unnamed parameter values in the command.</source>
          <target state="translated">Cuando una declaración de parámetro incluye el argumento de posición, se puede omitir el nombre del parámetro y Windows PowerShell identifica el valor del parámetro sin nombre por su posición (u orden) en la lista de valores de parámetro sin nombre en el comando.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the Position argument is not specified, the parameter name (or a parameter name alias or abbreviation) must precede the parameter value whenever the parameter is used in a command.</source>
          <target state="translated">Si no se especifica el argumento de posición, el nombre del parámetro (o un alias de nombre de parámetro o una abreviatura) debe preceder el valor del parámetro siempre que el parámetro se utiliza en un comando.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>By default, all function parameters are positional.</source>
          <target state="translated">De forma predeterminada, todos los parámetros de función son posicionales.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Windows PowerShell assigns position numbers to parameters in the order in which the parameters are declared in the function.</source>
          <target state="translated">Windows PowerShell asigna los números de posición a los parámetros en el orden en que los parámetros se declaran en la función.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To disable this feature, set the value of the PositionalBinding argument of the CmdletBinding attribute to $False.</source>
          <target state="translated">Para deshabilitar esta característica, establezca el valor del argumento del atributo CmdletBinding PositionalBinding en $False.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The Position argument takes precedence over the value of the PositionalBinding argument for the parameters on which it is declared.</source>
          <target state="translated">El argumento de posición tiene prioridad sobre el valor del argumento PositionalBinding para los parámetros que se declara.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see PositionalBinding in about_Functions_CmdletBindingAttribute.</source>
          <target state="translated">Para obtener más información, vea PositionalBinding en about_Functions_CmdletBindingAttribute.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The value of the Position argument is specified as an integer.</source>
          <target state="translated">El valor del argumento de posición se especifica como un entero.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A position value of 0 represents the first position in the command, a position value of 1 represents the second position in the command, and so on.</source>
          <target state="translated">Un valor de posición de 0 representa la primera posición en el comando, un valor de posición de 1 representa la segunda posición en el comando y así sucesivamente.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If a function has no positional parameters, Windows PowerShell assigns positions to each parameter based on the order in which the parameters are declared.</source>
          <target state="translated">Si una función no tiene ningún parámetro posicional, Windows PowerShell asigna posiciones a cada parámetro según el orden en que se declaran los parámetros.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>However, as a best practice, do not rely on this assignment.</source>
          <target state="translated">Sin embargo, como práctica recomendada, no confíe en esta asignación.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When you want parameters to be positional, use the Position argument.</source>
          <target state="translated">Parámetros para ser posicionales, debe usar el argumento de posición.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example declares the ComputerName parameter.</source>
          <target state="translated">En el ejemplo siguiente se declara el parámetro ComputerName.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>It uses the Position argument with a value of 0.</source>
          <target state="translated">Utiliza el argumento de posición con un valor de 0.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>As a result, when "-ComputerName" is omitted from command, its value must be the first or only unnamed parameter value in the command.</source>
          <target state="translated">Como resultado, cuando "-ComputerName" se omite del comando, su valor debe ser el primer o el único valor de parámetro en el comando sin nombre.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>[parameter(Position=0)] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Position=0)] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>NOTE: When the Get-Help cmdlet displays the corresponding "Position?"</source>
          <target state="translated">NOTA: Cuando el cmdlet Get-Help muestra la "posición" correspondiente?</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>parameter attribute, the position value is incremented by 1.</source>
          <target state="translated">atributo de parámetro, el valor de posición se incrementa en 1.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, a parameter with a Position argument value of 0 has a parameter attribute of "Position?</source>
          <target state="translated">¿Por ejemplo, un parámetro con un valor de argumento de posición de 0 tiene un atributo de parámetro de "posición?</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>1."</source>
          <target state="translated">1."</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>ParameterSetName Argument</source>
          <target state="translated">Argumento de ParameterSetName</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The ParameterSetName argument specifies the parameter set to which a parameter belongs.</source>
          <target state="translated">El argumento ParameterSetName especifica el parámetro de conjunto al que pertenece un parámetro.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If no parameter set is specified, the parameter belongs to all the parameter sets defined by the function.</source>
          <target state="translated">Si no se especifica ningún conjunto de parámetros, el parámetro pertenece a todos los conjuntos de parámetros definidos por la función.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Therefore, to be unique, each parameter set must have at least one parameter that is not a member of any other parameter set.</source>
          <target state="translated">Por lo tanto, para que sea único, cada conjunto de parámetros debe tener al menos un parámetro que no es un miembro de otro conjunto de parámetros.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter in the Computer parameter set, a UserName parameter in the User parameter set, and a Summary parameter in both parameter sets.</source>
          <target state="translated">En el ejemplo siguiente se declara un parámetro ComputerName en el conjunto de parámetros de equipo, un parámetro de nombre de usuario en el conjunto de parámetros de usuario y un parámetro de resumen en ambos conjuntos de parámetros.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ParameterSetName="Computer")] [String[]] $ComputerName,</source>
          <target state="translated">[parámetro (obligatorio = $true, ParameterSetName = "Equipo")] [Cadena []] $ComputerName,</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ParameterSetName="User")] [String[]] $UserName,</source>
          <target state="translated">[parámetro (obligatorio = $true, ParameterSetName = "Usuario")] [Cadena []] $UserName,</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$false)] [Switch] $Summary</source>
          <target state="translated">[parameter(Mandatory=$false)] [Modificador] $Summary</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can specify only one ParameterSetName value in each argument and only one ParameterSetName argument in each Parameter attribute.</source>
          <target state="translated">Puede especificar un único valor de ParameterSetName en cada argumento y un único argumento ParameterSetName en cada atributo de parámetro.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To indicate that a parameter appears in more than one parameter set, add additional Parameter attributes.</source>
          <target state="translated">Para indicar que un parámetro aparece en más de un conjunto de parámetros, agregue los atributos de parámetro adicionales.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following example explicitly adds the Summary parameter to the Computer and User parameter sets.</source>
          <target state="translated">En el ejemplo siguiente se agrega explícitamente el parámetro resumen a los conjuntos de parámetros de usuario y de equipo.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The Summary parameter is mandatory in one parameter set and optional in the other.</source>
          <target state="translated">El parámetro de resumen es obligatorio en un parámetro establecido y opcional en el otro.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ParameterSetName="Computer")] [String[]] $ComputerName,</source>
          <target state="translated">[parámetro (obligatorio = $true, ParameterSetName = "Equipo")] [Cadena []] $ComputerName,</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ParameterSetName="User")] [String[]] $UserName,</source>
          <target state="translated">[parámetro (obligatorio = $true, ParameterSetName = "Usuario")] [Cadena []] $UserName,</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$false, ParameterSetName="Computer")] [parameter(Mandatory=$true, ParameterSetName="User")] [Switch] $Summary</source>
          <target state="translated">[parámetro (obligatorio = $false, ParameterSetName = "Equipo")] [parámetro (obligatorio = $true, ParameterSetName = "Usuario")] [Modificador] $Summary</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For more information about parameter sets, see "Cmdlet Parameter Sets" in the MSDN library at http://go.microsoft.com/fwlink/?LinkId=142183.</source>
          <target state="translated">Para obtener más información acerca de conjuntos de parámetros, vea "Parámetro establece" en la biblioteca MSDN en http://go.microsoft.com/fwlink/?LinkId=142183.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>ValueFromPipeline Argument</source>
          <target state="translated">Argumento de ValueFromPipeline</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The ValueFromPipeline argument indicates that the parameter accepts input from a pipeline object.</source>
          <target state="translated">El argumento ValueFromPipeline indica que el parámetro acepta la entrada de un objeto de canalización.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Specify this argument if the function accepts the entire object, not just a property of the object.</source>
          <target state="translated">Especificar este argumento si la función acepta todo el objeto, no sólo una propiedad del objeto.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that is mandatory and accepts an object that is passed to the function from the pipeline.</source>
          <target state="translated">En el ejemplo siguiente se declara un parámetro ComputerName que es obligatorio y acepta un objeto que se pasa a la función de la canalización.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ValueFromPipeline=$true)] [String[]] $ComputerName</source>
          <target state="translated">[parámetro (obligatorio = $true, ValueFromPipeline = $true)] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>ValueFromPipelineByPropertyName Argument</source>
          <target state="translated">Argumento de ValueFromPipelineByPropertyName</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The valueFromPipelineByPropertyName argument indicates that the parameter accepts input from a property of a pipeline object.</source>
          <target state="translated">El argumento valueFromPipelineByPropertyName indica que el parámetro acepta la entrada de una propiedad de un objeto de canalización.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The object property must have the same name or alias as the parameter.</source>
          <target state="translated">La propiedad de objeto debe tener el mismo nombre o alias como parámetro.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For example, if the function has a ComputerName parameter, and the piped object has a ComputerName property, the value of the ComputerName property is assigned to the ComputerName parameter of the function.</source>
          <target state="translated">Por ejemplo, si la función tiene un parámetro ComputerName, y el objeto canalizado tiene una propiedad ComputerName, se asigna el valor de la propiedad ComputerName para el parámetro ComputerName de la función.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that is mandatory and accepts input from the ComputerName property of the object that is passed to the function through the pipeline.</source>
          <target state="translated">En el ejemplo siguiente se declara un parámetro ComputerName es obligatorio y acepta la entrada de la propiedad ComputerName del objeto que se pasa a la función a través de la canalización.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)] [String[]] $ComputerName</source>
          <target state="translated">[parámetro (obligatorio = $true, ValueFromPipelineByPropertyName = $true)] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>ValueFromRemainingArguments Argument</source>
          <target state="translated">Argumento de ValueFromRemainingArguments</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The ValueFromRemainingArguments argument indicates that the parameter accepts all of the parameters values in the command that are not assigned to other parameters of the function.</source>
          <target state="translated">El argumento ValueFromRemainingArguments indica que el parámetro acepta todos los valores de parámetros en el comando que no están asignados a otros parámetros de la función.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that is mandatory and accepts all the remaining parameter values that were submitted to the function.</source>
          <target state="translated">En el ejemplo siguiente se declara un parámetro ComputerName que es obligatorio y acepta todos los valores de parámetro restantes que se han enviado a la función.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ValueFromRemainingArguments=$true)] [String[]] $ComputerName</source>
          <target state="translated">[parámetro (obligatorio = $true, ValueFromRemainingArguments = $true)] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>HelpMessage Argument</source>
          <target state="translated">Argumento de HelpMessage</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The HelpMessage argument specifies a string that contains a brief description of the parameter or its value.</source>
          <target state="translated">El argumento HelpMessage especifica una cadena que contiene una breve descripción del parámetro o su valor.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Windows PowerShell displays this message in the prompt that appears when a mandatory parameter value is missing from a command.</source>
          <target state="translated">Windows PowerShell muestra un mensaje en el símbolo del sistema que aparece cuando un valor de parámetro obligatorio falta de un comando.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This argument has no effect on optional parameters.</source>
          <target state="translated">Este argumento no influye en los parámetros opcionales.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The following example declares a mandatory ComputerName parameter and a help message that explains the expected parameter value.</source>
          <target state="translated">En el ejemplo siguiente se declara un parámetro obligatorio de ComputerName y un mensaje de ayuda que explica el valor de parámetro esperado.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>[parameter(mandatory=$true, HelpMessage="Enter one or more computer names separated by commas.")] [String[]] $ComputerName</source>
          <target state="translated">[parámetro (obligatorio = $true, HelpMessage = "Escriba uno o más nombres de equipo separados por comas.")] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Alias Attribute</source>
          <target state="translated">Alias (atributo)</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The Alias attribute establishes an alternate name for the parameter.</source>
          <target state="translated">El atributo de Alias establece un nombre alternativo para el parámetro.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>There is no limit to the number of aliases that you can assign to a parameter.</source>
          <target state="translated">No hay ningún límite para el número de alias que se pueden asignar a un parámetro.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following example shows a parameter declaration that adds the "CN" and "MachineName" aliases to the mandatory ComputerName parameter.</source>
          <target state="translated">En el ejemplo siguiente se muestra una declaración de parámetro que se agrega el alias "CN" y "MachineName" para el parámetro ComputerName obligatorio.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [alias("CN","MachineName")] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [alias("CN","MachineName")] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Parameter and Variable Validation Attributes</source>
          <target state="translated">Parámetros y atributos de validación de variables</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Validation attributes direct Windows PowerShell to test the parameter values that users submit when they call the advanced function.</source>
          <target state="translated">Atributos de validación indicar a Windows PowerShell para probar los valores de parámetro que se envían los usuarios cuando llama a la función avanzada.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If the parameter values fail the test, an error is generated and the function is not called.</source>
          <target state="translated">Si los valores de parámetro no supera la prueba, se genera un error y no se llama a la función.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You can also use some of the validation attributes to restrict the values that users can specify for variables.</source>
          <target state="translated">También puede utilizar algunos de los atributos de validación para restringir los valores que los usuarios pueden especificar para las variables.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>AllowNull Validation Attribute</source>
          <target state="translated">Atributo de validación AllowNull</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The AllowNull attribute allows the value of a mandatory parameter to be null ($null).</source>
          <target state="translated">El atributo AllowNull permite que el valor de un parámetro obligatorio sea null ($null).</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that can have a Null value.</source>
          <target state="translated">En el ejemplo siguiente se declara un parámetro ComputerName que puede tener un valor Null.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [AllowNull()] [String] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [AllowNull()] [String] $ComputerName</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>AllowEmptyString Validation Attribute</source>
          <target state="translated">Atributo de validación AllowEmptyString</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The AllowEmptyString attribute allows the value of a mandatory parameter to be an empty string ("").</source>
          <target state="translated">El atributo AllowEmptyString permite que el valor de un parámetro obligatorio para ser una cadena vacía ("").</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that can have an empty string value.</source>
          <target state="translated">En el ejemplo siguiente se declara un parámetro ComputerName que puede tener un valor de cadena vacía.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [AllowEmptyString()] [String] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [AllowEmptyString()] [String] $ComputerName</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>AllowEmptyCollection Validation Attribute</source>
          <target state="translated">Atributo de validación AllowEmptyCollection</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The AllowEmptyCollection attribute allows the value of a mandatory parameter to be an empty collection (@()).</source>
          <target state="translated">El atributo AllowEmptyCollection permite que el valor de un parámetro obligatorio para ser una colección vacía (@()).</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that can have a empty collection value.</source>
          <target state="translated">En el ejemplo siguiente se declara un parámetro ComputerName que puede tener un valor de la colección vacía.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [AllowEmptyCollection()] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [AllowEmptyCollection()] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>ValidateCount Validation Attribute</source>
          <target state="translated">Atributo de validación ValidateCount</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The ValidateCount attribute specifies the minimum and maximum number of parameter values that a parameter accepts.</source>
          <target state="translated">El atributo ValidateCount especifica el número mínimo y máximo de valores de parámetro que acepta un parámetro.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the number of parameter values in the command that calls the function is outside that range.</source>
          <target state="translated">Windows PowerShell genera un error si el número de valores de parámetro en el comando que llama a la función está fuera de ese intervalo.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The following parameter declaration creates a ComputerName parameter that takes 1 to 5 parameter values.</source>
          <target state="translated">La siguiente declaración de parámetro crea un parámetro ComputerName que toma los valores de parámetro de 1 a 5.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateCount(1,5)] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateCount(1,5)] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>ValidateLength Validation Attribute</source>
          <target state="translated">Atributo de validación ValidateLength</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The ValidateLength attribute specifies the minimum and maximum number of characters in a parameter or variable value.</source>
          <target state="translated">El atributo ValidateLength especifica el número mínimo y máximo de caracteres en un parámetro o el valor de la variable.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the length of a value specified for a parameter or a variable is outside of the range.</source>
          <target state="translated">Windows PowerShell genera un error si la longitud de un valor especificado para un parámetro o una variable está fuera del intervalo.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>In the following example, each computer name must have one to 10 characters.</source>
          <target state="translated">En el ejemplo siguiente, cada nombre de equipo debe tener uno a 10 caracteres.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateLength(1,10)] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateLength(1,10)] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $number must be a minimum of one character in length, and a maximum of ten characters.</source>
          <target state="translated">En el ejemplo siguiente, el valor de la variable $number debe ser un carácter de longitud como mínimo y un máximo de 10 caracteres.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>[Int32][ValidateLength(1,10)]$number = 01</source>
          <target state="translated">[Int32] [ValidateLength(1,10)] $number = 01</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>ValidatePattern Validation Attribute</source>
          <target state="translated">Atributo de validación ValidatePattern</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The ValidatePattern attribute specifies a regular expression that is compared to the parameter or variable value.</source>
          <target state="translated">El atributo ValidatePattern especifica una expresión regular que se compara con el parámetro o el valor de la variable.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the value does not match the regular expression pattern.</source>
          <target state="translated">Windows PowerShell genera un error si el valor no coincide con el patrón de expresión regular.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>In the following example, the parameter value must be a four-digit number, and each digit must be a number 0 to 9.</source>
          <target state="translated">En el ejemplo siguiente, el valor del parámetro debe ser un número de cuatro dígitos, y cada dígito debe ser un número del 0 al 9.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidatePattern("[0-9][0-9][0-9][0-9]")] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidatePattern("[0-9][0-9][0-9][0-9]")] [Cadena []] $ComputerName</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $number must be a four-digit number, and each digit must be a number 0 to 9.</source>
          <target state="translated">En el ejemplo siguiente, el valor de la variable $number debe ser un número de cuatro dígitos, y cada dígito debe ser un número del 0 al 9.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>[Int32][ValidatePattern("[0-9][0-9][0-9][0-9]")]$number = 1111</source>
          <target state="translated">[Int32] [ValidatePattern("[0-9][0-9][0-9][0-9]")] $number = 1111</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>ValidateRange Validation Attribute</source>
          <target state="translated">Atributo de validación ValidateRange</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The ValidateRange attribute specifies a numeric range for each parameter or variable value.</source>
          <target state="translated">El atributo ValidateRange especifica un intervalo numérico para cada parámetro o el valor de la variable.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if any value is outside that range.</source>
          <target state="translated">Windows PowerShell genera un error si algún valor está fuera de ese intervalo.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the Attempts parameter must be between 0 and 10.</source>
          <target state="translated">En el ejemplo siguiente, el valor del parámetro intentos debe ser entre 0 y 10.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateRange(0,10)] [Int] $Attempts</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateRange(0,10)] [Int] $Attempts</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $number must be between 0 and 10.</source>
          <target state="translated">En el ejemplo siguiente, el valor de la variable $number debe estar entre 0 y 10.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>[Int32][ValidateRange(0,10)]$number = 5</source>
          <target state="translated">[Int32] [ValidateRange(0,10)] $number = 5</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>ValidateScript Validation Attribute</source>
          <target state="translated">Atributo de validación ValidateScript</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The ValidateScript attribute specifies a script that is used to validate a parameter or variable value.</source>
          <target state="translated">El atributo ValidateScript especifica una secuencia de comandos que se utiliza para validar un parámetro o el valor de la variable.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Windows PowerShell pipes the value to the script, and generates an error if the script returns "false" or if the script throws an exception.</source>
          <target state="translated">Windows PowerShell canaliza el valor a la secuencia de comandos y genera un error si el script devuelve "false" o si la secuencia de comandos inicia una excepción.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>When you use the ValidateScript attribute, the value that is being validated is mapped to the $<bpt id="p1">_</bpt> variable. You can use the $<ept id="p1">_</ept> variable to refer to the value in the script.</source>
          <target state="translated">Cuando se utiliza el atributo ValidateScript, se asigna el valor que se va a validar a los $<bpt id="p1">_</bpt> variable. Puede usar el símbolo $<ept id="p1">_</ept> variable para hacer referencia al valor de la secuencia de comandos.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the EventDate parameter must be greater than or equal to the current date.</source>
          <target state="translated">En el ejemplo siguiente, el valor del parámetro EventDate debe ser mayor o igual a la fecha actual.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>[parameter()] [ValidateScript({$_ -ge (get-date)})] [DateTime] $EventDate</source>
          <target state="translated">[parameter()] [ValidateScript ({$_ -ge (get-date)})] $EventDate [fecha y hora]</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $date must be greater than or equal to the current date and time.</source>
          <target state="translated">En el ejemplo siguiente, el valor de la variable $date debe ser mayor o igual que la fecha y hora actuales.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>[DateTime][ValidateScript({$_ -ge (get-date)})]$date = (get-date)</source>
          <target state="translated">[Fecha y hora] [ValidateScript ({$_ -ge (get-date)})] $date = (get-date)</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>ValidateSet Attribute</source>
          <target state="translated">Atributo ValidateSet</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The ValidateSet attribute specifies a set of valid values for a parameter or variable.</source>
          <target state="translated">El atributo ValidateSet especifica un conjunto de valores válidos para un parámetro o variable.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if a parameter or variable value does not match a value in the set.</source>
          <target state="translated">Windows PowerShell genera un error si un valor de variable o parámetro no coincide con un valor en el conjunto.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the Detail parameter can only be "Low," "Average," or "High."</source>
          <target state="translated">En el ejemplo siguiente, el valor del parámetro detalle sólo puede ser "Bajo", "Medio" o "Alto".</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateSet("Low", "Average", "High")] [String[]] $Detail</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateSet ("baja", "Medio", "Alto")] [Cadena []] $Detail</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $flavor must be either Chocolate, Strawberry, or Vanilla.</source>
          <target state="translated">En el ejemplo siguiente, debe ser el valor de la variable $flavor Chocolate, fresa o vainilla.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>[String][ValidateSet("Chocolate", "Strawberry", "Vanilla")]$flavor = Strawberry</source>
          <target state="translated">[Cadena] [ValidateSet ("Chocolate", "Fresa", "Vanilla")] $flavor = fresa</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>ValidateNotNull Validation Attribute</source>
          <target state="translated">Atributo de validación ValidateNotNull</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The ValidateNotNull attribute specifies that the parameter value cannot be null ($null).</source>
          <target state="translated">El atributo ValidateNotNull especifica que el valor del parámetro no puede ser null ($null).</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the parameter value is null.</source>
          <target state="translated">Windows PowerShell genera un error si el valor del parámetro es null.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The ValidateNotNull attribute is designed to be used when the type of the parameter value is not specified or when the specified type will accept a value of Null.</source>
          <target state="translated">El atributo ValidateNotNull está diseñado para utilizarse cuando no se especifica el tipo del valor del parámetro o al tipo especificado aceptará un valor Null.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>(If you specify a type that will not accept a null value, such as a string, the null value will be rejected without the ValidateNotNull attribute, because it does not match the specified type.)</source>
          <target state="translated">(Si se especifica un tipo que no acepta un valor null, como una cadena, el valor null se rechazarán sin el atributo ValidateNotNull, porque no coincide con el tipo especificado.)</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the ID parameter cannot be null.</source>
          <target state="translated">En el ejemplo siguiente, el valor del parámetro del identificador no puede ser null.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateNotNull()]</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateNotNull()]</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>$ID</source>
          <target state="translated">$ID</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>ValidateNotNullOrEmpty Validation Attribute</source>
          <target state="translated">Atributo de validación ValidateNotNullOrEmpty</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The ValidateNotNullOrEmpty attribute specifies that the parameter value cannot be null ($null) and cannot be an empty string ("").</source>
          <target state="translated">El ValidateNotNullOrEmpty atributo especifica que el valor del parámetro no puede ser null ($null) y no puede ser una cadena vacía ("").</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the parameter is used in a function call, but its value is null, an empty string, or an empty array.</source>
          <target state="translated">Windows PowerShell genera un error si el parámetro se utiliza en una llamada de función, pero su valor es null, una cadena vacía o una matriz vacía.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateNotNullOrEmpty()] [String[]] $UserName</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateNotNullOrEmpty()] [Cadena []] $UserName</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Dynamic Parameters</source>
          <target state="translated">Parámetros dinámicos</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Dynamic parameters are parameters of a cmdlet, function, or script that are available only under certain conditions.</source>
          <target state="translated">Parámetros dinámicos son parámetros de cmdlet, función o secuencia de comandos que están disponibles sólo bajo ciertas condiciones.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>For example, several provider cmdlets have parameters that are available only when the cmdlet is used in the provider drive, or in a particular path of the provider drive.</source>
          <target state="translated">Por ejemplo, varios cmdlets de proveedor tienen parámetros que solo están disponibles cuando se usa el cmdlet en la unidad del proveedor, o en una determinada ruta de acceso de la unidad del proveedor.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>For example, the Encoding parameter is available on the Add-Content, Get-Content, and Set-Content cmdlets only when it is used in a file system drive.</source>
          <target state="translated">Por ejemplo, el parámetro de codificación está disponible en Add-Content, Get-Content y Set-Content cmdlets sólo cuando se utiliza en una unidad de sistema de archivos.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>You can also create a parameter that appears only when another parameter is used in the function command or when another parameter has a certain value.</source>
          <target state="translated">También puede crear un parámetro que aparece sólo cuando se utiliza otro parámetro en el comando de función o al otro parámetro tiene un valor determinado.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Dynamic parameters can be very useful, but use them only when necessary, because they can be difficult for users to discover.</source>
          <target state="translated">Parámetros dinámicos pueden ser muy útil, pero utilizarlos sólo cuando sea necesario, ya que puede ser difíciles para los usuarios a detectar.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>To find a dynamic parameter, the user must be in the provider path, use the ArgumentList parameter of the Get-Command cmdlet, or use the Path parameter of Get-Help.</source>
          <target state="translated">Para buscar un parámetro dinámico, el usuario debe estar en la ruta de acceso del proveedor, use el parámetro ArgumentList del cmdlet Get-Command o utilice el parámetro Path de Get-Help.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>To create a dynamic parameter for a function or script, use the DynamicParam keyword.</source>
          <target state="translated">Para crear un parámetro dinámico de una función o una secuencia de comandos, utilice la palabra clave DynamicParam.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The syntax is as follows:</source>
          <target state="translated">La sintaxis es como sigue:</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>DynamicParam {&lt;statement-list&gt;}</source>
          <target state="translated">DynamicParam {&lt; instrucción-list &gt;}</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>In the statement list, use an If statement to specify the conditions under which the parameter is available in the function.</source>
          <target state="translated">En la lista de instrucciones, utilice una estructura If para especificar las condiciones en las que el parámetro está disponible en la función.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Use the New-Object cmdlet to create a System.Management.Automation.RuntimeDefinedParameter object to represent the parameter and specify its name.</source>
          <target state="translated">Use el cmdlet New-Object para crear un objeto System.Management.Automation.RuntimeDefinedParameter para representar el parámetro y especifique su nombre.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>You can also use a New-Object command to create a System.Management.Automation.ParameterAttribute object to represent attributes of the parameter, such as Mandatory, Position, or ValueFromPipeline or its parameter set.</source>
          <target state="translated">También puede utilizar un comando New-Object para crear un objeto System.Management.Automation.ParameterAttribute para representar los atributos del parámetro, como obligatorio, posición, o ValueFromPipeline o el conjunto de parámetros.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The following example shows a sample function with standard parameters named Name and Path, and an optional dynamic parameter named DP1.The DP1 parameter is in the PSet1 parameter set and has a type of Int32.</source>
          <target state="translated">En el ejemplo siguiente se muestra una función de ejemplo con los parámetros estándar denominados nombre y ruta de acceso y un parámetro dinámico opcional denominado DP1. El parámetro DP1 está en el conjunto de parámetros PSet1 y tiene un tipo de Int32.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The DP1 parameter is available in the Sample function only when the value of the Path parameter contains "HKLM:", indicating that it is being used in the HKEY_LOCAL_MACHINE registry drive.</source>
          <target state="translated">El parámetro DP1 sólo está disponible en la función de ejemplo cuando el valor del parámetro de ruta de acceso contiene "HKLM:", que indica que está utilizándose en la unidad de registro HKEY_LOCAL_MACHINE.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>function Get-Sample { [CmdletBinding()] Param ([String]$Name, [String]$Path)</source>
          <target state="translated">función de ejemplo de Get {Param de [CmdletBinding()] ([String] $Name, $Path [String])</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>DynamicParam { if ($path -match ".HKLM.:") { $attributes = new-object System.Management.Automation.ParameterAttribute $attributes.ParameterSetName = "__AllParameterSets" $attributes.Mandatory = $false $attributeCollection = new-object ` -Type System.Collections.ObjectModel.Collection[System.Attribute] $attributeCollection.Add($attributes)</source>
          <target state="translated">DynamicParam {si ($path-coincide con ". HKLM.: ") {$attributes = nuevo objeto System.Management.Automation.ParameterAttribute $attributes. ParameterSetName = "__AllParameterSets" $attributes. Obligatorio = $false $attributeCollection = nuevo objeto '-tipo System.Collections.ObjectModel.Collection[System.Attribute] $attributeCollection.Add($attributes)</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>$dynParam1 = new-object ` -Type System.Management.Automation.RuntimeDefinedParameter("dp1", [Int32], $attributeCollection)</source>
          <target state="translated">$dynParam1 = nuevo objeto '-tipo System.Management.Automation.RuntimeDefinedParameter("dp1", [Int32], $attributeCollection)</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>$paramDictionary = new-object ` -Type System.Management.Automation.RuntimeDefinedParameterDictionary $paramDictionary.Add("dp1", $dynParam1) return $paramDictionary } } }</source>
          <target state="translated">$paramDictionary = nuevo objeto '-tipo System.Management.Automation.RuntimeDefinedParameterDictionary $paramDictionary.Add ("dp1", $dynParam1) devuelven $paramDictionary}}}</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For more information, see "RuntimeDefinedParameter Class" in the MSDN (Microsoft Developer Network) library at http://go.microsoft.com/fwlink/?LinkID=145130.</source>
          <target state="translated">Para obtener más información, vea "RuntimeDefinedParameter Class" en la biblioteca MSDN (Microsoft Developer Network) en http://go.microsoft.com/fwlink/?LinkID=145130.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Switch Parameters Switch parameters are parameters with no parameter value.</source>
          <target state="translated">Parámetros de modificador de parámetros del conmutador son parámetros con ningún valor de parámetro.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>They are effective only when they are used and have only one effect.</source>
          <target state="translated">Son eficaces sólo cuando se utilizan y que tiene un único efecto.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For example, the -NoProfile parameter of PowerShell.exe is a switch parameter.</source>
          <target state="translated">Por ejemplo, el parámetro - No_perfil de PowerShell.exe es un parámetro de modificador.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>To create a switch parameter in a function, specify the Switch type in the parameter definition.</source>
          <target state="translated">Para crear un parámetro de modificador en una función, especifique el tipo de conmutador en la definición del parámetro.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For example: Param ([Switch]<ph id="ph1">&lt;ParameterName&gt;</ph>) -or- Param</source>
          <target state="translated">Por ejemplo: Param ([modificador]<ph id="ph1">&lt;ParameterName&gt;</ph>) - o - Param</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$false)] [Switch]</source>
          <target state="translated">[parameter(Mandatory=$false)] [Modificador]</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">) simple</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Switch parameters are easy to use and are preferred over Boolean parameters, which have a more difficult syntax.</source>
          <target state="translated">Parámetros de modificador son fáciles de usar y son preferibles a los parámetros booleanos, que tienen una sintaxis más difícil.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For example, to use a switch parameter, the user types the parameter in the command.</source>
          <target state="translated">Por ejemplo, para utilizar un parámetro de modificador, el usuario escribe el parámetro en el comando.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>-IncludeAll</source>
          <target state="translated">-IncludeAll</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>To use a Boolean parameter, the user types the parameter and a Boolean value.</source>
          <target state="translated">Para utilizar un parámetro booleano, el usuario escribe el parámetro y un valor booleano.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>-IncludeAll:$true</source>
          <target state="translated">-IncludeAll: $true</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>When creating switch parameters, choose the parameter name carefully.</source>
          <target state="translated">Al crear los parámetros del conmutador, elija el nombre del parámetro con cuidado.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Be sure that the parameter name communicates the effect of the parameter to the user, and avoid ambiguous terms, such as Filter or Maximum, that might imply that a value is required.</source>
          <target state="translated">Asegúrese de que el nombre del parámetro comunica el efecto del parámetro para el usuario y evite términos ambiguas, como máximo, que implique que se requiere un valor o de filtro.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VEA TAMBIÉN</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>about_Functions about_Functions_Advanced about_Functions_Advanced_Methods about_Functions_CmdletBindingAttribute about_Functions_OutputTypeAttribute</source>
          <target state="translated">about_Functions about_Functions_Advanced about_Functions_Advanced_Methods about_Functions_CmdletBindingAttribute about_Functions_OutputTypeAttribute</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>