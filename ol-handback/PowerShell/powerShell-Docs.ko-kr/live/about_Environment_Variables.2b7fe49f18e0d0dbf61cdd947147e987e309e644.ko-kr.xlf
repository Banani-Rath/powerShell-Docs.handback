<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a9431b19bc529829732982f5772d8996f8ccc1d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Environment_Variables.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">430233dcbaf74527dfb0ec0fb0cd0e1494d95eef</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cd3261c98a26b5673f496a1fa3ec35c6c022a6a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Environment_Variables</source>
          <target state="translated">about_Environment_Variables</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Environment Variables</source>
          <target state="translated">환경 변수 정보</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Environment_Variables</source>
          <target state="translated">about_Environment_Variables</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Environment_Variables</source>
          <target state="translated">about_Environment_Variables</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to access Windows environment variables in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell에서 Windows 환경 변수에 액세스 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Environment variables store information about the operating system environment.</source>
          <target state="translated">환경 변수는 운영 체제 환경에 대 한 정보를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This information includes details such as the operating system path, the number of processors used by the operating system, and the location of temporary folders.</source>
          <target state="translated">이 정보는 운영 체제 경로 운영 체제 및 임시 폴더의 위치에서 사용 되는 프로세서 수 등의 세부 정보에 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The environment variables store data that is used by the operating system and other programs.</source>
          <target state="translated">환경 변수는 운영 체제 및 기타 프로그램에서 사용 되는 데이터를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, the WINDIR environment variable contains the location of the Windows installation directory.</source>
          <target state="translated">예를 들어 WINDIR 환경 변수는 Windows 설치 디렉터리의 위치를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Programs can query the value of this variable to determine where Windows operating system files are located.</source>
          <target state="translated">프로그램은 Windows 운영 체제 파일의 위치를 확인 하려면이 변수의 값을 쿼리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Windows PowerShell lets you view and change Windows environment variables, including the variables set in the registry, and those set for a particular session.</source>
          <target state="translated">Windows PowerShell을 사용 하 여 검토 하 고 변수 레지스트리를 설정 하 고 특정 세션에 대해 설정 하는 것을 포함 하 여 Windows 환경 변수를 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Windows PowerShell environment provider simplifies this process by making it easy to view and change the environment variables.</source>
          <target state="translated">Windows PowerShell 환경 공급자는 쉽게 보고 환경 변수를 변경 하 여이 프로세스를 단순화 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Unlike other types of variables in Windows PowerShell, environment variables and their values are inherited by child sessions, such as local background jobs and the sessions in which module members run.</source>
          <target state="translated">다른 Windows PowerShell에서 변수 형식과 달리 로컬 백그라운드 작업 모듈 멤버 실행 하는 세션 등과 같은 자식 세션, 환경 변수 및 해당 값은 상속 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This makes environment variables well suited to storing values that are needed in both parent and child sessions.</source>
          <target state="translated">따라서 환경 변수 부모와 자식 세션에서 필요한 값을 저장 하기에 적합 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Windows PowerShell Environment Provider The Windows PowerShell environment provider lets you access Windows environment variables in Windows PowerShell in a Windows PowerShell drive (the Env: drive).</source>
          <target state="translated">Windows PowerShell 환경 공급자는 Windows PowerShell 환경 공급자 사용 하면 Windows PowerShell 드라이브에서 Windows PowerShell에서 Windows 환경 변수에 액세스 (Env: 드라이브).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This drive looks much like a file system drive.</source>
          <target state="translated">이 드라이브는 파일 시스템 드라이브 것과 유사 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To go to the Env: drive, type:</source>
          <target state="translated">Env로 돌아가려면: 드라이브를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Set-Location Env:</source>
          <target state="translated">Set-location Env:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Then, to display the contents of the Env: drive, type:</source>
          <target state="translated">Env의 내용을 표시 하려면 다음: 드라이브를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Get-ChildItem</source>
          <target state="translated">Get-ChildItem</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can view the environment variables in the Env: drive from any other Windows PowerShell drive, and you can go into the Env: drive to view and change the environment variables.</source>
          <target state="translated">Env에서 환경 변수를 볼 수 있습니다: 다른 Windows PowerShell 드라이브에서 드라이브 Env에 들어갈 수 있는: 드라이브를 보고 하 고 환경 변수를 변경 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Environment Variable Objects In Windows PowerShell, each environment variable is represented by an object that is an instance of the System.Collections.DictionaryEntry class.</source>
          <target state="translated">환경 변수 개체에 Windows PowerShell에서 각 환경 변수는 System.Collections.DictionaryEntry 클래스의 인스턴스인 개체에 의해 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In each DictionaryEntry object, the name of the environment variable is the dictionary key.</source>
          <target state="translated">각 DictionaryEntry 개체 환경 변수의 이름은 사전 키입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The value of the variable is the dictionary value.</source>
          <target state="translated">변수의 값은 사전 값입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To display an environment variable in Windows PowerShell, get an object that represents the variable, and then display the values of the object properties.</source>
          <target state="translated">Windows PowerShell에서 환경 변수를 표시 하려면 변수를 나타내는 개체를 가져오고 개체 속성의 값을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you change an environment variable in Windows PowerShell, use the methods that are associated with the DictionaryEntry object.</source>
          <target state="translated">Windows PowerShell에서 환경 변수를 변경 하면 DictionaryEntry 개체와 연결 된 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To display the properties and methods of the object that represents an environment variable in Windows PowerShell, use the Get-Member cmdlet.</source>
          <target state="translated">Windows PowerShell에서 환경 변수를 나타내는 개체의 메서드와 속성을 표시 하려면 Get-member cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, to display the methods and properties of all the objects in the Env: drive, type:</source>
          <target state="translated">예를 들어, Env에 있는 모든 개체의 속성과 메서드를 표시 하려면: 드라이브를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Get-Item -Path Env:* | Get-Member</source>
          <target state="translated">Get-item-Path Env: * | Get-member</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Displaying Environment Variables You can use the cmdlets that contain the Item noun (the Item cmdlets) to display and change the values of environment variables.</source>
          <target state="translated">환경 변수를 표시를 표시 하 고 환경 변수의 값을 변경할 항목 명사 (Item cmdlet)를 포함 하는 cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Because environment variables do not have child items, the output of Get-Item and Get-ChildItem is the same.</source>
          <target state="translated">환경 변수 자식 항목이 없으므로 Get-item 및 Get-childitem의 출력이 같습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you refer to an environment variable, type the Env: drive name followed by the name of the variable.</source>
          <target state="translated">환경 변수를 참조 하는 경우 입력 Env: 드라이브 이름 뒤에 변수의 이름입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, to display the value of the COMPUTERNAME environment variable, type:</source>
          <target state="translated">예를 들어 COMPUTERNAME 환경 변수의 값을 표시 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Get-Childitem Env:Computername</source>
          <target state="translated">Get-childitem Env:Computername</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To display the values of all the environment variables, type:</source>
          <target state="translated">모든 환경 변수 값을 표시 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Get-ChildItem Env:</source>
          <target state="translated">Get-childitem Env:</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By default, Windows PowerShell displays the environment variables in the order in which it retrieves them.</source>
          <target state="translated">기본적으로 Windows PowerShell에서 것을 검색 하 고 순서에 환경 변수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To sort the list of environment variables by variable name, pipe the output of a Get-ChildItem command to the Sort-Object cmdlet.</source>
          <target state="translated">변수 이름으로 환경 변수 목록을 정렬 하려면 Sort-object cmdlet Get-childitem 명령 출력을 파이프 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, from any Windows PowerShell drive, type:</source>
          <target state="translated">예를 들어 모든 Windows PowerShell 드라이브에서 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Get-ChildItem Env: | Sort Name</source>
          <target state="translated">Get-childitem Env: | 정렬 이름</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can also go into the Env: drive by using the Set-Location cmdlet:</source>
          <target state="translated">Env를 이동할 수 있습니다: Set-location cmdlet을 사용 하 여 드라이브:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Set-Location Env:</source>
          <target state="translated">Set-location Env:</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When you are in the Env: drive, you can omit the Env: drive name from the path.</source>
          <target state="translated">중이면 Env: 드라이브를 Env를 생략할 수 있습니다: 경로에서 드라이브 이름입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, to display all the environment variables, type:</source>
          <target state="translated">예를 들어, 모든 환경 변수를 표시 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Get-ChildItem</source>
          <target state="translated">Get-ChildItem</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To display the value of the COMPUTERNAME variable from within the Env: drive, type:</source>
          <target state="translated">Env 내에서 COMPUTERNAME 변수 값을 표시 하려면: 드라이브를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Get-ChildItem ComputerName</source>
          <target state="translated">Get-childitem 컴퓨터 이름</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can also display and change the values of environment variables without using a cmdlet by using the expression parser in Windows PowerShell.</source>
          <target state="translated">표시 하 고 Windows powershell에서 식 파서를 사용 하 여 cmdlet을 사용 하지 않고 환경 변수 값을 변경할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To display the value of an environment variable, use the following syntax:</source>
          <target state="translated">환경 변수의 값을 표시 하려면 다음 구문을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>$Env:&lt;variable-name&gt;</source>
          <target state="translated">$Env: &lt; 변수 이름 &gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, to display the value of the WINDIR environment variable, type the following command at the Windows PowerShell command prompt:</source>
          <target state="translated">예를 들어 WINDIR 환경 변수의 값을 표시 하려면 Windows PowerShell 명령 프롬프트에서 다음 명령을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>$Env:windir</source>
          <target state="translated">$Env: windir</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In this syntax, the dollar sign ($) indicates a variable, and the drive name indicates an environment variable.</source>
          <target state="translated">이 구문에서 달러 기호 ($) 변수를 나타내고 드라이브 이름을 환경 변수를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Changing Environment Variables To make a persistent change to an environment variable, use System in Control Panel (Advanced tab or the Advanced System Settings item) to store the change in the registry.</source>
          <target state="translated">기존 설정 하려면 변경 환경 변수 환경 변수를 영구 변경 (고급 탭 또는 고급 시스템 설정 항목) 레지스트리에 변경 내용을 저장 하려면 제어판의 시스템을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you change environment variables in Windows PowerShell, the change affects only the current session.</source>
          <target state="translated">Windows PowerShell에서 환경 변수를 변경 하면 변경 내용을 현재 세션을만 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This behavior resembles the behavior of the Set command in Windows-based environments and the Setenv command in UNIX-based environments.</source>
          <target state="translated">이 동작은 Windows 기반 환경에서 Set 명령은 Setenv 명령 UNIX 기반 환경에서의 동작과 비슷합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You must also have permission to change the values of the variables.</source>
          <target state="translated">변수 값을 변경할 수 있는 권한이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you try to change a value without sufficient permission, the command fails, and Windows PowerShell displays an error.</source>
          <target state="translated">충분 한 권한이 없는 값을 변경 하려고 하면 명령이 실패 하 고 Windows PowerShell에 오류가 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can change the values of variables without using a cmdlet by using the following syntax:</source>
          <target state="translated">다음 구문을 사용 하 여 cmdlet을 사용 하지 않고 변수 값을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>$Env:&lt;variable-name&gt; = "&lt;new-value&gt;"</source>
          <target state="translated">$Env: &lt; 변수 이름 &gt; = "&lt; 새 값 &gt;"</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, to append ";c:\temp" to the value of the Path environment variable, use the following syntax:</source>
          <target state="translated">예를 들어, 추가할 "; c:\temp"는 Path 환경 변수, 값은 다음 구문을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>$Env:path = $env:path + ";c:\temp"</source>
          <target state="translated">$Env: 경로 $env =: 경로 + "; c:\temp"</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also use the Item cmdlets, such as Set-Item, Remove-Item, and Copy-Item to change the values of environment variables.</source>
          <target state="translated">Set-item, 같은 Item cmdlet을 사용할 수도 있습니다 항목 제거 및 Copy-item 환경 변수의 값을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to use the Set-Item cmdlet to append ";c:\temp" to the value of the Path environment variable, use the following syntax:</source>
          <target state="translated">예를 들어, 추가할 Set-item cmdlet을 사용 하 여 "; c:\temp"는 Path 환경 변수, 값은 다음 구문을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Set-Item -Path Env:Path -Value ($Env:Path + ";C:\Temp")</source>
          <target state="translated">Set-item-Path Env:Path-값 ($Env: 경로 + "; C:\Temp ")</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In this command, the value is enclosed in parentheses so that it is interpreted as a unit.</source>
          <target state="translated">이 명령에서 값은 괄호 안에 포함 하는 단위로 해석 됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Saving Changes to Environment Variables To create or change the value of an environment variable in every Windows PowerShell session, add the change to your Windows PowerShell profile.</source>
          <target state="translated">환경 변수를 변경 내용을 저장 작성 또는 모든 Windows PowerShell 세션에서 환경 변수의 값을 변경, Windows PowerShell 프로필에 변경 사항을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, to add the C:\Temp directory to the Path environment variable in every Windows PowerShell session, add the following command to your Windows PowerShell profile.</source>
          <target state="translated">예를 들어 C:\Temp 디렉터리에를 추가 하려면 Path 환경 변수는 모든 Windows PowerShell 세션에서 다음 명령을 Windows PowerShell 프로필에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>$Env:Path = $Env:Path + ";C:\Temp"</source>
          <target state="translated">$Env: 경로 $Env =: 경로 + "; C:\Temp "</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To add the command to an existing profile, such as the CurrentUser,AllHosts profile, type:</source>
          <target state="translated">Currentuser로 AllHosts 프로필 등의 기존 프로필에 명령을 추가 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Add-Content -Path $Profile.CurrentUserAllHosts -Value '$Env:Path = $Env:Path + ";C:\Temp"'</source>
          <target state="translated">Add-content-Path $Profile.CurrentUserAllHosts-값 ' $Env: 경로 $Env =: 경로 + "; C:\Temp"'</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Environment Variables That Store Preferences Windows PowerShell features can use environment variables to store user preferences.</source>
          <target state="translated">환경 변수를 저장할 기본 Windows PowerShell 기능 사용자 기본 설정을 저장 하려면 환경 변수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These variables work like preference variables, but they are inherited by child sessions of the sessions in which they are created.</source>
          <target state="translated">이러한 변수 기본 설정 변수 처럼 작동 하지만 생성 된 세션의 자식 세션에서 상속 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information about preference variables, see about_preference_variables.</source>
          <target state="translated">기본 설정 변수에 대 한 자세한 내용은 about_preference_variables를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The environment variables that store preferences include:</source>
          <target state="translated">기본 설정을 저장 하는 환경 변수는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>PSExecutionPolicyPreference Stores the execution policy set for the current session.</source>
          <target state="translated">PSExecutionPolicyPreference 저장소는 현재 세션에 대 한 실행 정책이 설정합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This environment variable exists only when you set an execution policy for a single session.</source>
          <target state="translated">이 환경 변수는 단일 세션에 대 한 실행 정책을 설정 하는 경우에 존재 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can do this in two different ways.</source>
          <target state="translated">이 두 가지 방법으로 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>-- Use PowerShell.exe to start a session at the command line and use its ExecutionPolicy parameter to set the execution policy for the session.</source>
          <target state="translated">-명령줄에서 세션을 시작 하는 ExecutionPolicy 매개 변수를 사용 하 여 세션에 대 한 실행 정책을 설정 PowerShell.exe를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>-- Use the Set-ExecutionPolicy cmdlet.</source>
          <target state="translated">-Set-executionpolicy cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Use the Scope parameter with a value of "Process".</source>
          <target state="translated">Scope 매개 변수를 사용 하 여 "프로세스"의 값입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information, see about_Execution_Policies.</source>
          <target state="translated">자세한 내용은 about_Execution_Policies를 참조하세요.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>PSModulePath Stores the paths to the default module directories.</source>
          <target state="translated">PSModulePath 기본 모듈 디렉터리에 경로 저장합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Windows PowerShell looks for modules in the specified directories when you do not specify a full path to a module.</source>
          <target state="translated">Windows PowerShell 모듈에 전체 경로 지정 하지 않을 경우 지정 된 디렉터리에 모듈을 찾습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The default value of $Env:PSModulePath is:</source>
          <target state="translated">$Env의 기본값: PSModulePath 됩니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>$home\Documents\WindowsPowerShell\Modules; $pshome\Modules</source>
          <target state="translated">$ home\Documents\WindowsPowerShell\Modules입니다. $ pshome\Modules</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Windows PowerShell sets the value of "$pshome\Modules" in the registry.</source>
          <target state="translated">Windows PowerShell 레지스트리에서 "$pshome\Modules"의 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>It sets the value of "$home\Documents\WindowsPowerShell\Modules" each time you start Windows PowerShell.</source>
          <target state="translated">Windows PowerShell을 시작할 때마다 "$home\Documents\WindowsPowerShell\Modules"의 값을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In addition, setup programs that install modules in other directories, such as the Program Files directory, can append their locations to the value of PSModulePath.</source>
          <target state="translated">또한 설치 프로그램은 Program Files 디렉터리와 같은 다른 디렉터리에 모듈을 설치 하는 PSModulePath의 값에 해당 위치를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To change the default module directories for the current session, use the following command format to change the value of the PSModulePath environment variable.</source>
          <target state="translated">현재 세션에 대 한 기본 모듈 디렉터리를 변경 하려면 다음 명령 형식을 사용 하 여 PSModulePath 환경 변수 값을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, to add the "C:\Program Files\Fabrikam\Modules" directory to the value of the PSModulePath environment variable, type:</source>
          <target state="translated">예를 들어 "C:\Program Files\Fabrikam\Modules" 디렉터리에 PSModulePath 환경 변수의 값을 추가 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>$Env:PSModulePath = $Env:PSModulePath + ";C:\Program Files\Fabrikam\Modules"</source>
          <target state="translated">$Env: PSModulePath $Env =: PSModulePath + "; C:\Program Files\Fabrikam\Modules "</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The semi-colon (;) in the command separates the new path from the path that precedes it in the list.</source>
          <target state="translated">명령의 세미콜론(;)은 목록에서 앞에 나오는 경로와 새 경로를 구분해줍니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To change the value of PSModulePath in every session, add the previous command to your Windows PowerShell profile or use the SetEnvironmentVariable method of the Environment class.</source>
          <target state="translated">모든 세션에서 PSModulePath의 값을 변경 하려면 Windows PowerShell 프로필에 이전 명령을 추가 하거나 환경 클래스의 SetEnvironmentVariable 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The following command uses the GetEnvironmentVariable method to get the machine setting of PSModulePath and the SetEnvironmentVariable method to add the C:\Program Files\Fabrikam\Modules path to the value.</source>
          <target state="translated">다음 명령은 GetEnvironmentVariable 메서드를 사용 하 여 PSModulePath 및 SetEnvironmentVariable 메서드는 값에 C:\Program Files\Fabrikam\Modules 경로를 시스템 설정 가져오기.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>$path = [System.Environment]::GetEnvironmentVariable("PSModulePath", "Machine") [System.Environment]::SetEnvironmentVariable("PSModulePath", $path + ` ";C:\Program Files\Fabrikam\Modules", "Machine")</source>
          <target state="translated">$path = [System.Environment]::GetEnvironmentVariable ("PSModulePath", "컴퓨터") [System.Environment]::SetEnvironmentVariable ($path "PSModulePath" + ' "; C:\Program Files\Fabrikam\Modules ","컴퓨터")</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To add a path to the user setting, change the target value to User.</source>
          <target state="translated">사용자 설정에 경로 추가 하려면 사용자에 게 대상 값을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>$path = [System.Environment]::GetEnvironmentVariable("PSModulePath", "User") [System.Environment]::SetEnvironmentVariable("PSModulePath", $path + ` ";$home\Documents\Fabrikam\Modules", "User")</source>
          <target state="translated">$path = [System.Environment]::GetEnvironmentVariable ("PSModulePath", "User") [System.Environment]::SetEnvironmentVariable ($path "PSModulePath" + ' "; $home\Documents\Fabrikam\Modules", "User")</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information about the methods of the System.Environment class, see "Environment Methods" in MSDN at http://go.microsoft.com/fwlink/?LinkId=242783.</source>
          <target state="translated">System.Environment 클래스의 메서드에 대 한 자세한 내용은 http://go.microsoft.com/fwlink/?LinkId=242783에서 MSDN의 "환경 메서드"를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can add also add a command that changes the value to your profile or use System in Control Panel to change the value of the PSModulePath environment variable in the registry.</source>
          <target state="translated">추가할 수 있습니다 또한 프로필에 값을 변경 하는 명령을 추가 또는 레지스트리에서 PSModulePath 환경 변수의 값을 변경 하려면 제어판의 시스템을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For more information, see about_Modules.</source>
          <target state="translated">자세한 내용은 about_Modules를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Environment (provider) about_Modules</source>
          <target state="translated">환경 (공급자) about_Modules</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>