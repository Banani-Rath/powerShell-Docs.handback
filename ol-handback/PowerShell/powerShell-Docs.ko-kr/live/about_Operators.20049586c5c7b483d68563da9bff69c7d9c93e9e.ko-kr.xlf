<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a41f11a01c10f79e7758991d8b2e99b43d61c40a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6de3ad5d63c3839f35a80176dd2ff75cfa45bc84</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">942fa66d552b36a6ea96231e745486e46d3c7789</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Operators</source>
          <target state="translated">about_Operators</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Operators</source>
          <target state="translated">연산자 정보</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Operators</source>
          <target state="translated">about_Operators</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Operators</source>
          <target state="translated">about_Operators</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the operators that are supported by  Windows PowerShell�.</source>
          <target state="translated">Windows PowerShell에서 지원 되는 연산자에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An operator is a language element that you can use in a command or expression.</source>
          <target state="translated">연산자는 언어 요소에 명령 또는 식에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports several types of operators to help you manipulate values.</source>
          <target state="translated">Windows PowerShell에는 여러 유형의 연산자 값을 조작할 수 있도록 지원 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
          <target state="translated">산술 연산자</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use arithmetic operators (<ph id="ph1">\+</ph>, -, <ph id="ph2">\*</ph>, <ph id="ph3">\/</ph>, %) to calculate values in a command or expression.</source>
          <target state="translated">산술 연산자를 사용 하 여 (<ph id="ph1">\+</ph>, -, <ph id="ph2">\*</ph>, <ph id="ph3">\/</ph>, %) 명령 또는 식의 값을 계산 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>With these operators, you can add, subtract, multiply, or divide values, and calculate the remainder (modulus) of a division operation.</source>
          <target state="translated">이러한 연산자와 함께, 빼기, 곱하기, 또는 값을 나누는 추가한 나누기 연산의 나머지 (나머지)를 계산 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also use arithmetic operators with strings, arrays, and hash tables.</source>
          <target state="translated">또한 문자열, 배열, 해시 테이블와 산술 연산자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The addition operator concatenates elements.</source>
          <target state="translated">더하기 연산자는 요소를 연결 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The multiplication operator returns the specified number of copies of each element.</source>
          <target state="translated">곱하기 연산자는 지정 된 각 요소의 복사본 수를 반환합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see about_Arithmetic_Operators.</source>
          <target state="translated">자세한 내용은 about_Arithmetic_Operators를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
          <target state="translated">대입 연산자</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use assignment operators (<ph id="ph1">\=</ph>, <ph id="ph2">\+\=</ph>, -<ph id="ph3">\=</ph>, <ph id="ph4">\*\=</ph>, <ph id="ph5">\/\=</ph>, %<ph id="ph6">\=</ph>) to assign one or more values to variables, to change the values in a variable, and to append values to variables.</source>
          <target state="translated">할당 연산자를 사용 하 여 (<ph id="ph1">\=</ph>, <ph id="ph2">\+\=</ph>, -<ph id="ph3">\=</ph>, <ph id="ph4">\*\=</ph>, <ph id="ph5">\/\=</ph>, %<ph id="ph6">\=</ph>)에 변수를 변수에 값을 변경 하 고 변수에 값을 추가 하려면 하나 이상의 값을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can also cast the variable as any Microsoft .NET Framework data type, such as string or DateTime, or Process variable.</source>
          <target state="translated">문자열 또는 날짜/시간, 같은 모든 Microsoft.NET Framework 데이터 형식으로 변수 또는 프로세스 변수 캐스팅할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see about_Assignment_Operators.</source>
          <target state="translated">자세한 내용은 about_Assignment_Operators를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Comparison Operators</source>
          <target state="translated">비교 연산자</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use comparison operators (-eq, -ne, -gt, -lt, -le, -ge) to compare values and test conditions.</source>
          <target state="translated">비교 연산자를 사용 하 여 (-eq,-ne,-gt,-lt,-le,-ge) 값을 비교 하 여 조건을 테스트 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, you can compare two string values to determine whether they are equal.</source>
          <target state="translated">예를 들어 같은지 여부를 확인 하려면 두 문자열 값을 비교할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The comparison operators include the match operators (-match, -notmatch), which find patterns by using regular expressions; the replace operator (-replace), which uses regular expressions to change input values; the like operators (-like, -notlike), which find patterns using wildcard characters (<ph id="ph1">\*</ph>); and the containment operators (-in, -notin, -contains, -notcontains), which determine whether a test value appears in a reference set.</source>
          <target state="translated">일치 연산자를 포함 하는 비교 연산자 (--notmatch 일치), 정규식;를 사용 하 여 패턴을 찾고 있는 replace 연산자 (-바꾸기), 정규식을 사용 하 여 입력된 값이 있습니다; 변경 와일드 카드 문자를 사용 하 여 패턴을 찾고 있는 연산자는 like 연산자 (-예:,-notlike) (<ph id="ph1">\*</ph>); 및 포함 연산자 (인,-notin--notcontains를 포함), 테스트 값이 참조 집합에 나타나는지 결정 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>They also include the bitwise operators (-bAND, -bOR, -bXOR, -bNOT) to manipulate the bit patterns in values.</source>
          <target state="translated">비트 연산자 또한 포함 (--bOR,-bXOR, 관련 대역 외) 값의 비트 패턴을 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see about_Comparison_Operators</source>
          <target state="translated">자세한 내용은 about_Comparison_Operators을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Logical Operators</source>
          <target state="translated">논리 연산자</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use logical operators (-and, -or, -xor, -not, <ph id="ph1">\!</ph>) to connect conditional statements into a single complex conditional.</source>
          <target state="translated">논리 연산자를 사용 하 여 (-및,-또는 xor,-, <ph id="ph1">\!</ph>) 조건부 문을 단일 복잡 한 조건으로 연결 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, you can use a logical -and operator to create an object filter with two different conditions.</source>
          <target state="translated">예를 들어, 사용할 수 있습니다-논리 and 필터를 만드는 개체 두 개의 서로 다른 조건 연산자입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see about_Logical_Operators.</source>
          <target state="translated">자세한 내용은 about_Logical_Operators를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Redirection Operators</source>
          <target state="translated">리디렉션 연산자</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use redirection operators (&gt;, &gt;&gt;, 2&gt;, 2&gt;, and 2&gt;&amp;1) to send the output of a command or expression to a text file.</source>
          <target state="translated">리디렉션 연산자를 사용 하 여 (&gt;, &gt;&gt;, 2 &gt;, 2 &gt;, 2 &gt; &amp; 1) 텍스트 파일에 명령 또는 식의 출력을 보냅니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The redirection operators work like the Out-File cmdlet (without parameters) but they also let you redirect error output to specified files.</source>
          <target state="translated">리디렉션 연산자 처럼 작동는 Out-file cmdlet 매개 변수) (없이 하지만 지정 된 파일에 오류 출력을 리디렉션할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can also use the Tee-Object cmdlet to redirect output.</source>
          <target state="translated">또한 출력 Tee-object cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see about_Redirection</source>
          <target state="translated">자세한 내용은 about_Redirection을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Split and Join Operators</source>
          <target state="translated">분할 및 조인 연산자</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The -split and -join operators divide and combine substrings.</source>
          <target state="translated">분할-및-조인 연산자를 나누고 부분 문자열을 결합 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The -split operator splits a string into substrings.</source>
          <target state="translated">문자열을 부분 문자열로 문자열-분할 연산자 분할 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The -join operator concatenates multiple strings into a single string.</source>
          <target state="translated">-Join 연산자는 여러 문자열을 단일 문자열로 연결 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see about_Split and about_Join.</source>
          <target state="translated">자세한 내용은 about_Split 및 about_Join를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Type Operators</source>
          <target state="translated">형식 연산자</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Use the type operators (-is, -isnot, -as) to find or change the .NET Framework type of an object.</source>
          <target state="translated">형식 연산자를 사용 하 여 (-에-isnot,-)를 찾거나 개체의.NET Framework 형식을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see about_Type_Operators.</source>
          <target state="translated">자세한 내용은 about_Type_Operators를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Unary Operators</source>
          <target state="translated">단항 연산자</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Use unary operators to increment or decrement variables or object properties and to set integers to positive or negative numbers.</source>
          <target state="translated">개체 속성 또는 변수를 증가 또는 감소 하 고 정수 양수 또는 음수를 설정 하는 단항 연산자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, to increment the variable $a from 9 to 10, you type $a<ph id="ph1">\+\+</ph>.</source>
          <target state="translated">예를 들어 변수 $ 증가 $ 10 9에서 입력 한<ph id="ph1">\+\+</ph>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Special Operators</source>
          <target state="translated">특수 연산자</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use special operators to perform tasks that cannot be performed by the other types of operators.</source>
          <target state="translated">특수 연산자를 사용 하 여 다른 종류의 연산자에서 수행할 수 없는 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, special operators allow you to perform operations such as running commands and changing a value's data type.</source>
          <target state="translated">예를 들어 특수 연산자를 사용 명령을 실행 하 고 값의 데이터 형식 변경 등의 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>@( ) Array subexpression operator</source>
          <target state="translated">@ () 배열 하위 식 연산자</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Returns the result of one or more statements as an array.</source>
          <target state="translated">배열 하나 이상의 문 결과 반환합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If there is only one item, the array has only one member.</source>
          <target state="translated">항목을 하나만 있으면 배열에 하나의 멤버만 사용 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&amp; Call operator</source>
          <target state="translated">&amp; 호출 연산자</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Runs a command, script, or script block.</source>
          <target state="translated">명령, 스크립트 또는 스크립트 블록을 실행합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The call operator, also known as the "invocation operator," lets you run commands that are stored in variables and represented by strings.</source>
          <target state="translated">함수 호출 연산자는 라고도 "호출 연산자" 변수에 저장 되 고 문자열로 표현 하는 명령을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Because the call operator does not parse the command, it cannot interpret command parameters.</source>
          <target state="translated">함수 호출 연산자는 명령을 구문 분석 되지 않습니다, 명령 매개 변수를 해석할 수 없으면 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>[ ] Cast operator</source>
          <target state="translated">캐스트 연산자</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Converts or limits objects to the specified type.</source>
          <target state="translated">변환 또는 지정된 된 형식으로 개체를 제한 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the objects cannot be converted,  Windows PowerShell generates an error.</source>
          <target state="translated">Windows PowerShell 개체를 변환할 수 없는 경우 오류가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>, Comma operator</source>
          <target state="translated">쉼표 연산자</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>As a binary operator, the comma creates an array.</source>
          <target state="translated">이항 연산자로 쉼표 배열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>As a unary operator, the comma creates an array with one member.</source>
          <target state="translated">단항 연산자로 쉼표는 하나의 멤버와 함께 배열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Place the comma before the member.</source>
          <target state="translated">멤버 이전에 쉼표를 배치 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Dot sourcing operator</source>
          <target state="translated">도트 소싱 연산자</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Runs a script in the current scope so that any functions, aliases, and variables that the script creates are added to the current scope.</source>
          <target state="translated">모든 함수, 별칭 및 변수를 만드는 스크립트를 현재 범위에 추가 되도록 현재 범위에는 스크립트를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">참고:</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The dot sourcing operator is followed by a space.</source>
          <target state="translated">연산자 소싱 점 뒤에 공백이 표시 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Use the space to distinguish the dot from the dot (.) symbol that represents the current directory.</source>
          <target state="translated">현재 디렉터리를 나타내는 점 (.) 기호 점 구분 하기 위해 공간을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the following example, the Sample.ps1 script in the current directory is run in the current scope.</source>
          <target state="translated">다음 예제에서는 현재 범위에서 현재 디렉터리에 Sample.ps1 스크립트를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-f Format operator</source>
          <target state="translated">-f 서식 연산자</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Formats strings by using the format method of string objects.</source>
          <target state="translated">String 개체의 형식 메서드를 사용 하 여 문자열 형식을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Enter the format string on the left side of the operator and the objects to be formatted on the right side of the operator.</source>
          <target state="translated">연산자 및 연산자의 오른쪽에 서식을 지정할 개체의 왼쪽에 형식 문자열을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see the String.Format method (http:<ph id="ph1">\/\/</ph>go.microsoft.com<ph id="ph2">\/</ph>fwlink<ph id="ph3">\/</ph>?LinkID<ph id="ph4">\=</ph>166450) and Composite Formatting (http:<ph id="ph5">\/\/</ph>go.microsoft.com<ph id="ph6">\/</ph>fwlink<ph id="ph7">\/</ph>?LinkID<ph id="ph8">\=</ph>166451).</source>
          <target state="translated">자세한 내용은 참조 String.Format 메서드 (http:<ph id="ph1">\/\/</ph>이 포트는 go.microsoft.com<ph id="ph2">\/</ph>fwlink<ph id="ph3">\/</ph>? LinkID<ph id="ph4">\=</ph>166450) 복합 형식 지정 (http:<ph id="ph5">\/\/</ph>이 포트는 go.microsoft.com<ph id="ph6">\/</ph>fwlink<ph id="ph7">\/</ph>? LinkID<ph id="ph8">\=</ph>166451).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>[ ] Index operator</source>
          <target state="translated">인덱스 연산자</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Selects objects from indexed collections, such as arrays and hash tables.</source>
          <target state="translated">배열, 해시 테이블 등의 인덱싱된 컬렉션에서 개체를 선택 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Array indexes are zero-based, so the first object is indexed as [0].</source>
          <target state="translated">배열 인덱스 0부터 시작 되므로 첫 번째 개체 [0]으로 인덱싱됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For arrays (only), you can also use negative indexes to get the last values.</source>
          <target state="translated">배열 (전용)에 대 한 마지막 값을 가져오는 음수 인덱스를 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Hash tables are indexed by key value.</source>
          <target state="translated">해시 테이블 키 값으로 인덱싱됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>&amp;#124; Pipeline operator</source>
          <target state="translated">&amp;#124; 파이프라인 연산자</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Sends ("pipes") the output of the command that precedes it to the command that follows it.</source>
          <target state="translated">("파이프")는 뒤에 오는 명령 앞에 오는 명령의 출력을 보냅니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When the output includes more than one object (a "collection"), the pipeline operator sends the objects one at a time.</source>
          <target state="translated">둘 이상의 개체 ("컬렉션")를 포함 하는 출력을 파이프라인 연산자가 한 번에 개체 하나 보냅니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Property dereference operator</source>
          <target state="translated">역참조 연산자 속성</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Accesses the properties and methods of an object.</source>
          <target state="translated">개체의 메서드와 속성에 액세스합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>..</source>
          <target state="translated">..</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Range operator</source>
          <target state="translated">범위 연산자</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Represents the sequential integers in an integer array, given an upper and lower boundary.</source>
          <target state="translated">프로그램 상한 및 하 한 경계를 지정 된 정수 배열에 있는 순차적 정수를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>:: Static member operator</source>
          <target state="translated">:: 정적 멤버 연산자</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Calls the static properties operator and methods of a .NET Framework class.</source>
          <target state="translated">정적 속성 연산자와.NET Framework 클래스의 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To find the static properties and methods of an object, use the Static parameter of the Get-Member cmdlet.</source>
          <target state="translated">정적 속성 및 개체의 메서드를 찾으려면 Get-member cmdlet의 정적 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>$( ) Subexpression operator</source>
          <target state="translated">$ () 하위 식 연산자</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns the result of one or more statements.</source>
          <target state="translated">하나 이상의 문의 결과를 반환합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For a single result, returns a scalar.</source>
          <target state="translated">단일 결과 대 한 스칼라를 반환합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For multiple results, returns an array.</source>
          <target state="translated">여러 결과 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>about_Arithmetic_Operators</source>
          <target state="translated">about_arithmetic_operators</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_assignment_operators</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>about_Comparison_Operators</source>
          <target state="translated">about_comparison_operators</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>about_Logical_Operators</source>
          <target state="translated">about_Logical_Operators</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>about_Type_Operators</source>
          <target state="translated">about_Type_Operators</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>about_Split</source>
          <target state="translated">about_Split</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>about_Join</source>
          <target state="translated">about_join</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>about_Redirection</source>
          <target state="translated">about_Redirection</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>