<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb4646b9638bf6bf76f890277e936628567b8447</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\ConvertFrom-Csv.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56bfa926f6ada4d6125d4817e8bbe26325ba8330</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43160b76d1cb03d66bf5f89172c2e1b6aa571c0c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts object properties in comma-separated value (CSV) format into CSV versions of the original objects.</source>
          <target state="translated">CSV(쉼표로 구분된 값) 형식의 개체 속성을 원래 개체의 CSV 버전으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Delimiter (Default)</source>
          <target state="translated">구분 기호 (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>UseCulture</source>
          <target state="translated">UseCulture</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ConvertFrom-Csv<ept id="p1">**</ept> cmdlet creates objects from CSV variable-length strings that are generated by the ConvertTo-Csv cmdlet.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Convertfrom-csv<ept id="p1">**</ept> cmdlet은 Convertto-csv cmdlet에서 생성 되는 CSV 가변 길이 문자열에서 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the parameters of this cmdlet to specify the column header row, which determines the property names of the resulting objects, to specify the item delimiter, or to direct this cmdlet to use the list separator for the current culture as the delimiter.</source>
          <target state="translated">항목 구분 기호를 지정 하려면 그룹 또는 구분 기호로 현재 문화권에 대 한 목록 구분 기호를 사용 하 여이 cmdlet을 직접 결과 개체의 속성 이름을 결정 하는 열 머리글 행을 지정 하려면이 cmdlet의 매개 변수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The objects that <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept> creates are CSV versions of the original objects.</source>
          <target state="translated">개체는 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept> 만듭니다 원래 개체의 CSV 버전입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The property values of the CSV objects are string versions of the property values of the original objects.</source>
          <target state="translated">CSV 개체의 속성 값은 원래 개체 속성 값의 문자열 버전입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The CSV versions of the objects do not have any methods.</source>
          <target state="translated">개체의 CSV 버전에는 메서드가 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also use the Export-Csv and Import-Csv cmdlets to convert objects to CSV strings in a file (and back).</source>
          <target state="translated">개체 파일의 CSV 문자열로 변환 (및 백업)를 Export-csv 및 Import-csv cmdlet을 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These cmdlets are the same as the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ConvertFrom-CSV<ept id="p2">**</ept> cmdlets, except that they save the CSV strings in a file.</source>
          <target state="translated">이 cmdlet과 동일는 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> 및 <bpt id="p2">**</bpt>CONVERTFROM-CSV<ept id="p2">**</ept> cmdlet을 파일에는 CSV 문자열을 저장 하는 점을 제외 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example 1: Convert processes on the local computer to CSV format</source>
          <target state="translated">예제 1: 로컬 컴퓨터의 프로세스를 CSV 형식으로 변환</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These commands convert the processes on the local computer into CSV format and then restore them to object form.</source>
          <target state="translated">이들 명령은 로컬 컴퓨터의 프로세스를 CSV 형식으로 변환한 다음 개체 형식으로 복원합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> cmdlet to get the processes on the local computer.</source>
          <target state="translated">첫 번째 명령은 <bpt id="p1">**</bpt>Get-process<ept id="p1">**</ept> cmdlet을 로컬 컴퓨터의 프로세스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A pipeline operator (|) sends them to the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet, which converts the process object to CSV format.</source>
          <target state="translated">파이프라인 연산자 (|)로 보냅니다는 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> cmdlet 프로세스 개체를 CSV 형식으로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The CSV strings are saved in the $p variable.</source>
          <target state="translated">CSV 문자열은 $p 변수에 저장됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second command uses a pipeline operator to send the CSV strings in the $p variable to the <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">두 번째 명령은 파이프라인 연산자를 사용 하 여 CSV 문자열 $p 변수를 보낼 수는 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The cmdlet converts the CSV strings into CSV versions of the original process objects.</source>
          <target state="translated">이 cmdlet은 CSV 문자열을 원래 프로세스 개체의 CSV 버전으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example 2: Convert a data object to CSV format and then to CSV object format</source>
          <target state="translated">예제 2: 데이터 개체를 CSV 형식 및 변환 다음 CSV 개체 형식</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These commands convert a data object to CSV format and then to CSV object format.</source>
          <target state="translated">이들 명령은 데이터 개체를 CSV 형식으로 변환한 다음 CSV 개체 형식으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Date cmdlet to get the current date and time.</source>
          <target state="translated">첫 번째 명령은 Get-Date cmdlet을 사용하여 현재 날짜 및 시간을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A pipeline object (|) sends the date to the ConvertTo-CSV cmdlets, which converts the date object to a series of CSV strings.</source>
          <target state="translated">파이프라인 연산자(|)가 날짜를 ConvertTo-CSV cmdlet으로 보내면 이 cmdlet은 날짜 개체를 일련의 CSV 문자열로 변환합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The command uses the Delimiter parameter to specify a semicolon delimiter.</source>
          <target state="translated">이 명령은 Delimiter 매개 변수를 사용하여 세미콜론 구분 기호를 지정합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The strings are saved in the $date variable.</source>
          <target state="translated">문자열은 $date 변수에 저장됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The second command uses the ConvertFrom-CSV cmdlet to convert the CSV strings in the $date variable back to object format.</source>
          <target state="translated">두 번째 명령은 ConvertFrom-CSV cmdlet을 사용하여 $date 변수에 있는 CSV 문자열을 다시 개체 형식으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The command uses the InputObject parameter to specify the CSV strings and the Delimiter parameter to specify the semicolon delimiter.</source>
          <target state="translated">이 명령은 InputObject 매개 변수를 사용하여 CSV 문자열을 지정하고 Delimiter 매개 변수를 사용하여 세미콜론 구분 기호를 지정합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 3: Use the header parameter to change the names of properties</source>
          <target state="translated">예제 3: header 매개 변수를 사용 하 여 속성의 이름을 변경 하려면</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Header parameter of <bpt id="p1">**</bpt>ConvertFrom-Csv<ept id="p1">**</ept> to change the names of properties in the resulting imported object.</source>
          <target state="translated">Header 매개 변수를 사용 하는 방법을 보여 주는이 예제 <bpt id="p1">**</bpt>Convertfrom-csv<ept id="p1">**</ept> 가져온된 결과 개체에서 속성의 이름을 변경 해야 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> cmdlet to start a background job that runs a <bpt id="p2">**</bpt>Get-Process<ept id="p2">**</ept> command on the local computer.</source>
          <target state="translated">첫 번째 명령은 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> cmdlet을 실행 하는 백그라운드 작업을 시작는 <bpt id="p2">**</bpt>Get-process<ept id="p2">**</ept> 로컬 컴퓨터에서 명령입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A pipeline operator (|) sends the resulting job object to the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet, which converts the job object to CSV format.</source>
          <target state="translated">파이프라인 연산자 (|)가 결과 작업 개체에는 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> cmdlet 작업 개체를 CSV 형식으로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An assignment operator (=) saves the resulting CSV in the $J variable.</source>
          <target state="translated">대입 연산자 (=)는 결과 CSV $J 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The second command saves a header in the $Header variable.</source>
          <target state="translated">두 번째 명령은 $Header 변수에 헤더를 저장합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Unlike the default header, this header uses MoreData instead of HasMoreData and State instead of JobStateInfo.</source>
          <target state="translated">기본 머리글과 달리이 헤더는 HasMoreData 및 JobStateInfo 대신 상태 대신 MoreData를 사용합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The third command deletes the original header (the second line) from the CSV strings and returns it to the $J variable.</source>
          <target state="translated">세 번째 명령은 CSV 문자열에서 원래 머리글 (두 번째 줄)을 삭제 하려면 $J 변수에 반환 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The fourth command uses the <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept> cmdlet to convert the CSV strings to a CSV version of the job object.</source>
          <target state="translated">네 번째 명령은 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept> CSV를 변환 하는 cmdlet이 작업 개체의 CSV 버전으로 문자열입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The command uses a pipeline operator to send the content in $J to <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept>.</source>
          <target state="translated">이 명령은 파이프라인 연산자를 사용 하 여를 $J에 콘텐츠를 보내도록 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The resulting object has MoreData and State properties, as specified by the header.</source>
          <target state="translated">결과 개체의 헤더에 지정 된 대로 MoreData 및 상태 속성에 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example 4: Convert CSV strings of service objects</source>
          <target state="translated">예 4: 서비스 개체의 CSV 문자열로 변환</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept> cmdlet to convert CSV strings of service objects that had been converted by the <bpt id="p2">**</bpt>ConvertTo-CSV<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">이 명령은 사용는 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept> 변환한 서비스 개체의 CSV 문자열로 변환 하는 cmdlet으로는 <bpt id="p2">**</bpt>CONVERTTO-CSV<ept id="p2">**</ept> cmdlet.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter to direct <bpt id="p2">**</bpt>ConvertFrom-CSV<ept id="p2">**</ept> to use the delimiter (list separator) of the current culture.</source>
          <target state="translated">이 명령은 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> 매개 변수를 <bpt id="p2">**</bpt>CONVERTFROM-CSV<ept id="p2">**</ept> 현재 문화권의 구분 기호 (목록 구분 기호)를 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When using the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter, be sure that the list separator of the current culture matches the delimiter used in the CSV strings.</source>
          <target state="translated">사용 하는 경우는 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> 매개 변수를 현재 문화권의 목록 구분 기호는 CSV 문자열에 사용 된 구분 기호 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept> cannot generate objects from the CSV strings.</source>
          <target state="translated">그렇지 않으면 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept> CSV 문자열에서 개체를 생성할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this example, a Get-Culture command was used to verify the list separator, before the ConvertFrom-CSV command was used.</source>
          <target state="translated">이 예에서 Get-Culture 명령은 ConvertFrom-CSV 명령을 사용하기 전에 목록 구분 기호를 확인하는 데 사용되었습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>-Delimiter</source>
          <target state="translated">구분 기호</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies the delimiter that separates the property values in the CSV strings.</source>
          <target state="translated">CSV 문자열의 속성 값을 구분하는 구분 기호를 지정합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">기본값은 쉼표(,)입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Enter a character, such as a colon (:).</source>
          <target state="translated">콜론(:)과 같은 문자를 입력합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To specify a semicolon (;), enclose it in quotation marks.</source>
          <target state="translated">세미콜론(;)을 지정하려면 따옴표로 묶어야 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the delimiter used in the CSV strings, <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept> cannot create objects from the CSV strings.</source>
          <target state="translated">CSV 문자열에 사용 되는 구분 기호 이외의 문자를 지정 하는 경우 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept> CSV 문자열에서 개체를 만들 수 없습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">대신 이 cmdlet은 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-Header</source>
          <target state="translated">헤더</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies an alternate column header row for the imported string.</source>
          <target state="translated">가져온 문자열에 대해 대체 열 머리글 행을 지정합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The column header determines the names of the properties of the object that <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept> creates.</source>
          <target state="translated">열 머리글은 개체의 속성의 이름을 결정 하는 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept> 만듭니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Enter a comma-separated list of the column headers.</source>
          <target state="translated">쉼표로 구분된 열 머리글 목록을 입력합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Enclose each item in quotation marks (single or double).</source>
          <target state="translated">각 항목을 작은따옴표 또는 큰따옴표로 묶습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Do not enclose the header string in quotation marks.</source>
          <target state="translated">머리글 문자열을 따옴표로 묶지 마세요.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you enter fewer column headers than there are columns, the remaining columns will have no headers.</source>
          <target state="translated">열 수보다 적은 수의 열 머리글을 입력하면 나머지 열에 머리글이 표시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you enter more headers than there are columns, the extra headers are ignored.</source>
          <target state="translated">열 수보다 많은 수의 머리글을 입력하면 나머지 머리글은 무시됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When using the Header parameter, omit the column header string from the CSV strings.</source>
          <target state="translated">Header 매개 변수를 사용할 때는 CSV 문자열에서 열 머리글 문자열을 생략하세요.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Otherwise, this cmdlet creates an extra object from the items in the header row.</source>
          <target state="translated">그렇지 않으면이 cmdlet는 머리글 행 항목에서 추가 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Specifies the CSV strings to be converted to objects.</source>
          <target state="translated">개체로 변환할 CSV 문자열을 지정합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the CSV strings or type a command or expression that gets the CSV strings.</source>
          <target state="translated">CSV 문자열이 포함된 변수를 입력하거나 CSV 문자열을 가져오는 명령 또는 식을 입력하세요.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can also pipe the CSV strings to <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept>.</source>
          <target state="translated">CSV 문자열을로 파이프할 수도 있습니다 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-UseCulture</source>
          <target state="translated">-UseCulture</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet uses the list separator for the current culture as the string delimiter.</source>
          <target state="translated">이 cmdlet의 목록 구분 기호에서을 사용 하는 현재 문화권 문자열 구분 기호로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">기본값은 쉼표(,)입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To find the list separator for a culture, use the following command: <ph id="ph1">`Get-Culture.TextInfo.ListSeparator`</ph>.</source>
          <target state="translated">문화권에 대 한 목록 구분 기호를 찾으려면 다음 명령을 사용 하 여: <ph id="ph1">`Get-Culture.TextInfo.ListSeparator`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the delimiter used in the CSV strings, <bpt id="p1">**</bpt>ConvertFrom-CSV<ept id="p1">**</ept> cannot create objects from the CSV strings.</source>
          <target state="translated">CSV 문자열에 사용 되는 구분 기호 이외의 문자를 지정 하는 경우 <bpt id="p1">**</bpt>CONVERTFROM-CSV<ept id="p1">**</ept> CSV 문자열에서 개체를 만들 수 없습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">대신 이 cmdlet은 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can pipe CSV strings to this cmdlet.</source>
          <target state="translated">CSV 문자열을이 cmdlet로 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This cmdlet returns the objects described by the properties in the CSV strings.</source>
          <target state="translated">이 cmdlet은 CSV 문자열에 속성에 의해 설명 되는 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Because the imported objects are CSV versions of the object type, they are not recognized and formatted by the Windows PowerShell type formatting entries that format the non-CSV versions of the object type.</source>
          <target state="translated">가져온 개체는 개체 유형의 CSV 버전이므로 CSV가 아닌 개체 유형 버전 형식을 지정하는 Windows PowerShell 유형 형식 지정 항목을 통해 인식되지 않으며 형식이 지정되지도 않습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In CSV format, each object is represented by a comma-separated list of the property values of the object.</source>
          <target state="translated">CSV 형식에서 각 개체는 개체 속성 값을 쉼표로 구분한 목록으로 표현됩니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The property values are converted to strings (by using the ToString() method of the object), so they are generally represented by the name of the property value.</source>
          <target state="translated">속성 값은 개체의 ToString() 메서드를 통해 문자열로 변환될 수도 있으므로 일반적으로 속성 값 이름으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This cmdlet does not export the methods of the object.</source>
          <target state="translated">이 cmdlet은 개체의 메서드를 내보내지 않습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>