<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94a8894f35ddee1665bff0f6d2bff7fdb32abb83</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_WMI.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfcfb047929a4ffa37a5c0f9cc5dc2ce71fd908b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68b540d4c9f6790f17e57e1b9cd515304fd0953d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_WMI</source>
          <target state="translated">about_WMI</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About WMI</source>
          <target state="translated">WMI에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_WMI</source>
          <target state="translated">about_WMI</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_WMI</source>
          <target state="translated">about_WMI</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Windows Management Instrumentation (WMI) uses the Common Information Model (CIM) to represent systems, applications, networks, devices, and other manageable components of the modern enterprise.</source>
          <target state="translated">Windows Management Instrumentation (WMI)는 모델 CIM (Common Information)를 사용 하 여 시스템, 응용 프로그램, 네트워크, 장치 및 현대 엔터프라이즈의 다른 관리 가능한 구성 요소를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows Management Instrumentation (WMI) is Microsoft’s implementation of Web-Based Enterprise Management (WBEM), the industry standard.</source>
          <target state="translated">Windows Management Instrumentation (WMI)는 웹 기반 엔터프라이즈 관리 (WBEM) 산업 표준의 Microsoft 구현입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Classic WMI uses DCOM to communicate with networked devices to manage remote systems.</source>
          <target state="translated">클래식 WMI 원격 시스템을 관리 하는 네트워크에 연결 된 장치와 통신에 DCOM을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell� 3.0 introduces a CIM provider model that uses WinRM to remove the dependency on DCOM.</source>
          <target state="translated">Windows PowerShell 3.0에서는 WinRM을 사용 하 여 DCOM에 대 한 종속성을 제거 하는 CIM 공급자 모델을 소개 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This CIM provider model also uses new WMI provider APIs that enable developers to write  Windows PowerShell cmdlets in native code (C<ph id="ph1">\+\+</ph>).</source>
          <target state="translated">이 CIM 공급자 모델 또한 사용 하 여 새로운 WMI 공급자 개발자는 네이티브 코드에서 Windows PowerShell cmdlet를 작성할 수 있는 Api (C<ph id="ph1">\+\+</ph>).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Do not confuse WMI providers with  Windows PowerShell providers.</source>
          <target state="translated">WMI 공급자에 게 Windows PowerShell 공급자를 혼동 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Many Windows features have an associated WMI provider that exposes their management capabilities.</source>
          <target state="translated">많은 Windows 기능이 관리 기능을 노출 하는 연결 된 WMI 공급자.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To get WMI providers, run a WMI query that gets instances of the __Provider WMI class, such as the following query.</source>
          <target state="translated">WMI 공급자를 가져오려면 __Provider 다음 쿼리와 같은 WMI 클래스의 인스턴스를 가져오는 WMI 쿼리를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>THREE COMPONENTS OF WMI</source>
          <target state="translated">WMI의 세 가지 구성 요소</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following three components of WMI interact with  Windows PowerShell: Namespaces, Providers, and Classes.</source>
          <target state="translated">Windows PowerShell와 WMI의 다음 세 가지 구성 요소가 상호 작용: 네임 스페이스, 공급자 및 클래스입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>WMI Namespaces organize WMI providers and WMI classes into groups of related components.</source>
          <target state="translated">WMI 네임 스페이스는 WMI 공급자 및 WMI 클래스의 관련된 구성 요소 그룹으로 구성합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this way, they are similar to .NET Framework namespaces.</source>
          <target state="translated">이러한 방식으로.NET Framework 네임 스페이스와 유사 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Namespaces are not physical locations, but are more like logical databases.</source>
          <target state="translated">네임 스페이스는 물리적 위치 없는 되지만 논리 데이터베이스와 같은 가능성이 높습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All WMI namespaces are instances of the __Namespace system class.</source>
          <target state="translated">모든 WMI 네임 스페이스는 __Namespace 시스템 클래스의 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The default WMI namespace is Root<ph id="ph1">\/</ph>CIMV2 (since Microsoft Windows 2000).</source>
          <target state="translated">기본 WMI 네임 스페이스는 루트<ph id="ph1">\/</ph>CIMV2 (이후 Microsoft Windows 2000의 경우).</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To use  Windows PowerShell to get WMI namespaces in the current session, use a command with the following format.</source>
          <target state="translated">현재 세션의 WMI 네임 스페이스를 가져오려면 Windows PowerShell을 사용 하려면 다음 형식의 명령을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To get WMI namespaces in other namespaces, use the Namespace parameter to change the location of the search.</source>
          <target state="translated">다른 네임 스페이스의 WMI 네임 스페이스를 가져오려면 검색의 위치를 변경 하려면 네임 스페이스 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following command finds WMI namespaces that reside in the Root<ph id="ph1">\/</ph>Cimv2<ph id="ph2">\/</ph>Applications namespace.</source>
          <target state="translated">다음 명령은 루트에 있는 WMI 네임 스페이스를 찾습니다<ph id="ph1">\/</ph>Cimv2<ph id="ph2">\/</ph>응용 프로그램 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>WMI namespaces are hierarchical.</source>
          <target state="translated">WMI 네임 스페이스는 계층적입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Therefore, obtaining a list of all namespaces on a particular system requires performing a recursive query starting at the root namespace.</source>
          <target state="translated">따라서, 특정 시스템에서 모든 네임 스페이스의 목록을 얻는 루트 네임 스페이스에서 시작 하는 재귀 쿼리를 수행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>WMI Providers expose information about Windows manageable objects.</source>
          <target state="translated">WMI 공급자는 Windows 관리 가능한 개체에 대 한 정보를 표시합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A provider retrieves data from a component, and passes that data through WMI to a management application, such as  Windows PowerShell.</source>
          <target state="translated">공급자는 구성 요소에서 데이터를 검색 하 고 Windows PowerShell과 같은 관리 응용 프로그램에 WMI 통해 해당 데이터를 전달 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Most WMI providers are dynamic providers, which means that they obtain the data dynamically when it is requested through the management application.</source>
          <target state="translated">대부분의 WMI 공급자는 동적 공급자는 이러한 데이터를 가져올 동적으로 관리 응용 프로그램을 통해 요청 된 경우.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>FINDING WMI CLASSES</source>
          <target state="translated">WMI 클래스를 찾고 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In a default installation of Windows 8, there are more than 1,100 WMI classes in Root<ph id="ph1">\/</ph>Cimv2.</source>
          <target state="translated">Windows 8의 기본 설치에서는 이상 1,100 WMI 클래스에에서 없는 루트<ph id="ph1">\/</ph>Cimv2 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>With this many WMI classes, the challenge becomes identifying the appropriate WMI class to use to perform a specific task.</source>
          <target state="translated">이렇게 많은 WMI 클래스와 과제 특정 작업을 수행 하는 데 적절 한 WMI 클래스를 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Windows PowerShell 3.0 provides two ways to find WMI classes that are related to a specific topic.</source>
          <target state="translated">Windows PowerShell 3.0에는 특정 항목에 관련 된 WMI 클래스를 찾을 수 있는 두 가지 방법으로 제공 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example,to find WMI classes in the root\CIMV2 WMI namespace that are related to disks, you can use a query such as the one shown here.</source>
          <target state="translated">예를 들어 디스크와 관련 된 root\CIMV2 WMI 네임 스페이스에 WMI 클래스를 찾으려면 여기에 표시 된 것과 같은 쿼리를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To find WMI classes that are related to memory, you might use a query such as the one shown here.</source>
          <target state="translated">메모리와 관련 된 WMI 클래스를 찾으려면 여기에 표시 된 것과 같은 쿼리를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The CIM cmdlets also provide the ability to discover WMI classes.</source>
          <target state="translated">또한 CIM cmdlet은 WMI 클래스를 검색 하는 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To do this, use the Get-CIMClass cmdlet.</source>
          <target state="translated">이렇게 하려면 Get CIMClass cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The command shown here lists WMI classes related to video.</source>
          <target state="translated">여기 목록 WMI 클래스에 표시 된 명령은 비디오와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Tab expansion works when changing WMI namespaces, and therefore use of tab expansion makes sub-WMI namespaces easily discoverable.</source>
          <target state="translated">WMI 네임 스페이스를 변경 하는 경우 확장이 작동 탭 해지고 따라서 탭 확장을 사용 하 여 하위 WMI 네임 스페이스 쉽게 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the following example, the Get-CimClass cmdlet lists WMI classes related to power settings.</source>
          <target state="translated">다음 예제에서는 Get CimClass cmdlet는 전원 설정과 관련 된 WMI 클래스를 나열 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To find it, type the root<ph id="ph1">\/</ph>CIMV2<ph id="ph2">\/</ph> WMI namespace, and then press type the root<ph id="ph3">\/</ph>CIMV2<ph id="ph4">\/</ph> WMI namespace, and then press the Tab key several times until the power namespace appears.</source>
          <target state="translated">을 찾으려면 루트 입력<ph id="ph1">\/</ph>CIMV2<ph id="ph2">\/</ph> WMI 네임 스페이스와 키를 누릅니다 입력 루트<ph id="ph3">\/</ph>CIMV2<ph id="ph4">\/</ph> 전원 네임 스페이스 나타날 때까지 여러 번 키를 WMI 네임 스페이스와 다음 탭 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Here is the command:</source>
          <target state="translated">이 명령은 다음과 같습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>