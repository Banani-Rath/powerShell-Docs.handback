<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae8964d134d4e01aa9196823402e9c209f4b36a3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\Wait-Job.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">487c11cd5d8414d346808a4e184d8b9edc83ade6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">187c388ee01e0fc9a82cb262d967b95d55517fc0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Wait-Job</source>
          <target state="translated">대기 작업</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Wait-Job</source>
          <target state="translated">대기 작업</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Suppresses the command prompt until one or all of the Windows PowerShell background jobs running in the session are completed.</source>
          <target state="translated">세션에서 실행 하는 Windows PowerShell 백그라운드 작업 중 하나 또는 모두 완료 될 때까지 명령 프롬프트를 표시 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SessionIdParameterSet (Default)</source>
          <target state="translated">SessionIdParameterSet (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>JobParameterSet</source>
          <target state="translated">JobParameterSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>NameParameterSet</source>
          <target state="translated">NameParameterSet</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>InstanceIdParameterSet</source>
          <target state="translated">InstanceIdParameterSet</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>StateParameterSet</source>
          <target state="translated">StateParameterSet</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>FilterParameterSet</source>
          <target state="translated">FilterParameterSet</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet waits for Windows PowerShell background jobs to finish before it displays the command prompt.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet Windows PowerShell 백그라운드 작업을 명령 프롬프트를 표시 하기 전에 완료 될 때까지 대기 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can wait until any background job is complete, or until all background jobs are complete, and you can set a maximum wait time for the job.</source>
          <target state="translated">백그라운드 작업 중 하나가 완료되거나 모든 백그라운드 작업이 완료될 때까지 기다릴 수 있으며 작업의 최대 대기 시간을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the commands in the job are complete, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> displays the command prompt and returns a job object so that you can pipe it to another command.</source>
          <target state="translated">작업의 명령이 완료 되 면 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 명령 프롬프트를 표시 하 고 다른 명령으로 파이프할 수 있도록 작업 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet to wait for background jobs, such as those that were started by using the Start-Job cmdlet or the <bpt id="p2">*</bpt>AsJob<ept id="p2">*</ept> parameter of the Invoke-Command cmdlet.</source>
          <target state="translated">사용할 수 있습니다 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> Start-job cmdlet을 사용 하 여 시작 된 것과 같은 백그라운드 작업에 대 한 대기 하는 cmdlet 또는 <bpt id="p2">*</bpt>AsJob<ept id="p2">*</ept> Invoke-command cmdlet의 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about Windows PowerShell background jobs, see about_Jobs.</source>
          <target state="translated">Windows PowerShell 백그라운드 작업에 대 한 자세한 내용은 about_Jobs를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Starting in Windows PowerShell 3.0, the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet also waits for custom job types, such as workflow jobs and instances of scheduled jobs.</source>
          <target state="translated">Windows PowerShell 3.0 부터는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet은 또한 워크플로 작업 및 예약 된 작업 인스턴스 등의 사용자 지정 작업 유형도 될 때까지 대기 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To enable <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to wait for jobs of a particular type, import the module that supports the custom job type into the session before you run the Get-Job cmdlet, either by using the Import-Module cmdlet or by using or getting a cmdlet in the module.</source>
          <target state="translated">사용할 수 있도록 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 특정 유형의 작업에 대 한 기다려야 Import-module cmdlet을 사용 하 여 또는 사용 하 여 모듈의 cmdlet을 가져오는 Get-job cmdlet을 실행 하기 전에 세션에 사용자 지정 작업 유형을 지 원하는 모듈을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For information about a particular custom job type, see the documentation of the custom job type feature.</source>
          <target state="translated">특정한 사용자 지정 작업 유형에 대한 자세한 내용은 사용자 지정 작업 유형 기능에 대한 설명서를 참조하세요.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example 1: Wait for all jobs</source>
          <target state="translated">예제 1: 모든 작업에 대 한 대기</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This command waits for all of the background jobs running in the session to finish.</source>
          <target state="translated">이 명령은 모든 끝나기를 세션에서 실행 중인 백그라운드 작업에 대 한 대기 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example 2: Wait for jobs started on remote computers by using Start-Job</source>
          <target state="translated">시작 작업을 사용 하 여 원격 컴퓨터에서 시작 하는 작업에 대 한 예제 2: 대기</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet with jobs started on remote computers by using the <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 작업을 사용 하 여 cmdlet를 사용 하 여 원격 컴퓨터에서 시작 된 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept> cmdlet.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Both <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> commands are submitted to the remote computer by using the <bpt id="p3">**</bpt>Invoke-Command<ept id="p3">**</ept> cmdlet.</source>
          <target state="translated">둘 다 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 및 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 명령을 사용 하 여 원격 컴퓨터에 제출 되는 <bpt id="p3">**</bpt>Invoke-command<ept id="p3">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example uses <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to determine whether a Get-Date command running as a background job on three different computers is finished.</source>
          <target state="translated">이 예에서는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 세 개의 다른 컴퓨터에서 백그라운드 작업으로 실행 중인 Get-date 명령이 완료 되 고 있는지 여부를 확인 하려면.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The first command creates a Windows PowerShell session (<bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept>) on each of the three remote computers and stores them in the $s variable.</source>
          <target state="translated">첫 번째 명령은 Windows PowerShell 세션을 만듭니다 (<bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept>) 원격 컴퓨터 3의 각 $s 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The second command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept> in each of the three sessions in $s.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 실행 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept> $s에 3 개의 세션의 각 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All of the jobs are named Date1.</source>
          <target state="translated">모든 작업 Date1 라고 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The third command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept>.</source>
          <target state="translated">세 번째 명령은 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 실행 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This command waits for the Date1 jobs on each computer to finish.</source>
          <target state="translated">이 명령을 완료 하려면 각 컴퓨터에서 Date1 작업이 동안 대기 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It stores the resulting collection (array) of job objects in the $done variable.</source>
          <target state="translated">작업 개체로 이루어진 결과 컬렉션(배열)을 $done 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The fourth command uses the <bpt id="p1">**</bpt>Count<ept id="p1">**</ept> property of the array of job objects in the $done variable to determine how many of the jobs are finished.</source>
          <target state="translated">네 번째 명령은 <bpt id="p1">**</bpt>Count<ept id="p1">**</ept> 속성 작업이 완료 되는 작업의 수를 확인 하려면 $done 변수에 작업 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example 3: Determine when the first background job finishes</source>
          <target state="translated">예제 3: 첫 번째 백그라운드 작업을 완료 하면 확인</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This example uses the <bpt id="p1">*</bpt>Any<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> to determine when the first of many background jobs running in the current session are completed.</source>
          <target state="translated">사용 하 여이 예제는 <bpt id="p1">*</bpt>모든<ept id="p1">*</ept> 의 매개 변수 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 시기를 결정 하는 현재 세션에서 실행 중인 많은 백그라운드 작업의 첫 번째 완료 됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It also shows how to use the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet to wait for remote jobs to finish.</source>
          <target state="translated">또한 사용 하는 방법을 보여 줍니다는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet 원격 작업이 완료 되기를 기다려야 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The first command creates a <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> on each of the computers listed in the Machines.txt file and stores the <bpt id="p2">**</bpt>PSSession<ept id="p2">**</ept> objects in the $s variable.</source>
          <target state="translated">첫 번째 명령은 <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> Machines.txt 파일 및 저장소에 나열 된 각 컴퓨터에는 <bpt id="p2">**</bpt>PSSession<ept id="p2">**</ept> $s 변수에 개체입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The command uses the Get-Content cmdlet to get the contents of the file.</source>
          <target state="translated">명령은은 Get-content cmdlet을 사용 하 여 파일의 내용을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> command is enclosed in parentheses to make sure that that it runs before the New-PSSession command.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Get-content<ept id="p1">**</ept> 명령을 괄호로 New-pssession 명령 전에 실행을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The second command stores a <bpt id="p1">**</bpt>Get-EventLog<ept id="p1">**</ept> command string, in quotation marks, in the $c variable.</source>
          <target state="translated">두 번째 명령은 저장소는 <bpt id="p1">**</bpt>Get-eventlog<ept id="p1">**</ept> 명령 $c 변수에 인용 부호로 문자열입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The third command uses Invoke-Command cmdlet to run <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> in each of the sessions in $s.</source>
          <target state="translated">세 번째 명령은 Invoke-command cmdlet을 사용 하 여 실행 하려면 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> $s 세션의 각 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> command starts a background job that runs the <bpt id="p2">**</bpt>Get-EventLog<ept id="p2">**</ept> command in the $c variable.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 명령을 실행 하는 백그라운드 작업을 시작는 <bpt id="p2">**</bpt>Get-eventlog<ept id="p2">**</ept> $c 변수에 명령입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier to indicate that the $c variable was defined on the local computer.</source>
          <target state="translated">명령을 사용 하는 <bpt id="p1">**</bpt>를 사용 하 여<ept id="p1">**</ept> 범위 한정자를 $c 변수는 로컬 컴퓨터에 정의 된 않았음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier is introduced in Windows PowerShell 3.0.</source>
          <target state="translated"> <bpt id="p1">**</bpt>를 사용 하 여<ept id="p1">**</ept> 범위 한정자는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier, see about_Remote_Variables (http://go.microsoft.com/fwlink/?LinkID=252653).</source>
          <target state="translated">에 대 한 자세한 내용은 <bpt id="p1">**</bpt>를 사용 하 여<ept id="p1">**</ept> 범위 한정자 about_Remote_Variables (http://go.microsoft.com/fwlink/?LinkID=252653)를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The fourth command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run a <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> command in the sessions.</source>
          <target state="translated">네 번째 명령은 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 실행 하는 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 세션에서 명령입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>Any<ept id="p1">*</ept> parameter to wait until the first job on the remote computers is completed.</source>
          <target state="translated">사용 하 여는 <bpt id="p1">*</bpt>모든<ept id="p1">*</ept> 매개 변수는 원격 컴퓨터에서 첫 번째 작업이 완료 될 때까지 기다려야 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example 4: Set a wait time for jobs on remote computers</source>
          <target state="translated">예 4: 원격 컴퓨터에서 작업에 대 한 대기 시간 설정</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>Timeout<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> to set a maximum wait time for the jobs running on remote computers.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">*</bpt>Timeout<ept id="p1">*</ept> 의 매개 변수 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 설정 하는 최대 대기 시간 원격 컴퓨터에서 실행 중인 작업을 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first command creates a <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> on each of three remote computers (Server01, Server02, and Server03), and then stores the <bpt id="p2">**</bpt>PSSession<ept id="p2">**</ept> objects in the $s variable.</source>
          <target state="translated">첫 번째 명령은 <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> 각 원격 컴퓨터 3 개 (Server01, Server02 및 Server03) 및 저장소에는 <bpt id="p2">**</bpt>PSSession<ept id="p2">**</ept> $s 변수에 개체입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept> in each of the <bpt id="p3">**</bpt>PSSession<ept id="p3">**</ept> objects in $s.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 실행 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept> 각는 <bpt id="p3">**</bpt>PSSession<ept id="p3">**</ept> $s에 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It stores the resulting job objects in the $jobs variable.</source>
          <target state="translated">결과 작업 개체를 $jobs 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The third command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> in each of the sessions in $s.</source>
          <target state="translated">세 번째 명령은 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 실행 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> $s 세션의 각 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> command determines whether all of the commands have completed within 30 seconds.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 명령은 모든 명령이 30 초 내 완료 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>Timeout<ept id="p1">*</ept> parameter with a value of 30 to establish the maximum wait time, and then stores the results of the command in the $done variable.</source>
          <target state="translated">사용 하 여는 <bpt id="p1">*</bpt>Timeout<ept id="p1">*</ept> 매개 변수 값이 최대값을 설정 하는 30 대기 시간을 선택한 다음 $done 변수에 명령의 결과 보관 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this case, after 30 seconds, only the command on the Server02 computer has completed.</source>
          <target state="translated">이 경우 30초 후에 Server02 컴퓨터의 명령만 완료됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> ends the wait, displays the command prompt, and returns the object that represents the job that was completed.</source>
          <target state="translated"><bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 은 대기를 종료, 명령 프롬프트를 표시 하 고 완료 된 작업을 나타내는 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The $done variable contains a job object that represents the job that ran on Server02.</source>
          <target state="translated">$done 변수에는 Server02에서 실행된 작업을 나타내는 작업 개체가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example 5: Wait until one of several jobs finishes</source>
          <target state="translated">예제 5: 여러 작업 중 하나가 완료 될 때까지 대기</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This command identifies three jobs by their IDs and waits until any one of them are completed.</source>
          <target state="translated">이 명령은 세 개의 작업을 해당 Id로 식별 하 고 이들 중 하나가 완료 될 때까지 대기 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The command prompt returns when the first job finishes.</source>
          <target state="translated">첫 번째 작업이 완료 되었을 때 명령 프롬프트를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Example 6: Wait for a period, then allow job to continue in background</source>
          <target state="translated">예제 6: 마침표를 동안 대기한 후 작업을 백그라운드에서 계속 허용 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This command waits 120 seconds (two minutes) for the DailyLog job to finish.</source>
          <target state="translated">이 명령은 DailyLog 작업이 완료에 대 한 120 초 (2 분)을 대기 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the job does not finish in the next two minutes, the command prompt returns anyway, and the job continues to run in the background.</source>
          <target state="translated">경우 작업이 다음 2 분 이내에 완료 되지 않으면, 명령 프롬프트 반환 되 고 작업이 백그라운드에서 실행을 계속 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Example 7: Wait for a job by name</source>
          <target state="translated">이름으로 작업에 대 한 예 7: 대기</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This command uses the job name to identify the job for which to wait.</source>
          <target state="translated">이 명령은 작업 이름을 사용 하 여 대기 될 작업을 식별 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Example 8: Wait for jobs on local computer started with Start-Job</source>
          <target state="translated">예 8: 시작 작업을 시작 하는 로컬 컴퓨터에서 작업에 대 한 대기 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet with jobs started on the local computer by using <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept>.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 를 사용 하 여 로컬 컴퓨터에서 cmdlet에 대 한 작업을 시작 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>These commands start a job that gets the Windows PowerShell script files that were added or updated in the last week.</source>
          <target state="translated">이 명령은 지난주에 추가 또는 업데이트된 Windows PowerShell 스크립트 파일을 가져오는 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The first command uses <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> to start a background job on the local computer.</source>
          <target state="translated">첫 번째 명령은 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 로컬 컴퓨터에서 백그라운드 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The job runs a Get-ChildItem command that gets all of the files that have a .ps1 file name extension that were added or updated in the last week.</source>
          <target state="translated">작업을 추가 또는 지난 주에 업데이트 된.ps1 파일 이름 확장명을 가진 파일을 모두 가져오는 Get-childitem 명령을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The third command uses <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to wait until the job is completed.</source>
          <target state="translated">세 번째 명령은 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 작업이 완료 될 때까지 기다려야 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When the job finishes, the command displays the job object, which contains information about the job.</source>
          <target state="translated">작업이 완료 되 면이 명령은 작업에 대 한 정보를 포함 하는 작업 개체를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example 9: Wait for jobs started on remote computers by using Invoke-Command</source>
          <target state="translated">Invoke-command를 사용 하 여 원격 컴퓨터에서 시작 하는 작업에 대 한 예 9: 대기</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This example shows how to use <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> with jobs started on remote computers by using the <bpt id="p2">*</bpt>AsJob<ept id="p2">*</ept> parameter of <bpt id="p3">**</bpt>Invoke-Command<ept id="p3">**</ept>.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 를 사용 하 여 원격 컴퓨터에서 시작 하는 작업으로는 <bpt id="p2">*</bpt>AsJob<ept id="p2">*</ept> 의 매개 변수 <bpt id="p3">**</bpt>Invoke-command<ept id="p3">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When using <bpt id="p1">*</bpt>AsJob<ept id="p1">*</ept>, the job is created on the local computer and the results are automatically returned to the local computer, even though the job runs on the remote computers.</source>
          <target state="translated">사용 하는 경우 <bpt id="p1">*</bpt>AsJob<ept id="p1">*</ept>, 작업이 로컬 컴퓨터에서 만들어진 및 결과 작업이 원격 컴퓨터에서 실행 하는 경우에 자동으로 로컬 컴퓨터로 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This example uses <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to determine whether a <bpt id="p2">**</bpt>Get-Process<ept id="p2">**</ept> command running in the sessions on three remote computers is completed.</source>
          <target state="translated">이 예에서는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 확인 하려면 여부는 <bpt id="p2">**</bpt>Get-process<ept id="p2">**</ept> 원격 컴퓨터 3 개의 세션에서 실행 중인 명령이 완료 되.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The first command creates <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> objects on three computers and stores them in the $s variable.</source>
          <target state="translated">첫 번째 명령은 <bpt id="p1">**</bpt>PSSession<ept id="p1">**</ept> 세 대의 컴퓨터에 있는 개체 $s 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The second command uses <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> to run <bpt id="p2">**</bpt>Get-Process<ept id="p2">**</ept> in each of the three sessions in $s.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 실행 <bpt id="p2">**</bpt>Get-process<ept id="p2">**</ept> 각 $s에 3 개의 세션에 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>AsJob<ept id="p1">*</ept> parameter to run the command asynchronously as a background job.</source>
          <target state="translated">이 명령은 <bpt id="p1">*</bpt>AsJob<ept id="p1">*</ept> 매개 변수를 백그라운드 작업으로 명령을 비동기적으로 실행 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The command returns a job object, just like the jobs started by using <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept>, and the job object is stored in the $j variable.</source>
          <target state="translated">명령을 사용 하 여 시작 된 작업과 마찬가지로 작업 개체를 반환 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept>, 작업 개체를 $j 변수에 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The third command uses a pipeline operator (|) to send the job object in $j to the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">세 번째 명령은를 사용 하 여 파이프라인 연산자 (|) $j를 작업 개체를 전송 하는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> command is not required in this case, because the job resides on the local computer.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> 명령 필요 하지 않은 경우에 로컬 컴퓨터에 있는 작업입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Example 10: Wait for a job that has an ID</source>
          <target state="translated">ID가 있는 작업에 대 한 10 예: 대기</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This command waits for the job with an ID value of 1.</source>
          <target state="translated">이 명령은 ID 값이 1인 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>-Any</source>
          <target state="translated">-모든</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet displays the command prompt, and returns the job object, when any job finishes.</source>
          <target state="translated">이 cmdlet은 명령 프롬프트를 표시 하 고 모든 작업이 완료 될 때 작업 개체를 반환을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> waits until all of the specified jobs are complete before it displays the prompt.</source>
          <target state="translated">기본적으로 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 프롬프트를 표시 하기 전에 모든 지정 된 작업은 완료 될 때까지 대기 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-Filter</source>
          <target state="translated">필터</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Specifies a hash table of conditions.</source>
          <target state="translated">조건의 해시 테이블을 지정합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This cmdlet waits for jobs that satisfy all of the conditions in the hash table.</source>
          <target state="translated">이 cmdlet은 해시 테이블의 조건이 모두 충족 하는 작업을 대기 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Enter a hash table where the keys are job properties and the values are job property values.</source>
          <target state="translated">키는 작업 속성이고 값은 작업 속성 값인 해시 테이블을 입력합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This parameter works only on custom job types, such as workflow jobs and scheduled jobs.</source>
          <target state="translated">이 매개 변수는 워크플로 작업, 예약된 작업 등의 사용자 지정 작업 유형에서만 적용됩니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It does not work on standard background jobs, such as those created by using the <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">사용 하 여 만든 것과 같은 표준 백그라운드 작업에서 작동 하지 않습니다는 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For information about support for this parameter, see the help topic for the job type.</source>
          <target state="translated">이 매개 변수 지원에 대한 자세한 내용은 작업 유형 도움말 항목을 참조하세요.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet continues to wait for jobs in the Suspended or Disconnected state.</source>
          <target state="translated">이 cmdlet를 Suspended 또는 Disconnected 상태에 있는 작업에 대 한 대기 계속 됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> returns, or ends  the wait, when jobs are in one of the following states:</source>
          <target state="translated">기본적으로 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 반환 또는 작업 상태는 다음 중 하나에 포함 된 경우 대기를 종료 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Completed</source>
          <target state="translated">완료</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Failed</source>
          <target state="translated">Failed</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Stopped</source>
          <target state="translated">중지됨</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Suspended</source>
          <target state="translated">Suspended</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Disconnected</source>
          <target state="translated">Disconnected</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>-Id</source>
          <target state="translated">-Id</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Specifies an array of IDs of jobs for which this cmdlet waits.</source>
          <target state="translated">이 cmdlet를 때까지 대기 하는 작업의 Id 배열을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The ID is an integer that uniquely identifies the job in the current session.</source>
          <target state="translated">ID는 현재 세션에서 작업을 고유 하 게 식별 하는 정수입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It is easier to remember and type than the instance ID, but it is unique only in the current session.</source>
          <target state="translated">인스턴스 ID 보다 기억 하거나 입력 하는 것이 쉽습니다 이지만 현재 세션 에서만 고유 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can type one or more IDs, separated by commas.</source>
          <target state="translated">쉼표로 구분 하 여 하나 이상의 Id를 입력할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To find the ID of a job, type <ph id="ph1">`Get-Job`</ph>.</source>
          <target state="translated">작업의 ID를 찾으려면 입력 <ph id="ph1">`Get-Job`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-InstanceId</source>
          <target state="translated">-InstanceId</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Specifies an array of instance IDs of jobs for which this cmdlet waits.</source>
          <target state="translated">이 cmdlet를 때까지 대기 하는 작업의 인스턴스 Id의 배열을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The default is all jobs.</source>
          <target state="translated">기본값은 모든 작업입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>An instance ID is a GUID that uniquely identifies the job on the computer.</source>
          <target state="translated">인스턴스 ID는 컴퓨터에서 작업을 고유하게 식별하는 GUID입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To find the instance ID of a job, use <bpt id="p1">**</bpt>Get-Job<ept id="p1">**</ept>.</source>
          <target state="translated">작업의 인스턴스 ID를 찾으려면 <bpt id="p1">**</bpt>Get-job<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>-Job</source>
          <target state="translated">-작업</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Specifies the jobs for which this cmdlet waits.</source>
          <target state="translated">이 cmdlet를 때까지 대기 하는 작업을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the job objects or a command that gets the job objects.</source>
          <target state="translated">작업 개체가 포함된 변수 또는 작업 개체를 가져오는 명령을 입력하세요.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You can also use a pipeline operator to send job objects to the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">작업 개체를 보낼 파이프라인 연산자를 사용할 수도 있습니다는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> waits for all jobs created in the current session.</source>
          <target state="translated">기본적으로 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 현재 세션에서 만든 모든 작업에 대 한 대기 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>-Name</source>
          <target state="translated">-Name</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Specifies friendly names of jobs for which this cmdlet waits.</source>
          <target state="translated">이 cmdlet를 때까지 대기 하는 작업의 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>-State</source>
          <target state="translated">-상태</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Specifies a job state.</source>
          <target state="translated">작업 상태를 지정합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This cmdlet waits only for jobs in the specified state.</source>
          <target state="translated">이 cmdlet는 지정된 된 상태에서 작업에 대해서만 대기합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">이 매개 변수에 허용되는 값은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>NotStarted</source>
          <target state="translated">NotStarted</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Running</source>
          <target state="translated">실행 중</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Completed</source>
          <target state="translated">완료</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Failed</source>
          <target state="translated">Failed</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Stopped</source>
          <target state="translated">중지됨</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Blocked</source>
          <target state="translated">차단됨</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Suspended</source>
          <target state="translated">Suspended</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Disconnected</source>
          <target state="translated">Disconnected</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Suspending</source>
          <target state="translated">일시 중단</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Stopping</source>
          <target state="translated">Stopping</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information about job states, see JobState Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx (http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx) in the Microsoft Developer Network (MSDN).</source>
          <target state="translated">작업 상태에 대 한 자세한 내용은 참조 JobState Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate (v=vs.85).aspx (http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate (v=vs.85).aspx)에 Microsoft MSDN (Developer Network).</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>-Timeout</source>
          <target state="translated">시간 제한</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Specifies the maximum wait time for each background job, in seconds.</source>
          <target state="translated">최대 대기 시간 (초)에 각 백그라운드 작업에 대 한 시간을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The default value, -1, indicates that the cmdlet waits until the job finishes.</source>
          <target state="translated">기본값-1, cmdlet은 작업이 완료 될 때까지 대기 하는 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The timing starts when you submit the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> command, not the <bpt id="p2">**</bpt>Start-Job<ept id="p2">**</ept> command.</source>
          <target state="translated">제출 하면 타이밍 시작 되는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 명령을 하지는 <bpt id="p2">**</bpt>Start-job<ept id="p2">**</ept> 명령입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If this time is exceeded, the wait ends and the command prompt returns, even if the job is still running.</source>
          <target state="translated">이 시간을 초과할 경우 작업이 여전히 실행 중이어도 대기가 종료되고 명령 프롬프트가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The command does not display any error message.</source>
          <target state="translated">이 명령은 모든 오류 메시지를 표시 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.RemotingJob</source>
          <target state="translated">System.Management.Automation.RemotingJob</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You can pipe a job object to this cmdlet.</source>
          <target state="translated">이 cmdlet에는 작업 개체를 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSRemotingJob</source>
          <target state="translated">System.Management.Automation.PSRemotingJob</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This cmdlet returns job objects that represent the completed jobs.</source>
          <target state="translated">이 cmdlet은 완료 된 작업을 나타내는 작업 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If the wait ends because the value of the <bpt id="p1">*</bpt>Timeout<ept id="p1">*</ept> parameter is exceeded, <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> does not return any objects.</source>
          <target state="translated">대기 하기 때문에 종료 되는 경우의 값은 <bpt id="p1">*</bpt>시간 초과<ept id="p1">*</ept> 매개 변수를 초과 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 개체를 반환 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> returns, or ends the wait, when jobs are in one of the following states:</source>
          <target state="translated">기본적으로 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 반환 또는 작업 상태는 다음 중 하나에 포함 된 경우 대기를 종료 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Completed</source>
          <target state="translated">완료</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Failed</source>
          <target state="translated">Failed</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Stopped</source>
          <target state="translated">중지됨</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Suspended</source>
          <target state="translated">Suspended</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Disconnected To direct <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to continue to wait for Suspended and Disconnected jobs, use the <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> parameter.</source>
          <target state="translated">연결이 끊어진를 직접 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 일시 중단 및 연결이 끊긴된 작업을 계속 하려면 사용 하 여는 <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">Get 작업</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Invoke-Command</source>
          <target state="translated">Invoke-Command</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Receive-Job</source>
          <target state="translated">수신 작업</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remove-Job</source>
          <target state="translated">제거 작업</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Resume-Job</source>
          <target state="translated">Resume-Job</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Start-Job</source>
          <target state="translated">시작 작업</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Stop-Job</source>
          <target state="translated">중지 작업</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Suspend-Job</source>
          <target state="translated">Suspend-Job</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>about_Remote_Jobs</source>
          <target state="translated">about_Remote_Jobs</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>about_Remote_Variables</source>
          <target state="translated">about_Remote_Variables</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>