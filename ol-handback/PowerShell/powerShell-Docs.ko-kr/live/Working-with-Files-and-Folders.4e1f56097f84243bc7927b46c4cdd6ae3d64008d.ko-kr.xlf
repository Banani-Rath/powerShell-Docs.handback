<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ko-kr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">292a8f74bf07cc177e34d9b7eea3db7ff69f8135</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04046aa" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with Files and Folders</source>
          <target state="translated">파일 및 폴더 작업</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Working with Files and Folders</source>
          <target state="translated">파일 및 폴더 작업</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Navigating through Windows PowerShell drives and manipulating the items on them is similar to manipulating files and folders on Windows physical disk drives.</source>
          <target state="translated">Windows PowerShell 드라이브를 탐색하고 드라이브 항목을 조작하는 것은 Windows의 실제 디스크 드라이브에 있는 파일 및 폴더를 조작하는 것과 유사합니다.</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>We will discuss how to deal with specific file and folder manipulation tasks in this section.</source>
          <target state="translated">이 섹션에서는 특정 파일 및 폴더 조작 작업을 처리하는 방법을 설명합니다.</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Listing All the Files and Folders Within a Folder</source>
          <target state="translated">폴더 내의 모든 파일 및 폴더 표시</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can get all items directly within a folder by using <bpt id="p1">**</bpt>Get\-ChildItem<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get\-ChildItem<ept id="p1">**</ept>을 사용하여 폴더 바로 아래에 있는 항목을 모두 볼 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Add the optional <bpt id="p1">**</bpt>Force<ept id="p1">**</ept> parameter to display hidden or system items.</source>
          <target state="translated">선택적 <bpt id="p1">**</bpt>Force<ept id="p1">**</ept> 매개 변수를 추가하면 숨겨진 항목이나 시스템 항목을 볼 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, this command displays the direct contents of Windows PowerShell Drive C (which is the same as the Windows physical drive C):</source>
          <target state="translated">예를 들어 다음 명령은 Windows의 실제 C 드라이브와 마찬가지로 Windows PowerShell C 드라이브 바로 아래에 있는 내용을 보여 줍니다.</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The command lists only the directly contained items, much like using Cmd.exe's <bpt id="p1">**</bpt>DIR<ept id="p1">**</ept> command or <bpt id="p2">**</bpt>ls<ept id="p2">**</ept> in a UNIX shell.</source>
          <target state="translated">이 명령은 Cmd.exe의 <bpt id="p1">**</bpt>DIR<ept id="p1">**</ept> 명령이나 UNIX 셸의 <bpt id="p2">**</bpt>ls<ept id="p2">**</ept>를 사용하는 것과 매우 유사한 방법으로 바로 아래에 포함된 항목만 보여 줍니다.</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In order to show contained items, you need to specify the <bpt id="p1">**</bpt>\-Recurse<ept id="p1">**</ept> parameter as well.</source>
          <target state="translated">포함된 항목을 모두 보려면 <bpt id="p1">**</bpt>\-Recurse<ept id="p1">**</ept> 매개 변수도 지정해야 합니다.</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(This can take an extremely long time to complete.) To list everything on the C drive:</source>
          <target state="translated">작업을 완료하는 데 시간이 많이 걸릴 수 있습니다. C 드라이브에 있는 모든 항목을 표시하려면 다음과 같이 입력합니다.</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get\-ChildItem<ept id="p1">**</ept> can filter items with its <bpt id="p2">**</bpt>Path<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Filter<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Include<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Exclude<ept id="p5">**</ept> parameters, but those are typically based only on name.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get\-ChildItem<ept id="p1">**</ept>은 <bpt id="p2">**</bpt>Path<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Filter<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Include<ept id="p4">**</ept> 및 <bpt id="p5">**</bpt>Exclude<ept id="p5">**</ept> 매개 변수로 항목을 필터링할 수 있지만 이러한 변수는 일반적으로 이름을 기반으로 합니다.</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can perform complex filtering based on other properties of items by using <bpt id="p1">**</bpt>Where\-Object<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Where\-Object<ept id="p1">**</ept>를 사용하여 항목의 다른 속성을 기반으로 복잡한 필터링을 수행할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following command finds all executables within the Program Files folder that were last modified after October 1, 2005 and which are neither smaller than 1 megabyte nor larger than 10 megabytes:</source>
          <target state="translated">다음 명령은Program Files 폴더 내에서 2005년 10월 1일 이후 마지막으로 수정되었고 1MB보다 작거나 10MB보다 크지 않은 모든 실행 파일을 찾습니다.</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Copying Files and Folders</source>
          <target state="translated">파일 및 폴더 복사</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copying is done with <bpt id="p1">**</bpt>Copy\-Item<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Copy\-Item<ept id="p1">**</ept>을 사용하여 복사를 수행합니다.</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following command backs up C:\\boot.ini to C:\\boot.bak:</source>
          <target state="translated">다음 명령은 C:\\boot.ini를 C:\\boot.bak에 백업합니다.</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the destination file already exists, the copy attempt fails.</source>
          <target state="translated">대상 파일이 이미 있는 경우 복사가 실패합니다.</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To overwrite a pre\-existing destination, use the Force parameter:</source>
          <target state="translated">기존 파일을 덮어쓰려면 다음과 같이 Force 매개 변수를 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This command works even when the destination is read\-only.</source>
          <target state="translated">이 명령은 대상 파일이 읽기 전용인 경우에도 작동합니다.</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Folder copying works the same way.</source>
          <target state="translated">폴더 복사도 동일한 방식으로 작동합니다.</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This command copies the folder C:\\temp\\test1 to the new folder c:\\temp\\DeleteMe recursively:</source>
          <target state="translated">이 명령은 다음과 같이 C:\\temp\\test1 폴더를 c:\\temp\\DeleteMe라는 새 폴더로 재귀적으로 복사합니다.</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can also copy a selection of items.</source>
          <target state="translated">선택한 항목을 복사할 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following command copies all .txt files contained anywhere in c:\\data to c:\\temp\\text:</source>
          <target state="translated">다음 명령은 c:\\data의 임의 위치에 포함된 모든 .txt 파일을 c:\\temp\\text로 복사합니다.</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can still use other tools to perform file system copies.</source>
          <target state="translated">다른 도구를 사용하여 계속 파일 시스템 복사를 수행할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>XCOPY, ROBOCOPY, and COM objects, such as the <bpt id="p1">**</bpt>Scripting.FileSystemObject,<ept id="p1">**</ept> all work in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell에서는 <bpt id="p1">**</bpt>Scripting.FileSystemObject<ept id="p1">**</ept>와 같은 XCOPY, ROBOCOPY 및 COM 개체를 모두 사용할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, you can use the Windows Script Host <bpt id="p1">**</bpt>Scripting.FileSystem COM<ept id="p1">**</ept> class to back up C:\\boot.ini to C:\\boot.bak:</source>
          <target state="translated">예를 들어 다음과 같이 Windows 스크립트 호스트인 <bpt id="p1">**</bpt>Scripting.FileSystem COM<ept id="p1">**</ept> 클래스를 사용하여 C:\\boot.ini를 C:\\boot.bak에 백업할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Creating Files and Folders</source>
          <target state="translated">파일 및 폴더 만들기</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creating new items works the same on all Windows PowerShell providers.</source>
          <target state="translated">새 항목 만들기는 Windows PowerShell 공급자에서 동일한 방식으로 작동합니다.</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If a Windows PowerShell provider has more than one type of item—for example, the FileSystem Windows PowerShell provider distinguishes between directories and files—you need to specify the item type.</source>
          <target state="translated">Windows PowerShell 공급자에 한 가지 이상의 항목 유형이 있는 경우 항목 유형을 지정해야 합니다. 예를 들어 FileSystem Windows PowerShell 공급자는 디렉터리와 파일을 구별합니다.</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This command creates a new folder C:\\temp\\New Folder:</source>
          <target state="translated">이 명령은 다음과 같이 C:\\temp\\New Folder라는 새 폴더를 만듭니다.</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This command creates a new empty file C:\\temp\\New Folder\\file.txt</source>
          <target state="translated">이 명령은 C:\\temp\\New Folder\\file.txt라는 새 빈 파일을 만듭니다.</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Removing All Files and Folders Within a Folder</source>
          <target state="translated">폴더 내의 모든 파일 및 폴더 제거</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can remove contained items using <bpt id="p1">**</bpt>Remove\-Item<ept id="p1">**</ept>, but you will be prompted to confirm the removal if the item contains anything else.</source>
          <target state="translated"><bpt id="p1">**</bpt>Remove\-Item<ept id="p1">**</ept>을 사용하면 포함된 항목을 제거할 수 있지만 이 항목에 다른 항목이 들어 있는 경우 제거를 확인하는 메시지가 나타납니다.</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, if you attempt to delete the folder C:\\temp\\DeleteMe that contains other items, Windows PowerShell prompts you for confirmation before deleting the folder:</source>
          <target state="translated">예를 들어 다른 항목이 들어 있는 C:\\temp\\DeleteMe라는 폴더를 삭제하려는 경우 다음과 같이 삭제하기 전에 확인 메시지가 나타납니다.</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you do not want to be prompted for each contained item, specify the <bpt id="p1">**</bpt>Recurse<ept id="p1">**</ept> parameter:</source>
          <target state="translated">폴더에 들어 있는 각 항목에 대해 이 메시지가 나타나지 않게 하려면 다음과 같이 <bpt id="p1">**</bpt>Recurse<ept id="p1">**</ept> 매개 변수를 지정합니다.</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Mapping a Local Folder as a Windows Accessible Drive</source>
          <target state="translated">Windows 액세스 드라이브로 로컬 폴더 매핑</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can also map a local folder, using the <bpt id="p1">**</bpt>subst<ept id="p1">**</ept> command.</source>
          <target state="translated"><bpt id="p1">**</bpt>subst<ept id="p1">**</ept> 명령을 사용하여 로컬 폴더를 매핑할 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following command creates a local drive P: rooted in the local Program Files directory:</source>
          <target state="translated">다음 명령은 루트가 로컬 Program Files 디렉터리인 로컬 드라이브 P:를 만듭니다.</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Just as with network drives, drives mapped within Windows PowerShell using <bpt id="p1">**</bpt>subst<ept id="p1">**</ept> are immediately visible to the Windows PowerShell shell.</source>
          <target state="translated">그러면 네트워크 드라이브와 마찬가지로 <bpt id="p1">**</bpt>subst<ept id="p1">**</ept>를 사용하여 Windows PowerShell에 매핑된 드라이브가 Windows PowerShell 셸에 즉시 나타납니다.</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Reading a Text File into an Array</source>
          <target state="translated">텍스트 파일을 배열로 읽어오기</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>One of the more common storage formats for text data is in a file with separate lines treated as distinct data elements.</source>
          <target state="translated">일반적으로 텍스트 데이터는 개별 데이터 요소로 취급되는 별도의 줄이 포함된 파일에 저장됩니다.</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get\-Content<ept id="p1">**</ept> cmdlet can be used to read an entire file in one step, as shown here:</source>
          <target state="translated"><bpt id="p1">**</bpt>Get\-Content<ept id="p1">**</ept> cmdlet을 사용하여 다음과 같이 한 단계에서 전체 파일을 읽을 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get\-Content<ept id="p1">**</ept> already treats the data read from the file as an array, with one element per line of file content.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get\-Content<ept id="p1">**</ept>는 파일에서 읽은 데이터를 한 줄에 하나의 요소가 표시된 배열로 취급합니다.</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can confirm this by checking the <bpt id="p1">**</bpt>Length<ept id="p1">**</ept> of the returned content:</source>
          <target state="translated">다음과 같이 반환된 내용의 <bpt id="p1">**</bpt>Length<ept id="p1">**</ept>를 확인하면 이를 확인할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This command is most useful for getting lists of information into Windows PowerShell directly.</source>
          <target state="translated">이 명령은 정보 목록을 Windows PowerShell로 직접 가져오는 경우 가장 유용합니다.</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, you might store a list of computer names or IP addresses in a file C:\\temp\\domainMembers.txt, with one name on each line of the file.</source>
          <target state="translated">예를 들어 파일의 각 줄에 하나의 이름을 사용하여 컴퓨터 이름 또는 IP 주소 목록을 C:\\temp\\domainMembers.txt 파일에 저장할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Get\-Content<ept id="p1">**</ept> to retrieve the file contents and put them in the variable <bpt id="p2">**</bpt>$Computers<ept id="p2">**</ept>:</source>
          <target state="translated">다음과 같이 <bpt id="p1">**</bpt>Get\-Content<ept id="p1">**</ept>를 사용하면 파일 내용을 검색하고 검색 내용을 <bpt id="p2">**</bpt>$Computers<ept id="p2">**</ept> 변수에 삽입할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$Computers<ept id="p1">**</ept> is now an array containing a computer name in each element.</source>
          <target state="translated">그러면 각 요소에 있는 컴퓨터 이름이 배열로 <bpt id="p1">**</bpt>$Computers<ept id="p1">**</ept>에 포함됩니다.</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>