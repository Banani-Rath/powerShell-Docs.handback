<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90f7d88853b919db7f4b799f0c5f987f7b8621f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\ConvertTo-Csv.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3d123d3963e6fb226afbe6383948295f2ecb8b2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">562d4c183cf73d1a45542d1385e27d5abdeafded</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts objects into a series of comma-separated value (CSV) variable-length strings.</source>
          <target state="translated">개체를 일련의 CSV(쉼표로 구분된 값) 가변 길이 문자열로 변환합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Delimiter (Default)</source>
          <target state="translated">구분 기호 (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>UseCulture</source>
          <target state="translated">UseCulture</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet returns a series of comma-separated (CSV) strings that represents the objects that you submit.</source>
          <target state="translated"> <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> cmdlet은 제출 된 개체를 나타내는 일련의 쉼표로 구분 된 (CSV) 문자열로 반환 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can then use the ConvertFrom-Csv cmdlet to re-create objects from the CSV strings.</source>
          <target state="translated">그런 다음 CSV 문자열에서 개체를 다시 만들 Convertfrom-csv cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The resulting objects are CSV versions of the original objects that consist of string representations of the property values and no methods.</source>
          <target state="translated">결과 개체는 속성 값(메서드는 포함 안 됨)의 문자열 표시로 이루어진 원래 개체의 CSV 버전입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can also use the Export-Csv and Import-Csv cmdlets to convert objects to CSV strings and back.</source>
          <target state="translated">또한 개체를 CSV 문자열로 변환 하 여 다시 Export-csv 및 Import-csv cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> is the same as <bpt id="p2">**</bpt>ConvertTo-CSV<ept id="p2">**</ept>, except that it saves the CSV strings to a file.</source>
          <target state="translated"><bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> 동일 <bpt id="p2">**</bpt>CONVERTTO-CSV<ept id="p2">**</ept>, 점을 제외 하 고 CSV 문자열을 파일에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use the parameters of the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet to specify a delimiter other than a comma or to direct <bpt id="p2">**</bpt>ConvertTo-CSV<ept id="p2">**</ept> to use the default delimiter for the current culture.</source>
          <target state="translated">매개 변수를 사용할 수는 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> 쉼표가 아닌 다른 구분 기호를 지정 하거나 직접 cmdlet <bpt id="p2">**</bpt>CONVERTTO-CSV<ept id="p2">**</ept> 현재 문화권에 대 한 기본 구분 기호를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example 1: Convert an object to CSV</source>
          <target state="translated">예제 1: 개체를 CSV로 변환</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This command converts a single process object to CSV format.</source>
          <target state="translated">이 명령은 단일 프로세스 개체를 CSV 형식으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The command uses the Get-Process cmdlet to get the Windows PowerShell process on the local computer.</source>
          <target state="translated">이 명령은 Get-process cmdlet을 사용 하 여 로컬 컴퓨터에서 Windows PowerShell 프로세스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator (|) to send the command to the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet, which converts it to a series of comma-separated strings.</source>
          <target state="translated">명령을 보낼 파이프라인 연산자 (|)를 사용 하 여 하는 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> 일련의 쉼표로 구분 된 문자열을 변환 하는 cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example 2: Convert a DateTime object to CSV</source>
          <target state="translated">예제 2: DateTime 개체를 CSV로 변환</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This example converts a <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> object to CSV format.</source>
          <target state="translated">이 예에서는 변환 된 <bpt id="p1">**</bpt>DateTime<ept id="p1">**</ept> 개체를 CSV 형식입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Date cmdlet to get the current date.</source>
          <target state="translated">첫 번째 명령은 Get-Date cmdlet을 사용하여 현재 날짜를 가져오고,</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It saves it in the $Date variable.</source>
          <target state="translated">$Date 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet to convert the <bpt id="p2">**</bpt>DateTime<ept id="p2">**</ept> object in the $Date variable to CSV format.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> cmdlet으로 변환 하는 <bpt id="p2">**</bpt>DateTime<ept id="p2">**</ept> 를 CSV 형식 $Date 변수에 개체입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> parameter to specify the object to be converted.</source>
          <target state="translated">이 명령은 <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> 매개 변수를 변환할 개체를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>Delimiter<ept id="p1">*</ept> parameter to specify the delimiter that separates the object properties.</source>
          <target state="translated">사용 하 여는 <bpt id="p1">*</bpt>구분 기호<ept id="p1">*</ept> 매개 변수를 개체 속성을 구분 하는 구분 기호를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> parameter to suppress the #TYPE string.</source>
          <target state="translated">사용 하 여는 <bpt id="p1">*</bpt>않으려면 NoTypeInformation<ept id="p1">*</ept> 를 #TYPE 문자열을 표시 하지 않는 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example 3: Convert the PowerShell event log to CSV</source>
          <target state="translated">예제 3: PowerShell 이벤트 로그를 CSV로 변환</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This command converts the Windows PowerShell event log on the local computer to a series of CSV strings.</source>
          <target state="translated">이 명령은 로컬 컴퓨터에서 Windows PowerShell 이벤트 로그를 일련의 CSV 문자열로 변환합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The command uses the Get-EventLog cmdlet to get the events in the Windows PowerShell log.</source>
          <target state="translated">이 명령은 Get-EventLog cmdlet을 사용하여 Windows PowerShell 로그의 이벤트를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A pipeline operator (|) sends the events to the <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> cmdlet, which converts the events to CSV format.</source>
          <target state="translated">파이프라인 연산자 (|)가 이벤트를는 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> cmdlet으로 이벤트를 CSV 형식으로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter, which uses the list separator for the current culture as the delimiter.</source>
          <target state="translated">명령을 사용 하 여는 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> 매개 변수는 현재 문화권에 대 한 목록 구분 기호를 사용 하 여 구분 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-Delimiter</source>
          <target state="translated">구분 기호</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Specifies a delimiter to separate the property values.</source>
          <target state="translated">속성 값을 구분하는 구분 기호를 지정합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">기본값은 쉼표(,)입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Enter a character, such as a colon (:).</source>
          <target state="translated">콜론(:)과 같은 문자를 입력합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To specify a semicolon (;), enclose it in quotation marks.</source>
          <target state="translated">세미콜론(;)을 지정하려면 따옴표로 묶어야 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Otherwise, it will be interpreted as the command delimiter.</source>
          <target state="translated">그러지 않으면 명령 구분 기호로 해석됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Specifies the objects to export as CSV strings.</source>
          <target state="translated">CSV 문자열로 내보낼 개체를 지정합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects or type a command or expression that gets the objects.</source>
          <target state="translated">개체를 포함하는 변수를 입력하거나 개체를 가져오는 명령 또는 식을 입력하세요.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can also pipe objects to <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept>.</source>
          <target state="translated">개체를 파이프할 수도 있습니다 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>-NoTypeInformation</source>
          <target state="translated">-않으려면 NoTypeInformation</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Omits the type information header from the output.</source>
          <target state="translated">출력에서 형식 정보 헤더를 생략합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>By default, the string in the output contains #TYPE followed by the fully-qualified name of the object type.</source>
          <target state="translated">기본적으로 출력에 문자열 #TYPE 다음 개체 유형의 정규화 된 이름을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>-UseCulture</source>
          <target state="translated">-UseCulture</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Uses the list separator for the current culture as the data delimiter.</source>
          <target state="translated">현재 문화권의 목록 구분 기호를 데이터 구분 기호로 사용합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">기본값은 쉼표(,)입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This parameter is very useful in scripts that are being distributed to users worldwide.</source>
          <target state="translated">이 매개 변수는 전 세계 사용자에게 배포되는 스크립트에서 매우 유용합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To find the list separator for a culture, use the following command: <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>.</source>
          <target state="translated">문화권에 대 한 목록 구분 기호를 찾으려면 다음 명령을 사용 하 여: <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can pipe any object that has an Extended Type System (ETS) adapter to <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept>.</source>
          <target state="translated">확장 형식 시스템 (ETS) 어댑터를가 있는 모든 개체를 파이프할 수 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The CSV output is returned as a collection of strings.</source>
          <target state="translated">CSV 출력은 문자열 컬렉션으로 반환됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In CSV format, each object is represented by a comma-separated list of its property value.</source>
          <target state="translated">CSV 형식에서 각 개체는 해당 속성 값의 쉼표로 구분된 목록으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The property values are converted to strings (by using the ToString() method of the object), so they are generally represented by the name of the property value.</source>
          <target state="translated">속성 값은 개체의 ToString() 메서드를 통해 문자열로 변환될 수도 있으므로 일반적으로 속성 값 이름으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept> does not export the methods of the object.</source>
          <target state="translated"><bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept> 개체의 메서드를 내보내지 않습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The format of the resulting CSV strings is as follows:</source>
          <target state="translated">결과 CSV 문자열의 형식은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The first string consists of #TYPE followed by the fully-qualified name of the object type, such as #TYPE System.Diagnostics.Process.</source>
          <target state="translated">첫 번째 문자열 #TYPE 예: #TYPE System.Diagnostics.Process 개체 형식의 정규화 된 이름으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To suppress this string, use the <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> parameter.</source>
          <target state="translated">이 문자열을 표시 하지 않으려면, 사용 된 <bpt id="p1">*</bpt>않으려면 NoTypeInformation<ept id="p1">*</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The next string represents the column headers.</source>
          <target state="translated">다음 문자열 열 머리글을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It contains a comma-separated list of the names of all the properties of the first object.</source>
          <target state="translated">이 문자열에는 첫 번째 개체의 모든 속성 이름의 쉼표로 구분된 목록이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The remaining strings consist of comma-separated lists of the property values of each object.</source>
          <target state="translated">나머지 문자열은 각 개체의 속성 값의 쉼표로 구분 된 목록으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When you submit multiple objects to <bpt id="p1">**</bpt>ConvertTo-CSV<ept id="p1">**</ept>, <bpt id="p2">**</bpt>ConvertTo-CSV<ept id="p2">**</ept> orders the strings based on the properties of the first object that you submit.</source>
          <target state="translated">여러 개체를 제출할 때 <bpt id="p1">**</bpt>CONVERTTO-CSV<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CONVERTTO-CSV<ept id="p2">**</ept> 제출 하는 첫 번째 개체의 속성을 기반으로 문자열의 순서입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the remaining objects do not have one of the specified properties, the property value of that object is Null, as represented by two consecutive commas.</source>
          <target state="translated">나머지 개체에 지정된 된 속성 중 하나가 없는 경우 해당 개체의 속성 값은 두 개의 연속 된 쉼표로 표시 된 대로, Null입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the remaining objects have additional properties, those property values are ignored.</source>
          <target state="translated">나머지 개체에 추가 속성이 있으면 해당 속성 값은 무시됩니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>