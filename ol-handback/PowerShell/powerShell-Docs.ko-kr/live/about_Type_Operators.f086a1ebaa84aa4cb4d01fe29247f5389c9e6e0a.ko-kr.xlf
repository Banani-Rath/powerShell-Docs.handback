<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c8075adb4bb2ed599a4926894b672a466986026</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Type_Operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a35c555f6f418c1868e186d80a1e80930396fe93</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">410c464fc9702383f4f9a560e9f362d0b9c6d5f9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Type_Operators</source>
          <target state="translated">about_Type_Operators</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Type Operators</source>
          <target state="translated">형식 연산자에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Type_Operators</source>
          <target state="translated">about_Type_Operators</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Type_Operators</source>
          <target state="translated">about_Type_Operators</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the operators that work with Microsoft .NET Framework types.</source>
          <target state="translated">Microsoft.NET Framework 형식을 사용 하는 연산자에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Boolean type operators (-is and -isNot) tell whether an object is an instance of a specified .NET Framework type.</source>
          <target state="translated">부울 형식 연산자 (-은 및-isNot) 개체가 지정 된.NET Framework 형식의 인스턴스 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The -is operator returns a value of TRUE if the type matches and a value of FALSE otherwise.</source>
          <target state="translated">-그렇지 않으면 연산자 반환 값이 형식이 일치 하면 TRUE와 FALSE 값입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The -isNot operator returns a value of FALSE if the type matches and a value of TRUE otherwise.</source>
          <target state="translated">-IsNot 연산자 형식이 일치 하는 경우 FALSE 값 및 값이 true 이면 그렇지 않은 경우 반환 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The -as operator tries to convert the input object to the specified .NET Framework type.</source>
          <target state="translated">-as 연산자가 지정된 된.NET Framework 형식으로 입력된 개체를 변환 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If it succeeds, it returns the converted object.</source>
          <target state="translated">성공 하면 변환 된 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It if fails, it returns nothing.</source>
          <target state="translated">이 경우 실패 하면 nothing을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It does not return an error.</source>
          <target state="translated">오류를 반환 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following table lists the type operators in  Windows PowerShell�.</source>
          <target state="translated">다음 표에서 Windows PowerShell에서 형식 연산자를 나열합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The syntax of the type operators is as follows:</source>
          <target state="translated">형식 연산자 구문은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also use the following syntax:</source>
          <target state="translated">또한 다음 구문을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To specify the .NET Framework type, enclose the type name in brackets ([ ]), or enter the type as a string, such as [DateTime] or "DateTime" for System.DateTime.</source>
          <target state="translated">.NET Framework 종류를 지정 하려면 형식 이름을 대괄호 ()로 묶습니다. 하거나 System.DateTime에 대 한 유형 [DateTime] 등의 문자열 또는 "DateTime"으로 입력 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the type is not at the root of the system namespace, specify the full name of the object type.</source>
          <target state="translated">System 네임 스페이스의 루트에는 형식이 아닌 경우에 개체 유형의 전체 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can omit "System.".</source>
          <target state="translated">"System"입니다. 생략할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, to specify System.Diagnostics.Process, enter [System.Diagnostics.Process], [Diagnostics.Process], or "diagnostics.process".</source>
          <target state="translated">예를 들어 System.Diagnostics.Process를 지정 하려면 [System.Diagnostics.Process] 입력 [Diagnostics.Process] 또는 "diagnostics.process"입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type operators always return a Boolean value, even if the input is a collection of objects.</source>
          <target state="translated">경우에 입력 개체의 컬렉션 형식 연산자는 항상 부울 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, when the input is a collection, the type operators match the .NET Framework type of the collection.</source>
          <target state="translated">그러나 입력 컬렉션 이면 형식 연산자는 컬렉션의.NET Framework 형식을 일치 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>They do not match the type of each object, even when all of the objects are of the same type.</source>
          <target state="translated">경우에 모든 개체가 동일한 형식의 각 개체의 형식이 일치 하지 않으면.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To find the .NET Framework type of an object, use the Get-Member cmdlet.</source>
          <target state="translated">개체의.NET Framework 형식을 찾으려면 Get-member cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Or, use the GetType method of all the objects together with the FullName property of this method.</source>
          <target state="translated">또는이 메서드의 FullName 속성 함께 모든 개체의 GetType 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, the following statement gets the type of the return value of a Get-Culture command:</source>
          <target state="translated">예를 들어 다음 문은 Get-culture 명령은의 반환 값의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following examples show some uses of the Type operators:</source>
          <target state="translated">다음 예제에서는 형식 연산자의 몇 가지 사용을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example shows that when the input is a collection of objects, the matching type is the .NET Framework type of the collection, not the type of the individual objects in the collection.</source>
          <target state="translated">다음 예제에서는 입력이 개체의 컬렉션, 일치 하는 형식이 컬렉션에 개별 개체의 형식이 아니라 컬렉션의.NET Framework 형식을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this example, although both the Get-Culture and Get-UICulture cmdlets return System.Globalization.CultureInfo objects, a collection of these objects is a System.Object array.</source>
          <target state="translated">이 예에서 Get-culture와 Get-uiculture cmdlet System.Globalization.CultureInfo 개체를 반환 하지만 이러한 개체의 컬렉션에는 System.Object 배열입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following examples show how to use the -as operator.</source>
          <target state="translated">다음 예제를 사용 하는 방법을 보여 줍니다 연산자로-입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example shows that when the -as operator cannot convert the input object to the .NET Framework type, it returns nothing.</source>
          <target state="translated">다음 예제에서는 때-nothing을 반환 연산자는 입력된 개체는.NET Framework 형식으로 변환할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>about_Operators</source>
          <target state="translated">about_Operators</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>