<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27ffe687da3e4b45f9f64821d418bf25a0288f23</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Hash_Tables.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4ffb0a2b0d58969fa779e043c9b304442ee7013</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b8c3d0d0e062d467078c08c7b61c8f63d01bc7a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Hash_Tables</source>
          <target state="translated">about_Hash_Tables</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Hash Tables</source>
          <target state="translated">해시 테이블에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Hash_Tables</source>
          <target state="translated">about_Hash_Tables</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Hash_Tables</source>
          <target state="translated">about_Hash_Tables</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to create, use, and sort hash tables in Windows PowerShell.</source>
          <target state="translated">만들기, 사용 및 Windows PowerShell에서 해시 테이블을 정렬 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A hash table, also known as a dictionary or associative array, is a compact data structure that stores one or more key<ph id="ph1">\/</ph>value pairs.</source>
          <target state="translated">해시 테이블, 사전 또는 결합형 배열로 라고도 하나 이상의 키를 저장 하는 압축 된 데이터 구조<ph id="ph1">\/</ph>값 쌍입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, a hash table might contain a series of IP addresses and computer names, where the IP addresses are the keys and the computer names are the values, or vice versa.</source>
          <target state="translated">예를 들어, 해시 테이블 일련의 IP 주소 및 컴퓨터 이름, IP 주소는 키 및 컴퓨터 이름 값은 위치를 포함 하거나 그 반대의 경우도 마찬가지입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, each hash table is a Hashtable (System.Collections.Hashtable) object.</source>
          <target state="translated">Windows PowerShell에서 각 해시 테이블 (System.Collections.Hashtable) Hashtable 개체입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use the properties and methods of Hashtable objects in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell에서 해시 테이블 개체의 메서드와 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, you can use the [ordered] attribute to create an ordered dictionary (System.Collections.Specialized.OrderedDictionary) in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell 3.0 부터는 Windows PowerShell의 정렬된 된 사전을 (System.Collections.Specialized.OrderedDictionary)를 만들려면 [순서] 특성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Ordered dictionaries differ from hash tables in that the keys always appear in the order in which you list them.</source>
          <target state="translated">순서가 지정 된 사전 키 순서를 항상 표시 한다는 점에서 해시 테이블에서 다릅니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The order of keys in a hash table is not determined.</source>
          <target state="translated">해시 테이블에서 키의 순서는 결정 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The keys and value in hash tables are also .NET objects.</source>
          <target state="translated">키와 해시 테이블의 값은.NET 개체도 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>They are most often strings or integers, but they can have any object type.</source>
          <target state="translated">대부분의 종종 문자열 또는 정수는 하지만 모든 개체 형식에 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also create nested hash tables, in which the value of a key is another hash table.</source>
          <target state="translated">또한 중첩 된 해시 테이블, 키 값의 또 다른 해시 테이블을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Hash tables are frequently used because they are very efficient for finding and retrieving data.</source>
          <target state="translated">해시 테이블 찾기 및 데이터 검색에 매우 효율적 있기 때문에 종종 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use hash tables to store lists and to create calculated properties in Windows PowerShell.</source>
          <target state="translated">목록을 저장 하 고 Windows PowerShell에서 계산 된 속성을 만들 해시 테이블을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>And, Windows PowerShell has a cmdlet, ConvertFrom-StringData, that converts strings to a hash table.</source>
          <target state="translated">및 Windows PowerShell에 문자열을 해시 테이블로 변환 하는 Convertfrom-stringdata cmdlet을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The syntax of a hash table is as follows:</source>
          <target state="translated">해시 테이블의 구문은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The syntax of an ordered dictionary is as follows:</source>
          <target state="translated">정렬된 된 사전을 구문은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The [ordered] attribute was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">[순서] 특성은 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creating Hash Tables</source>
          <target state="translated">해시 테이블 만들기</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To create a hash table, follow these guidelines:</source>
          <target state="translated">해시 테이블을 만들려면 다음이 지침을 따르십시오.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Begin the hash table with an at sign (@).</source>
          <target state="translated">포함 된 해시 테이블을 시작는 at 기호 (@).</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Enclose the hash table in braces ({}).</source>
          <target state="translated">해시 테이블을 중괄호 ({})로 묶습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Enter one or more key<ph id="ph1">\/</ph>value pairs for the content of the hash table.</source>
          <target state="translated">하나 이상의 키 입력<ph id="ph1">\/</ph>해시 테이블의 내용에 대 한 쌍의 값입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use an equal sign (<ph id="ph1">\=</ph>) to separate each key from its value.</source>
          <target state="translated">등호를 사용 하 여 (<ph id="ph1">\=</ph>) 각 키 값 구분 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use a semicolon (;) or a line break to separate the key<ph id="ph1">\/</ph>value pairs.</source>
          <target state="translated">키를 구분 하려면 세미콜론 (;) 또는 줄 바꿈을 사용 하 여<ph id="ph1">\/</ph>값 쌍입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Key that contains spaces must be enclosed in quotation marks.</source>
          <target state="translated">공백이 포함 된 키를 따옴표로 묶어야 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Values must be valid Windows PowerShell expressions.</source>
          <target state="translated">값에 사용할 수 있는 Windows PowerShell 식 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Strings must appear in quotation marks, even if they do not include spaces.</source>
          <target state="translated">공백을 포함 하지 않는 경우에 문자열 인용 부호 안에 나타나야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To manage the hash table, save it in a variable.</source>
          <target state="translated">해시 테이블을 관리 하기 위해 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When assigning an ordered hash table to a variable, place the [ordered] attribute before the "@" symbol.</source>
          <target state="translated">순서가 지정 된 해시 테이블에는 변수를 할당할 때는 하기 전에 [순서] 특성을 배치는 "@" 기호입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you place it before the variable name, the command fails.</source>
          <target state="translated">변수 이름 앞 배치 하는 경우 명령이 실패 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To create an empty hash table in the value of $hash, type:</source>
          <target state="translated">$Hash 값에는 빈 해시 테이블을 만들려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can also add keys and values to a hash table when you create it.</source>
          <target state="translated">만들 때 해시 테이블에 키와 값을 추가할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, the following statement creates a hash table with three keys.</source>
          <target state="translated">예를 들어 다음 문은 세 개의 키가 있는 해시 테이블을 만듭니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Creating Ordered Dictionaries</source>
          <target state="translated">정렬 된 사전 만들기</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can create an ordered dictionary by adding an object of the OrderedDictiory type, but the easiest way to create an ordered dictionary is use the [Ordered] attribute.</source>
          <target state="translated">OrderedDictiory 형식의 개체를 추가 하 여 정렬된 된 사전을 만들 수 있습니다 이지만 정렬된 된 사전을 만드는 가장 쉬운 방법은 [Ordered] 특성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The [ordered] attribute is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">특성 [순서]는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Place the attribute immediately before the "@" symbol.</source>
          <target state="translated">특성을 바로 앞에 배치 된 "@" 기호입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can use ordered dictionaries in the same way that you use hash tables.</source>
          <target state="translated">해시 테이블을 사용 하면 동일한 방식으로 순서가 지정 된 사전에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Either type can be used as the value of parameters that take a hash table or dictionary (iDictionary).</source>
          <target state="translated">입력 해시 테이블 또는 사전을 (iDictionary)를 사용 하는 매개 변수 값으로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You cannot use the [ordered] attribute to convert or cast a hash hash table.</source>
          <target state="translated">변환 또는 캐스팅 해시 해시 테이블에 [순서] 특성을 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you place the ordered attribute before the variable name, the command fails with the following error message.</source>
          <target state="translated">변수 이름 앞에 순서가 지정 된 특성을 배치 하는 경우 다음 오류 메시지와 함께 명령이 실패 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To correct the expression, move the [ordered] attribute.</source>
          <target state="translated">식을 수정 하려면 [순서] 특성을 이동 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can cast an ordered dictionary to a hash table, but you cannot recover the ordered attribute, even if you clear the variable and enter new values.</source>
          <target state="translated">해시 테이블에 정렬된 된 사전을 캐스팅할 수 있습니다. 하지만 변수를 지우고 새 값을 입력 하는 경우에 ordered 특성을 복구할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To re-establish the order, you must remove and recreate the variable.</source>
          <target state="translated">순서를 다시 설정 하는 경우를 제거 하 고 변수를 다시 만듭니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Displaying Hash Tables</source>
          <target state="translated">해시 테이블 표시</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To display a hash table that is saved in a variable, type the variable name.</source>
          <target state="translated">변수에 저장 되는 해시 테이블을 표시 하려면 변수 이름을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>By default, a hash tables is displayed as a table with one column for keys and one for values.</source>
          <target state="translated">기본적으로 해시 테이블은 하나의 키 열과 값에 대 한로 구성 된 표로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Hash tables have Keys and Values properties.</source>
          <target state="translated">해시 테이블에는 키와 값 속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Use dot notation to display all of the keys or all of the values.</source>
          <target state="translated">점 표기법을 사용 하 여 모든 값 또는 키를 모두 표시.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Each key name is also a property of the hash table, and its value is the value of the key-name property.</source>
          <target state="translated">각 키 이름은 해시 테이블의 속성 이며 해당 값 키 이름 속성의 값입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use the following format to display the property values.</source>
          <target state="translated">다음 형식을 사용 하 여 속성 값을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Hash tables have a Count property that indicates the number of key-value pairs in the hash table.</source>
          <target state="translated">해시 테이블에 해시 테이블에 있는 키-값 쌍의 수를 나타내는 Count 속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Hash table tables are not arrays, so you cannot use an integer as an index into the hash table, but you can use a key name to index into the hash table.</source>
          <target state="translated">해시 테이블 테이블 하지 않으므로 배열, 해시 테이블에 인덱스는 정수를 사용할 수 없지만 해시 테이블에 인덱스에 키 이름을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the key is a string value, enclose the key name in quotation marks.</source>
          <target state="translated">키가 문자열 값을, 키 이름을 따옴표로 묶습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Adding and Removing Keys and Values</source>
          <target state="translated">키 및 값 추가 및 제거</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To add keys and values to a hash table, use the following command format.</source>
          <target state="translated">키와 값 해시 테이블을 추가 하려면 다음 명령 형식을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to add a "Time" key with a value of "Now" to the hash table, use the following statement format.</source>
          <target state="translated">예를 들어, "지금"의 값을 사용 하 여 "시간" 키를 해시 테이블에 추가 하려면 다음 문 형식을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can also add keys and values to a hash table by using the Add method of the System.Collections.Hashtable object.</source>
          <target state="translated">System.Collections.Hashtable 개체의 Add 메서드를 사용 하 여 해시 테이블에 키와 값도 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The Add method has the following syntax:</source>
          <target state="translated">Add 메서드에 다음 구문이 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, to add a "Time" key with a value of "Now" to the hash table, use the following statement format.</source>
          <target state="translated">예를 들어, "지금"의 값을 사용 하 여 "시간" 키를 해시 테이블에 추가 하려면 다음 문 형식을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>And, you can add keys and values to a hash table by using the addition operator (<ph id="ph1">\+</ph>) to add a hash table to an existing hash table.</source>
          <target state="translated">있으며를 추가할 수 있는 키와 값을 해시 테이블로 더하기 연산자를 사용 하 여 (<ph id="ph1">\+</ph>) 기존 해시 테이블에 해시 테이블을 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, the following statement adds a "Time" key with a value of "Now" to the hash table in the $hash variable.</source>
          <target state="translated">예를 들어 다음 문은 $hash 변수에 해시 테이블에 "지금"의 값을 사용 하 여 "시간" 키를 추가합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can also add values that are stored in variables.</source>
          <target state="translated">변수에 저장 된 값을 추가할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You cannot use a subtraction operator to remove a key<ph id="ph1">\/</ph>value pair from a hash table, but you can use the Remove method of the Hashtable object.</source>
          <target state="translated">키를 제거 하는 빼기 연산자를 사용할 수 없습니다<ph id="ph1">\/</ph>해시 테이블에서 값 쌍에서 해시 테이블 개체의 Remove 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The Remove method takes the key as its value.</source>
          <target state="translated">Remove 메서드는 해당 값으로 키를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The Remove method has the following syntax:</source>
          <target state="translated">Remove 메서드에 다음 구문이 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, to remove the Time<ph id="ph1">\=</ph>Now key<ph id="ph2">\/</ph>value pair from the hash table in the value of the $hash variable, type:</source>
          <target state="translated">예를 들어, 시간을 제거 하려면<ph id="ph1">\=</ph>이제 키<ph id="ph2">\/</ph>$hash 변수의 형식 쌍 값의 해시 테이블에서 값:</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can use all of the properties and methods of Hashtable objects in Windows PowerShell, including Contains, Clear, Clone, and CopyTo.</source>
          <target state="translated">해시 테이블의 개체 포함 하는 경우를 포함 하 여 선택을 취소 하는 Windows PowerShell, 복제, CopyTo의 메서드와 속성을 모두 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information about Hashtable objects, see "System.Collections.Hashtable" on MSDN.</source>
          <target state="translated">해시 테이블 개체에 대 한 자세한 내용은 MSDN에서 "System.Collections.Hashtable"를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Object Types in HashTables</source>
          <target state="translated">해시 테이블의 개체 유형</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The keys and values in a hash table can have any .NET object type, and a single hash table can have keys and values of multiple types.</source>
          <target state="translated">키와 해시 테이블의 값 수 임의의.NET 개체 형식 있으며 단일 해시 테이블 가질 수 있습니다 키와 여러 종류의 값입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following statement creates a hash table of process name strings and process object values and saves it in the $p variable.</source>
          <target state="translated">다음 문은 프로세스 이름 문자열 및 프로세스 개체 값의 해시 테이블을 만들고 $p 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can display the hash table in $p and use the key-name properties to display the values.</source>
          <target state="translated">$P에 해시 테이블을 표시할 수 있으며 값을 표시 하는 키 이름 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The keys in a hash table can also be any .NET type.</source>
          <target state="translated">해시 테이블의 키는.NET 형식일 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following statement adds a key<ph id="ph1">\/</ph>value pair to the hash table in the $p variable.</source>
          <target state="translated">다음 문은 키 추가<ph id="ph1">\/</ph>값 쌍을 $p 변수에 해시 테이블입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The key is a Service object that represents the WinRM service, and the value is the current status of the service.</source>
          <target state="translated">키는 WinRM 서비스를 나타내는 서비스 개체 및 값이 서비스의 현재 상태입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can display and access the new key<ph id="ph1">\/</ph>value pair by using the same methods that you use for other pairs in the hash table.</source>
          <target state="translated">표시 하 고 새 키에 액세스할 수<ph id="ph1">\/</ph>해시 테이블에 다른 쌍을 사용 하는 것과 같은 메서드를 사용 하 여 값 쌍입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The keys and values in a hash table can also be Hashtable objects.</source>
          <target state="translated">해시 테이블의 값과 키 해시 테이블 개체를 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following statement adds key<ph id="ph1">\/</ph>value pair to the hash table in the $p variable in which the key is a string, Hash2, and the value is a hash table with three key<ph id="ph2">\/</ph>value pairs.</source>
          <target state="translated">키를 추가 하는 다음 문을<ph id="ph1">\/</ph>값 $p 변수는 문자열로, Hash2, 키 및 값이 세 가지 키가 있는 해시 테이블에 있는 해시 테이블 쌍<ph id="ph2">\/</ph>값 쌍입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can display and access the new values by using the same methods.</source>
          <target state="translated">표시 하 고 동일한 방법을 사용 하 여 새 값에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Sorting Keys and Values</source>
          <target state="translated">정렬 키 및 값</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The items in a hash table are intrinsically unordered.</source>
          <target state="translated">해시 테이블에 항목이 기본적으로 정렬 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The key<ph id="ph1">\/</ph>value pairs might appear in a different order each time that you display them.</source>
          <target state="translated">키<ph id="ph1">\/</ph>값 쌍으로 표시 될 때마다 다른 순서로 나타날 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Although you cannot sort a hash table, you can use the GetEnumerator method of hash tables to enumerate the keys and values, and then use the Sort-Object cmdlet to sort the enumerated values for display.</source>
          <target state="translated">해시 테이블을 정렬할 수 없지만 키와 값을 열거 해시 테이블의 GetEnumerator 메서드를 사용할 수 있으며 다음 표시에 대 한 열거 값을 정렬 하려면 Sort-object cmdlet을 사용 하 여.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, the following commands enumerate the keys and values in the hash table in the $p variable and then sort the keys in alphabetical order.</source>
          <target state="translated">예를 들어 다음 명령은 키와 $p 변수에 해시 테이블의 값을 열거를 다음 알파벳 순서로 정렬 키를 정렬 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following command uses the same procedure to sort the hash values in descending order.</source>
          <target state="translated">다음 명령은 내림차순 해시 값을 정렬 하려면 동일한 절차를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Creating Objects from Hash Tables</source>
          <target state="translated">해시 테이블에서 개체를 만들고</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, you can create an object from a hash table of properties and property values.</source>
          <target state="translated">Windows PowerShell 3.0부터, 속성 및 속성 값의 해시 테이블에서 개체를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The syntax is as follows:</source>
          <target state="translated">구문은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This method works only for classes that have a null constructor, that is, a constructor that has no parameters.</source>
          <target state="translated">이 메서드는 null 생성자, 즉 매개 변수가 없는 생성자가 있는 클래스에 대해서만 작동 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The object properties must be public and settable.</source>
          <target state="translated">공용 및 설정할 수 있는 개체 속성 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information, see about_Object_Creation.</source>
          <target state="translated">자세한 내용은 about_Object_Creation를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData</source>
          <target state="translated">ConvertFrom-StringData</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The ConvertFrom-StringData cmdlet converts a string or a here-string of key<ph id="ph1">\/</ph>value pairs into a hash table.</source>
          <target state="translated">Convertfrom-stringdata cmdlet은 문자열 또는 here-string 키의 변환<ph id="ph1">\/</ph>을 해시 테이블로 값 쌍입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can use the ConvertFrom-StringData cmdlet safely in the Data section of a script, and you can use it with the Import-LocalizedData cmdlet to display user messages in the user-interface (UI) culture of the current user.</source>
          <target state="translated">스크립트의 Data 섹션에 안전 하 게 Convertfrom-stringdata cmdlet을 사용할 수 있습니다 하 고 현재 사용자의 사용자 인터페이스 (UI) 문화권의 사용자 메시지를 표시 하도록 Import-localizeddata cmdlet과 함께 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Here-strings are especially useful when the values in the hash table include quotation marks.</source>
          <target state="translated">여기 문자열은 해시 테이블의 값 따옴표를 포함 하는 경우에 특히 유용 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>(For more information about here-strings, see about_Quoting_Rules.)</source>
          <target state="translated">(Here-strings에 대 한 자세한 내용은 about_Quoting_Rules 참조).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a here-string of the user messages in the previous example and how to use ConvertFrom-StringData to convert them from a string into a hash table.</source>
          <target state="translated">다음 예제에서는 이전 예제에서 사용자 메시지의 here-string을 만드는 방법과 Convertfrom-stringdata 해시 테이블에는 문자열에서 변환 하기 위해 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The following command creates a here-string of the key<ph id="ph1">\/</ph>value pairs and then saves it in the $string variable.</source>
          <target state="translated">다음 명령은 만듭니다 키의 here-string<ph id="ph1">\/</ph>값 쌍과 다음 $string 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This command uses the ConvertFrom-StringData cmdlet to convert the here-string into a hash table.</source>
          <target state="translated">이 명령은 Convertfrom-stringdata cmdlet을 사용 하 여 here-string을 해시 테이블로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information about here-strings, see about_Quoting_Rules.</source>
          <target state="translated">Here-strings에 대 한 자세한 내용은 about_Quoting_Rules를 참조 하세요.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_arrays</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>about_Object_Creation</source>
          <target state="translated">about_Object_Creation</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>about_Quoting_Rules</source>
          <target state="translated">about_Quoting_Rules</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>about_Script_Internationalization</source>
          <target state="translated">about_Script_Internationalization</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData</source>
          <target state="translated">ConvertFrom-StringData</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Import-LocalizedData</source>
          <target state="translated">Import-localizeddata</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>"System.Collections.Hashtable" on MSDN</source>
          <target state="translated">MSDN에서 "System.Collections.Hashtable"</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>