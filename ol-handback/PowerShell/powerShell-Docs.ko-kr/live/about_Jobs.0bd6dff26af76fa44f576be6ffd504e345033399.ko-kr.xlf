<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7c96b46a6f847ebe15864d35ff863dd83136ff8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Jobs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ef4634be1016a608032281138171794e715cb27</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7148fd6a31045bc405e21fb68c7a8c1241c2030f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Jobs</source>
          <target state="translated">작업 정보</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Provides information about how Windows PowerShell background jobs run a command or expression in the background without interacting with the current session.</source>
          <target state="translated">방법 Windows PowerShell 백그라운드 작업 실행 명령 또는 식을 백그라운드에서 현재 세션과 상호 작용 없이 대 한 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic explains how to run background jobs in Windows PowerShell on a local computer.</source>
          <target state="translated">이 항목에서는 로컬 컴퓨터에서 Windows powershell에서 백그라운드 작업을 실행 하는 방법을 설명 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information about running background jobs on remote computers, see about_Remote_Jobs.</source>
          <target state="translated">원격 컴퓨터에서 백그라운드 작업을 실행 하는 방법에 대 한 내용은 about_Remote_Jobs를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you start a background job, the command prompt returns immediately, even if the job takes an extended time to complete.</source>
          <target state="translated">백그라운드 작업을 시작 하면 작업을 완료 하려면 시간이 오래 걸리는 경우에 명령 프롬프트를 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can continue to work in the session without interruption while the job runs.</source>
          <target state="translated">작업이 실행되는 동안 중단 없이 세션에서 작업을 계속할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>THE JOB CMDLETS</source>
          <target state="translated">JOB CMDLET</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Start-Job        Starts a background job on a local computer.</source>
          <target state="translated">로컬 컴퓨터에서 백그라운드 작업 시작 작업이 시작 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Get-Job          Gets the background jobs that were started in the current session.</source>
          <target state="translated">Get 작업은 현재 세션에서 시작 된 백그라운드 작업입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Receive-Job      Gets the results of background jobs.</source>
          <target state="translated">수신 작업을 가져옵니다 백그라운드 작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Stop-Job         Stops a background job.</source>
          <target state="translated">Stop-job 중지 백그라운드 작업입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Wait-Job         Suppresses the command prompt until one or all jobs are complete.</source>
          <target state="translated">Wait-job 억제 작업 하나 또는 모든 작업이 될 때까지 명령 프롬프트를 완성 했습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remove-Job       Deletes a background job.</source>
          <target state="translated">Remove-job 삭제 백그라운드 작업을 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Invoke-Command   The AsJob parameter runs any command as a background job on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 백그라운드 작업으로 모든 명령을 실행 하는 Invoke-command의 AsJob 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also use Invoke-Command to run any job command remotely, including a Start-Job command.</source>
          <target state="translated">사용할 수 있습니다 또한 Invoke-command 작업 명령을 원격으로 실행 하려면 Start-job 명령을 포함 하 여.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>HOW TO START A JOB ON THE LOCAL COMPUTER</source>
          <target state="translated">로컬 컴퓨터에서 작업을 시작 하는 방법</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To start a background job on the local computer, use the Start-Job cmdlet.</source>
          <target state="translated">로컬 컴퓨터에서 백그라운드 작업을 시작 하려면 Start-job cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To write a Start-Job command, enclose the command that the job runs in braces ( { } ).</source>
          <target state="translated">Start-job 명령을 작성 하려면 중괄호 ({}) 작업이 실행 되는 명령을 묶습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use the ScriptBlock parameter to specify the command.</source>
          <target state="translated">ScriptBlock 매개 변수를 사용 하 여 명령을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following command starts a background job that runs a Get-Process command on the local computer.</source>
          <target state="translated">다음 명령은 로컬 컴퓨터에서 Get-process 명령을 실행 하는 백그라운드 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Start-Job -ScriptBlock {Get-Process}</source>
          <target state="translated">Start-job-ScriptBlock {Get-process}</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The Start-Job command returns an object that represents the job.</source>
          <target state="translated">Start-job 명령을 작업을 나타내는 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The job object contains useful information about the job, but it does not contain the job results.</source>
          <target state="translated">작업 개체에는 작업에 대한 유용한 정보가 포함되어 있지만 작업 결과는 포함되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Save the job object in a variable, and then use it with the other Job cmdlets to manage the background job.</source>
          <target state="translated">변수에 작업 개체를 저장 하 고 백그라운드 작업을 관리 하는 다른 작업 cmdlet 사용.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following command starts a job object and saves the resulting job object in the $job variable.</source>
          <target state="translated">다음 명령은 작업 개체를 시작 하 고 $job 변수에 결과 작업 개체를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>$job = Start-Job -ScriptBlock {Get-Process}</source>
          <target state="translated">$job Start-job-ScriptBlock {Get-process} =</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can also use the Get-Job cmdlet to get objects that represent the jobs started in the current session.</source>
          <target state="translated">또한 현재 세션에서 시작 작업을 나타내는 개체를 가져오려면 Get-job cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Get-Job returns the same job object that Start-Job returns.</source>
          <target state="translated">Get-job Start-job 반환 하며 동일한 작업 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>GETTING JOB OBJECTS</source>
          <target state="translated">작업 개체 가져오기</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To get object that represent the background jobs that were started in the current session, use the Get-Job cmdlet.</source>
          <target state="translated">현재 세션에서 시작 된 백그라운드 작업을 나타내는 개체 Get-job cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Without parameters, Get-Job returns all of the jobs that were started in the current session.</source>
          <target state="translated">매개 변수가 없을 경우 Get 작업은 현재 세션에서 시작 된 작업의 모든 반환 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the jobs in the current session.</source>
          <target state="translated">예를 들어 다음 명령은 현재 세션에서 작업을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>PS C:&gt;Get-Job</source>
          <target state="translated">PS c: &gt; Get-job</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Id  Name  PSJobTypeName State      HasMoreData  Location   Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>1   Job1  BackgroundJob Running    True         localhost  Get-Process</source>
          <target state="translated">1 Job1 BackgroundJob 실행 True localhost Get-process</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can also save the job object in a variable and use it to represent the job in a later command.</source>
          <target state="translated">작업 개체를 변수에 저장 하 고 이후 명령에 대 한 작업을 나타내는 데 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following command gets the job with ID 1 and saves it in the $job variable.</source>
          <target state="translated">다음 명령은 ID가 1 인 작업을 가져오고 $job 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>$job = Get-Job -Id 1</source>
          <target state="translated">$job Get-job =-Id 1</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The job object contains the state of the job, which indicates whether the job has finished.</source>
          <target state="translated">작업 개체는 작업이 완료 되었는지 여부를 나타내는 작업의 상태를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A finished job has a state of "Complete" or "Failed".</source>
          <target state="translated">완료 된 작업에는 "완료" 또는 "실패" 상태를 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A job might also be blocked or running.</source>
          <target state="translated">작업 차단 되거나 실행 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">Get 작업</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Id  Name  PSJobTypeName State      HasMoreData  Location   Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>1   Job1  BackgroundJob Complete   True         localhost  Get-Process</source>
          <target state="translated">1 Job1 BackgroundJob 전체 True localhost Get-process</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>GETTING THE RESULTS OF A JOB</source>
          <target state="translated">작업의 결과 얻는 것</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you run a background job, the results do not appear immediately.</source>
          <target state="translated">백그라운드 작업을 실행 하면 결과가 즉시 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Instead, the Start-Job cmdlet returns a job object that represents the job, but it does not contain the results.</source>
          <target state="translated">대신, Start-job cmdlet은 작업을 나타내는 작업 개체를 반환 하지만 결과 포함 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To get the results of a background job, use the Receive-Job cmdlet.</source>
          <target state="translated">백그라운드 작업의 결과 가져오려면 Receive-job cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following command uses the Receive-Job cmdlet to get the results of the job.</source>
          <target state="translated">다음 명령은 Receive-job cmdlet를 사용 하 여 작업의 결과를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It uses a job object saved in the $job variable to identify the job.</source>
          <target state="translated">$Job 변수에 저장 된 작업 개체를 사용 하 여 작업을 식별 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Receive-Job -Job $job</source>
          <target state="translated">수신 작업-$job 작업</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The Receive-Job cmdlet returns the results of the job.</source>
          <target state="translated">Receive-job cmdlet은 작업의 결과 반환합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)    Id ProcessName</source>
          <target state="translated">NPM(K) PM(K) WS(K) VM(M) CPU(s) Id ProcessName 처리</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56           1176 audiodg 804      14    12228      14108   100   101.74  1740 CcmExec 668       7     2672       6168   104    32.26   488 csrss</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec 668 7 2672 6168 104 32.26 488 csrss</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can also save the results of a job in a variable.</source>
          <target state="translated">작업의 결과 변수에 저장할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following command saves the results of the job in the $job variable to the $results variable.</source>
          <target state="translated">다음 명령은 $results 변수에 $job 변수에 작업의 결과 저장합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>$results = Receive-Job -Job $job</source>
          <target state="translated">$results Receive-job =-$job 작업</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>And, you can save the results of the job in a file by using the redirection operator (&gt;) or the Out-File cmdlet.</source>
          <target state="translated">리디렉션 연산자 (&gt;)를 사용 하 여 파일에 작업의 결과 저장할 수 및 또는 Out-file cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following command uses the redirection operator to save the results of the job in the $job variable in the Results.txt file.</source>
          <target state="translated">다음 명령을 리디렉션 연산자를 사용 하 여 Results.txt 파일에서 $job 변수에서 작업의 결과 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Receive-Job -Job $job &gt; results.txt</source>
          <target state="translated">수신 작업-$job 작업 &gt; results.txt</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>GETTING AND KEEPING PARTIAL JOB RESULTS</source>
          <target state="translated">부분 유지 하 고 작업 결과</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The Receive-Job cmdlet gets the results of a background job.</source>
          <target state="translated">Receive-job cmdlet을 백그라운드 작업의 결과를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the job is complete, Receive-Job gets all job results.</source>
          <target state="translated">작업이 완료 되 면 Receive-job 모든 작업 결과를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the job is still running, Receive-Job gets the results that have been generated thus far.</source>
          <target state="translated">작업이 아직 실행 중이면 Receive-job 지금까지 생성 된 결과를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can run Receive-Job commands again to get the remaining results.</source>
          <target state="translated">나머지 결과 얻을 수 다시 Receive-job 명령을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When Receive-Job returns results, by default, it deletes those results from the cache where job results are stored.</source>
          <target state="translated">기본적으로 결과 반환 하는 수신 작업을 하는 경우 그 결과 작업 결과 저장할 캐시에서 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you run another Receive-Job command, you get only the results that are not yet received.</source>
          <target state="translated">다른 Receive-job 명령을 실행 하면 아직 받지 않은 결과만을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following commands show the results of Receive-Job commands run before the job is complete.</source>
          <target state="translated">다음 명령은 Receive-job 명령의 결과 작업이 완료 되기 전에 실행을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job</source>
          <target state="translated">C:\PS &gt; Receive-job-$job 작업</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">NPM(K) PM(K) WS(K) VM(M) CPU(s) Id ProcessName 처리</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56            1176 audiodg 804      14    12228      14108   100   101.74   1740 CcmExec</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job</source>
          <target state="translated">C:\PS &gt; Receive-job-$job 작업</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">NPM(K) PM(K) WS(K) VM(M) CPU(s) Id ProcessName 처리</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>68       3     2632        664    29     0.36   1388 ccmsetup 749      22    21468      19940   203   122.13   3644 communicator 905       7     2980       2628    34   197.97    424 csrss 1121      25    28408      32940   174   430.14   3048 explorer</source>
          <target state="translated">68 3 2632 664 29 0.36 1388 ccmsetup 749 22 21468 19940 203 122.13 3644 communicator 905 7 2980 2628 34 197.97 424 csrss 1121 25 28408 32940 174 430.14 3048 탐색기</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To prevent Receive-Job from deleting the job results that it has returned, use the Keep parameter.</source>
          <target state="translated">수신 작업에서 반환 하는 작업 결과 삭제를 방지 하려면 유지 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>As a result, Receive-Job returns all of the results that have been generated until that time.</source>
          <target state="translated">결과적으로, Receive-job 모두 그 전 까지는 생성 된 결과 반환 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following commands show the effect of using the Keep parameter on a job that is not yet complete.</source>
          <target state="translated">다음 명령은 Keep 매개 변수를 사용 하 여 아직 완료 되지 않은 작업의 효과 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job -Keep</source>
          <target state="translated">C:\PS &gt; Receive-job-$job 작업-유지</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">NPM(K) PM(K) WS(K) VM(M) CPU(s) Id ProcessName 처리</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56            1176 audiodg 804      14    12228      14108   100   101.74   1740 CcmExec</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job -Keep</source>
          <target state="translated">C:\PS &gt; Receive-job-$job 작업-유지</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">NPM(K) PM(K) WS(K) VM(M) CPU(s) Id ProcessName 처리</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56            1176 audiodg 804      14    12228      14108   100   101.74   1740 CcmExec 68       3     2632        664    29     0.36   1388 ccmsetup 749      22    21468      19940   203   122.13   3644 communicator 905       7     2980       2628    34   197.97    424 csrss 1121      25    28408      32940   174   430.14   3048 explorer</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec 68 3 2632 664 29 0.36 1388 ccmsetup 749 22 21468 19940 203 122.13 3644 communicator 905 7 2980 2628 34 197.97 424 csrss 1121 25 28408 32940 174 430.14 3048 탐색기</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>WAITING FOR THE RESULTS</source>
          <target state="translated">결과 기다리는</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you run a command that takes a long time to complete, you can use the properties of the job object to determine when the job is complete.</source>
          <target state="translated">완료 하는 데 시간이 오래 걸리는 명령을 실행 하면 작업이 완료 되는 시기를 결정 하는 작업 개체의 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following command uses the Get-Job object to get all of the background jobs in the current session.</source>
          <target state="translated">다음 명령은 Get-job 개체를 사용 하 여 현재 세션에서 백그라운드 작업을 모두 활용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">Get 작업</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The results appear in a table.</source>
          <target state="translated">테이블에 결과가 나타납니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The status of the job appears in the State column.</source>
          <target state="translated">작업의 상태가 상태 열에 나타납니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Id  Name  PSJobTypeName State      HasMoreData  Location   Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>1   Job1  BackgroundJob Complete    True         localhost  Get-Process 2   Job2  BackgroundJob Running     True         localhost  Get-EventLog -Log Syst... 3   Job3  BackgroundJob Complete    True         localhost  dir -Path C:<ph id="ph1">\*</ph> -Recurse</source>
          <target state="translated">1 Job1 BackgroundJob 전체 True localhost Get-process 2 Job2 BackgroundJob 실행 True localhost Get-eventlog-로그 Syst.... 3 Job3 BackgroundJob 전체 True localhost dir-Path c:<ph id="ph1">\*</ph> -Recurse</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In this case, the State property reveals that Job 2 is still running.</source>
          <target state="translated">이 경우 State 속성 작업 2 여전히 실행 되 고 있는지 알 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you were to use the Receive-Job cmdlet to get the job results now, the results would be incomplete.</source>
          <target state="translated">이제 작업 결과 가져오려면 Receive-job cmdlet을 사용 하는, 결과 완료 됩니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can use the Receive-Job cmdlet repeatedly to get all of the results.</source>
          <target state="translated">모든 결과 얻으려면 Receive-job cmdlet을 반복적으로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>By default, each time you use it, you get only the results that were not already received, but you can use the Keep parameter of the Receive-Job cmdlet to retain the results, even though they were already received.</source>
          <target state="translated">기본적으로를 사용할 때마다 아직 수신 되지 않은 결과 얻게 되지만 이미 수신 되는 경우에 Receive-job cmdlet의 Keep 매개 변수, 결과 유지 하는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can write the partial results to a file and then append newer results as they arrive or you can wait and check the state of the job later.</source>
          <target state="translated">부분 결과 파일에 기록 하 고 도착 하거나 기다렸다가 나중에 작업의 상태를 확인할 수 최신 결과 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You can use the Wait parameter of the Receive-Job cmdlet, which does not return the command prompt until the job is complete and all results are available.</source>
          <target state="translated">작업이 완료 되 고 모든 결과 사용할 수 있는 때까지 명령 프롬프트를 반환 하지 않는 Receive-job cmdlet의 대기 매개 변수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can also use the Wait-Job cmdlet to wait for any or all of the results of the job.</source>
          <target state="translated">또한 일부 또는 모든 작업의 결과 기다릴 Wait-job cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Wait-Job lets you wait for a particular job, for all jobs, or for any of the jobs to be completed.</source>
          <target state="translated">Wait-job를 사용 하면 특정 작업, 모든 작업 또는 완료 될 작업에 대 한 대기 수 있습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following command uses the Wait-Job cmdlet to wait for a job with</source>
          <target state="translated">다음 명령은 Wait-job cmdlet를 사용 하 여 함께 작업에 대 한 대기</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>ID 10.</source>
          <target state="translated">10 ID입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Wait-Job -ID 10</source>
          <target state="translated">Wait-job ID 10</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>As a result, the Windows PowerShell prompt is suppressed until the job is completed.</source>
          <target state="translated">결과적으로 Windows PowerShell 프롬프트는 작업이 완료 될 때까지 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can also wait for a predetermined period of time.</source>
          <target state="translated">미리 결정 된 일정 시간 동안 기다릴 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This command uses the Timeout parameter to limit the wait to 120 seconds.</source>
          <target state="translated">이 명령은 Timeout 매개 변수를 사용 하 여 제한 120 초를 대기 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When the time expires, the command prompt returns, but the job continues to run in the background.</source>
          <target state="translated">시간이 만료 되 면 명령 프롬프트가 반환 있지만 작업이 백그라운드에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Wait-Job -ID 10 -Timeout 120</source>
          <target state="translated">Wait-job ID 10-Timeout 120</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>STOPPING A JOB</source>
          <target state="translated">작업 중지</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To stop a background job, use the Stop-Job cmdlet.</source>
          <target state="translated">백그라운드 작업을 중지 하려면 Stop-job cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following command starts a job to get every entry in the System event log.</source>
          <target state="translated">다음 명령은 시스템 이벤트 로그의 모든 항목을 가져오려면 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>It saves the job object in the $job variable.</source>
          <target state="translated">작업 개체 $job 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>$job = Start-Job -ScriptBlock {Get-EventLog -Log System}</source>
          <target state="translated">$job Start-job ScriptBlock = {Get-eventlog-로그 시스템}</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following command stops the job.</source>
          <target state="translated">다음 명령은 작업을 중지 합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator (|) to send the job in the $job variable to Stop-Job.</source>
          <target state="translated">파이프라인 연산자 (|)를 사용 하 여 $job 변수 작업을 Stop-job 보내려고 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>$job | Stop-Job</source>
          <target state="translated">$job | 중지 작업</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>DELETING A JOB</source>
          <target state="translated">작업 삭제</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>To delete a background job, use the Remove-Job cmdlet.</source>
          <target state="translated">백그라운드 작업을 삭제 하려면 Remove-job cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following command deletes the job in the $job variable.</source>
          <target state="translated">다음 명령은 $job 변수에서 작업을 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remove-Job -Job $job</source>
          <target state="translated">Remove-job-$job 작업</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>INVESTIGATING A FAILED JOB</source>
          <target state="translated">실패 한 작업을 조사 하는 중</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To find out why a job failed, use the Reason subproperty of the job object.</source>
          <target state="translated">한 이유를 확인 실패 한 작업, 작업 개체의 이유 하위 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following command starts a job without the required credentials.</source>
          <target state="translated">다음 명령은 필요한 자격 증명 없이 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>It saves the job object in the $job variable.</source>
          <target state="translated">작업 개체 $job 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>$job = Start-Job -ScriptBlock {New-Item -Path HKLM:\Software\MyCompany}</source>
          <target state="translated">$job Start-job ScriptBlock = {New-item-Path HKLM:\Software\MyCompany}</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Id   Name  PSJobTypeName State    HasMoreData  Location   Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>1    Job1  BackgroundJob Failed   False        localhost  New-Item -Path HKLM:\S...</source>
          <target state="translated">1 Job1 BackgroundJob 실패 False localhost New-item-Path HKLM:\S...</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following command uses the Reason property to find the error that caused the job to fail.</source>
          <target state="translated">다음 명령은 Reason 속성을 사용 하 여 작업에서 오류가 발생 한 오류를 찾습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>$job.ChildJobs[0].JobStateInfo.Reason</source>
          <target state="translated">$job 합니다. ChildJobs [0]입니다. JobStateInfo.Reason</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In this case, the job failed because the remote computer required explicit credentials to run the command.</source>
          <target state="translated">이 경우 원격 컴퓨터에서 명령을 실행 하려면 명시적 자격 증명 필요 하기 때문에 작업이 실패 했습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The value of the Reason property is:</source>
          <target state="translated">설명 속성의 값은입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Connecting to remote server failed with the following error message : Access is denied.</source>
          <target state="translated">다음 오류 메시지와 함께 원격 서버에 연결 하지 못했습니다.: 액세스가 거부 되었습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>about_Remote_Jobs about_Job_Details about_Remote about_PSSessions Start-Job Get-Job Receive-Job Stop-Job Wait-Job Remove-Job Invoke-Command</source>
          <target state="translated">about_Remote_Jobs about_Job_Details about_Remote about_PSSessions Start-job Get-job Receive-job Stop-job Wait-job Remove-job Invoke-command</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>