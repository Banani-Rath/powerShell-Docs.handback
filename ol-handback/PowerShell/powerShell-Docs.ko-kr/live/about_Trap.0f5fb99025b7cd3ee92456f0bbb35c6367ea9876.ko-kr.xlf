<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bccc531bc0eaf2af256954135b37392e07e0bd6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Trap.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06bd21232ffcdd187e01c1bc51a66e7b48d04d8c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d1f7251f91415e5add590eeb0192550614f2d8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Trap</source>
          <target state="translated">트랩에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes a keyword that handles a terminating error.</source>
          <target state="translated">종료 오류를 처리 하는 키워드에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">종료 오류는 문 실행에서을 중지합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script in the current pipeline.</source>
          <target state="translated">Windows PowerShell 어떤 식으로든에서 종료 오류를 처리 하지 않는 Windows PowerShell도 중지 하면 현재 파이프라인에서 함수 또는 스크립트를 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">C와 같은 다른 언어로<ph id="ph1">\#</ph>, 종료 오류가 예외 라고 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Trap keyword specifies a list of statements to run when a terminating error occurs.</source>
          <target state="translated">Trap 키워드 종료 오류가 발생할 때 실행 하는 문의 목록을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Trap statements handle the terminating errors and allow execution of the script or function to continue instead of stopping.</source>
          <target state="translated">트랩 문 종료 오류를 처리 및 스크립트 또는 함수를 중지 하지 않고 계속 실행을 허용 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Trap statement has the following syntax:</source>
          <target state="translated">Trap 문을 다음 구문이 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Trap statement includes a list of statements to run when a terminating error occurs.</source>
          <target state="translated">Trap 문을 종료 오류가 발생할 때 실행 하는 문 목록이 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Trap keyword can optionally specify an error type.</source>
          <target state="translated">Trap 키워드 오류 유형에 선택적으로 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">오류 유형에 대괄호가 필요합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A script or command can have multiple Trap statements.</source>
          <target state="translated">스크립트 또는 명령을 트랩 문을 여러 개 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Trap statements can appear anywhere in the script or command.</source>
          <target state="translated">트랩 문을 스크립트 또는 명령을 어디서 나 나타날 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>TRAPPING ALL TERMINATING ERRORS</source>
          <target state="translated">모든 종료 오류 트래핑</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When a terminating error occurs that is not handled in another way in a script or command,  Windows PowerShell checks for a Trap statement that handles the error.</source>
          <target state="translated">종료 오류가 발생 하는 스크립트 또는 명령을에서 다른 방식으로 처리 되지 않은 경우 Windows PowerShell에서 오류를 처리 하는 트랩 문을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a Trap statement is present,  Windows PowerShell continues running the script or command in the Trap statement.</source>
          <target state="translated">Trap 문을 있는 경우에 Windows PowerShell 계속 Trap 문의 스크립트 또는 명령을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example is a very simple Trap statement:</source>
          <target state="translated">다음 예제는 매우 간단한 Trap 문을:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This Trap statement traps any terminating error.</source>
          <target state="translated">이 트랩 문이 종료 되는 오류를 포착합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example is a function that contains this Trap statement:</source>
          <target state="translated">다음 예제에는이 트랩 문을 포함 하는 함수입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This function includes a nonsense string that causes an error.</source>
          <target state="translated">이 함수는 오류를 발생 시키는 의미 없는 문자열을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Running this function returns the following:</source>
          <target state="translated">이 함수를 실행 시 다음을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example includes a Trap statement that displays the error by using the $_ automatic variable:</source>
          <target state="translated">다음 예제에서는 $_ automatic 변수를 사용 하 여 오류를 표시 하는 트랩 문이 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Running this version of the function returns the following:</source>
          <target state="translated">이 버전의 함수를 실행 합니다. 다음을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Trap statements can also be more complex.</source>
          <target state="translated">트랩 문을 좀 더 복잡 한 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A Trap statement can include multiple conditions or function calls.</source>
          <target state="translated">여러 조건 또는 함수 호출에 Trap 문이 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It can log, test, or even run another program.</source>
          <target state="translated">로그, 테스트 또는 심지어 다른 프로그램을 실행 수 것입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>TRAPPING SPECIFIED TERMINATING ERRORS</source>
          <target state="translated">지정한 종료 오류 트래핑</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example is a Trap statement that traps the CommandNotFoundException error type:</source>
          <target state="translated">다음 예제에는 CommandNotFoundException 오류 유형을 포착 하는 트랩 문입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When a function or script encounters a string that does not match a known command, this Trap statement displays the "Command error trapped" string.</source>
          <target state="translated">함수 또는 스크립트는 알려진된 명령와 일치 하지 않는 문자열을 발견할 경우이 트랩 문은 "명령 오류 트래핑" 문자열을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After running any statements in the Trap statement list,  Windows PowerShell writes the error object to the error stream and then continues the script.</source>
          <target state="translated">트랩 문 목록에 있는 문이 실행 한 후 Windows PowerShell 오류 스트림에 오류 개체를 씁니다 하 고 스크립트를 계속 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the Microsoft .NET Framework exception types.</source>
          <target state="translated">Windows PowerShell에는 Microsoft.NET Framework 예외 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example specifies the System.Exception error type:</source>
          <target state="translated">다음 예제에서는 다음과 같은 오류 유형을 지정합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The CommandNotFoundException error type inherits from the System.Exception type.</source>
          <target state="translated">CommandNotFoundException 오류 형식은 System.Exception 형식에서 상속합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This statement traps an error that is created by an unknown command.</source>
          <target state="translated">이 문은 오류는 알 수 없는 명령으로 만들어진를 포착 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It also traps other error types.</source>
          <target state="translated">또한 다른 오류 유형을 포착합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can have more than one Trap statement in a script.</source>
          <target state="translated">스크립트에서 트랩 문을 여러 개 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each error can be trapped by only one Trap statement.</source>
          <target state="translated">각 오류 트랩 문을 하나만 여 포착할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If an error occurs, and more than one Trap statement is available,  Windows PowerShell uses the Trap statement with the most specific error type that matches the error.</source>
          <target state="translated">오류가 발생 하면 트랩 문을 여러 개 있는 경우 Windows PowerShell Trap 문을 사용 하 여 오류와 일치 하는 가장 구체적인 오류 유형으로 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following script example contains an error.</source>
          <target state="translated">다음 스크립트 예제에는 오류가 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The script includes a general Trap statement that traps any terminating error and a specific Trap statement that specifies the CommandNotFoundException type.</source>
          <target state="translated">스크립트는 종료 되는 오류를 트래핑 하는 일반 Trap 문 및 CommandNotFoundException 형식을 지정 하는 특정 Trap 문을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">이 스크립트를 실행 결과 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because  Windows PowerShell does not recognize "nonsenseString" as a cmdlet or other item, it returns a CommandNotFoundException error.</source>
          <target state="translated">Windows PowerShell cmdlet 또는 기타 항목으로 "nonsenseString"를 인식 하지 않으므로, CommandNotFoundException 오류를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This terminating error is trapped by the specific Trap statement.</source>
          <target state="translated">이 종료 되는 오류 특정 Trap 문을 의해 포착 됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following script example contains the same Trap statements with a different error:</source>
          <target state="translated">다음 스크립트 예제는 실패 하 게 동일한 트랩 문을 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">이 스크립트를 실행 결과 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The attempt to divide by zero does not create a CommandNotFoundException error.</source>
          <target state="translated">0으로 나누려 할 CommandNotFoundException 오류를 생성 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Instead, that error is trapped by the other Trap statement, which traps any terminating error.</source>
          <target state="translated">대신, 해당 오류는 다른 Trap 문을, 종료 되는 오류를 트래핑 하 여 트랩 됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>TRAPPING ERRORS AND SCOPE</source>
          <target state="translated">오류 트래핑 및 범위</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the same scope as the Trap statement, after running the Trap statements,  Windows PowerShell continues at the statement after the error.</source>
          <target state="translated">종료 오류 트랩 문을 실행 한 후 트랩 문과 동일한 범위에서 발생 하는 경우 Windows PowerShell에는 오류 발생 이후의 문에서 계속 됩니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the Trap statement is in a different scope from the error, execution continues at the next statement that is in the same scope as the Trap statement.</source>
          <target state="translated">Trap 문을 오류 로부터 다른 범위에 있으면 Trap 문와 같은 범위에 있는 다음 문에서 계속 실행이 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For instance, if an error occurs in a function, and the Trap statement is in the function, the script continues at the next statement.</source>
          <target state="translated">예를 들어, 함수에서 오류가 발생 하는 경우 Trap 문을 함수에는 스크립트는 다음 문에서 계속 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script contains an error and a Trap statement:</source>
          <target state="translated">예를 들어 다음 스크립트에 오류가 및 Trap 문을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function1 function produces the following result:</source>
          <target state="translated">스크립트의 뒷부분에 나오는 Function1 함수를 실행 결과 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The Trap statement in the function traps the error.</source>
          <target state="translated">Trap 문을 함수에서 오류를 트래핑 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>After displaying the message,  Windows PowerShell resumes running the function.</source>
          <target state="translated">메시지를 표시 한 후 Windows PowerShell 함수를 실행 중인 다시 시작 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that Function1 was completed.</source>
          <target state="translated">참고 Function1 완료 되었습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compare this with the following example, which has the same error and Trap statement.</source>
          <target state="translated">동일한 오류 및 Trap 문을 포함 하는 다음 예제와이 비교 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this example, the Trap statement occurs outside the function:</source>
          <target state="translated">이 예제에서는 Trap 문을 함수 외부에 발생합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function2 function produces the following result:</source>
          <target state="translated">스크립트의 뒷부분에 나오는 Function2 함수를 실행 결과 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this example, the "function2 was completed" command was not run.</source>
          <target state="translated">이 예제에서는 "function2 완료 되었습니다." 명령이 실행 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Although both terminating errors occur within a function, if the Trap statement is outside the function,  Windows PowerShell does not go back into the function after the Trap statement runs.</source>
          <target state="translated">Trap 문을 함수 범위를 벗어나는 경우 함수 내에서 모두 종료 오류가 발생 하지만 Windows PowerShell 돌아가지 않습니다 함수에 Trap 문을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>USING THE BREAK AND CONTINUE KEYWORDS</source>
          <target state="translated">나누기를 사용 하 여 마지막으로 편집한 키워드</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can use the Break and Continue keywords in a Trap statement to determine whether a script or command continues to run after a terminating error.</source>
          <target state="translated">나누기를 사용 하 여 수 있으며 종료 오류 후에 실행할 스크립트 또는 명령을 계속할지 여부를 확인 하려면 Trap 문에서 키워드를 계속할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you include a Break statement in a Trap statement list,  Windows PowerShell stops the function or script.</source>
          <target state="translated">Break 문을 트랩 문 목록에 포함 하면 Windows PowerShell에서 함수 또는 스크립트를 중지 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Break keyword in a Trap statement:</source>
          <target state="translated">다음 샘플 함수 Trap 문에서 Break 키워드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Because the Trap statement included the Break keyword, the function does not continue to run, and the "Function completed" line is not run.</source>
          <target state="translated">Trap 문을 Break 키워드를 포함 되므로 함수를 실행 하려면 계속 되지 않습니다 및 "함수 완료 됨" 줄이 실행 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you include a Continue statement in a Trap statement,  Windows PowerShell resumes after the statement that caused the error, just as it would without Break or Continue.</source>
          <target state="translated">Trap 문에서 Continue 문을 포함 하는 경우 중단, 계속 없는 것 처럼 Windows PowerShell 다시 오류를 발생 하는 문 다음 시작 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>With the Continue keyword, however,  Windows PowerShell does not write an error to the error stream.</source>
          <target state="translated">하지만 Continue 키워드를 사용 Windows PowerShell 쓰지 않습니다 오류가 오류 스트림으로.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Continue keyword in a Trap statement:</source>
          <target state="translated">다음 샘플 함수 Trap 문에서 Continue 키워드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The function resumes after the error is trapped, and the "Function completed" statement runs.</source>
          <target state="translated">함수는 오류를 트래핑 하 고 "함수가 완료" 문을 실행 한 후 다시 시작 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>No error is written to the error stream.</source>
          <target state="translated">오류가 발생 하지는 오류 스트림에 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>