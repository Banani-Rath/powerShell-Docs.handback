<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dsc\troubleshooting.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95e75bd95552a9bcfa41adee74ef5ceacb3ea33b</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-8d96cd8" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Troubleshooting DSC</source>
          <target state="translated">DSC 문제 해결</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Troubleshooting DSC</source>
          <target state="translated">DSC 문제 해결</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0</source>
          <target state="translated">적용 대상: Windows PowerShell 4.0, Windows PowerShell 5.0</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes methods for getting your Desired State Configuration (DSC) scripts to run without error.</source>
          <target state="translated">이 항목에서는 오류 없이 실행할 DSC(필요한 상태 구성) 스크립트를 가져오기 위한 메서드에 대해 설명합니다.</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By using logs effectively to track down errors, and understanding how to recycle the cache to see the immediate results of your resource changes, you’ll be able to troubleshoot DSC more effectively.</source>
          <target state="translated">로그를 효과적으로 사용하여 오류를 추적하고, 캐시를 재활용하여 리소스 변경에 대한 즉각적인 결과를 확인하는 방법을 이해하면 DSC 문제를 보다 효과적으로 해결할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These technics are discussed in two sections:</source>
          <target state="translated">이러한 기술은 두 섹션에서 설명합니다.</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>My script won’t run: <bpt id="p1">**</bpt>Using DSC logs to diagnose script errors<ept id="p1">**</ept></source>
          <target state="translated">스크립트가 실행되지 않습니다: <bpt id="p1">**</bpt>DSC 로그를 사용하여 스크립트 오류 진단<ept id="p1">**</ept></target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>My resources won’t update: <bpt id="p1">**</bpt>How to reset the cache<ept id="p1">**</ept></source>
          <target state="translated">리소스가 업데이트되지 않습니다: <bpt id="p1">**</bpt>캐시 재설정 방법<ept id="p1">**</ept></target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>My script won’t run: Using DSC logs to diagnose script errors</source>
          <target state="translated">스크립트가 실행되지 않습니다: DSC 로그를 사용하여 스크립트 오류 진단</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Like all Windows software, DSC records errors and events in <bpt id="p1">[</bpt>logs<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/aa363632.aspx)</ept> that can be viewed from the <bpt id="p2">[</bpt>Event Viewer<ept id="p2">](http://windows.microsoft.com/windows/what-information-event-logs-event-viewer)</ept>.</source>
          <target state="translated">모든 Windows 소프트웨어와 마찬가지로, DSC에서는 <bpt id="p2">[</bpt>이벤트 뷰어<ept id="p2">](http://windows.microsoft.com/windows/what-information-event-logs-event-viewer)</ept>에서 볼 수 있는 <bpt id="p1">[</bpt>로그<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/aa363632.aspx)</ept>에 오류와 이벤트를 기록합니다.</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Examining these logs can help you understand why a particular operation failed, and how to prevent failure in the future.</source>
          <target state="translated">이러한 로그를 검사하면 특정 작업이 실패한 이유와 나중에 오류를 방지하는 방법을 이해하는 데 도움이 될 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Writing configuration scripts can be tricky, so to make tracking errors easier as you author, use the DSC Log resource to track the progress of your configuration in the DSC Analytic event log.</source>
          <target state="translated">구성 스크립트 작성은 까다로울 수 있으므로, 작성자로서 오류 추적을 보다 쉽게 하려면, DSC 로그 리소스를 사용하여 분석 DSC 이벤트 로그에 있는 구성의 진행률을 추적합니다.</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Where are DSC event logs?</source>
          <target state="translated">DSC 이벤트 로그는 어디에 있나요?</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In Event Viewer, DSC events are in: <bpt id="p1">**</bpt>Applications and Services Logs/Microsoft/Windows/Desired State Configuration<ept id="p1">**</ept></source>
          <target state="translated">이벤트 뷰어에서 DSC 이벤트는 <bpt id="p1">**</bpt>응용 프로그램 및 서비스 로그/Microsoft/Windows/필요한 상태 구성<ept id="p1">**</ept>에 있습니다.</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The corresponding PowerShell cmdlet, <bpt id="p1">[</bpt>Get-WinEvent<ept id="p1">](https://technet.microsoft.com/library/hh849682.aspx)</ept>, can also be run to view the event logs:</source>
          <target state="translated">해당 PowerShell cmdlet인 <bpt id="p1">[</bpt>Get-WinEvent<ept id="p1">](https://technet.microsoft.com/library/hh849682.aspx)</ept>를 실행해도 이벤트 로그를 볼 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As shown above, DSC’s primary log name is <bpt id="p1">**</bpt>Microsoft-&gt;Windows-&gt;DSC<ept id="p1">**</ept> (other log names under Windows are not shown here for brevity).</source>
          <target state="translated">위와 같이 DSC의 기본 로그 이름은 <bpt id="p1">**</bpt>Microsoft-&gt;Windows-&gt;DSC<ept id="p1">**</ept>(Windows 아래의 다른 로그 이름은 간결하게 하기 위해 표시하지 않음)입니다.</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The primary name is appended to the channel name to create the complete log name.</source>
          <target state="translated">기본 이름을 채널 이름에 추가하여 전체 로그 이름이 만들어집니다.</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The DSC engine writes mainly into three types of logs: <bpt id="p1">[</bpt>Operational, Analytic, and Debug logs<ept id="p1">](https://technet.microsoft.com/library/cc722404.aspx)</ept>.</source>
          <target state="translated">DSC 엔진은 <bpt id="p1">[</bpt>작업, 분석 및 디버그 로그<ept id="p1">](https://technet.microsoft.com/library/cc722404.aspx)</ept>, 이렇게 주로 세 가지 유형의 로그에 기록합니다.</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Since the analytic and debug logs are turned off by default, you should enable them in Event Viewer.</source>
          <target state="translated">분석 및 디버그 로그는 기본적으로 해제 되어 있으므로, 이벤트 뷰어에서 설정해야 합니다.</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To do this, open Event Viewer by typing Show-EventLog in Windows PowerShell; or, click the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button, click <bpt id="p2">**</bpt>Control Panel<ept id="p2">**</ept>, click <bpt id="p3">**</bpt>Administrative Tools<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>Event Viewer<ept id="p4">**</ept>.</source>
          <target state="translated">이렇게 하려면 Windows PowerShell에서 Show-EventLog를 입력하여 이벤트 뷰어를 엽니다. 또는 <bpt id="p1">**</bpt>시작<ept id="p1">**</ept> 단추, <bpt id="p2">**</bpt>제어판<ept id="p2">**</ept>, <bpt id="p3">**</bpt>관리 도구<ept id="p3">**</ept>, <bpt id="p4">**</bpt>이벤트 뷰어<ept id="p4">**</ept>를 차례로 클릭합니다.</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>View<ept id="p1">**</ept> menu in Event viewer, click <bpt id="p2">**</bpt>Show Analytic and Debug Logs<ept id="p2">**</ept>.</source>
          <target state="translated">이벤트 뷰어의 <bpt id="p1">**</bpt>보기<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>분석 및 디버그 로그 표시<ept id="p2">**</ept>를 클릭합니다.</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The log name for the analytic channel is <bpt id="p1">**</bpt>Microsoft-Windows-Dsc/Analytic<ept id="p1">**</ept>, and the debug channel is <bpt id="p2">**</bpt>Microsoft-Windows-Dsc/Debug<ept id="p2">**</ept>.</source>
          <target state="translated">분석 채널에 대한 로그 이름은 <bpt id="p1">**</bpt>Microsoft-Windows-Dsc/Analytic<ept id="p1">**</ept>이고, 디버그 채널은 <bpt id="p2">**</bpt>Microsoft-Windows-Dsc/Debug<ept id="p2">**</ept>입니다.</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You could also use the <bpt id="p1">[</bpt>wevtutil<ept id="p1">](https://technet.microsoft.com/library/cc732848.aspx)</ept> utility to enable the logs, as shown in the following example.</source>
          <target state="translated">다음 예에서 보듯이, <bpt id="p1">[</bpt>wevtutil<ept id="p1">](https://technet.microsoft.com/library/cc732848.aspx)</ept> 유틸리티를 사용하여 로그를 사용할 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>What do DSC logs contain?</source>
          <target state="translated">DSC 로그에 들어 있는 내용은 무엇인가요?</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>DSC logs are split over the three log channels based on the importance of the message.</source>
          <target state="translated">DSC 로그는 메시지의 중요도에 따라 3개의 로그 채널로 분할됩니다.</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The operational log in DSC contains all error messages, and can be used to identify a problem.</source>
          <target state="translated">DSC의 작업 로그는 모든 오류 메시지를 포함하며, 문제를 파악하는 데 사용될 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The analytic log has a higher volume of events, and can identify where error(s) occurred.</source>
          <target state="translated">분석 로그는 더 많은 양의 이벤트를 포함하며, 오류가 발생한 위치를 식별할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This channel also contains verbose messages (if any).</source>
          <target state="translated">이 채널은 자세한 정보 메시지도 포함합니다(있는 경우).</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The debug log contains logs that can help you understand how the errors occurred.</source>
          <target state="translated">디버그 로그는 오류가 발생하는 방식을 이해하는 데 도움이 될 수 있는 로그를 포함합니다.</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>DSC event messages are structured such that every event message begins with a job ID that uniquely represents a DSC operation.</source>
          <target state="translated">DSC 이벤트 메시지는 모든 이벤트 메시지가 고유하게 DSC 작업을 나타내는 작업 ID로 시작되도록 구조화되어 있습니다.</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The example below attempts to obtain the message from the first event logged into the operational DSC log.</source>
          <target state="translated">아래 예제는 작업 DSC 로그에 로그되는 첫 번째 이벤트에서 메시지 가져오기를 시도합니다.</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>DSC events are logged in a particular structure that enables the user to aggregate events from one DSC job.</source>
          <target state="translated">DSC 이벤트는 사용자가 하나의 DSC 작업에서 이벤트를 집계할 수 있도록 해주는 특정 구조로 로그됩니다.</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The structure is as follows:</source>
          <target state="translated">구조는 다음과 같습니다.</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Job ID : <ph id="ph1">&lt;Guid&gt;</ph><ept id="p1">**</ept><ph id="ph2">
</ph><bpt id="p2">**</bpt><ph id="ph3">&lt;Event Message&gt;</ph><ept id="p2">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>작업 ID: <ph id="ph1">&lt;Guid&gt;</ph><ept id="p1">**</ept><ph id="ph2">
</ph><bpt id="p2">**</bpt><ph id="ph3">&lt;Event Message&gt;</ph><ept id="p2">**</ept></target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gathering events from a single DSC operation</source>
          <target state="translated">단일 DSC 작업에서 이벤트 수집</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>DSC event logs contain events generated by various DSC operations.</source>
          <target state="translated">DSC 이벤트 로그에는 다양한 DSC 작업에서 생성된 이벤트가 포함됩니다.</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, you’ll usually be concerned with the detail about just one particular operation.</source>
          <target state="translated">그러나 우리는 일반적으로 하나의 특정 작업에 대한 세부 정보에 관심이 있습니다.</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>All DSC logs can be grouped by the job ID property that is unique for every DSC operation.</source>
          <target state="translated">모든 DSC 로그는 각 DSC 작업에 대해 고유한 작업 ID 속성으로 그룹화할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The job ID is displayed as the first property value in all DSC events.</source>
          <target state="translated">작업 ID는 모든 DSC 이벤트에서 첫 번째 속성 값으로 표시됩니다.</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following steps explain how to accumulate all events in a grouped array structure.</source>
          <target state="translated">다음 단계에서는 그룹화된 배열 구조에서 모든 이벤트를 누적하는 방법을 설명합니다.</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Here, the variable <ph id="ph1">`$SeparateDscOperations`</ph> contains logs grouped by the job IDs.</source>
          <target state="translated">여기, 변수 <ph id="ph1">`$SeparateDscOperations`</ph>는 작업 ID로 그룹화된 로그를 포함합니다.</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each array element of this variable represents a group of events logged by a different DSC operation, allowing access to more information about the logs.</source>
          <target state="translated">이 변수의 각 배열 요소는 로그에 대한 추가 정보에 액세스할 수 있도록 다른 DSC 작업을 통해 로그되는 이벤트 그룹을 나타냅니다.</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can extract the data in the variable <ph id="ph1">`$SeparateDscOperations`</ph> using <bpt id="p1">[</bpt>Where-Object<ept id="p1">](https://technet.microsoft.com/library/ee177028.aspx)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>Where-Object<ept id="p1">](https://technet.microsoft.com/library/ee177028.aspx)</ept>를 사용하여 <ph id="ph1">`$SeparateDscOperations`</ph> 변수에서 데이터를 추출할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Following are five scenarios in which you might want to extract data for troubleshooting DSC:</source>
          <target state="translated">다음은 DSC 문제 해결을 위해 데이터를 추출해야 하는 다섯 개의 시나리오입니다.</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>1: Operations failures</source>
          <target state="translated">1: 작업 오류</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All events have <bpt id="p1">[</bpt>severity levels<ept id="p1">](https://msdn.microsoft.com/library/dd996917(v=vs.85))</ept>.</source>
          <target state="translated">모든 이벤트에는 <bpt id="p1">[</bpt>심각도<ept id="p1">](https://msdn.microsoft.com/library/dd996917(v=vs.85))</ept>가 있습니다.</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This information can be used to identify the error events:</source>
          <target state="translated">오류 이벤트를 식별하는 데 이 정보를 사용할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>2: Details of operations run in the last half hour</source>
          <target state="translated">2: 마지막 30분 안에 실행되는 작업의 세부 정보</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>, a property of every Windows event, states the time the event was created.</source>
          <target state="translated">모든 Windows 이벤트의 속성으로, 이벤트가 만들어진 시간을 기술합니다.</target>         
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Comparing this property with a particular date/time object can be used to filter all events:</source>
          <target state="translated">이 속성을 특정 날짜/시간 개체와 비교하여 모든 이벤트를 필터링할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>3: Messages from the latest operation</source>
          <target state="translated">3: 최신 작업의 메시지</target>         
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The latest operation is stored in the first index of the array group <ph id="ph1">`$SeparateDscOperations`</ph>.</source>
          <target state="translated">최신 작업은 배열 그룹 <ph id="ph1">`$SeparateDscOperations`</ph>의 첫 번째 인덱스에 저장됩니다.</target>         
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Querying the group’s messages for index 0 returns all messages for the latest operation:</source>
          <target state="translated">인덱스 0에 대한 그룹의 메시지를 쿼리하면 최신 작업에 대한 모든 메시지가 반환됩니다.</target>         
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>4: Error messages logged for recent failed operations</source>
          <target state="translated">4: 최근 실패한 작업에 대해 로그된 오류 메시지</target>         
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>contains a set of events for the latest operation.</source>
          <target state="translated">최신 작업에 대한 이벤트 집합이 포함되어 있습니다.</target>         
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`Where-Object`</ph> cmdlet to filter the events based on their level display name.</source>
          <target state="translated">수준 표시 이름에 따라 이벤트를 필터링하려면 <ph id="ph1">`Where-Object`</ph> cmdlet을 실행하세요.</target>         
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Results are stored in the <ph id="ph1">`$myFailedEvent`</ph> variable, which can be further dissected to get the event message:</source>
          <target state="translated">결과는 이벤트 메시지를 가져오기 위해 추가적으로 분석할 수 있는 <ph id="ph1">`$myFailedEvent`</ph> 변수에 저장됩니다.</target>         
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>5: All events generated for a particular job ID.</source>
          <target state="translated">5: 특정 작업 ID에 대해 생성된 모든 이벤트</target>         
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>is an array of groups, each of which has the name as the unique job ID.</source>
          <target state="translated">고유한 작업 ID로서 각각 이름이 있는 그룹의 배열입니다.</target>         
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>By running the <ph id="ph1">`Where-Object`</ph> cmdlet, you can extract those groups of events that have a particular job ID:</source>
          <target state="translated"><ph id="ph1">`Where-Object`</ph> cmdlet을 실행하면 특정 작업 ID를 가지고 있는 이벤트들의 그룹을 추출할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Using xDscDiagnostics to analyze DSC logs</source>
          <target state="translated">xDscDiagnostics를 사용하여 DSC 로그 분석</target>         
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xDscDiagnostics<ept id="p1">**</ept> is a PowerShell module that consists of two simple functions that can help analyze DSC failures on your machine: <ph id="ph1">`Get-xDscOperation`</ph> and <ph id="ph2">`Trace-xDscOperation`</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>xDscDiagnostics<ept id="p1">**</ept>는 컴퓨터에서 DSC 실패를 분석하는 데 도움이 되는 두 개의 간단한 함수 <ph id="ph1">`Get-xDscOperation`</ph>과 <ph id="ph2">`Trace-xDscOperation`</ph>으로 구성된 PowerShell 모듈입니다.</target>         
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These functions can help you identify all local events from past DSC operations, or DSC events on remote computers (with valid credentials).</source>
          <target state="translated">이 함수들은 지난 DSC 작업의 모든 로컬 이벤트나 원격 컴퓨터의 DSC 이벤트(유효한 자격 증명 사용)를 식별하는 데 유용할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Here, the term DSC operation is used to define a single unique DSC execution from its start to its end.</source>
          <target state="translated">여기에서 DSC 작업이라는 용어는 시작부터 끝까지 하나의 고유한 DSC 실행을 정의하는 데 사용됩니다.</target>         
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Test-DscConfiguration`</ph> would be a separate DSC operation.</source>
          <target state="translated">예를 들어 <ph id="ph1">`Test-DscConfiguration`</ph>은 별도의 DSC 작업입니다.</target>         
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Similarly, every other cmdlet in DSC (such as <ph id="ph1">`Get-DscConfiguration`</ph>, <ph id="ph2">`Start-DscConfiguration`</ph>, etc.) could each be identified as separate DSC operations.</source>
          <target state="translated">마찬가지로, DSC에 있는 모든 다른 cmdlet(예: <ph id="ph1">`Get-DscConfiguration`</ph>, <ph id="ph2">`Start-DscConfiguration`</ph> 등)은 각각 별도의 DSC 작업으로 식별될 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The two functions are explained in <bpt id="p1">[</bpt>xDscDiagnostics<ept id="p1">](https://powershellgallery.com/packages/xDscDiagnostics)</ept> PowerShell Module (DSC Resource Kit) and in more detail below.</source>
          <target state="translated">두 함수에 대해서는 <bpt id="p1">[</bpt>xDscDiagnostics<ept id="p1">](https://powershellgallery.com/packages/xDscDiagnostics)</ept> PowerShell 모듈(DSC Resource Kit)과 아래에 자세히 설명되어 있습니다.</target>         
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Help is available by running <ph id="ph1">`Get-Help &lt;cmdlet name&gt;`</ph>.</source>
          <target state="translated"><ph id="ph1">`Get-Help &lt;cmdlet name&gt;`</ph>을 실행하여 도움말을 사용할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Get-xDscOperation</source>
          <target state="translated">Get-xDscOperation</target>         
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This function lets you find the results of the DSC operations that run on one or multiple computers, and returns an object that contains the collection of events produced by each DSC operation.</source>
          <target state="translated">이 함수는 하나 또는 여러 컴퓨터에서 실행되는 DSC 작업의 결과를 찾을 수 있도록 해주며, 각 DSC 작업에서 생성된 이벤트의 컬렉션을 포함하는 개체를 반환합니다.</target>         
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, in the following output, three commands were run.</source>
          <target state="translated">예를 들어 다음의 출력에서는 세 가지 명령이 실행되었습니다.</target>         
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The first one passed, and the other two failed.</source>
          <target state="translated">첫 번째 명령은 통과했고, 다른 두 개는 실패했습니다.</target>         
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>These results are summarized in the output of <ph id="ph1">`Get-xDscOperation`</ph>.</source>
          <target state="translated">이 결과는 <ph id="ph1">`Get-xDscOperation`</ph>의 출력에 요약되어 있습니다.</target>         
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>TODO: Replace this image that shows Get-xDscOperation output</source>
          <target state="translated">TODO: Get-xDscOperation 출력을 보여 주는 이 이미지 교체</target>         
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">매개 변수</target>         
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Newest<ept id="p1">**</ept>: Accepts an integer value to indicate the number of operations to be displayed.</source>
          <target state="translated"><bpt id="p1">**</bpt>Newest<ept id="p1">**</ept>: 표시할 작업의 수를 나타내는 정수 값을 받아들입니다.</target>         
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>By default, it returns 10 newest operations.</source>
          <target state="translated">기본적으로 10개의 최신 작업을 반환합니다.</target>         
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For instance, TODO: Show Get-xDscOperation -Newest 5</source>
          <target state="translated">예를 들면 다음과 같습니다. TODO: Get-xDscOperation -Newest 5 표시</target>         
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept>: Parameter that accepts an array of strings, each containing the name of a computer from where you’d like to collect DSC event log data.</source>
          <target state="translated"><bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept>: 각각 DSC 이벤트 로그 데이터를 수집하려는 컴퓨터의 이름을 포함하는 문자열의 배열을 받는 매개 변수입니다.</target>         
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>By default, it collects data from the local machine.</source>
          <target state="translated">기본적으로 로컬 컴퓨터에서 데이터를 수집합니다.</target>         
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To enable this feature, you must run the following command in the remote machines, in elevated mode so that the will allow collection of events</source>
          <target state="translated">이 기능을 사용하려면 이벤트 컬렉션을 허용하도록 승격된 모드로, 원격 컴퓨터에서 다음 명령을 실행해야 합니다.</target>         
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Credential<ept id="p1">**</ept>: Parameter that is of type PSCredential, which can help access the computers specified in the ComputerName parameter.</source>
          <target state="translated"><bpt id="p1">**</bpt>Credential<ept id="p1">**</ept>: ComputerName 매개 변수에 지정된 컴퓨터에 액세스하는 데 도움이 될 수 있는 PSCredential 유형의 매개 변수입니다.</target>         
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Returned object</source>
          <target state="translated">반환된 개체</target>         
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The cmdlet returns an array of objects each of type <bpt id="p1">**</bpt>Microsoft.PowerShell.xDscDiagnostics.GroupedEvents<ept id="p1">**</ept>.</source>
          <target state="translated">cmdlet은 개체의 배열을 반환하며, 각 형식은 <bpt id="p1">**</bpt>Microsoft.PowerShell.xDscDiagnostics.GroupedEvents<ept id="p1">**</ept>입니다.</target>         
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Each object in this array pertains to a different DSC operation.</source>
          <target state="translated">이 배열에 있는 각 개체는 다른 DSC 작업에 적용됩니다.</target>         
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The default display for this object has the following properties</source>
          <target state="translated">이 개체에 대한 기본 표시에는 다음 속성이 있습니다.</target>         
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SequenceID<ept id="p1">**</ept>: Specifies the incremental number assigned to the DSC operation based on time.</source>
          <target state="translated"><bpt id="p1">**</bpt>SequenceID<ept id="p1">**</ept>: 시간에 따라 DSC 작업에 할당된 증가하는 번호를 지정합니다.</target>         
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, the last executed operation would have SequenceID as 1, the second to last DSC operation would have SequenceID of 2, and so on.</source>
          <target state="translated">예를 들어, 마지막으로 실행된 작업은 1이라는 SequenceID를 갖고, 마지막 DSC 작업에서 두 번째 작업은 2라는 SequenceID를 갖는 방식으로 지정합니다.</target>         
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This number is another identifier for each object in the returned array.</source>
          <target state="translated">이 번호는 반환된 배열에 있는 각 개체에 대한 또 다른 식별자입니다.</target>         
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TimeCreated<ept id="p1">**</ept>: A DateTime value that indicates when the DSC operation began.</source>
          <target state="translated"><bpt id="p1">**</bpt>TimeCreated<ept id="p1">**</ept>: DSC 작업이 시작되는 시간을 나타내는 DateTime 값입니다.</target>         
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept>: The computer name from where the results are aggregated.</source>
          <target state="translated"><bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept>: 결과가 집계되는 컴퓨터 이름입니다.</target>         
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Result<ept id="p1">**</ept>: A string with value <bpt id="p2">**</bpt>Failure<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Success<ept id="p3">**</ept> that indicates if that DSC operation had an error or not, respectively.</source>
          <target state="translated"><bpt id="p1">**</bpt>Result<ept id="p1">**</ept>: 각각 DSC 작업에 오류가 발생했는지 여부를 나타내며, 값이 <bpt id="p2">**</bpt>Failure<ept id="p2">**</ept> 또는 <bpt id="p3">**</bpt>Success<ept id="p3">**</ept>인 문자열입니다.</target>         
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AllEvents<ept id="p1">**</ept>: An object that represents a collection of events produced by the DSC operation.</source>
          <target state="translated"><bpt id="p1">**</bpt>AllEvents<ept id="p1">**</ept>: DSC 작업에 의해 생성된 이벤트의 컬렉션을 나타내는 개체입니다.</target>         
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, the following output shows results of the last operation from multiple computers:   TODO: Replace picture for Get-xDscOperation to display remote computer logs</source>
          <target state="translated">예를 들어 다음의 출력은 여러 컴퓨터의 마지막 작업에 대한 결과를 보여 줍니다. TODO: 원격 컴퓨터 로그 표시를 위해 Get-xDscOperation에 대한 그림 바꾸기</target>         
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Trace-xDscOperation</source>
          <target state="translated">Trace-xDscOperation</target>         
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This cmdlet returns an object containing a collection of events, their event types, and the message output generated from a particular DSC operation.</source>
          <target state="translated">이 cmdlet은 이벤트의 컬렉션, 해당 이벤트 형식 및 특정 DSC 작업으로 생성된 메시지 출력을 포함하는 개체를 반환합니다.</target>         
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Typically, when you find a failure in any of the operations using <ph id="ph1">`Get-xDscOperation`</ph>, you would trace that operation to find out which of the events caused a failure.</source>
          <target state="translated">일반적으로 <ph id="ph1">`Get-xDscOperation`</ph>을 사용하는 작업 중에 오류가 발생하면, 오류를 초래한 이벤트를 찾기 위해 해당 작업을 추적하게 됩니다.</target>         
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">매개 변수</target>         
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SequenceID<ept id="p1">**</ept>: This is the integer value assigned to any operation, pertaining to a specific computer.</source>
          <target state="translated"><bpt id="p1">**</bpt>SequenceID<ept id="p1">**</ept>: 특정 컴퓨터에 관련된 모든 작업에 할당된 정수 값입니다.</target>         
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>By specifying a sequence ID of say, 4, the trace for the DSC operation that was 4th from the last will be output</source>
          <target state="translated">예를 들어 4라는 시퀀스 ID를 지정하면, 마지막에서 4번째였던 DSC 작업에 대한 추적이 출력됩니다.</target>         
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Trace-xDscOperation with sequence ID specified</source>
          <target state="translated">시퀀스 ID가 지정된 Trace-xDscOperation</target>         
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>JobID<ept id="p1">**</ept>: This is the GUID value assigned by LCM xDscOperation to uniquely identify an operation.</source>
          <target state="translated"><bpt id="p1">**</bpt>JobID<ept id="p1">**</ept>: 작업을 고유하게 식별하기 위해 LCM xDscOperation으로 할당한 GUID 값입니다.</target>         
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When a JobID is specified, the trace of the corresponding DSC operation is output.</source>
          <target state="translated">JobID를 지정하면 해당하는 DSC 작업에 대한 추적이 출력됩니다.</target>         
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>TODO: Replace picture for Trace-xDscOperation taking JobID as a parameter</source>
          <target state="translated">TODO: 매개 변수로서 JobID를 사용하는 Trace-xDscOperation에 대한 그림 바꾸기</target>         
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Credential<ept id="p2">**</ept>: These parameters allow the trace to be collected from remote computers:</source>
          <target state="translated"><bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept> 및 <bpt id="p2">**</bpt>Credential<ept id="p2">**</ept>: 이 매개 변수들은 원격 컴퓨터에서 추적을 수집하는 것을 허용합니다.</target>         
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>TODO: Replace picture for Trace-xDscOperation run on a different computer</source>
          <target state="translated">TODO: 다른 컴퓨터에서 실행되는 Trace-xDscOperation에 대한 그림 바꾸기</target>         
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Note that, since <ph id="ph1">`Trace-xDscOperation`</ph> aggregates events from the Analytic, Debug, and Operational logs, it will prompt you to enable these logs as described above.</source>
          <target state="translated"><ph id="ph1">`Trace-xDscOperation`</ph>에서는 분석, 디버그 및 작업 로그에서 이벤트를 집계하므로, 위에서 설명한 대로 이러한 로그를 사용하도록 설정하라는 메시지가 표시됩니다.</target>         
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returned object</source>
          <target state="translated">반환된 개체</target>         
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The cmdlet returns an array of objects, each of type <ph id="ph1">`Microsoft.PowerShell.xDscDiagnostics.TraceOutput`</ph>.</source>
          <target state="translated">이 cmdlet은 개체의 배열을 반환하며, 각각 <ph id="ph1">`Microsoft.PowerShell.xDscDiagnostics.TraceOutput`</ph> 형식입니다.</target>         
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Each object in this array contains the following fields:</source>
          <target state="translated">이 배열에 있는 각 개체에는 다음 필드가 포함됩니다.</target>         
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept>: The name of the computer from where the logs are being collected.</source>
          <target state="translated"><bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept>: 로그를 수집하는 컴퓨터의 이름입니다.</target>         
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EventType<ept id="p1">**</ept>: This is an enumerator type field that contains information on the type of event.</source>
          <target state="translated"><bpt id="p1">**</bpt>EventType<ept id="p1">**</ept>: 이벤트의 형식에 대한 정보를 포함하는 열거자 유형 필드입니다.</target>         
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>It could be any of the following:</source>
          <target state="translated">다음 중 하나일 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Operational<ept id="p1">*</ept>: The event is from the operational log.</source>
          <target state="translated"><bpt id="p1">*</bpt>Operational<ept id="p1">*</ept>: 작업 로그의 이벤트입니다.</target>         
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Analytic<ept id="p1">*</ept>: The event is from the analytic log.</source>
          <target state="translated"><bpt id="p1">*</bpt>Analytic<ept id="p1">*</ept>: 분석 로그의 이벤트입니다.</target>         
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Debug<ept id="p1">*</ept>: The event is from the debug log.</source>
          <target state="translated"><bpt id="p1">*</bpt>Debug<ept id="p1">*</ept>: 디버그 로그의 이벤트입니다.</target>         
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Verbose<ept id="p1">*</ept>: Events output as verbose messages during execution.</source>
          <target state="translated"><bpt id="p1">*</bpt>Verbose<ept id="p1">*</ept>: 실행하는 동안 이벤트가 자세한 정보 메시지로 출력됩니다.</target>         
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The verbose messages make it easy to identify the sequence of events that are published.</source>
          <target state="translated">자세한 정보 메시지를 사용하면 게시된 이벤트의 순서를 식별하기가 쉽습니다.</target>         
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Error<ept id="p1">*</ept>: Error events.</source>
          <target state="translated"><bpt id="p1">*</bpt>Error<ept id="p1">*</ept>: 오류 이벤트입니다.</target>         
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>By looking for the error events, you can usually quickly find the reason for the failure.</source>
          <target state="translated">오류 이벤트를 검색하면 실패의 원인을 일반적으로 신속하게 찾을 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TimeCreated<ept id="p1">**</ept>: A DateTime value indicating when the event was logged by DSC.</source>
          <target state="translated"><bpt id="p1">**</bpt>TimeCreated<ept id="p1">**</ept>: 이벤트가 DSC에 의해 로그된 시간을 나타내는 DateTime 값입니다.</target>         
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Message<ept id="p1">**</ept>: The message that was logged by DSC into the event logs.</source>
          <target state="translated"><bpt id="p1">**</bpt>Message<ept id="p1">**</ept>: 이벤트 로그에 DSC에 의해 기록된 메시지입니다.</target>         
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Following are fields in this object that can be used for more information about the event, but are not displayed by default:</source>
          <target state="translated">다음은 이 개체에 있는 필드로서, 이벤트에 대한 추가 정보가 필요할 때 사용할 수는 있지만 기본적으로 표시되지 않는 필드입니다.</target>         
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>JobID<ept id="p1">**</ept>: The job ID (GUID format) specific to that DSC operation.</source>
          <target state="translated"><bpt id="p1">**</bpt>JobID<ept id="p1">**</ept>: 해당 DSC 작업에 대한 작업 ID(GUID 형식)입니다.</target>         
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SequenceID<ept id="p1">**</ept>: The SequenceID unique to that DSC operation in that computer.</source>
          <target state="translated"><bpt id="p1">**</bpt>SequenceID<ept id="p1">**</ept>: 해당 컴퓨터의 해당 DSC 작업에 고유한 SequenceID입니다.</target>         
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Event<ept id="p1">**</ept>: This is the actual event logged by DSC, of type <ph id="ph1">`System.Diagnostics.Eventing.Reader.EventLogRecord`</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>이벤트<ept id="p1">**</ept>: <ph id="ph1">`System.Diagnostics.Eventing.Reader.EventLogRecord`</ph> 형식의, DSC에 의해 로그된 실제 이벤트입니다.</target>         
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This can also the obtained by running the cmdlet <ph id="ph1">`Get-WinEvent`</ph>.</source>
          <target state="translated"><ph id="ph1">`Get-WinEvent`</ph> cmdlet을 실행하여 얻을 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It contains more information, such as the task, eventID, and level of the event.</source>
          <target state="translated">작업, eventID, 이벤트의 수준 등의 자세한 정보를 포함합니다.</target>         
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Alternately, you can gather information on the events by saving the output of <ph id="ph1">`Trace-xDscOperation`</ph> into a variable.</source>
          <target state="translated">또는, <ph id="ph1">`Trace-xDscOperation`</ph>의 출력을 변수에 저장하여 이벤트에 대한 정보를 수집할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can use the following command to display all the events for a particular DSC operation:</source>
          <target state="translated">다음 명령을 사용하여 특정 DSC 작업에 대한 모든 이벤트를 표시할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This will display the same results as the <ph id="ph1">`Get-WinEvent`</ph> cmdlet, such as in the output below:   TODO: What output?</source>
          <target state="translated">이렇게 하면 아래 출력과 같이 <ph id="ph1">`Get-WinEvent`</ph> cmdlet과 동일한 결과가 표시됩니다. TODO: 어떤 출력인가요?</target>         
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Ideally, you would first use <ph id="ph1">`Get-xDscOperation`</ph> to list out the last few DSC configuration runs on your machines.</source>
          <target state="translated">먼저 <ph id="ph1">`Get-xDscOperation`</ph>을 사용하여 컴퓨터에서의 마지막 몇 개 DSC 구성 실행을 나열하는 것이 좋습니다.</target>         
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Following this, you can examine any single operation (using its SequenceID or JobID) with <ph id="ph1">`Trace-xDscOperation`</ph> to discover what it did behind the scenes.</source>
          <target state="translated">그런 다음에 <ph id="ph1">`Trace-xDscOperation`</ph>으로 단일 작업(해당 SequenceID 또는 JobID 사용)을 검사하여 백그라운드에서 수행한 작업을 검색할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>My resources won’t update: How to reset the cache</source>
          <target state="translated">리소스가 업데이트되지 않습니다: 캐시 재설정 방법</target>         
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The DSC engine caches resources implemented as a PowerShell module for efficiency purposes.</source>
          <target state="translated">DSC 엔진은 효율성 향상을 위해 PowerShell 모듈로서 구현하는 리소스를 캐시합니다.</target>         
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>However, this can cause problems when you are authoring a resource and testing it simultaneously because DSC will load the cached version until the process is restarted.</source>
          <target state="translated">그러나 이렇게 하면 프로세스가 다시 시작되기 전까지 DSC가 캐시된 버전을 로드하게 되므로 리소스를 작성하고 동시에 테스트하는 경우 문제가 발생할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The only way to make DSC load the newer version is to explicitly kill the process hosting the DSC engine.</source>
          <target state="translated">DSC가 최신 버전을 로드하도록 하는 유일한 방법은 DSC 엔진을 호스팅하는 프로세스를 명시적으로 종료하는 것입니다.</target>         
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Similarly, when you run <ph id="ph1">`Start-DscConfiguration`</ph>, after adding and modifying a custom resource, the modification may not execute unless, or until, the computer is rebooted.</source>
          <target state="translated">마찬가지로, <ph id="ph1">`Start-DscConfiguration`</ph>을 실행하는 경우, 사용자 지정 리소스를 추가하고 수정하면 컴퓨터를 다시 부팅하지 않으면, 또는 다시 부팅하기 전까지는 수정이 실행되지 않을 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This is because DSC runs in the WMI Provider Host Process (WmiPrvSE), and usually, there are many instances of WmiPrvSE running at once.</source>
          <target state="translated">이것은 DSC가 WMI 공급자 호스트 프로세스(WmiPrvSE)에서 실행되고, 일반적으로 한 번에 실행되는 WmiPrvSE 인스턴스가 많기 때문입니다.</target>         
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>When you reboot, the host process is restarted and the cache is cleared.</source>
          <target state="translated">컴퓨터를 다시 부팅하면 호스트 프로세스가 다시 시작되고 캐시가 지워집니다.</target>         
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>To successfully recycle the configuration and clear the cache without rebooting, you must stop and then restart the host process.</source>
          <target state="translated">다시 부팅하지 않고도 구성을 성공적으로 재활용하고, 캐시를 지우려면, 호스트 프로세스를 중지했다가 다시 시작해야 합니다.</target>         
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This can be done on a per instance basis, whereby you identify the process, stop it, and restart it.</source>
          <target state="translated">이 작업은 인스턴스별로 수행할 수 있으며, 그에 따라 프로세스를 식별, 중지 및 다시 시작할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Or, you can use <ph id="ph1">`DebugMode`</ph>, as demonstrated below, to reload the PowerShell DSC resource.</source>
          <target state="translated">또는 아래 설명된 대로 <ph id="ph1">`DebugMode`</ph>를 사용하여 PowerShell DSC 리소스를 다시 로드할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>To identify which process is hosting the DSC engine and stop it on a per instance basis, you can list the process ID of the WmiPrvSE which is hosting the DSC engine.</source>
          <target state="translated">인스턴스별로 DSC 엔진을 호스트하고 중지하는 프로세스를 식별하기 위해 DSC 엔진을 호스팅하는 WmiPrvSE의 프로세스 ID를 나열할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Then, to update the provider, stop the WmiPrvSE process using the commands below, and then run <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> again.</source>
          <target state="translated">그런 다음 공급자를 업데이트하려면, 아래 명령을 사용하여 WmiPrvSE 프로세스를 중지한 다음, <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept>을 다시 실행합니다.</target>         
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Using DebugMode</source>
          <target state="translated">DebugMode 사용</target>         
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You can configure the DSC Local Configuration Manager (LCM) to use <ph id="ph1">`DebugMode`</ph> to always clear the cache when the host process is restarted.</source>
          <target state="translated">호스트 프로세스를 다시 시작할 때 항상 캐시가 지워지도록 하기 위해 <ph id="ph1">`DebugMode`</ph>를 사용하도록 DSC LCM(로컬 구성 관리자)를 구성할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>When set to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, it causes the engine to always reload the PowerShell DSC resource.</source>
          <target state="translated"><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>로 설정하면, 엔진이 항상 PowerShell DSC 리소스를 다시 로드합니다.</target>         
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Once you are done writing your resource, you can set it back to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> and the engine will revert to its behavior of caching the modules.</source>
          <target state="translated">리소스를 작성을 완료하면, 다시 <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>로 설정할 수 있으며, 엔진은 모듈을 캐싱하는 동작으로 되돌아갑니다.</target>         
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Following is a demonstration to show how <ph id="ph1">`DebugMode`</ph> can automatically refresh the cache.</source>
          <target state="translated">다음은 <ph id="ph1">`DebugMode`</ph>가 캐시를 자동으로 새로 고칠 수 있는 방법을 보여 주는 데모입니다.</target>         
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>First, let’s look at the default configuration:</source>
          <target state="translated">우선, 기본 구성을 살펴보겠습니다.</target>         
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You can see that <ph id="ph1">`DebugMode`</ph> is set to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
          <target state="translated"><ph id="ph1">`DebugMode`</ph>가 <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>로 설정된 것을 확인할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>To set up the <ph id="ph1">`DebugMode`</ph> demonstration, use the following PowerShell resource:</source>
          <target state="translated"><ph id="ph1">`DebugMode`</ph> 데모를 설정하려면 다음 PowerShell 리소스를 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Now, author a configuration using the above resource called <ph id="ph1">`TestProviderDebugMode`</ph>:</source>
          <target state="translated">이제, <ph id="ph1">`TestProviderDebugMode`</ph>라는 위의 리소스를 사용하여 구성을 작성합니다.</target>         
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You will see that the contents of file: “<bpt id="p1">**</bpt>$env:SystemDrive\OutputFromTestProviderDebugMode.txt<ept id="p1">**</ept>” is <bpt id="p2">**</bpt>1<ept id="p2">**</ept>.</source>
          <target state="translated">파일 "<bpt id="p1">**</bpt>$env:SystemDrive\OutputFromTestProviderDebugMode.txt<ept id="p1">**</ept>"의 내용이 <bpt id="p2">**</bpt>1<ept id="p2">**</ept>인 것을 확인하게 될 것입니다.</target>         
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Now, update the provider code using the following script:</source>
          <target state="translated">이제, 다음 스크립트를 사용하여 공급자 코드를 업데이트합니다.</target>         
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>This script generates a random number and updates the provider code accordingly.</source>
          <target state="translated">이 스크립트는 난수를 생성하고 그에 따라 공급자 코드를 업데이트합니다.</target>         
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`DebugMode`</ph> set to false, the contents of the file “<bpt id="p1">**</bpt>$env:SystemDrive\OutputFromTestProviderDebugMode.txt<ept id="p1">**</ept>” are never changed.</source>
          <target state="translated"><ph id="ph1">`DebugMode`</ph>가 false로 설정되면 파일 "<bpt id="p1">**</bpt>$env:SystemDrive\OutputFromTestProviderDebugMode.txt<ept id="p1">**</ept>"의 내용은 결코 변경되지 않습니다.</target>         
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Now, set <ph id="ph1">`DebugMode`</ph> to <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> in your configuration script:</source>
          <target state="translated">이제, 구성 스크립트에서 <ph id="ph1">`DebugMode`</ph>를 <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>로 설정합니다.</target>         
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>When you run the above script again, you will see that the content of the file is different every time.</source>
          <target state="translated">다시 위의 스크립트를 실행하면 파일의 내용이 매번 다른 것을 보게 됩니다.</target>         
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>(You can run <ph id="ph1">`Get-DscConfiguration`</ph> to check it).</source>
          <target state="translated">(<ph id="ph1">`Get-DscConfiguration`</ph>를 실행하여 확인할 수 있습니다.)</target>         
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Below is the result of two additional runs (your results may be different when you run the script):</source>
          <target state="translated">다음은 두 번의 추가 실행에 대한 결과입니다(결과는 스크립트를 실행하는 경우 다를 수 있음).</target>         
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>         
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">참조</target>         
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>DSC Log Resource</source>
          <target state="translated">DSC 로그 리소스</target>         
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="translated">개념</target>         
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Build Custom Windows PowerShell Desired State Configuration Resources</source>
          <target state="translated">사용자 지정 Windows PowerShell 필요한 상태 구성 리소스 빌드</target>         
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Other Resources</source>
          <target state="translated">관련 자료</target>         
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Windows PowerShell Desired State Configuration Cmdlets</source>
          <target state="translated">Windows PowerShell Desired State Configuration Cmdlets(Windows PowerShell 필요한 상태 구성 Cmdlet)</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>