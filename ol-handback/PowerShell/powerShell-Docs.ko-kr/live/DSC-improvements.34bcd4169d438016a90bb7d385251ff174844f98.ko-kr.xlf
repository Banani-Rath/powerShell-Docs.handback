<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a76c9ae7117e71833955a67ad8ec06fa7d0ed419</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wmf\5.1\DSC-improvements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c309b7ba3c10f08f8a576fae4e2497966cde2d4</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>DSC Improvements in WMF 5.1 (Preview)</source>
          <target state="translated">WMF 5.1(Preview)의 향상된 DSC</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>PowerShell, DSC, WMF</source>
          <target state="translated">PowerShell, DSC, WMF</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Improvements in Desired State Configuration (DSC) in WMF 5.1</source>
          <target state="translated">WMF 5.1에서 DSC(필요한 상태 구성)의 개선 사항</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>DSC class resource improvements</source>
          <target state="translated">향상된 DSC 클래스 리소스</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, we have fixed the following known issues:</source>
          <target state="translated">WMF 5.1에서 다음과 같은 알려진 문제를 해결했습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Get-DscConfiguration may return empty values (null) or errors if a complex/hash table type is returned by Get() function of a class-based DSC resource.</source>
          <target state="translated">클래스 기반 DSC 리소스의 Get() 함수에서 복합/해시 테이블 형식을 반환하는 경우 Get-DscConfiguration에서 빈 값(null) 또는 오류를 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Get-DscConfiguration returns error if RunAs credential is used in DSC configuration.</source>
          <target state="translated">DSC 구성에 RunAs 자격 증명이 사용된 경우 Get-DscConfiguration에서 오류를 반환합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Class-based resource cannot be used in a composite configuration.</source>
          <target state="translated">복합 구성에서는 클래스 기반 리소스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Start-DscConfiguration hangs if class-based resource has a property of its own type.</source>
          <target state="translated">클래스 기반 리소스에 자체 형식의 속성이 있는 경우 Start-DscConfiguration이 중단됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Class-based resource cannot be used as an exclusive resource.</source>
          <target state="translated">클래스 기반 리소스를 단독 리소스로 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>DSC resource debugging improvements</source>
          <target state="translated">향상된 DSC 리소스 디버깅</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In WMF 5.0, the PowerShell debugger did not stop at the class-based resource method (Get/Set/Test) directly.</source>
          <target state="translated">WMF 5.0에서 PowerShell 디버거는 클래스 기반 리소스 메서드(Get/Set/Test)에서 바로 중지되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, the debugger will stop at the class-based resource method in the same way as for MOF-based resources methods.</source>
          <target state="translated">WMF 5.1에서는 디버거가 MOF 기반 리소스 메서드와 동일하게 클래스 기반 리소스 메서드에서 중지됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>DSC pull client supports TLS 1.1 and TLS 1.2</source>
          <target state="translated">DSC 끌어오기 클라이언트가 TLS 1.1 및 TLS 1.2 지원</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Previously, the DSC pull client only supported SSL3.0 and TLS1.0 over HTTPS connections.</source>
          <target state="translated">기존에 DSC 끌어오기 클라이언트는 HTTPS 연결을 통해 SSL3.0 및 TLS1.0만 지원했습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When forced to use more secure protocols, the pull client would stop functioning.</source>
          <target state="translated">더 안전한 프로토콜을 사용하도록 하는 경우 끌어오기 클라이언트의 작동이 중지되었습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, the DSC pull client no longer supports SSL 3.0 and adds support for the more secure TLS 1.1 and TLS 1.2 protocols.</source>
          <target state="translated">WMF 5.1에서는 DSC 끌어오기 클라이언트가 SSL 3.0을 더 이상 지원하지 않고 더 안전한 TLS 1.1 및 TLS 1.2 프로토콜을 추가로 지원합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Improved pull server registration</source>
          <target state="translated">향상된 끌어오기 서버 등록</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the earlier versions of WMF, simultaneous registrations/reporting requests to a DSC pull server while using the ESENT database would lead to LCM failing to register and/or report.</source>
          <target state="translated">이전 버전의 WMF에서는 ESENT 데이터베이스를 사용하는 동안 DSC 끌어오기 서버에 동시 등록/보고 요청을 하는 경우 LCM이 등록 및/또는 보고에 실패했습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In such cases, the event logs on the pull server will have the error "Instance Name already in use."</source>
          <target state="translated">이러한 경우 끌어오기 서버의 이벤트 로그에 "이미 사용 중인 인스턴스 이름" 오류가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This was due to an incorrect pattern being used to access the ESENT database in a multi-threaded scenario.</source>
          <target state="translated">이는 다중 스레드 시나리오에서 잘못된 패턴을 사용하여 ESENT 데이터베이스에 액세스하기 때문이었습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, this issue has been fixed.</source>
          <target state="translated">WMF 5.1에서는 이 문제가 해결되었습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Concurrent registrations or reporting (involving ESENT database) will work fine in WMF 5.1.</source>
          <target state="translated">WMF 5.1에서는 동시 등록 또는 보고(ESENT 데이터베이스 포함)가 올바로 작동합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This issue is applicable only to the ESENT database and does not apply to the OLEDB database.</source>
          <target state="translated">이 문제는 ESENT 데이터베이스에만 적용되고 OLEDB 데이터베이스에는 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Pull partial configuration naming convention</source>
          <target state="translated">부분 구성 명명 규칙 끌어오기</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the previous release, the naming convention for a partial configuration was that the MOF file name in the pull server/service should match the partial configuration name specified in the local configuration manager settings that in turn must match the configuration name embedded in the MOF file.</source>
          <target state="translated">이전 릴리스에서는 부분 구성에 대한 명명 규칙에 따라 끌어오기 서버/서비스의 MOF 파일 이름이 로컬 구성 관리자 설정에 지정된 부분 구성 이름과 일치하여 MOF 파일에 포함된 구성 이름과 일치해야 했습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See the snapshots below:</source>
          <target state="translated">아래 스냅숏을 참조하세요.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>•   Local configuration settings which defines a partial configuration that a node is allowed to receive.</source>
          <target state="translated">•   노드가 수신할 수 있는 부분 구성을 정의하는 로컬 구성 설정입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sample metaconfiguration</source>
          <target state="translated">샘플 메타 구성</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>•   Sample partial configuration definition</source>
          <target state="translated">•   샘플 부분 구성 정의</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>•   'ConfigurationName' embedded in the generated MOF file.</source>
          <target state="translated">•   생성된 MOF 파일에 포함된 ‘ConfigurationName’</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Sample generated mof file</source>
          <target state="translated">생성된 mof 파일 샘플</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>•   FileName in the pull configuration repository</source>
          <target state="translated">•   끌어오기 구성 리포지토리의 FileName</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>FileName in Configuration Repository</source>
          <target state="translated">구성 리포지토리의 FileName</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Azure Automation service name generated MOF files as <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>.</source>
          <target state="translated">Azure 자동화 서비스 이름은 MOF 파일을 <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>로 생성했습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>So the configuration below will compile to PartialOne.localhost.mof.</source>
          <target state="translated">따라서 아래 구성은 PartialOne.localhost.mof로 컴파일됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This made it impossible to pull one of your partial configuration from Azure Automation service.</source>
          <target state="translated">따라서 Azure 자동화 서비스에서 부분 구성 중 하나를 끌어올 수 없었습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, partial configuration in the pull server/service can be named as <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>.</source>
          <target state="translated">WMF 5.1에서는 끌어오기 서버/서비스의 부분 구성을 <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>로 명명할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Moreover, if a machine is pulling a single configuration from a pull server/service then the configuration file on the pull server configuration repository can have any file name.</source>
          <target state="translated">또한 컴퓨터가 끌어오기 서버/서비스에서 단일 구성을 끌어오는 경우 끌어오기 서버 구성 리포지토리의 구성 파일에 원하는 이름을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This naming flexibility allow you to manage your nodes partially by Azure Automation service, where some configuration for your node is coming from Azure Automation DSC and you have a partial configuration that you wanted to manage locally.</source>
          <target state="translated">이러한 명명 유연성을 통해 노드를 Azure 자동화 서비스로 부분적으로 관리할 수 있습니다. 이 경우 노드의 일부 구성을 Azure 자동화 DSC에서 가져오고 부분 구성을 로컬로 관리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The metaconfiguration below will set up a node to be managed both locally as well as by Azure Automation service.</source>
          <target state="translated">아래 메타 구성은 노드를 로컬뿐 아니라 Azure 자동화 서비스에서 관리하도록 설정합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Using PsDscRunAsCredential with DSC composite resources</source>
          <target state="translated">DSC 복합 리소스와 함께 PsDscRunAsCredential 사용</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We have added support for using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>PsDscRunAsCredential<ept id="p2">*</ept><ept id="p1">](https://msdn.microsoft.com/cs-cz/powershell/dsc/runasuser)</ept> with DSC <bpt id="p3">[</bpt>Composite<ept id="p3">](https://msdn.microsoft.com/en-us/powershell/dsc/authoringresourcecomposite)</ept> resources.</source>
          <target state="translated"><bpt id="p1">[</bpt><bpt id="p2">*</bpt>PsDscRunAsCredential<ept id="p2">*</ept><ept id="p1">](https://msdn.microsoft.com/cs-cz/powershell/dsc/runasuser)</ept>을 DSC <bpt id="p3">[</bpt>복합<ept id="p3">](https://msdn.microsoft.com/en-us/powershell/dsc/authoringresourcecomposite)</ept> 리소스와 함께 사용할 수 있도록 지원을 추가했습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Users can now specify a value for PsDscRunAsCredential when using composite resources inside configurations.</source>
          <target state="translated">이제 사용자는 구성 내에서 복합 리소스를 사용할 때 PsDscRunAsCredential 값을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When specified, all resources run inside a composite resource as a RunAs user.</source>
          <target state="translated">이 값을 지정할 경우 모든 리소스가 복합 리소스 내에서 RunAs 사용자로 실행됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If a composite resource calls another composite resource, all of its resources are also executed as RunAs user.</source>
          <target state="translated">복합 리소스가 다른 복합 리소스를 호출하는 경우에도 모든 리소스가 RunAs 사용자로 실행됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>RunAs credentials are propagated to any level of the composite resource hierarchy.</source>
          <target state="translated">RunAs 자격 증명은 복합 리소스 계층 구조의 모든 수준에 전파됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If any resource inside a composite resource specifies its own value for PsDscRunAsCredential, a merge error will result during configuration compilation.</source>
          <target state="translated">복합 리소스 내의 리소스가 PsDscRunAsCredential의 고유한 값을 지정하는 경우 구성 컴파일 중 병합 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example shows usage with <bpt id="p1">[</bpt>WindowsFeatureSet<ept id="p1">](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_newresources)</ept> composite resource included in PSDesiredStateConfiguration module.</source>
          <target state="translated">이 예제에서는 PSDesiredStateConfiguration 모듈에 포함된 <bpt id="p1">[</bpt>WindowsFeatureSet<ept id="p1">](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_newresources)</ept> 복합 리소스와 함께 사용하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>DSC module and configuration signing validations</source>
          <target state="translated">DSC 모듈 및 구성 서명 유효성 검사</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In DSC, configurations and modules are distributed to managed computers from the pull server.</source>
          <target state="translated">DSC에서는 구성 및 모듈이 끌어오기 서버에서 관리되는 컴퓨터로 배포됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the pull server is compromised, an attacker can potentially modify the configurations and modules on the pull server and have it distributed to all managed nodes, compromising all of them.</source>
          <target state="translated">끌어오기 서버가 손상되는 경우 공격자가 끌어오기 서버의 구성 및 모듈을 수정하고 모든 관리되는 노드로 배포하여 모든 노드를 손상시킬 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, DSC supports validating the digital signatures on catalog and configuration (.MOF) files.</source>
          <target state="translated">WMF 5.1의 DSC에서는 카탈로그 및 구성(.MOF) 파일에 있는 디지털 서명의 유효성을 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This feature will prevent nodes from executing configurations or module files which are not signed by a trusted signer or which have been tampered with after they have been signed by trusted signer.</source>
          <target state="translated">이 기능은 노드에서 신뢰할 수 있는 서명자가 서명하지 않았거나 신뢰할 수 있는 서명자가 서명한 후 변조된 구성 또는 모듈 파일을 실행하지 못하게 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>How to sign configuration and module</source>
          <target state="translated">구성 및 모듈에 서명하는 방법</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Configuration Files (.MOFs): The existing PowerShell cmdlet <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> is extended to support signing of MOF files.</source>
          <target state="translated">구성 파일(.MOF): 기존 PowerShell cmdlet <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept>가 MOF 파일 서명을 지원하도록 확장되었습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Modules: Signing of modules is done by signing the corresponding module catalog using the following steps:</source>
          <target state="translated">모듈: 다음 단계에 따라 해당 모듈 카탈로그에 서명하여 모듈 서명을 수행합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Create a catalog file: A catalog file contains a collection of cryptographic hashes or thumbprints.</source>
          <target state="translated">카탈로그 파일을 만듭니다. 카탈로그 파일에는 암호화 해시 또는 지문의 컬렉션이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Each thumbprint corresponds to a file that is included in the module.</source>
          <target state="translated">각 지문은 모듈에 포함된 파일에 해당합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The new cmdlet <bpt id="p1">[</bpt>New-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept>, has been added to enable users to create a catalog file for their module.</source>
          <target state="translated">사용자가 모듈의 카탈로그 파일을 만들 수 있도록 지원하는 새로운 <bpt id="p1">[</bpt>New-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept> cmdlet이 추가되었습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Sign the catalog file: Use <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> to sign the catalog file.</source>
          <target state="translated">카탈로그 파일에 서명합니다. <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept>를 사용하여 카탈로그 파일에 서명합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Place the catalog file inside the module folder.</source>
          <target state="translated">카탈로그 파일을 모듈 폴더 내에 배치합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>By convention, module catalog file should be placed under the module folder with the same name as the module.</source>
          <target state="translated">규칙에 따라 모듈 카탈로그 파일은 모듈과 이름이 같은 모듈 폴더에 배치해야 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>LocalConfigurationManager settings to enable signing validations</source>
          <target state="translated">서명 유효성 검사를 사용하도록 설정하는 LocalConfigurationManager 설정</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Pull</source>
          <target state="translated">끌어오기</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The LocalConfigurationManager of a node performs signing validation of modules and configurations based on its current settings.</source>
          <target state="translated">노드의 LocalConfigurationManager는 현재 설정에 따라 모듈 및 구성의 서명 유효성 검사를 수행합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>By default, signature validation is disabled.</source>
          <target state="translated">기본적으로 서명 유효성 검사를 사용하지 않도록 설정되어 있습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Signature validation can enabled by adding the ‘SignatureValidation’ block to the meta-configuration definition of the node as shown below:</source>
          <target state="translated">서명 유효성 검사를 사용하도록 설정하려면 아래 표시된 노드의 메타 구성 정의에 'SignatureValidation' 블록을 추가합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Setting the above metaconfiguration on a node enables signature validation on downloaded configurations and modules.</source>
          <target state="translated">노드에서 위의 메타 구성을 설정하면 다운로드된 구성 및 모듈에서 서명 유효성을 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The Local Configuration Manager will perform the following steps to verify the digital signatures.</source>
          <target state="translated">로컬 구성 관리자는 다음 단계를 수행하여 디지털 서명을 확인합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Verify the signature on a configuration file (.MOF) is valid.</source>
          <target state="translated">구성 파일(.MOF)의 서명이 유효한지 확인합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It uses the PowerShell cmdlet <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept>, which is extended in 5.1 to support MOF signature validation.</source>
          <target state="translated">5.1에서 MOF 서명 유효성 검사를 지원하도록 확장된 PowerShell cmdlet <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Verify the certificate authority that authorized the signer is trusted.</source>
          <target state="translated">서명자에게 권한을 부여한 인증 기관을 신뢰할 수 있는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Download module/resource dependencies of the configuration to a temp location.</source>
          <target state="translated">구성의 모듈/리소스 종속성을 임시 위치로 다운로드합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Verify the signature of the catalog included inside the module.</source>
          <target state="translated">모듈 내에 포함된 카탈로그의 서명을 확인합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Find a <ph id="ph1">`&lt;moduleName&gt;.cat`</ph> file and verify its signature using the cmdlet  <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept>.</source>
          <target state="translated"><ph id="ph1">`&lt;moduleName&gt;.cat`</ph> 파일을 찾고 <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept> cmdlet을 사용하여 해당 서명을 확인합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Verify the certification authority that authenticated the signer is trusted.</source>
          <target state="translated">서명자를 인증한 인증 기관을 신뢰할 수 있는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Verify the content of the modules has not been tampered using the new cmdlet <bpt id="p1">[</bpt>Test-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept>.</source>
          <target state="translated">새 <bpt id="p1">[</bpt>Test-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept> cmdlet을 사용하여 모듈의 콘텐츠가 변조되지 않았는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Install-Module to $env:ProgramFiles\WindowsPowerShell\Modules\</source>
          <target state="translated">모듈을 $env:ProgramFiles\WindowsPowerShell\Modules\에 설치</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Process configuration</source>
          <target state="translated">구성 처리</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Note: Signature validation on module-catalog and configuration is only performed when the configuration is applied to the system for the first time or when the module is downloaded and installed.</source>
          <target state="translated">참고: 모듈 카탈로그 및 구성의 서명 유효성 검사는 시스템에 구성을 처음으로 적용할 때나 모듈을 다운로드하여 설치할 때만 수행합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Consistency runs do not validate the signature of Current.mof or its module dependencies.</source>
          <target state="translated">일관성 검사에서는 Current.mof 또는 해당 모듈 종속성의 서명 유효성을 검사하지 않습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If verification has failed at any stage, for instance, if the configuration pulled from the pull server is unsigned, then processing of the configuration will terminate with the error shown below and all temporary files will be deleted.</source>
          <target state="translated">끌어오기 서버에서 끌어온 구성에 서명이 되어 있지 않은 등 어느 단계에서든 유효성 검사가 실패하면 구성 처리가 종료되고 아래와 같은 오류가 표시되며 모든 임시 파일이 삭제됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Sample Error Output Configuration</source>
          <target state="translated">샘플 오류 출력 구성</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Similarily, pulling a module whose catalog is not signed will result in the following error:</source>
          <target state="translated">마찬가지로 카탈로그에 서명이 되어 있지 않은 모듈을 끌어오면 다음 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Sample Error Output Module</source>
          <target state="translated">샘플 오류 출력 모듈</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Push</source>
          <target state="translated">푸시</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A configuration delivered by using push might be tampered with at its source before it delivered to the node.</source>
          <target state="translated">푸시를 사용하여 전달된 구성은 노드로 전달되기 전에 해당 소스에서 변조될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The Local Configuration Manager will perform similar signature validation steps for pushed or published configuration(s).</source>
          <target state="translated">로컬 구성 관리자는 푸시되거나 게시된 구성에 대해 비슷한 서명 유효성 검사 단계를 수행합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Below is a complete example of signature validation for push.</source>
          <target state="translated">다음은 푸시에 대한 서명 유효성 검사의 완전한 예제입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Enable signature validation on the node.</source>
          <target state="translated">노드에서 서명 유효성 검사를 사용하도록 설정합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Create a sample configuration file.</source>
          <target state="translated">샘플 구성 파일을 만듭니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Try pushing the unsigned configuration file in to the node.</source>
          <target state="translated">서명되지 않은 구성 파일을 노드로 푸시해 봅니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ErrorUnsignedMofPushed</source>
          <target state="translated">ErrorUnsignedMofPushed</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Sign the configuration file using code-signing certificate.</source>
          <target state="translated">코드 서명 인증서를 사용하여 구성 파일에 서명합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>SignMofFile</source>
          <target state="translated">SignMofFile</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Try pushing the signed MOF file.</source>
          <target state="translated">서명된 MOF 파일을 푸시해 봅니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>SignMofFile</source>
          <target state="translated">SignMofFile</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>