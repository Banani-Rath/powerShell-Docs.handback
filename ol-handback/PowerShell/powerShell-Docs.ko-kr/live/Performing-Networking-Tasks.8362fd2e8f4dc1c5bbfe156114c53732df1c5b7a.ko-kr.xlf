<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ko-kr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6b2a6c78009707c4f649acc47466576ec23aef9</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04046aa" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Performing Networking Tasks</source>
          <target state="translated">네트워킹 작업 수행</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Performing Networking Tasks</source>
          <target state="translated">네트워킹 작업 수행</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Because TCP\/IP is the most commonly used network protocol, most low\-level network protocol administration tasks involve TCP\/IP.</source>
          <target state="translated">TCP\/IP는 가장 일반적으로 사용되는 네트워크 프로토콜이므로 대부분의 간단한 네트워크 프로토콜 관리 작업은 TCP\/IP와 관련이 있습니다.</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this section, we use Windows PowerShell and WMI to do these tasks.</source>
          <target state="translated">이 섹션에서는 Windows PowerShell 및 WMI를 사용하여 이러한 작업을 수행합니다.</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Listing IP Addresses for a Computer</source>
          <target state="translated">컴퓨터의 IP 주소 표시</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To get all IP addresses in use on the local computer, use the following command:</source>
          <target state="translated">로컬 컴퓨터에서 사용 중인 모든 IP 주소를 가져오려면 다음 명령을 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The output of this command differs from most property lists, because values are enclosed in braces:</source>
          <target state="translated">이 명령의 출력 결과는 다음과 같이 값이 중괄호로 묶여 있기 때문에 일반적인 속성 목록과 다릅니다.</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>IPAddress</source>
          <target state="translated">IP 주소</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>{192.168.1.80}</source>
          <target state="translated">{192.168.1.80}</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>{192.168.148.1}</source>
          <target state="translated">{192.168.148.1}</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>{192.168.171.1}</source>
          <target state="translated">{192.168.171.1}</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>{0.0.0.0}</source>
          <target state="translated">{0.0.0.0}</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To understand why the braces appear, use the Get\-Member cmdlet to examine the <bpt id="p1">**</bpt>IPAddress<ept id="p1">**</ept> property:</source>
          <target state="translated">중괄호로 표시되는 이유를 이해하려면 Get\-Member cmdlet을 사용하여 <bpt id="p1">**</bpt>IPAddress<ept id="p1">**</ept> 속성을 검사합니다.</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>PS&gt; Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName .</source>
          <target state="translated">PS&gt; Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName .</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>| Get-Member -Name IPAddress</source>
          <target state="translated">| Get-Member -Name IPAddress</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>TypeName: System.Management.ManagementObject#root\cimv2\Win32_NetworkAdapter</source>
          <target state="translated">TypeName: System.Management.ManagementObject#root\cimv2\Win32_NetworkAdapter</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">구성</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Name      MemberType Definition
----      ---------- ----------
IPAddress Property   System.String[] IPAddress {get;}</source>
          <target state="translated">Name      MemberType Definition
----      ---------- ----------
IPAddress Property   System.String[] IPAddress {get;}</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The IPAddress property for each network adapter is actually an array.</source>
          <target state="translated">각 네트워크 어댑터의 IP주소 속성은 실제 배열입니다.</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The braces in the definition indicate that <bpt id="p1">**</bpt>IPAddress<ept id="p1">**</ept> is not a <bpt id="p2">**</bpt>System.String<ept id="p2">**</ept> value, but an array of <bpt id="p3">**</bpt>System.String<ept id="p3">**</ept> values.</source>
          <target state="translated">정의에 있는 중괄호는 <bpt id="p1">**</bpt>IPAddress<ept id="p1">**</ept>가 <bpt id="p2">**</bpt>System.String<ept id="p2">**</ept> 값이 아니라 <bpt id="p3">**</bpt>System.String<ept id="p3">**</ept> 값의 배열임을 나타냅니다.</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Listing IP Configuration Data</source>
          <target state="translated">IP 구성 데이터 표시</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To display detailed IP configuration data for each network adapter, use the following command:</source>
          <target state="translated">각 네트워크 어댑터의 자세한 IP 구성 데이터를 표시하려면 다음 명령을 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The default display for the network adapter configuration object is a very reduced set of the available information.</source>
          <target state="translated">네트워크 어댑터 구성 개체의 기본 표시에는 매우 간단한 정보만 표시됩니다.</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For in\-depth inspection and troubleshooting, use Select\-Object or a formatting cmdlet, such as Format\-List, to specify the properties to be displayed.</source>
          <target state="translated">자세히 검사하고 문제를 해결하려면 Select\-Object 또는 형식 지정 cmdlet(예: Format\-List)을 사용하여 표시할 속성을 지정합니다.</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you are not interested in IPX or WINS properties—probably the case in a modern TCP\/IP network—you can use the ExcludeProperty parameter of Select\-Object to hide properties with names that begin with "WINS" or "IPX:"</source>
          <target state="translated">최신 TCP/IP 네트워크를 사용하는 경우와 같이 IPX 또는 WINS 속성이 필요 없는 경우 다음과 같이 Select\-Object의 ExcludeProperty 매개 변수를 사용하여 이름이 "WINS" 또는 "IPX:"로 시작하는 속성을 숨길 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This command returns detailed information about DHCP, DNS, routing, and other minor IP configuration properties.</source>
          <target state="translated">이 명령은 DHCP, DNS, 라우팅 및 기타 보조 IP 구성 속성에 대한 세부 정보를 반환합니다.</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Pinging Computers</source>
          <target state="translated">컴퓨터에 대해 ping 수행</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can perform a simple ping against a computer using by <bpt id="p1">**</bpt>Win32\_PingStatus<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Win32\_PingStatus<ept id="p1">**</ept>를 사용하여 컴퓨터에 대해 간단한 ping을 수행할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following command performs the ping, but returns lengthy output:</source>
          <target state="translated">다음 명령은 ping을 수행하지만 긴 출력 결과를 반환합니다.</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A more useful form for summary information a display of the Address, ResponseTime, and StatusCode properties, as generated by the following command.</source>
          <target state="translated">이 출력을 보기 쉽게 요약하려면 다음 명령에 의해 생성되는 Address, ResponseTime 및 StatusCode 속성을 표시하면 됩니다.</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Autosize parameter of Format\-Table resizes the table columns so that they display properly in Windows PowerShell.</source>
          <target state="translated">Format\-Table의 Autosize 매개 변수는 테이블 열 크기를 조정하여 Windows PowerShell에 올바로 표시되도록 합니다.</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use an array to ping multiple computers with a single command.</source>
          <target state="translated">배열을 사용하여 하나의 명령으로 여러 컴퓨터를 ping할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Because there is more than one address, use the <bpt id="p1">**</bpt>ForEach\-Object<ept id="p1">**</ept> to ping each address separately:</source>
          <target state="translated">여러 개의 주소가 있기 때문에 다음과 같이 <bpt id="p1">**</bpt>ForEach\-Object<ept id="p1">**</ept>를 사용하여 각 주소를 따로 ping합니다.</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can use the same command format to ping all of the computers on a subnet, such as a private network that uses network number 192.168.1.0 and a standard Class C subnet mask (255.255.255.0)., Only addresses in the range of 192.168.1.1 through 192.168.1.254 are legitimate local addresses (0 is always reserved for the network number and 255 is a subnet broadcast address).</source>
          <target state="translated">같은 명령 형식을 사용하여 네트워크 번호 192.168.1.0을 사용하는 개인 네트워크, 표준 클래스 C 서브넷 마스크(255.255.255.0) 등 서브넷에 있는 모든 컴퓨터를 ping할 수 있습니다. 192.168.1.1에서 192.168.1.254 범위에 있는 주소만 유효한 로컬 주소입니다. 0은 항상 네트워크 번호로 예약되어 있고 255는 서브넷 브로드캐스트 주소입니다.</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To represent an array of the numbers from 1 through 254 in Windows PowerShell, use the statement <bpt id="p1">**</bpt>1..254.<ept id="p1">**</ept></source>
          <target state="translated">Windows PowerShell에서 1에서 254까지의 번호 배열을 나타내려면 <bpt id="p1">**</bpt>1..254<ept id="p1">**</ept> 문을 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A complete subnet ping can be performed by generating the array and then adding the values onto a partial address in the ping statement:</source>
          <target state="translated">배열을 생성하고 ping 문의 부분 주소에 값을 추가하여 서브넷 ping을 완료할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that this technique for generating a range of addresses can be used elsewhere as well.</source>
          <target state="translated">주소 범위를 생성하는 방법을 다른 작업에 적용할 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can generate a complete set of addresses in this way:</source>
          <target state="translated">예를 들어 다음과 같이 전체 주소 집합을 생성할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Retrieving Network Adapter Properties</source>
          <target state="translated">네트워크 어댑터 속성 검색</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Earlier in this user's guide, we mentioned that you could retrieve general configuration properties by using <bpt id="p1">**</bpt>Win32\_NetworkAdapterConfiguration<ept id="p1">**</ept>.</source>
          <target state="translated">이 사용 설명서 앞부분에서는 <bpt id="p1">**</bpt>Win32\_NetworkAdapterConfiguration<ept id="p1">**</ept>을 사용하여 일반적인 구성 속성을 검색할 수 있다고 설명했습니다.</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Although not strictly TCP\/IP information, network adapter information such as MAC addresses and adapter types can be useful for understanding what is going on with a computer.</source>
          <target state="translated">TCP\/IP 정보에는 그대로 적용되지 않을 수 있지만 MAC 주소와 어댑터 유형 같은 네트워크 어댑터 정보는 컴퓨터의 상태를 파악하는 데 유용할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To get a summary of this information, use the following command:</source>
          <target state="translated">이 정보의 요약을 보려면 다음 명령을 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Assigning the DNS Domain for a Network Adapter</source>
          <target state="translated">네트워크 어댑터의 DNS 도메인 할당</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To assign the DNS domain for automatic name resolution, use the <bpt id="p1">**</bpt>Win32\_NetworkAdapterConfiguration SetDNSDomain<ept id="p1">**</ept> method.</source>
          <target state="translated">자동 이름 확인에 사용할 DNS 도메인을 할당하려면 <bpt id="p1">**</bpt>Win32\_NetworkAdapterConfiguration SetDNSDomain<ept id="p1">**</ept> 메서드를 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Because you assign the DNS domain for each network adapter configuration independently, you need to use a <bpt id="p1">**</bpt>ForEach\-Object<ept id="p1">**</ept> statement to assign the domain to each adapter:</source>
          <target state="translated">각 네트워크 어댑터 구성에 대해 개별적으로 DNS 도메인을 할당하기 때문에 다음과 같이 <bpt id="p1">**</bpt>ForEach\-Object<ept id="p1">**</ept> 문을 사용하여 각 어댑터에 도메인을 할당해야 합니다.</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The filtering statement "IPEnabled\=true" is necessary, because even on a network that uses only TCP\/IP, several of the network adapter configurations on a computer are not true TCP\/IP adapters; they are general software elements supporting RAS, PPTP, QoS, and other services for all adapters and thus do not have an address of their own.</source>
          <target state="translated">TCP\/IP만 사용하는 네트워크에 있는 컴퓨터의 몇 가지 네트워크 어댑터 구성이 실제 TCP\/IP 어댑터가 아니므로 필터링 문인 "IPEnabled=true"가 필요합니다. 즉, 이 구성은 모든 어댑터에 대한 RAS, PPTP, QoS 및 기타 서비스를 지원하는 일반 소프트웨어 요소이기 때문에 자체 주소를 가지고 있지 않습니다.</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can filter the command by using the <bpt id="p1">**</bpt>Where\-Object<ept id="p1">**</ept> cmdlet, instead of using the <bpt id="p2">**</bpt>Get\-WmiObject<ept id="p2">**</ept> filter.</source>
          <target state="translated"><bpt id="p2">**</bpt>Get\-WmiObject<ept id="p2">**</ept> 필터를 사용하는 대신 <bpt id="p1">**</bpt>Where\-Object<ept id="p1">**</ept> cmdlet을 사용하여 명령을 필터링할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Performing DHCP Configuration Tasks</source>
          <target state="translated">DHCP 구성 작업 수행</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Modifying DHCP details involves working with a set of network adapters, just as the DNS configuration does.</source>
          <target state="translated">DHCP 세부 정보는 DNS 구성과 같이 네트워크 어댑터 집합을 사용하여 수정합니다.</target>         
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There are several distinct actions you can perform by using WMI, and we will step through a few of the common ones.</source>
          <target state="translated">WMI에서는 여러 가지 고유한 작업을 수행할 수 있는데, 이 설명서에서는 몇 가지 일반적인 작업을 단계별로 수행하는 방법을 보여 줍니다.</target>         
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Determining DHCP\-Enabled Adapters</source>
          <target state="translated">DHCP 사용 가능 어댑터 확인</target>         
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To find the DHCP\-enabled adapters on a computer, use the following command:</source>
          <target state="translated">컴퓨터에서 DHCP 사용 가능 어댑터를 찾으려면 다음 명령을 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To exclude adapters with IP configuration problems, you can retrieve only IP\-enabled adapters:</source>
          <target state="translated">IP 구성에 문제가 있는 어댑터를 제외하려면 IP 사용 어댑터만 검색하면 됩니다.</target>         
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Retrieving DHCP Properties</source>
          <target state="translated">DHCP 속성 검색</target>         
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Because DHCP\-related properties for an adapter generally begin with "DHCP," you can use the Property parameter of Format\-Table to display only those properties:</source>
          <target state="translated">어댑터의 DHCP 관련 속성은 일반적으로 "DHCP"로 시작되므로 Format\-Table의 Property 매개 변수를 사용하여 해당 속성만 표시할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Enabling DHCP on Each Adapter</source>
          <target state="translated">각 어댑터에서 DHCP 사용</target>         
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To enable DHCP on all adapters, use the following command:</source>
          <target state="translated">모든 어댑터에서 DHCP를 사용하도록 설정하려면 다음 명령을 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Filter<ept id="p1">**</ept> statement "IPEnabled\=true and DHCPEnabled\=false" to avoid enabling DHCP where it is already enabled, but omitting this step will not cause errors.</source>
          <target state="translated"><bpt id="p1">**</bpt>Filter<ept id="p1">**</ept> 문 "IPEnabled=true and DHCPEnabled=false"를 사용하여 이미 설정된 곳에서는 DHCP를 설정하지 않도록 할 수 있습니다. 하지만 이 단계를 생략해도 오류가 발생하지는 않습니다.</target>         
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Releasing and Renewing DHCP Leases on Specific Adapters</source>
          <target state="translated">특정 어댑터에서 DHCP 임대 해제 및 갱신</target>         
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Win32\_NetworkAdapterConfiguration<ept id="p1">**</ept> class has <bpt id="p2">**</bpt>ReleaseDHCPLease<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RenewDHCPLease<ept id="p3">**</ept> methods.</source>
          <target state="translated"><bpt id="p1">**</bpt>Win32\_NetworkAdapterConfiguration<ept id="p1">**</ept> 클래스에는 <bpt id="p2">**</bpt>ReleaseDHCPLease<ept id="p2">**</ept> 및 <bpt id="p3">**</bpt>RenewDHCPLease<ept id="p3">**</ept> 메서드가 있습니다.</target>         
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Both are used in the same way.</source>
          <target state="translated">두 메서드의 사용 방법은 동일합니다.</target>         
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In general, use these methods if you only need to release or renew addresses for an adapter on a specific subnet.</source>
          <target state="translated">일반적으로 이러한 메서드는 특정 서브넷에 있는 어댑터 주소를 임대 해제 또는 갱신만 하면 되는 경우에 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The easiest way to filter adapters on a subnet is to choose only the adapter configurations that use the gateway for that subnet.</source>
          <target state="translated">서브넷에서 어댑터를 필터링하는 가장 쉬운 방법은 이 서브넷의 게이트웨이를 사용하는 어댑터 구성만 선택하는 것입니다.</target>         
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, the following command releases all DHCP leases on adapters on the local computer that are obtaining DHCP leases from 192.168.1.254:</source>
          <target state="translated">예를 들어 다음 명령은 192.168.1.254에서 DHCP를 임대하는 로컬 컴퓨터에 있는 어댑터의 모든 DHCP를 임대 해제합니다.</target>         
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The only change for renewing a DHCP lease is to use the <bpt id="p1">**</bpt>RenewDHCPLease<ept id="p1">**</ept> method instead of the <bpt id="p2">**</bpt>ReleaseDHCPLease<ept id="p2">**</ept> method:</source>
          <target state="translated">DHCP 임대를 갱신하려면 다음과 같이 <bpt id="p2">**</bpt>ReleaseDHCPLease<ept id="p2">**</ept> 메서드 대신 <bpt id="p1">**</bpt>RenewDHCPLease<ept id="p1">**</ept> 메서드를 호출하기만 하면 됩니다.</target>         
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When using these methods on a remote computer, be aware that you can lose access to the remote system if you are connected to it through the adapter with the released or renewed lease.</source>
          <target state="translated">원격 컴퓨터에서 이 메서드를 사용하면 임대 해제 또는 갱신된 어댑터를 통해 원격 시스템에 연결하는 경우 이 시스템에 액세스할 수 없습니다.</target>         
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Releasing and Renewing DHCP Leases on All Adapters</source>
          <target state="translated">모든 어댑터에서 DHCP 임대 해제 및 갱신</target>         
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can perform global DHCP address releases or renewals on all adapters by using the <bpt id="p1">**</bpt>Win32\_NetworkAdapterConfiguration<ept id="p1">**</ept> methods, <bpt id="p2">**</bpt>ReleaseDHCPLeaseAll<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RenewDHCPLeaseAll<ept id="p3">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Win32\_NetworkAdapterConfiguration<ept id="p1">**</ept> 메서드, <bpt id="p2">**</bpt>ReleaseDHCPLeaseAll<ept id="p2">**</ept> 및 <bpt id="p3">**</bpt>RenewDHCPLeaseAll<ept id="p3">**</ept>을 사용하여 모든 어댑터에서 DHCP 주소를 한꺼번에 임대 해제 또는 갱신할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>However, the command must apply to the WMI class, rather than a particular adapter, because releasing and renewing leases globally is performed on the class, not on a specific adapter.</source>
          <target state="translated">그러나 특정 어댑터 대신 WMI 클래스에서 한꺼번에 임대 해제하고 갱신하므로 이 명령을 특정 어댑터가 아니라 WMI 클래스에 적용해야 합니다.</target>         
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can get a reference to a WMI class, instead of class instances, by listing all WMI classes and then selecting only the desired class by name.</source>
          <target state="translated">WMI 클래스를 모두 표시하고 원하는 클래스만 이름으로 선택하여 클래스 인스턴스 대신 WMI 클래스에 대한 참조를 사용할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, the following command returns the Win32\_NetworkAdapterConfiguration class:</source>
          <target state="translated">예를 들어 다음 명령은 Win32\_NetworkAdapterConfiguration 클래스를 반환합니다.</target>         
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can treat the entire command as the class and then invoke the <bpt id="p1">**</bpt>ReleaseDHCPAdapterLease<ept id="p1">**</ept> method on it.</source>
          <target state="translated">전체 명령을 클래스로 처리한 다음 이 클래스에서 <bpt id="p1">**</bpt>ReleaseDHCPAdapterLease<ept id="p1">**</ept> 메서드를 호출할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the following command, the parentheses surrounding the <bpt id="p1">**</bpt>Get\-WmiObject<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Where\-Object<ept id="p2">**</ept> pipeline elements direct Windows PowerShell to evaluate them first:</source>
          <target state="translated">다음 명령에서는 <bpt id="p1">**</bpt>Get\-WmiObject<ept id="p1">**</ept> 및 <bpt id="p2">**</bpt>Where\-Object<ept id="p2">**</ept> 파이프라인 요소가 괄호로 묶여 있기 때문에 Windows PowerShell에서 먼저 평가됩니다.</target>         
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can use the same command format to invoke the <bpt id="p1">**</bpt>RenewDHCPLeaseAll<ept id="p1">**</ept> method:</source>
          <target state="translated">다음과 같이 동일한 명령 형식을 사용하여 <bpt id="p1">**</bpt>RenewDHCPLeaseAll<ept id="p1">**</ept> 메서드를 호출할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Creating a Network Share</source>
          <target state="translated">네트워크 공유 만들기</target>         
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To create a network share, use the <bpt id="p1">**</bpt>Win32\_Share Create<ept id="p1">**</ept> method:</source>
          <target state="translated">네트워크 공유를 만들려면 다음과 같이 <bpt id="p1">**</bpt>Win32\_Share Create<ept id="p1">**</ept> 메서드를 사용합니다.</target>         
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can also create the share by using <bpt id="p1">**</bpt>net share<ept id="p1">**</ept> in Windows PowerShell:</source>
          <target state="translated">Windows PowerShell에서 <bpt id="p1">**</bpt>net share<ept id="p1">**</ept>를 사용하여 공유를 만들 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Removing a Network Share</source>
          <target state="translated">네트워크 공유 제거</target>         
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can remove a network share with <bpt id="p1">**</bpt>Win32\_Share<ept id="p1">**</ept>, but the process is slightly different from creating a share, because you need to retrieve the specific share to be removed, rather than the <bpt id="p2">**</bpt>Win32\_Share<ept id="p2">**</ept> class.</source>
          <target state="translated"><bpt id="p1">**</bpt>Win32\_Share<ept id="p1">**</ept>와 함께 네트워크 공유를 제거할 수 있지만 <bpt id="p2">**</bpt>Win32\_Share<ept id="p2">**</ept> 클래스 대신 제거할 특정 공유를 검색해야 하므로 제거 프로세스는 공유 만들기와 약간 다릅니다.</target>         
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following statement deletes the share "TempShare":</source>
          <target state="translated">다음 문은 "TempShare" 공유를 삭제합니다.</target>         
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Net share<ept id="p1">**</ept> works as well:</source>
          <target state="translated">다음과 같이 <bpt id="p1">**</bpt>Net share<ept id="p1">**</ept>를 사용할 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Connecting a Windows Accessible Network Drive</source>
          <target state="translated">액세스 가능한 Windows 네트워크 드라이브 연결</target>         
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New\-PSDrive<ept id="p1">**</ept> cmdlets creates a Windows PowerShell drive, but drives created this way are available only to Windows PowerShell.</source>
          <target state="translated"><bpt id="p1">**</bpt>New\-PSDrive<ept id="p1">**</ept> cmdlet은 Windows PowerShell 드라이브를 만들지만 이런 방식으로 만든 드라이브는 Windows PowerShell에서만 사용할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To create a new networked drive, you can use the <bpt id="p1">**</bpt>WScript.Network<ept id="p1">**</ept> COM object.</source>
          <target state="translated">새 네트워크 드라이브를 만들려면 <bpt id="p1">**</bpt>WScript.Network<ept id="p1">**</ept> COM 개체를 사용하면 됩니다.</target>         
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following command maps the share \\\\FPS01\\users to local drive B:</source>
          <target state="translated">다음 명령은 \\\\FPS01\\users 공유를 로컬 드라이브 B:에 매핑합니다.</target>         
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>net use<ept id="p1">**</ept> command works as well:</source>
          <target state="translated">다음과 같이 <bpt id="p1">**</bpt>net use<ept id="p1">**</ept> 명령을 사용할 수도 있습니다.</target>         
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Drives mapped with either <bpt id="p1">**</bpt>WScript.Network<ept id="p1">**</ept> or net use are immediately available to Windows PowerShell.</source>
          <target state="translated"><bpt id="p1">**</bpt>WScript.Network<ept id="p1">**</ept> 또는 net use를 사용하여 매핑된 드라이브는 Windows PowerShell에서 즉시 사용할 수 있습니다.</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>