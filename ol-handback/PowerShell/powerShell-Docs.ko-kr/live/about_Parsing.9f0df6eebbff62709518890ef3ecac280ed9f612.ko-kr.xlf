<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6dac8caf8ef0b6e70ddaf8b8807cd05545499711</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Parsing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7a2907f3a9e5ceeda611b7e2de5c0d379093515</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">755fe011c1c3563ab1fb61ad1889ea72a7ea0ed9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Parsing</source>
          <target state="translated">about_Parsing</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Parsing</source>
          <target state="translated">구문 분석 정보</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Parsing</source>
          <target state="translated">about_Parsing</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">항목</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Parsing</source>
          <target state="translated">about_Parsing</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes how Windows PowerShell parses commands.</source>
          <target state="translated">Windows PowerShell 구문 명령을 분석 하는 방법에 대해 설명 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you enter a command at the command prompt, Windows PowerShell breaks the command text into a series of segments called "tokens" and then determines how to interpret each "token."</source>
          <target state="translated">Windows PowerShell 명령 프롬프트에서 명령을 입력 하면 일련의 "토큰" 이라고 하는 세그먼트에 명령 텍스트를 분리 하 고 각 "토큰"입니다.'를 해석 하는 방법을 결정합니다</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, if you type:</source>
          <target state="translated">예를 들어 다음과 같이 입력 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Write-Host book</source>
          <target state="translated">Write-host 책</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Windows PowerShell breaks the following command into two tokens, "Write-Host" and "book", and interprets each token independently.</source>
          <target state="translated">Windows PowerShell "Write-host" 및 "book" 인 두 개의 토큰으로 다음 명령을 중단 하 고 각 토큰을 독립적으로 해석 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When processing a command, the Windows PowerShell parser operates in expression mode or in argument mode:</source>
          <target state="translated">명령을 처리 하는 경우 Windows PowerShell 파서 식 모드 또는 인수 모드에서 작동 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In expression mode, character string values must be contained in quotation marks.</source>
          <target state="translated">식 모드에서 문자열 값을 인용 부호로 포함 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Numbers not enclosed in quotation marks are treated as numerical values (rather than as a series of characters).</source>
          <target state="translated">인용 부호로 묶지 숫자는 숫자 값 (아닌 일련의 문자)에 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In argument mode, each value is treated as an expandable string unless it begins with one of the following special characters: dollar sign ($), at sign (@), single quotation mark ('), double quotation mark ("), or an opening parenthesis (().</source>
          <target state="translated">인수 모드에서 각 값은 문자열로 처리 확장할 수 있는 다음과 같은 특수 문자 중 하 나와 함께 시작 하지 않으면: 달러 기호 ($), at 기호 (@), 단일 따옴표 ('), 이중 인용 부호 (") 또는 여는 괄호 (().</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If preceded by one of these characters, the value is treated as a value expression.</source>
          <target state="translated">앞 이러한 문자 중 하나를 사용 하는 경우 값은 값 식으로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following table provides several examples of commands processed in expression mode and argument mode and the results produced by those commands.</source>
          <target state="translated">다음 표에서 이러한 명령을 사용 하 여 생성 되는 결과 식 모드 및 인수 모드에서 처리 된 명령 몇 가지 예제를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example            Mode         Result</source>
          <target state="translated">모드 결과 예</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>2+2                Expression   4 (integer) Write-Output 2+2   Argument     "2+2" (string) Write-Output (2+2) Expression   4 (integer) $a = 2+2           Expression   $a = 4 (integer) Write-Output $a    Expression   4 (integer) Write-Output $a/H  Argument     "4/H" (string)</source>
          <target state="translated">2 + 2 식을 4 (integer) 쓰기 출력 2 + 2 인수 "2 + 2" (string) 쓰기 출력 (2 + 2) 식 4 (integer) $는 = 2 + 2 식 $는 = 4 (integer) 쓰기 출력 $ Expression 4 (integer) Write-output $/ H a 인수 "4/H" (문자열)</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Every token can be interpreted as some kind of object type, such as Boolean or string.</source>
          <target state="translated">개체 형식, 부울 또는 문자열 등의 일종으로 모든 토큰을 해석할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Windows PowerShell attempts to determine the object type from the expression.</source>
          <target state="translated">Windows PowerShell 식에서 개체 유형을 확인 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The object type depends on the type of parameter a command expects and on whether Windows PowerShell knows how to convert the argument to the correct type.</source>
          <target state="translated">개체 유형 및 명령에서는 매개 변수 형식에 Windows PowerShell의 인수는 올바른 형식으로 변환 하는 방법을 알고 있는지 여부에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following table shows several examples of the types assigned to values returned by the expressions.</source>
          <target state="translated">다음 표에서 식에서 반환 된 값에 할당 된 유형에 대 한 몇 가지 예를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example            Mode         Result</source>
          <target state="translated">모드 결과 예</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Write-Output !1    argument     "!1" (string) Write-Output (!1)  expression   False (Boolean) Write-Output (2)   expression   2 (integer)</source>
          <target state="translated">쓰기 출력! 인수 1 "! 1" (문자열) 쓰기 출력 (! 1) 식이 False (부울) 쓰기 출력 (2) 식은 2 (정수)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>STOP PARSING:  --% The stop-parsing symbol (--%), introduced in Windows PowerShell 3.0, directs Windows PowerShell to refrain from interpreting input as Windows PowerShell commands or expressions.</source>
          <target state="translated">STOP 구문 분석:-% 중지 구문 분석 기호 (-%), Windows PowerShell 3.0에서 도입 된, Windows PowerShell로 Windows PowerShell 명령 또는 식을 입력을 해석 하지 않도록 지시 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When calling an executable program in Windows PowerShell, place the stop-parsing symbol before the program arguments.</source>
          <target state="translated">Windows PowerShell에서 실행 가능한 프로그램을 호출 하는 경우 프로그램 인수 하기 전에 중지 구문 분석 기호를 배치 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This technique is much easier than using escape characters to prevent misinterpretation.</source>
          <target state="translated">이 방법은 잘못 해석 되지 않도록 하려면 이스케이프 문자를 사용 하 여 보다 훨씬 더 쉽습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When it encounters a stop-parsing symbol, Windows PowerShell treats the remaining characters in the line as a literal.</source>
          <target state="translated">Stop 구문 분석 하는 기호를 발견 한 경우 Windows PowerShell 나머지 문자는 리터럴로 줄에서 처리 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The only interpretation it performs is to substitute values for environment variables that use standard Windows notation, such as %USERPROFILE%.</source>
          <target state="translated">수행 하는 유일한 해석 % USERPROFILE %와 같은 표준 Windows 표기법을 사용 하는 환경 변수의 값으로 대체 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The stop-parsing symbol is effective only until the next newline or pipeline character.</source>
          <target state="translated">Stop 구문 기호는 다음 파이프라인 또는 줄 바꿈 문자가 될 때 까지만 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You cannot use a continuation character (`) to extend its effect or use a command delimiter (;) to terminate its effect.</source>
          <target state="translated">효과 확장 하거나 효과 종료 하는 명령 구분 기호 (;)를 사용 하는 연속 문자 (')를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following command calls the Icacls program.</source>
          <target state="translated">예를 들어 다음 명령은 Icacls 프로그램을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>icacls X:\VMS /grant Dom\HVAdmin:(CI)(OI)F</source>
          <target state="translated">icacls X:\VMS /grant Dom\HVAdmin:(CI) (OI) F</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To run this command in Windows PowerShell 2.0, you must use escape characters to prevent Windows PowerShell from misinterpreting the parentheses.</source>
          <target state="translated">이 명령은 Windows PowerShell 2.0을 실행 하려면 Windows PowerShell 괄호 잘못 해석 되지 않도록 하려면 이스케이프 문자를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>icacls X:\VMS /grant Dom\HVAdmin:<ph id="ph1">`(CI`</ph>)<ph id="ph2">`(OI`</ph>)F</source>
          <target state="translated">icacls X:\VMS /grant Dom\HVAdmin:<ph id="ph1">`(CI`</ph>)<ph id="ph2">`(OI`</ph>) F</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, you can use the stop-parsing symbol.</source>
          <target state="translated">Windows PowerShell 3.0 부터는 중지 구문 분석 기호를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>icacls X:\VMS --% /grant Dom\HVAdmin:(CI)(OI)F</source>
          <target state="translated">icacls X:\VMS-% /grant Dom\HVAdmin:(CI) (OI) F</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Windows PowerShell sends the following command string to the Icacls  program: X:\VMS /grant Dom\HVAdmin:(CI)(OI)F</source>
          <target state="translated">Windows PowerShell Icacls 프로그램에는 다음 명령 문자열을 보냅니다: X:\VMS /grant Dom\HVAdmin:(CI) (OI) F</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>about_Command_Syntax</source>
          <target state="translated">about_Command_Syntax</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>