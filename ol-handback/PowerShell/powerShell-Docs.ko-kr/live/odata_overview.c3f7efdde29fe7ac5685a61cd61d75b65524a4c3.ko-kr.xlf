<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ko-kr">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generate PowerShell Cmdlets based on OData Endpoint</source>
          <target state="translated">OData 끝점에 따라 PowerShell Cmdlet 생성</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generate Windows PowerShell cmdlets based on an OData endpoint</source>
          <target state="translated">OData 끝점에 따라 Windows PowerShell cmdlet 생성</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Export-ODataEndpointProxy<ept id="p1">**</ept> is a cmdlet that generates a set of Windows PowerShell cmdlets based on the functionality exposed by a given OData endpoint.</source>
          <target state="translated"><bpt id="p1">**</bpt>Export-ODataEndpointProxy<ept id="p1">**</ept>는 지정된 OData 끝점에서 제공하는 기능에 따라 Windows PowerShell cmdlet 집합을 생성하는 cmdlet입니다.</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this new cmdlet:</source>
          <target state="translated">다음 예제에서 이 새로운 cmdlet을 사용하는 방법을 보여 줍니다.</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\# Basic use case of Export-ODataEndpointProxy</source>
          <target state="translated">\# Export-ODataEndpointProxy의 기본 사용 사례</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are still parts of key use cases in development for this functionality, including, but not limited to:</source>
          <target state="translated">이 기능의 개발에 대한 몇 가지 주요 사용 사례가 있으며, 다음을 포함하되 이에 국한되지 않습니다.</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Associations</source>
          <target state="translated">연결</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Passing streams</source>
          <target state="translated">스트림 전달</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Generate Windows PowerShell cmdlets based on an OData endpoint with ODataUtils</source>
          <target state="translated">ODataUtils를 사용하여 OData 끝점에 따라 Windows PowerShell cmdlet 생성</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The ODataUtils module allows generation of Windows PowerShell cmdlets from REST endpoints that support OData.</source>
          <target state="translated">ODataUtils 모듈에서는 OData를 지원하는 REST 끝점에서 Windows PowerShell cmdlet을 생성할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following incremental enhancements are in the Microsoft.PowerShell.ODataUtils Windows PowerShell module.</source>
          <target state="translated">다음과 같은 증분 향상 기능이 Microsoft.PowerShell.ODataUtils Windows PowerShell 모듈에 있습니다.</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Channel additional information from server-side endpoint to client side.</source>
          <target state="translated">서버 쪽 끝점과 클라이언트 쪽 사이에서 추가 정보 연결</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Client-side paging support</source>
          <target state="translated">클라이언트 쪽 페이징 지원</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Server-side filtering by using the -Select parameter</source>
          <target state="translated">-Select 매개 변수를 사용하여 서버 쪽 필터링</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Support for web request headers</source>
          <target state="translated">웹 요청 헤더에 대한 지원</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The proxy cmdlets generated by the Export-ODataEndPointProxy cmdlet provide additional information (not mentioned in the $metadata used during the client-side proxy generation) from the server side OData endpoint on the Information stream (a new Windows PowerShell 5.0 feature).</source>
          <target state="translated">Export-ODataEndPointProxy cmdlet에서 생성된 프록시 cmdlet은 정보 스트림(새로운 Windows PowerShell 5.0 기능)의 서버 쪽 OData 끝점에서 추가 정보(클라이언트 쪽 프록시 생성 중 사용된 $metadata에 언급되지 않은 정보)를 제공합니다.</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Here is an example of how to get that information.</source>
          <target state="translated">다음은 해당 정보를 가져오는 방법에 대한 예입니다.</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can get the records from the server side in batches by using client-side paging support.</source>
          <target state="translated">클라이언트 쪽 페이징 지원을 사용하여 서버 쪽에서 레코드를 일괄 처리로 가져올 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is useful when you must get a large amount of data from the server over the network.</source>
          <target state="translated">이 방법은 네트워크를 통해 서버에서 많은 양의 데이터를 가져와야 하는 경우에 유용합니다.</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The generated proxy cmdlets support the –Select parameter which you can use as a filter to receive only the record properties that the client needs.</source>
          <target state="translated">생성된 프록시 cmdlet은 클라이언트에 필요한 레코드 속성만 받는 필터로 사용할 수 있는 –Select 매개 변수를 지원합니다.</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This reduces the amount of data that is transferred over the network, because the filtering occurs on the server side.</source>
          <target state="translated">이렇게 하면 필터링이 서버 쪽에서 수행되므로 네트워크를 통해 전송되는 데이터의 양이 줄어듭니다.</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Export-ODataEndpointProxy cmdlet, and the proxy cmdlets generated by it, now support the Headers parameter (supply values as a hash table), which you can use to channel any additional information that is expected by the server-side OData endpoint.</source>
          <target state="translated">Export-ODataEndpointProxy cmdlet과 이 cmdlet에서 생성된 프록시 cmdlet은 Headers 매개 변수(해시 테이블로 값 제공)를 지원하여 서버 쪽 OData 끝점에 필요한 추가 정보를 연결하는 데 사용할 수 있습니다.</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the following example, you can channel a Subscription key through Headers for services that are expecting a Subscription key for authentication.</source>
          <target state="translated">다음 예제에서는 인증에 구독 키가 필요한 서비스에 대해 Headers를 통해 구독 키를 연결할 수 있습니다.</target>         
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8849fb46853f12318dd34781d07085419737d196</xliffext:olfilehash>
  </header>
</xliff>