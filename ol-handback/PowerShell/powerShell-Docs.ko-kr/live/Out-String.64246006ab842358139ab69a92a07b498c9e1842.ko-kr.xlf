<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd65d08f3c40fa624cfaff36adeaf9ba77859b3e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Utility\Out-String.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c54f0074925cf85d1167ff10e895bbe960962ad</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2a8cad565b0260142e77493daa5b2d30503b545</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Out-String</source>
          <target state="translated">Out-String</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Out-String</source>
          <target state="translated">Out-String</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Sends objects to the host as a series of strings.</source>
          <target state="translated">개체를 연속 문자열로 호스트에 보냅니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Out-String<ept id="p1">**</ept> cmdlet converts the objects that Windows PowerShell manages into an array of strings.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Out-string<ept id="p1">**</ept> cmdlet은 Windows PowerShell에서 관리 하는 개체의 문자열 배열로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Out-String<ept id="p1">**</ept> accumulates the strings and returns them as a single string, but you can use the stream parameter to direct <bpt id="p2">**</bpt>Out-String<ept id="p2">**</ept> to return one string at a time.</source>
          <target state="translated">기본적으로 <bpt id="p1">**</bpt>Out-string<ept id="p1">**</ept> 문자열과 위해 stream 매개 변수를 사용할 수 있지만 단일 문자열을 그대로 반환 누적 <bpt id="p2">**</bpt>Out-string<ept id="p2">**</ept> 를 한 번에 하나의 문자열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This cmdlet lets you search and manipulate string output as you would in traditional shells when object manipulation is less convenient.</source>
          <target state="translated">이 cmdlet을 사용하면 개체를 편하게 조작할 수 없을 경우 기존 셸과 동일한 방식으로 문자열 출력을 검색하고 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 예제 1 --------------------------</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This command sends the content of the Testfile2.txt file to the console as a single string.</source>
          <target state="translated">이 명령은 Testfile2.txt 파일의 내용을 콘솔에 하나의 문자열로 보냅니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It uses the Get-Content cmdlet to get the content of the file.</source>
          <target state="translated">Get-content cmdlet를 사용 하 여 파일의 콘텐츠를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The pipeline operator (|) sends the content to <bpt id="p1">**</bpt>Out-String<ept id="p1">**</ept>, which sends the content to the console as a string.</source>
          <target state="translated">파이프라인 연산자 (|)가 콘텐츠를 <bpt id="p1">**</bpt>Out-string<ept id="p1">**</ept>, 보내는 수신 하는 콘텐츠를 문자열로 콘솔입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These commands get the regional settings for the current user and convert the data to strings.</source>
          <target state="translated">이 명령은 현재 사용자의 국가별 설정을 가져온 다음 데이터를 문자열로 변환합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 3 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 3 --------------------------</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This example demonstrates the difference between working with objects and working with strings.</source>
          <target state="translated">이 예제에서는 개체 작업과 문자열 작업 간의 차이점을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The command displays aliases that include the phrase "Get-Command".</source>
          <target state="translated">이 명령은 "Get-Command" 구를 포함하는 별칭을 표시합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It uses the Get-Alias cmdlet to get a set of <bpt id="p1">**</bpt>AliasInfo<ept id="p1">**</ept> objects (one for each alias in the current session).</source>
          <target state="translated">Get-alias cmdlet의 집합을 사용 하 여 <bpt id="p1">**</bpt>AliasInfo<ept id="p1">**</ept> 개체 (현재 세션의 각 별칭 하나씩).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The pipeline operator (|) sends the output of the <bpt id="p1">**</bpt>Get-Alias<ept id="p1">**</ept> cmdlet to the <bpt id="p2">**</bpt>Out-String<ept id="p2">**</ept> cmdlet, which converts the objects to a series of strings.</source>
          <target state="translated">파이프라인 연산자 (|)의 출력으로 보냅니다는 <bpt id="p1">**</bpt>Get-alias<ept id="p1">**</ept> cmdlet을 사용 하는 <bpt id="p2">**</bpt>Out-string<ept id="p2">**</ept> cmdlet으로 개체를 일련의 문자열로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">**</bpt>Stream<ept id="p1">**</ept> parameter of <bpt id="p2">**</bpt>Out-String<ept id="p2">**</ept> to send each string individually, instead of concatenating them into a single string.</source>
          <target state="translated">사용 하 여는 <bpt id="p1">**</bpt>스트림<ept id="p1">**</ept> 의 매개 변수 <bpt id="p2">**</bpt>Out-string<ept id="p2">**</ept> 단일 문자열로 연결 하는 대신 각 문자열을 개별적으로 보낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Another pipeline operator sends the strings to the Select-String cmdlet, which selects the strings that include "Get-Command" anywhere in the string.</source>
          <target state="translated">다른 파이프라인 연산자 Select-string cmdlet은 아무 곳 이나 문자열에 "Get-command"를 포함 하는 문자열을 선택 하는 문자열을 보냅니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you omit the <bpt id="p1">**</bpt>Stream<ept id="p1">**</ept> parameter, the command displays all of the aliases, because Select-String finds "Get-Command" in the single string that <bpt id="p2">**</bpt>Out-String<ept id="p2">**</ept> returns, and the formatter displays the string as a table.</source>
          <target state="translated">생략 하면는 <bpt id="p1">**</bpt>스트림<ept id="p1">**</ept> 의 모든 별칭을 표시 하는 매개 변수, 명령, select-string "Get-command"는 단일에서 때문에 문자열 <bpt id="p2">**</bpt>Out-string<ept id="p2">**</ept> 리턴과 포맷터 문자열 표로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specifies the objects to be written to a string.</source>
          <target state="translated">문자열에 기록할 개체를 지정합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects, or type a command or expression that gets the objects.</source>
          <target state="translated">개체를 포함하는 변수를 입력하거나 개체를 가져오는 명령 또는 식을 입력하세요.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-Stream</source>
          <target state="translated">스트림</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Sends the strings for each object separately.</source>
          <target state="translated">각 개체의 문자열을 개별적으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By default, the strings for each object are accumulated and sent as a single string.</source>
          <target state="translated">기본적으로 각 개체의 문자열은 누적되어 하나의 문자열로 전송됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To use the <bpt id="p1">**</bpt>Stream<ept id="p1">**</ept> parameter, type "<bpt id="p2">**</bpt>-Stream<ept id="p2">**</ept>" or its alias, "<bpt id="p3">**</bpt>ost<ept id="p3">**</ept>".</source>
          <target state="translated">사용 하 여 <bpt id="p1">**</bpt>스트림<ept id="p1">**</ept> 매개 변수, 형식 "<bpt id="p2">**</bpt>-스트림<ept id="p2">**</ept>"또는 해당 별칭"<bpt id="p3">**</bpt>ost<ept id="p3">**</ept>"입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>-Width</source>
          <target state="translated">너비</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters in each line of output.</source>
          <target state="translated">출력의 각 줄에 포함되는 문자 수를 지정합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Any additional characters are truncated, not wrapped.</source>
          <target state="translated">이 문자보다 많으면 잘리거나 다음 줄로 넘어갑니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you omit this parameter, the width is determined by the characteristics of the host program.</source>
          <target state="translated">이 매개 변수를 생략할 경우 호스트 프로그램의 특성에 따라 너비가 결정됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default value for the Windows PowerShell console is 80 (characters).</source>
          <target state="translated">Windows PowerShell 콘솔의 기본값은 80(자)입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can pipe objects to Out-String.</source>
          <target state="translated">개체를 Out-String으로 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Out-String returns the string that it creates from the input object.</source>
          <target state="translated">Out-String은 입력 개체에서 만든 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The cmdlets that contain the <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> verb (the <bpt id="p2">**</bpt>Out<ept id="p2">**</ept> cmdlets) do not format objects; they just render them and send them to the specified display destination.</source>
          <target state="translated">포함 된 cmdlet는 <bpt id="p1">**</bpt>아웃<ept id="p1">**</ept> 동사 (의 <bpt id="p2">**</bpt>아웃<ept id="p2">**</ept> cmdlet) 개체 포맷 안 함 생각 하며 자신이 방금 렌더링 하는 지정 된 표시 대상으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you send an unformatted object to an <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> cmdlet, the cmdlet sends it to a formatting cmdlet before rendering it.</source>
          <target state="translated">서식이 지정 되지 않은 개체를 보낼 경우는 <bpt id="p1">**</bpt>아웃<ept id="p1">**</ept> cmdlet으로 보낸 형식 지정 cmdlet 렌더링 하기 전에 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> cmdlets do not have parameters that take  names or file paths.</source>
          <target state="translated"> <bpt id="p1">**</bpt>아웃<ept id="p1">**</ept> cmdlet 매개 변수 이름 또는 파일 경로 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To send data to an <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> cmdlet, use a pipeline operator (|) to send the output of a Windows PowerShell command to the cmdlet.</source>
          <target state="translated">데이터 전송에 <bpt id="p1">**</bpt>아웃<ept id="p1">**</ept> cmdlet을 파이프라인 연산자 (|)를 사용 하 여 Windows PowerShell 명령의 출력은 cmdlet으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can also store data in a variable and use the <bpt id="p1">**</bpt>InputObject<ept id="p1">**</ept> parameter to pass the data to the cmdlet.</source>
          <target state="translated">변수를 사용 데이터를 저장할 수도 있습니다는 <bpt id="p1">**</bpt>InputObject<ept id="p1">**</ept> 데이터 cmdlet에 전달할 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see the examples.</source>
          <target state="translated">자세한 내용은 예제를 참조하세요.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Out-Default</source>
          <target state="translated">Out-Default</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Out-File</source>
          <target state="translated">Out-file</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Out-Host</source>
          <target state="translated">Out-Host</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Out-Null</source>
          <target state="translated">Out-Null</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Out-Printer</source>
          <target state="translated">Out-printer</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>