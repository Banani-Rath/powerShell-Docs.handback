<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4fb33c9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d8c2392c6a9f59dc5e601308bc08db8c653760e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Using-Format-Commands-to-Change-Output-View.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44f624b33953efbdca908458ba49f0b235231fe4</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Format Commands to Change Output View</source>
          <target state="translated">형식 명령을 사용하여 출력 보기 변경</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using Format Commands to Change Output View</source>
          <target state="translated">형식 명령을 사용하여 출력 보기 변경</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has a set of cmdlets that allow you to control which properties are displayed for particular objects.</source>
          <target state="translated">Windows PowerShell에는 특정 개체에 대해 표시할 속성을 제어할 수 있는 일련의 cmdlet이 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The names of all the cmdlets begin with the verb <bpt id="p1">**</bpt>Format<ept id="p1">**</ept>.</source>
          <target state="translated">이러한 cmdlet의 이름은 모두 동사 <bpt id="p1">**</bpt>Format<ept id="p1">**</ept>으로 시작되며,</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>They let you select one or more properties to show.</source>
          <target state="translated">표시할 속성을 하나 이상 선택하는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlets are <bpt id="p2">**</bpt>Format-Wide<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Format-List<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Format-Table<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Format-Custom<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlet으로는 <bpt id="p2">**</bpt>Format-Wide<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Format-List<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Format-Table<ept id="p4">**</ept> 및 <bpt id="p5">**</bpt>Format-Custom<ept id="p5">**</ept>이 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We will only describe the <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Format-List<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Format-Table<ept id="p3">**</ept> cmdlets in this user's guide.</source>
          <target state="translated">이 사용자 가이드에서는 <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Format-List<ept id="p2">**</ept> 및 <bpt id="p3">**</bpt>Format-Table<ept id="p3">**</ept> cmdlet에 대해서만 설명합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each format cmdlet has default properties that will be used if you do not specify specific properties to display.</source>
          <target state="translated">각 Format cmdlet에는 표시할 특정 속성을 지정하지 않을 경우 사용되는 기본 속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each cmdlet also uses the same parameter name, <bpt id="p1">**</bpt>Property<ept id="p1">**</ept>, to specify which properties you want to display.</source>
          <target state="translated">또한 각 cmdlet은 동일한 매개 변수 이름인 <bpt id="p1">**</bpt>Property<ept id="p1">**</ept>를 사용하여 표시할 속성을 지정합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept> only shows a single property, its <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter only takes a single value, but the property parameters of <bpt id="p3">**</bpt>Format-List<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Format-Table<ept id="p4">**</ept> will accept a list of property names.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept>는 하나의 속성만 표시하기 때문에 해당 <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> 매개 변수가 하나의 값만 사용하지만 <bpt id="p3">**</bpt>Format-List<ept id="p3">**</ept> 및 <bpt id="p4">**</bpt>Format-Table<ept id="p4">**</ept>의 Property 매개 변수는 속성 이름 목록을 사용합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you use the command <bpt id="p1">**</bpt>Get-Process -Name powershell<ept id="p1">**</ept> with two instances of Windows PowerShell running, you get output that looks like this:</source>
          <target state="translated">실행 중인 두 개의 Windows PowerShell 인스턴스에 <bpt id="p1">**</bpt>Get-Process -Name powershell<ept id="p1">**</ept> 명령을 사용하면 다음과 같은 내용이 출력됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the rest of this section, we will explore how to use <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlets to change the way the output of this command is displayed.</source>
          <target state="translated">이 섹션의 나머지 부분에서는 <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlet을 사용하여 이 명령 출력의 표시 방법을 변경하는 방법을 설명합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using Format-Wide for Single-Item Output</source>
          <target state="translated">Format-Wide를 사용하여 단일 항목 출력</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept> cmdlet, by default, displays only the default property of an object.</source>
          <target state="translated">기본적으로 <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept> cmdlet은 개체의 기본 속성만 표시합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The information associated with each object is displayed in a single column:</source>
          <target state="translated">다음과 같이 각 개체와 연결된 정보는 하나의 열에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can also specify a non-default property:</source>
          <target state="translated">다음과 같이 기본 속성이 아닌 속성을 지정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Controlling Format-Wide Display with Column</source>
          <target state="translated">열이 포함된 Format-Wide 표시 제어</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>With the <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept> cmdlet, you can only display a single property at a time.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept> cmdlet을 사용하면 한 번에 하나의 속성만 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This makes it useful for displaying simple lists that show only one element per line.</source>
          <target state="translated">이 cmdlet은 한 줄에 하나의 요소만 표시되는 간단한 목록을 표시하는 데 유용합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To get a simple listing, set the value of the <bpt id="p1">**</bpt>Column<ept id="p1">**</ept> parameter to 1 by typing:</source>
          <target state="translated">간단한 목록을 표시하려면 다음과 같이 입력하여 <bpt id="p1">**</bpt>Column<ept id="p1">**</ept> 매개 변수의 값을 1로 설정합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Using Format-List for a List View</source>
          <target state="translated">Format-List를 사용하여 목록 보기</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> cmdlet displays an object in the form of a listing, with each property labeled and displayed on a separate line:</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> cmdlet은 다음과 같이 각 속성에 레이블이 지정되어 있고 이러한 각 속성이 별도의 줄에 표시되는 목록 형식으로 개체를 표시합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can specify as many properties as you want:</source>
          <target state="translated">다음과 같이 속성을 원하는 대로 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Getting Detailed Information by Using Format-List with Wildcards</source>
          <target state="translated">와일드카드와 함께 Format-List를 사용하여 자세한 정보 보기</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> cmdlet lets you use a wildcard as the value of its <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> cmdlet을 사용하면 와일드카드를 해당 <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> 매개 변수의 값으로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This lets you display detailed information.</source>
          <target state="translated">이 경우 자세한 정보를 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Often, objects include more information than you need, which is why Windows PowerShell does not show all property values by default.</source>
          <target state="translated">필요한 것보다 많은 정보가 개체에 포함되는 경우가 종종 있는데, 이는 Windows PowerShell이 기본적으로 모든 속성 값을 표시하지 않기 때문입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To show all of properties of an object, use the <bpt id="p1">**</bpt>Format-List -Property <ph id="ph1">\&amp;</ph>#42;<ept id="p1">**</ept> command.</source>
          <target state="translated">개체의 속성을 모두 표시하려면 <bpt id="p1">**</bpt>Format-List -Property <ph id="ph1">\&amp;</ph>#42;<ept id="p1">**</ept> 명령을 사용합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following command generates over 60 lines of output for a single process:</source>
          <target state="translated">다음 명령은 단일 프로세스의 출력을 위해 60개 이상의 줄을 생성합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although the <bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> command is useful for showing detail, if you want an overview of output that includes many items, a simpler tabular view is often more useful.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> 명령은 자세한 정보를 표시하는 데 유용하지만 많은 항목의 개요를 출력하려는 경우에는 대개 간단한 표 형식의 보기가 더 유용합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Using Format-Table for Tabular Output</source>
          <target state="translated">Format-Table을 사용하여 표 형식으로 출력</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> cmdlet with no property names specified to format the output of the <bpt id="p2">**</bpt>Get-Process<ept id="p2">**</ept> command, you get exactly the same output as you do without performing any formatting.</source>
          <target state="translated">속성 이름이 지정되지 않은 <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> cmdlet을 사용하여 <bpt id="p2">**</bpt>Get-Process<ept id="p2">**</ept> 명령의 출력 형식을 지정하면 형식을 지정하지 않고 이와 같은 작업을 수행할 때와 똑같은 내용이 출력됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The reason is that processes are usually displayed in a tabular format, as are most Windows PowerShell objects.</source>
          <target state="translated">그 이유는 대부분의 Windows PowerShell 개체와 마찬가지로 프로세스도 대개 표 형식으로 표시되기 때문입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Improving Format-Table Output (AutoSize)</source>
          <target state="translated">Format-Table 출력 향상(AutoSize)</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Although a tabular view is useful for displaying a lot of comparable information, it may be difficult to interpret if the display is too narrow for the data.</source>
          <target state="translated">표 형식의 보기는 비교 가능한 많은 정보를 표시하는 데 유용하지만 열이 너무 좁아 데이터를 모두 표시할 수 없는 경우에는 정보를 해석하기 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, if you try to display process path, ID, name, and company, you get truncated output for the process path and the company column:</source>
          <target state="translated">예를 들어 프로세스의 Path, ID, Name 및 Company를 표시하려고 하면 다음과 같이 프로세스의 Path 열과 Company 열의 출력이 잘립니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you specify the <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> parameter when you run the <bpt id="p2">**</bpt>Format-Table<ept id="p2">**</ept> command, Windows PowerShell will calculate column widths based on the actual data you are going to display.</source>
          <target state="translated"><bpt id="p2">**</bpt>Format-Table<ept id="p2">**</ept> 명령을 실행할 때 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> 매개 변수를 지정하면 Windows PowerShell은 표시할 실제 데이터를 기준으로 열 너비를 계산합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This makes the <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> column readable, but the company column remains truncated:</source>
          <target state="translated">이렇게 하면 다음과 같이 <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> 열은 읽을 수 있지만 Company 열은 여전히 잘린 채로 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> cmdlet might still truncate data, but it will only do so at the end of the screen.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> cmdlet을 실행하면 여전히 데이터가 잘릴 수 있지만 화면 끝에 있는 데이터만 잘립니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Properties, other than the last one displayed, are given as much size as they need for their longest data element to display correctly.</source>
          <target state="translated">마지막으로 표시되는 속성을 제외하고 속성에는 가장 긴 데이터 요소를 올바로 표시하는 데 필요한 충분한 크기가 지정됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can see that company name is visible but path is truncated if you swap the locations of <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Company<ept id="p2">**</ept> in the <bpt id="p3">**</bpt>Property<ept id="p3">**</ept> value list:</source>
          <target state="translated"><bpt id="p3">**</bpt>Property<ept id="p3">**</ept> 값 목록에서 <bpt id="p1">**</bpt>Path<ept id="p1">**</ept>와 <bpt id="p2">**</bpt>Company<ept id="p2">**</ept>의 위치를 바꾸면 회사 이름은 보이지만 경로는 잘립니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> command assumes that the nearer a property is to the beginning of the property list, the more important it is.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> 명령은 속성 목록의 시작 부분에 더 가까이 있을수록 더 중요한 속성으로 간주하고</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>So it attempts to display the properties nearest the beginning completely.</source>
          <target state="translated">시작 부분에 가장 가까이 있는 속성을 완전히 표시하려고 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> command cannot display all the properties, it will remove some columns from the display and provide a warning.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> 명령은 속성을 모두 표시할 수 없는 경우 일부 열을 표시에서 제거하고 경고를 표시합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can see this behavior if you make <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> the last property in the list:</source>
          <target state="translated">다음과 같이 <bpt id="p1">**</bpt>Name<ept id="p1">**</ept>을 목록의 마지막 속성으로 지정하면 이 동작을 재현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the output above, the ID column is truncated to make it fit into the listing, and the column headings are stacked up.</source>
          <target state="translated">위의 출력에서는 목록에 맞게 조정하기 위해 ID 열이 잘리고 해당 열 머리글이 두 줄로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Automatically resizing the columns does not always do what you want.</source>
          <target state="translated">열 크기를 자동으로 조정해도 항상 원하는 대로 표시되지는 않습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Wrapping Format-Table Output in Columns (Wrap)</source>
          <target state="translated">열에 Format-Table 출력 래핑(Wrap)</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can force lengthy <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> data to wrap within its display column by using the <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> parameter.</source>
          <target state="translated"><bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> 매개 변수를 사용하여 긴 <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> 데이터를 해당 열 안에서 래핑할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> parameter alone will not necessarily do what you expect, since it uses default settings if you do not also specify <bpt id="p2">**</bpt>AutoSize<ept id="p2">**</ept>:</source>
          <target state="translated">다음과 같이 <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> 매개 변수를 단독으로 사용하는 경우에도 <bpt id="p2">**</bpt>AutoSize<ept id="p2">**</ept>를 지정하지 않으면 기본 설정이 사용되기 때문에 예상되는 작업을 수행하지 않아도 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An advantage of using the <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> parameter by itself is that it does not slow down processing very much.</source>
          <target state="translated"><bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> 매개 변수를 단독으로 사용하면 프로세스 속도가 크게 느려지지 않는다는 이점이 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you perform a recursive file listing of a large directory system, it might take a very long time and use a lot of memory before displaying the first output items if you use <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept>.</source>
          <target state="translated">큰 디렉터리 시스템의 파일을 반복해서 표시할 때 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept>를 사용하면 첫 번째 출력 항목을 표시할 때까지 매우 많은 시간이 걸리고 많은 메모리가 사용될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you are not concerned about system load, then <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> works well with the <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> parameter.</source>
          <target state="translated">시스템 로드에 신경 쓰지 않아도 되는 경우에는 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept>가 <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> 매개 변수와 함께 잘 작동합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The initial columns are always allotted as much width as they need to display items on one line, just as when you specify <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> without the <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> parameter.</source>
          <target state="translated"><bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> 매개 변수 없이 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept>를 지정한 경우와 같이 초기 열에는 항상 하나의 줄에 항목을 표시하는 데 필요한 충분한 너비가 할당됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The only difference is that the final column will be wrapped if necessary:</source>
          <target state="translated">유일한 차이점은 다음과 같이 마지막 열이 필요에 따라 래핑된다는 것입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Some columns might not be displayed if you specify the widest columns first, so it is safest to specify the smallest data elements first.</source>
          <target state="translated">가장 긴 열을 가장 먼저 지정하면 일부 열이 표시되지 않을 수 있으므로 가장 작은 데이터 요소를 가장 먼저 지정하는 것이 안전합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the following example, we specify the extremely wide path element first, and even with wrapping, we still lose the final <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> column:</source>
          <target state="translated">다음 예제에서는 매우 긴 경로 요소를 가장 먼저 지정했기 때문에 래핑을 사용했지만 최종 <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> 열이 여전히 표시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Organizing Table Output (-GroupBy)</source>
          <target state="translated">표 형식의 출력 구성(-GroupBy)</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Another useful parameter for tabular output control is <bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept>.</source>
          <target state="translated">표 형식의 출력을 제어하는 데 사용할 수 있는 또 다른 유용한 매개 변수는 <bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept>입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Longer tabular listings in particular may be hard to compare.</source>
          <target state="translated">특히 긴 표 형식의 목록은 비교하기 어려울 수 있지만</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept> parameter groups output based on a property value.</source>
          <target state="translated"><bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept> 매개 변수를 사용하면 속성 값을 기준으로 출력을 그룹화할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, we can group processes by company for easier inspection, omitting the company value from the property listing:</source>
          <target state="translated">예를 들어 다음과 같이 프로세스를 더 쉽게 검사하기 위해 속성 목록에서 회사 값을 제거하여 해당 프로세스를 회사별로 그룹화할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>