<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54a9d0773da862e9283f7150b4b6fc6b98051c83</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Utility\ConvertFrom-Csv.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5de61bfdf4cf7704c6528aee35017f6dec6d8c0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d64b6e7e8a757c897400a86a9b8b5ead3ab0507</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts object properties in comma-separated value (CSV) format into CSV versions of the original objects.</source>
          <target state="translated">CSV(쉼표로 구분된 값) 형식의 개체 속성을 원래 개체의 CSV 버전으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Delimiter (Default)</source>
          <target state="translated">구분 기호 (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>UseCulture</source>
          <target state="translated">UseCulture</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The ConvertFrom-CSV cmdlet creates objects from CSV variable-length strings that are generated by the ConvertTo-CSV cmdlet.</source>
          <target state="translated">ConvertFrom-CSV cmdlet은 ConvertTo-CSV cmdlet에서 생성하는 CSV 가변 길이 문자열에서 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the parameters of the ConvertFrom-CSV cmdlet to specify the column header row, which determines the property names of the resulting objects, to specify the item delimiter, or to direct ConvertFrom-CSV to use the list separator for the current culture as the delimiter.</source>
          <target state="translated">ConvertFrom-CSV cmdlet의 매개 변수를 사용하여 결과 개체의 속성 이름을 결정하는 열 머리글 행을 지정하거나, 항목 구분 기호를 지정하거나, 현재 문화권의 목록 구분 기호를 구분 기호로 사용하도록 ConvertFrom-CSV에 지시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The objects that ConvertFrom-CSV creates are CSV versions of the original objects.</source>
          <target state="translated">ConvertFrom-CSV가 만드는 개체는 원래 개체의 CSV 버전입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The property values of the CSV objects are string versions of the property values of the original objects.</source>
          <target state="translated">CSV 개체의 속성 값은 원래 개체 속성 값의 문자열 버전입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The CSV versions of the objects do not have any methods.</source>
          <target state="translated">개체의 CSV 버전에는 메서드가 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also use the Export-CSV and Import-CSV cmdlets to convert objects to CSV strings in a file (and back).</source>
          <target state="translated">Export-CSV 및 Import-CSV cmdlet을 사용하여 개체를 파일의 CSV 문자열로 변환하거나 그 반대로 변환할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These cmdlets are the same as the ConvertTo-CSV and ConvertFrom-CSV cmdlets, except that they save the CSV strings in a file.</source>
          <target state="translated">이 두 cmdlet은 CSV 문자열을 파일에 저장한다는 점을 제외하면 ConvertTo-CSV 및 ConvertFrom-CSV cmdlet과 같습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 예제 1 --------------------------</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These commands convert the processes on the local computer into CSV format and then restore them to object form.</source>
          <target state="translated">이들 명령은 로컬 컴퓨터의 프로세스를 CSV 형식으로 변환한 다음 개체 형식으로 복원합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Process cmdlet to get the processes on the local computer.</source>
          <target state="translated">첫 번째 명령은 Get-Process cmdlet을 사용하여 로컬 컴퓨터의 프로세스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A pipeline operator (|) sends them to the ConvertTo-CSV cmdlet, which converts the process object to CSV format.</source>
          <target state="translated">파이프라인 연산자(|)가 이를 ConvertTo-CSV cmdlet으로 보내면 이 cmdlet은 프로세스 개체를 CSV 형식으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The CSV strings are saved in the $p variable.</source>
          <target state="translated">CSV 문자열은 $p 변수에 저장됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second command uses a pipeline operator to send the CSV strings in the $p variable to the ConvertFrom-CSV cmdlet.</source>
          <target state="translated">두 번째 명령은 파이프라인 연산자를 사용하여 $p 변수에 있는 CSV 문자열을 ConvertFrom-CSV cmdlet으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The cmdlet converts the CSV strings into CSV versions of the original process objects.</source>
          <target state="translated">이 cmdlet은 CSV 문자열을 원래 프로세스 개체의 CSV 버전으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These commands convert a data object to CSV format and then to CSV object format.</source>
          <target state="translated">이들 명령은 데이터 개체를 CSV 형식으로 변환한 다음 CSV 개체 형식으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Date cmdlet to get the current date and time.</source>
          <target state="translated">첫 번째 명령은 Get-Date cmdlet을 사용하여 현재 날짜 및 시간을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A pipeline object (|) sends the date to the ConvertTo-CSV cmdlets, which converts the date object to a series of CSV strings.</source>
          <target state="translated">파이프라인 연산자(|)가 날짜를 ConvertTo-CSV cmdlet으로 보내면 이 cmdlet은 날짜 개체를 일련의 CSV 문자열로 변환합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The command uses the Delimiter parameter to specify a semicolon delimiter.</source>
          <target state="translated">이 명령은 Delimiter 매개 변수를 사용하여 세미콜론 구분 기호를 지정합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The strings are saved in the $date variable.</source>
          <target state="translated">문자열은 $date 변수에 저장됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The second command uses the ConvertFrom-CSV cmdlet to convert the CSV strings in the $date variable back to object format.</source>
          <target state="translated">두 번째 명령은 ConvertFrom-CSV cmdlet을 사용하여 $date 변수에 있는 CSV 문자열을 다시 개체 형식으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The command uses the InputObject parameter to specify the CSV strings and the Delimiter parameter to specify the semicolon delimiter.</source>
          <target state="translated">이 명령은 InputObject 매개 변수를 사용하여 CSV 문자열을 지정하고 Delimiter 매개 변수를 사용하여 세미콜론 구분 기호를 지정합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 3 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 3 --------------------------</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Header parameter of ConvertFrom-Csv to change the names of properties in the resulting imported object.</source>
          <target state="translated">이 예제에서는 ConvertFrom-Csv의 Header 매개 변수를 사용하여 가져온 결과 개체의 속성 이름을 변경하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first command uses the Start-Job cmdlet to start a background job that runs a Get-Process command on the local computer.</source>
          <target state="translated">첫 번째 명령은 Start-Job cmdlet을 사용하여 로컬 컴퓨터에서 Get-Process 명령을 실행하는 백그라운드 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A pipeline operator (|) sends the resulting job object to the ConvertTo-CSV cmdlet, which converts the job object to CSV format.</source>
          <target state="translated">파이프라인 연산자(|)가 ConvertTo-CSV cmdlet으로 결과 작업 개체를 보내면 이 cmdlet이 작업 개체를 CSV 형식으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An assignment operator (=) saves the resulting CSV in the $j variable.</source>
          <target state="translated">그러면 대입 연산자(=)가 결과 CSV를 $j 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The second command saves a header in the $header variable.</source>
          <target state="translated">두 번째 명령은 머리글을 $header 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Unlike the default header, this header uses "MoreData" instead of "HasMoreData" and "State" instead of "JobStateInfo".</source>
          <target state="translated">기본 머리글과 달리 이 머리글은 "HasMoreData" 대신 "MoreData"를, "JobStateInfo" 대신 "State"를 사용합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The third command deletes the original header (the second line) from the CSV strings and returns it to the $j variable.</source>
          <target state="translated">세 번째 명령은 CSV 문자열에서 원래 머리글(두 번째 줄)을 삭제한 다음 이를 $j 변수로 반환합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The fourth command uses the ConvertFrom-CSV cmdlet to convert the CSV strings to a CSV version of the job object.</source>
          <target state="translated">네 번째 명령은 ConvertFrom-CSV cmdlet을 사용하여 CSV 문자열을 작업 개체의 CSV 버전으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The command uses a pipeline operator to send the content in $j to ConvertFrom-CSV.</source>
          <target state="translated">이 명령은 파이프라인 연산자를 사용하여 $j의 내용을 ConvertFrom-CSV로 보냅니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The resulting object has "MoreData" and "State" properties, as specified by the header.</source>
          <target state="translated">결과 개체에는 머리글에 지정된 대로 "MoreData" 및 "State" 속성이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the ConvertFrom-CSV cmdlet to convert CSV strings of service objects that had been converted by the ConvertTo-CSV cmdlet.</source>
          <target state="translated">이 명령은 ConvertFrom-CSV cmdlet을 사용하여 ConvertTo-CSV cmdlet이 변환한 서비스 개체의 CSV 문자열을 변환합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The command uses the UseCulture parameter to direct ConvertFrom-CSV to use the delimiter (list separator) of the current culture.</source>
          <target state="translated">이 명령은 UseCulture 매개 변수를 사용하여 현재 문화권의 목록 구분 기호를 사용하도록 ConvertFrom-CSV에 지시합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When using the UseCulture parameter, be sure that the list separator of the current culture matches the delimiter used in the CSV strings.</source>
          <target state="translated">UseCulture 매개 변수를 사용하는 경우 현재 문화권의 목록 구분 기호가 CSV 문자열에 사용된 구분 기호와 일치하는지 확인해야 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Otherwise, ConvertFrom-CSV cannot generate objects from the CSV strings.</source>
          <target state="translated">그러지 않으면 ConvertFrom-CSV가 CSV 문자열에서 개체를 생성할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this example, a Get-Culture command was used to verify the list separator, before the ConvertFrom-CSV command was used.</source>
          <target state="translated">이 예에서 Get-Culture 명령은 ConvertFrom-CSV 명령을 사용하기 전에 목록 구분 기호를 확인하는 데 사용되었습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>-Delimiter</source>
          <target state="translated">구분 기호</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies the delimiter that separates the property values in the CSV strings.</source>
          <target state="translated">CSV 문자열의 속성 값을 구분하는 구분 기호를 지정합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">기본값은 쉼표(,)입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Enter a character, such as a colon (:).</source>
          <target state="translated">콜론(:)과 같은 문자를 입력합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To specify a semicolon (;), enclose it in quotation marks.</source>
          <target state="translated">세미콜론(;)을 지정하려면 따옴표로 묶어야 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the delimiter used in the CSV strings, ConvertFrom-CSV cannot create objects from the CSV strings.</source>
          <target state="translated">CSV 문자열에 사용되는 구분 기호 이외의 문자를 지정하는 경우 ConvertFrom-CSV는 CSV 문자열에서 개체를 만들 수 없습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">대신 이 cmdlet은 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-Header</source>
          <target state="translated">헤더</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies an alternate column header row for the imported string.</source>
          <target state="translated">가져온 문자열에 대해 대체 열 머리글 행을 지정합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The column header determines the names of the properties of the object that ConvertFrom-CSV creates.</source>
          <target state="translated">열 머리글은 ConvertFrom-CSV가 만드는 개체 속성의 이름을 결정합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Enter a comma-separated list of the column headers.</source>
          <target state="translated">쉼표로 구분된 열 머리글 목록을 입력합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Enclose each item in quotation marks (single or double).</source>
          <target state="translated">각 항목을 작은따옴표 또는 큰따옴표로 묶습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Do not enclose the header string in quotation marks.</source>
          <target state="translated">머리글 문자열을 따옴표로 묶지 마세요.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you enter fewer column headers than there are columns, the remaining columns will have no headers.</source>
          <target state="translated">열 수보다 적은 수의 열 머리글을 입력하면 나머지 열에 머리글이 표시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you enter more headers than there are columns, the extra headers are ignored.</source>
          <target state="translated">열 수보다 많은 수의 머리글을 입력하면 나머지 머리글은 무시됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When using the Header parameter, omit the column header string from the CSV strings.</source>
          <target state="translated">Header 매개 변수를 사용할 때는 CSV 문자열에서 열 머리글 문자열을 생략하세요.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Otherwise, ConvertFrom-CSV creates an extra object from the items in the header row.</source>
          <target state="translated">그러지 않으면 ConvertFrom-CSV가 머리글 행에 있는 항목에서 개체를 추가로 만듭니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Specifies the CSV strings to be converted to objects.</source>
          <target state="translated">개체로 변환할 CSV 문자열을 지정합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the CSV strings or type a command or expression that gets the CSV strings.</source>
          <target state="translated">CSV 문자열이 포함된 변수를 입력하거나 CSV 문자열을 가져오는 명령 또는 식을 입력하세요.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can also pipe the CSV strings to ConvertFrom-CSV.</source>
          <target state="translated">CSV 문자열을 ConvertFrom-CSV로 파이프할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-UseCulture</source>
          <target state="translated">-UseCulture</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use the list separator for the current culture as the string delimiter.</source>
          <target state="translated">현재 문화권의 목록 구분 기호를 문자열 구분 기호로 사용합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">기본값은 쉼표(,)입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To find the list separator for a culture, use the following command: (Get-Culture).TextInfo.ListSeparator.</source>
          <target state="translated">문화권에 대 한 목록 구분 기호를 찾으려면 다음 명령을 사용 합니다. (Get-culture). TextInfo.ListSeparator 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the delimiter used in the CSV strings, ConvertFrom-CSV cannot create objects from the CSV strings.</source>
          <target state="translated">CSV 문자열에 사용되는 구분 기호 이외의 문자를 지정하는 경우 ConvertFrom-CSV는 CSV 문자열에서 개체를 만들 수 없습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">대신 이 cmdlet은 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can pipe CSV strings to ConvertFrom-CSV.</source>
          <target state="translated">CSV 문자열을 ConvertFrom-CSV로 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>ConvertFrom-CSV returns the objects described by the properties in the CSV strings.</source>
          <target state="translated">ConvertFrom-CSV는 CSV 문자열의 속성이 설명하는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Because the imported objects are CSV versions of the object type, they are not recognized and formatted by the Windows PowerShell type formatting entries that format the non-CSV versions of the object type.</source>
          <target state="translated">가져온 개체는 개체 유형의 CSV 버전이므로 CSV가 아닌 개체 유형 버전 형식을 지정하는 Windows PowerShell 유형 형식 지정 항목을 통해 인식되지 않으며 형식이 지정되지도 않습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In CSV format, each object is represented by a comma-separated list of the property values of the object.</source>
          <target state="translated">CSV 형식에서 각 개체는 개체 속성 값을 쉼표로 구분한 목록으로 표현됩니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The property values are converted to strings (by using the ToString() method of the object), so they are generally represented by the name of the property value.</source>
          <target state="translated">속성 값은 개체의 ToString() 메서드를 통해 문자열로 변환될 수도 있으므로 일반적으로 속성 값 이름으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv does not export the methods of the object.</source>
          <target state="translated">ConvertTo-CSV는 개체의 메서드를 내보내지 않습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>