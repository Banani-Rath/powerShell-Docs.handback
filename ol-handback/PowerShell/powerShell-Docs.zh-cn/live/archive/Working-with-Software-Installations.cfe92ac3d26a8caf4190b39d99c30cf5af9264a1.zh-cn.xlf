<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Working-with-Software-Installations.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f60be9bebe9dfaa98f495c8e9a9c0d8c2fa5cc2</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-39517ae" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with Software Installations</source>
          <target state="translated">使用软件安装</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Working with Software Installations</source>
          <target state="translated">使用软件安装</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applications that are designed to use Windows Installer can be accessed through WMI's <bpt id="p1">**</bpt>Win32\_Product<ept id="p1">**</ept> class, but not all applications in use today use the Windows Installer.</source>
          <target state="translated">可以通过 WMI 的 <bpt id="p1">**</bpt>Win32_Product<ept id="p1">**</ept> 类访问旨在使用 Windows Installer 的应用程序，但当今使用的所有应用程序并非都使用 Windows Installer。</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because the Windows Installer provides the widest range of standard techniques for working with installable applications, we will focus primarily on those applications.</source>
          <target state="translated">由于 Windows Installer 提供了最广泛的标准技术用于使用可安装的应用程序，因此我们将主要使用这些应用程序。</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Applications that use alternate setup routines will generally not be managed by the Windows Installer.</source>
          <target state="translated">使用替代安装例程的应用程序通常不由 Windows Installer 管理。</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Specific techniques for working with those applications will depend on the installer software and decisions made by the application developer.</source>
          <target state="translated">用于使用这些应用程序的特定技术将取决于安装程序软件和应用程序开发人员做出的决策。</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Applications that are installed by copying the application files to the computer usually cannot be managed by using techniques discussed here.</source>
          <target state="translated">通常不能使用此处讨论的技术来管理通过将应用程序文件复制到计算机安装的应用程序。</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can manage these applications as files and folders by using the techniques discussed in the "Working With Files and Folders" section.</source>
          <target state="translated">你可以使用在“使用文件和文件夹”部分中讨论的技术将这些应用程序作为文件和文件夹进行管理。</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Listing Windows Installer Applications</source>
          <target state="translated">列出 Windows Installer 应用程序</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To list the applications installed with the Windows Installer on a local or remote system, use the following simple WMI query:</source>
          <target state="translated">若要列出随 Windows Installer 一起在本地或远程系统上安装的应用程序，请使用以下简单的 WMI 查询：</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To display all of the properties of the Win32\_Product object to the display, use the Properties parameter of the formatting cmdlets, such as the Format\-List cmdlet, with a value of \* (all).</source>
          <target state="translated">若要将 Win32_Product 对象的所有属性显示到显示屏中，请使用格式设置 cmdlet（例如 Format-List cmdlet）的“Property”参数，值为 *（全部）。</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Or, you could use the <bpt id="p1">**</bpt>Get\-WmiObject Filter<ept id="p1">**</ept> parameter to select only Microsoft .NET Framework 2.0.</source>
          <target state="translated">或者，可以使用 <bpt id="p1">**</bpt>Get-WmiObject Filter<ept id="p1">**</ept> 参数仅选择 Microsoft .NET Framework 2.0。</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because the filter used in this command is a WMI filter, it uses WMI Query Language (WQL) syntax, not Windows PowerShell syntax.</source>
          <target state="translated">由于此命令中使用的筛选器是 WMI 筛选器，它使用 WMI 查询语言 (WQL) 语法，而不是 Windows PowerShell 语法。</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instead,:</source>
          <target state="translated">但是，：</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that WQL queries frequently use characters, such as spaces or equal signs, that have a special meaning in Windows PowerShell.</source>
          <target state="translated">请注意，WQL 查询经常使用诸如空格或等号等字符，这些字符在 Windows PowerShell 中均具有特殊含义。</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For this reason, it is prudent to always enclose the value of the Filter parameter in quotation marks.</source>
          <target state="translated">为此，比较明智的做法是始终将“Filter”参数的值用引号括起来。</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can also use the Windows PowerShell escape character, a backtick (\`), although it may not improve readability.</source>
          <target state="translated">还可以使用 Windows PowerShell 转义符（反引号 (`)），尽管它可能无法提高可读性。</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following command is equivalent to the previous command and returns the same results, but uses the backtick to escape special characters, instead of quoting the entire filter string.</source>
          <target state="translated">以下命令等效于上述命令并返回相同的结果，但使用了反引号对特殊字符进行转义，而不是用引号将整个筛选器字符串括起来。</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To list only the properties that interest you, use the Property parameter of the formatting cmdlets to list the desired properties.</source>
          <target state="translated">若要仅列出你感兴趣的属性，请使用格式设置 cmdlet 的“Property”参数列出所需的属性。</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Finally, to find only the names of installed applications, a simple <bpt id="p1">**</bpt>Format\-Wide<ept id="p1">**</ept> statement simplifies the output:</source>
          <target state="translated">最后，若要仅查找已安装应用程序的名称，一个简单的 <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept> 语句便可简化输出：</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Although we now have several ways to look at applications that used the Windows Installer for installation, we have not considered other applications.</source>
          <target state="translated">尽管我们现在有多种方法来查看使用 Windows Installer 进行安装的应用程序，但我们还没有考虑其他应用程序。</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because most standard applications register their uninstaller with Windows, we can work with those locally by finding them in the Windows registry.</source>
          <target state="translated">由于大多数标准应用程序都向 Windows 注册了其卸载程序，我们通过在 Windows 注册表中查找它们便可以在本地对其进行处理。</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Listing All Uninstallable Applications</source>
          <target state="translated">列出所有可卸载的应用程序</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Although there is no guaranteed way to find every application on a system, it is possible to find all programs with listings displayed in the Add or Remove Programs dialog box.</source>
          <target state="translated">尽管无法保证找到系统上的每个应用程序，但可以在“添加或删除程序”对话框中显示的列表中查找所有程序。</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add or Remove Programs finds these applications in the following registry key:</source>
          <target state="translated">“添加或删除程序”在以下注册表项中查找这些应用程序：</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HKEY\_LOCAL\_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall<ept id="p1">**</ept>。</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We can also examine this key to find applications.</source>
          <target state="translated">我们还可以检查此项以查找应用程序。</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To make it easier to view the Uninstall key, we can map a Windows PowerShell drive to this registry location:</source>
          <target state="translated">若要更加轻松地查看 Uninstall 项，我们可以将 Windows PowerShell 驱动器映射到此注册表位置：</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>HKLM:<ept id="p1">**</ept> drive is mapped to the root of <bpt id="p2">**</bpt>HKEY\_LOCAL\_MACHINE<ept id="p2">**</ept>, so we used that drive in the path to the Uninstall key.</source>
          <target state="translated"><bpt id="p1">**</bpt>HKLM:<ept id="p1">**</ept> 驱动器将映射到 <bpt id="p2">**</bpt>HKEY_LOCAL_MACHINE<ept id="p2">**</ept> 的根，因此我们在 Uninstall 项的路径中使用了该驱动器。</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Instead of <bpt id="p1">**</bpt>HKLM:<ept id="p1">**</ept> we could have specified the registry path by using either <bpt id="p2">**</bpt>HKLM<ept id="p2">**</ept> or <bpt id="p3">**</bpt>HKEY\_LOCAL\_MACHINE<ept id="p3">**</ept>.</source>
          <target state="translated">我们可以使用 <bpt id="p2">**</bpt>HKLM<ept id="p2">**</ept> 或 <bpt id="p3">**</bpt>HKEY_LOCAL_MACHINE<ept id="p3">**</ept>（而不是 <bpt id="p1">**</bpt>HKLM：<ept id="p1">**</ept>）指定注册表路径。</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The advantage of using an existing registry drive is that we can use tab\-completion to fill in the keys names, so we do not need to type them.</source>
          <target state="translated">使用现有注册表驱动器的优点是我们可以使用 Tab 自动补全来填充项名称，因此我们不需要键入它们。</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We now have a drive named "Uninstall" that can be used to quickly and conveniently look for application installations.</source>
          <target state="translated">我们现在具有一个名为“Uninstall”的驱动器，可用于快速方便地查找应用程序安装。</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>We can find the number of installed applications by counting the number of registry keys in the Uninstall: Windows PowerShell drive:</source>
          <target state="translated">我们可以查找已安装应用程序的数量，方法是计算 Uninstall 中的注册表项数：Windows PowerShell 驱动器：</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>We can search this list of applications further by using a variety of techniques, beginning with <bpt id="p1">**</bpt>Get\-ChildItem<ept id="p1">**</ept>.</source>
          <target state="translated">我们可以使用各种以 <bpt id="p1">**</bpt>Get-ChildItem<ept id="p1">**</ept> 开头的技术进一步在此列表中搜索应用程序。</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To get a list of applications and save them in the <bpt id="p1">**</bpt>$UninstallableApplications<ept id="p1">**</ept> variable, use the following command:</source>
          <target state="translated">若要获取应用程序列表并将其保存在 <bpt id="p1">**</bpt>$UninstallableApplications<ept id="p1">**</ept> 变量中，请使用以下命令：</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>We are using a lengthy variable name here for clarity.</source>
          <target state="translated">为了清楚起见，我们在此处使用了较长的变量名称。</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In actual use, there is no reason to use long names.</source>
          <target state="translated">在实际应用中，没有必要使用长名称。</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Although you can use tab\-completion for variable names, you can also use 1–2 character names for speed.</source>
          <target state="translated">尽管可以使用 Tab 自动补全输入变量名称，但也可以使用 1–2 个字符的名称提高速度。</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Longer, descriptive names are most useful when you are developing code for reuse.</source>
          <target state="translated">在开发可重用代码时，较长的描述性名称最为有用。</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To display the values of the registry entries in the registry keys under Uninstall, use the GetValue method of the registry keys.</source>
          <target state="translated">若要显示 Uninstall 下注册表项中的注册表条目的值，请使用注册表项的 GetValue 方法。</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The value of the method is the name of the registry entry.</source>
          <target state="translated">该方法的值是注册表条目的名称。</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, to find the display names of applications in the Uninstall key, use the following command:</source>
          <target state="translated">例如，若要查找 Uninstall 项中应用程序的显示名称，请使用以下命令：</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>There is no guarantee that these values are unique.</source>
          <target state="translated">不能保证这些值是唯一的。</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the following example, two installed items appear as "Windows Media Encoder 9 Series":</source>
          <target state="translated">在以下示例中，两个已安装的项将显示为“Windows Media 编码器 9 系列”：</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Installing Applications</source>
          <target state="translated">安装应用程序</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Win32\_Product<ept id="p1">**</ept> class to install Windows Installer packages, remotely or locally.</source>
          <target state="translated">可以使用 <bpt id="p1">**</bpt>Win32_Product<ept id="p1">**</ept> 类远程或本地安装 Windows Installer 程序包。</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!NOTE]</ph> On Windows Vista, Windows Server 2008, and later versions of Windows, to install an application, you must start Windows PowerShell with the "Run as administrator" option.</source>
          <target state="translated"><ph id="ph1">[!NOTE]</ph> 若要在 Windows Vista、Windows Server 2008 以及更高版本的 Windows 上安装应用程序，你必须使用“以管理员身份运行”选项启动 Windows PowerShell。</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When installing remotely, use a Universal Naming Convention (UNC) network path to specify the path to the .msi package, because the WMI subsystem does not understand Windows PowerShell paths.</source>
          <target state="translated">在远程安装时，请使用通用命名约定 (UNC) 网络路径指定 .msi 程序包的路径，因为 WMI 子系统并不了解 Windows PowerShell 路径。</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, to install the NewPackage.msi package located in the network share \\\\AppServ\\dsp on the remote computer PC01, type the following command at the Windows PowerShell prompt:</source>
          <target state="translated">例如，若要在远程计算机 PC01 上安装位于网络共享 \AppServ\dsp 中的 NewPackage.msi 程序包，请在 Windows PowerShell 提示符下键入以下命令：</target>         
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Applications that do not use Windows Installer technology may have application\-specific methods available for automated deployment.</source>
          <target state="translated">不使用 Windows Installer 技术的应用程序可能具有可用于自动部署的特定于应用程序的方法。</target>         
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To determine whether there is a method for deployment automation, check the documentation for the application or consult the application vendor's support system.</source>
          <target state="translated">若要确定是否存在用于部署自动化的方法，请查看应用程序的文档或咨询应用程序供应商的支持系统。</target>         
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In some cases, even if the application vendor did not specifically design the application for installation automation, the installer software manufacturer may have some techniques for automation.</source>
          <target state="translated">在某些情况下，即使应用程序供应商没有专门为安装自动化设计应用程序，安装程序软件制造商也可能会使用一些技术进行自动化。</target>         
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Removing Applications</source>
          <target state="translated">删除应用程序</target>         
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Removing a Windows Installer package by using Windows PowerShell works in approximately the same way as installing a package.</source>
          <target state="translated">通过使用 Windows PowerShell 删除 Windows Installer 程序包与安装程序包的方式大致相同。</target>         
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Here is an example that selects the package to uninstall based on its name; in some cases it may be easier to filter with the <bpt id="p1">**</bpt>IdentifyingNumber<ept id="p1">**</ept>:</source>
          <target state="translated">下面是一个根据其名称选择要卸载的程序包的示例；在某些情况下，使用 <bpt id="p1">**</bpt>IdentifyingNumber<ept id="p1">**</ept> 进行筛选可能会更容易：</target>         
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Removing other applications is not quite so simple, even when done locally.</source>
          <target state="translated">即使是在本地执行操作，删除其他应用程序也并不那么简单。</target>         
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>We can find the command line uninstallation strings for these applications by extracting the <bpt id="p1">**</bpt>UninstallString<ept id="p1">**</ept> property.</source>
          <target state="translated">我们可以通过提取 <bpt id="p1">**</bpt>UninstallString<ept id="p1">**</ept> 属性查找这些应用程序的命令行卸载字符串。</target>         
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This method works for Windows Installer applications and for older programs appearing under the Uninstall key:</source>
          <target state="translated">此方法适用于 Windows Installer 应用程序和显示在 Uninstall 项下方的旧程序：</target>         
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can filter the output by the display name, if you like:</source>
          <target state="translated">如果愿意，你可以按显示名称筛选输出：</target>         
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>However, these strings may not be directly usable from the Windows PowerShell prompt without some modification.</source>
          <target state="translated">但是，如果不进行一些修改，这些字符串可能无法直接在 Windows PowerShell 提示符下使用。</target>         
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Upgrading Windows Installer Applications</source>
          <target state="translated">升级 Windows Installer 应用程序</target>         
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To upgrade an application, you need to know the name of the application and the path to the application upgrade package.</source>
          <target state="translated">若要升级应用程序，你需要知道应用程序的名称和应用程序升级包的路径。</target>         
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>With that information, you can upgrade an application with a single Windows PowerShell command:</source>
          <target state="translated">借助这些信息，你可以使用单个 Windows PowerShell 命令升级应用程序：</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>