<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d40f9f30e4d01e5eb41c3f7bdb492d6ce38106ed</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ac20adc" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Writing a custom DSC resource with MOF</source>
          <target state="translated">使用 MOF 编写自定义 DSC 资源</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0</source>
          <target state="translated">适用于：Windows PowerShell 4.0 和 Windows PowerShell 5.0</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In this topic, we will define the schema for a Windows PowerShell Desired State Configuration (DSC) custom resource in a MOF file, and implement the resource in a Windows PowerShell script file.</source>
          <target state="translated">在本主题中，我们将在 MOF 文件中定义 Windows PowerShell Desired State Configuration (DSC) 自定义资源的架构，并在 Windows PowerShell 脚本文件中实现资源。</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This custom resource is for creating and maintaining a web site.</source>
          <target state="translated">此自定义资源被用于创建和维护网站。</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creating the MOF schema</source>
          <target state="translated">创建 MOF 架构</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The schema defines the properties of your resource that can be configured by a DSC configuration script.</source>
          <target state="translated">架构定义可通过 DSC 配置脚本进行配置的资源的资源的属性。</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Folder structure for a MOF resource</source>
          <target state="translated">MOF 资源的文件夹结构</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To implement a DSC custom resource with a MOF schema, create the following folder structure.</source>
          <target state="translated">想要使用 MOF 架构实现 DSC 自定义资源，请创建下列文件夹结构。</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The MOF schema is defined in the file Demo_IISWebsite.schema.mof, and the resource script is defined in Demo_IISWebsite.psm1.</source>
          <target state="translated">在 Demo_IISWebsite.schema.mof 文件中定义 MOF 架构，并在 Demo_IISWebsite.psm1. 中定义资源脚本。</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optionally, you can create a module manifest (psd1) file.</source>
          <target state="translated">或者你也可以创建一个模块清单 (psd1) 文件。</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Note that it is necessary to create a folder named DSCResources under the top-level folder, and that the folder for each resource must have the same name as the resource.</source>
          <target state="translated">请注意，你需要在顶级文件夹下创建一个名为 DSCResources 的文件夹，并且每个资源的文件夹都必须与资源名称一致。</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The contents of the MOF file</source>
          <target state="translated">MOF 文件的内容</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Following is an example MOF file that can be used for a custom website resource.</source>
          <target state="translated">下面是一个可用于自定义网站资源的示例 MOF 文件。</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To follow this example, save this schema to a file, and call the file <bpt id="p1">*</bpt>Demo_IISWebsite.schema.mof<ept id="p1">*</ept></source>
          <target state="translated">要执行此示例操作，请将此架构保存至文件，并调用文件 <bpt id="p1">*</bpt>Demo_IISWebsite.schema.mof<ept id="p1">*</ept></target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note the following about the previous code:</source>
          <target state="translated">请注意下列有关之前代码的信息：</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>defines the name you can use to refer to this custom resource in DSC configuration scripts.</source>
          <target state="translated">定义一个名称，你可以将其用来在 DSC 配置脚本中指代此自定义资源。</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`Website`</ph> is equivalent to the friendly name <ph id="ph2">`Archive`</ph> for the built-in Archive resource.</source>
          <target state="translated">在此示例中，<ph id="ph1">`Website`</ph> 相当于内置存档资源的友好名称 <ph id="ph2">`Archive`</ph>。</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The class you define for your custom resource must derive from</source>
          <target state="translated">为自定义资源定义的类必须派生自</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type qualifier, <ph id="ph1">`[Key]`</ph>, on a property indicates that this property will uniquely identify the resource instance.</source>
          <target state="translated">属性上的类型限定符 <ph id="ph1">`[Key]`</ph> 表示此属性将唯一地标识资源实例。</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>At least one <ph id="ph1">`[Key]`</ph> property is required.</source>
          <target state="translated">至少需要一个 <ph id="ph1">`[Key]`</ph> 属性。</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Required]`</ph> qualifier indicates that the property is required (a value must be specified in any configuration script that uses this resource).</source>
          <target state="translated"><ph id="ph1">`[Required]`</ph> 限定符表示属性是必需的（在使用此资源的任何配置脚本中都必须指定值）。</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[write]`</ph> qualifier indicates that this property is optional when using the custom resource in a configuration script.</source>
          <target state="translated"><ph id="ph1">`[write]`</ph> 限定符表示在配置脚本中使用自定义资源时，此属性是可选的。</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[read]`</ph> qualifier indicates that a property cannot be set by a configuration, and is for reporting purposes only.</source>
          <target state="translated"><ph id="ph1">`[read]`</ph> 限定符表示不能通过配置来设置属性，属性只用于报告目的。</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>restricts the values that can be assigned to the property to the list of values defined in <ph id="ph1">`ValueMap`</ph>.</source>
          <target state="translated">按照 <ph id="ph1">`ValueMap`</ph> 中定义的值的列表限制分配给属性的值。</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ValueMap and Value Qualifiers<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/aa393965.aspx)</ept></source>
          <target state="translated">有关详细信息，请参阅 <bpt id="p1">[</bpt>ValueMap 和值限定符<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/aa393965.aspx)</ept></target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Including a property called <ph id="ph1">`Ensure`</ph> with values <ph id="ph2">`Present`</ph> and <ph id="ph3">`Absent`</ph> in your resource is recommended as a way to maintain a consistent style with built-in DSC resources.</source>
          <target state="translated">建议在资源中包含一个名为 <ph id="ph1">`Ensure`</ph> 且包含值 <ph id="ph2">`Present`</ph> 和 <ph id="ph3">`Absent`</ph> 的属性，以便与内置 DSC 资源保持一致。</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name the schema file for your custom resource as follows: <ph id="ph1">`classname.schema.mof`</ph>, where <ph id="ph2">`classname`</ph> is the identifier that follows the <ph id="ph3">`class`</ph> keyword in your schema definition.</source>
          <target state="translated">如下所示命名自定义资源的架构文件：<ph id="ph1">`classname.schema.mof`</ph>，其中 <ph id="ph2">`classname`</ph> 是遵循架构定义中 <ph id="ph3">`class`</ph> 关键字的标识符。</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Writing the resource script</source>
          <target state="translated">编写资源脚本</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The resource script implements the logic of the resource.</source>
          <target state="translated">资源脚本实现资源的逻辑。</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this module, you must include three functions called <bpt id="p1">**</bpt>Get-TargetResource<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Set-TargetResource<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Test-TargetResource<ept id="p3">**</ept>.</source>
          <target state="translated">在此模块中必须包含三个分别名为 <bpt id="p1">**</bpt>Get-TargetResource<ept id="p1">**</ept>、<bpt id="p2">**</bpt>Set-TargetResource<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Test-TargetResource<ept id="p3">**</ept> 的函数。</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All three functions must take a parameter set that is identical to the set of properties defined in the MOF schema that you created for your resource.</source>
          <target state="translated">三个函数采用的参数集都必须与你为资源创建的 MOF 架构中定义的属性集一致。</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this document, this set of properties is referred to as the “resource properties.”</source>
          <target state="translated">在此文档中，这组属性被称为“资源属性”。</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Store these three functions in a file called</source>
          <target state="translated">将这三个函数保存在名为</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>.psm1.</source>
          <target state="translated">.psm1 的文件中。</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the following example, the functions are stored in a file called Demo_IISWebsite.psm1.</source>
          <target state="translated">在以下示例中，函数被保存在名为 Demo_IISWebsite.psm1 的文件中。</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: When you run the same configuration script on your resource more than once, you should receive no errors and the resource should remain in the same state as running the script once.</source>
          <target state="translated"><bpt id="p1">**</bpt>请注意<ept id="p1">**</ept>：在资源上多次运行相同的配置脚本时，你应该不会收到错误报告，并且资源应该与运行一次脚本保持同样的状态。</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To accomplish this, ensure that your <bpt id="p1">**</bpt>Get-TargetResource<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Test-TargetResource<ept id="p2">**</ept> functions leave the resource unchanged, and that invoking the <bpt id="p3">**</bpt>Set-TargetResource<ept id="p3">**</ept> function more than once in a sequence with the same parameter values is always equivalent to invoking it once.</source>
          <target state="translated">要达到此目的，请确保 <bpt id="p1">**</bpt>Get-TargetResource<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>Test-TargetResource<ept id="p2">**</ept> 函数没有改变资源，并且确保在具有相同参数值的序列中多次调用 <bpt id="p3">**</bpt>Set-TargetResource<ept id="p3">**</ept> 函数始终等效于调用其一次。</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Get-TargetResource<ept id="p1">**</ept> function implementation, use the key resource property values that are provided as parameters to check the status of the specified resource instance.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>Get-TargetResource<ept id="p1">**</ept> 函数的实现中，使用作为参数而提供的键资源属性值来检查指定资源实例的状态。</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This function must return a hash table that lists all the resource properties as keys and the actual values of these properties as the corresponding values.</source>
          <target state="translated">此函数必须返回列举了所有作为键的资源属性的哈希表，并返回这些属性的实际值作为对应值。</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code provides an example.</source>
          <target state="translated">以下代码是一个示例。</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Depending on the values that are specified for the resource properties in the configuration script, the <bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept> must do one of the following:</source>
          <target state="translated">根据配置脚本中为资源属性指定的值，<bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept> 必须执行下列操作之一：</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Create a new website</source>
          <target state="translated">创建一个新网站</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Update an existing website</source>
          <target state="translated">更新现有网站</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Delete an existing website</source>
          <target state="translated">删除现有网站</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
          <target state="translated">下面的示例对此进行了演示。</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Finally, the <bpt id="p1">**</bpt>Test-TargetResource<ept id="p1">**</ept> function must take the same parameter set as <bpt id="p2">**</bpt>Get-TargetResource<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Set-TargetResource<ept id="p3">**</ept>.</source>
          <target state="translated">最后，<bpt id="p1">**</bpt>Test-TargetResource<ept id="p1">**</ept> 函数必须采用与 <bpt id="p2">**</bpt>Get-TargetResource<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Set-TargetResource<ept id="p3">**</ept> 相同的参数集。</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In your implementation of <bpt id="p1">**</bpt>Test-TargetResource<ept id="p1">**</ept>, check the status of the resource instance that is specified in the key parameters.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>Test-TargetResource<ept id="p1">**</ept> 的实现中，检查在键参数中指定的资源实例的状态。</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the actual status of the resource instance does not match the values specified in the parameter set, return <bpt id="p1">**</bpt>$false<ept id="p1">**</ept>.</source>
          <target state="translated">如果资源实例的实际状态与在参数集中指定的值不匹配，则返回 <bpt id="p1">**</bpt>$false<ept id="p1">**</ept>。</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Otherwise, return <bpt id="p1">**</bpt>$true<ept id="p1">**</ept></source>
          <target state="translated">否则返回 <bpt id="p1">**</bpt>$true<ept id="p1">**</ept></target>         
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following code implements the <bpt id="p1">**</bpt>Test-TargetResource<ept id="p1">**</ept> function.</source>
          <target state="translated">下面的代码实现 <bpt id="p1">**</bpt>Test-TargetResource<ept id="p1">**</ept> 函数。</target>         
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: For easier debugging, use the <bpt id="p2">**</bpt>Write-Verbose<ept id="p2">**</ept> cmdlet in your implementation of the previous three functions.</source>
          <target state="translated"><bpt id="p1">**</bpt>请注意<ept id="p1">**</ept>：为方便调试，请在上述三个函数的实现中使用 <bpt id="p2">**</bpt>Write-Verbose<ept id="p2">**</ept> cmdlet。</target>         
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This cmdlet writes text to the verbose message stream.</source>
          <target state="translated">此 cmdlet 将文本写入详细消息流。</target>         
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>By default, the verbose message stream is not displayed, but you can display it by changing the value of the <bpt id="p1">**</bpt>$VerbosePreference<ept id="p1">**</ept> variable or by using the <bpt id="p2">**</bpt>Verbose<ept id="p2">**</ept> parameter in the DSC cmdlets = new.</source>
          <target state="translated">默认情况下，不显示详细消息流，但你可以通过更改 <bpt id="p1">**</bpt>$VerbosePreference<ept id="p1">**</ept> 变量的值或通过在 DSC cmdlets = new 中使用 <bpt id="p2">**</bpt>Verbose<ept id="p2">**</ept> 参数来显示该流。</target>         
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Creating the module manifest</source>
          <target state="translated">创建模块清单</target>         
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Finally, use the <bpt id="p1">**</bpt>New-ModuleManifest<ept id="p1">**</ept> cmdlet to define a</source>
          <target state="translated">最后，使用 <bpt id="p1">**</bpt>New-ModuleManifest<ept id="p1">**</ept> cmdlet 来定义</target>         
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>.psd1 file for your custom resource module.</source>
          <target state="translated">你的自定义资源模块的 .psd1 文件。</target>         
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you invoke this cmdlet, reference the script module (.psm1) file described in the previous section.</source>
          <target state="translated">调用此 cmdlet 时，引用上一节中所介绍的脚本模块 (.psm1) 文件。</target>         
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Include <bpt id="p1">**</bpt>Get-TargetResource<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Set-TargetResource<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Test-TargetResource<ept id="p3">**</ept> in the list of functions to export.</source>
          <target state="translated">将 <bpt id="p1">**</bpt>Get-TargetResource<ept id="p1">**</ept>、<bpt id="p2">**</bpt>Set-TargetResource<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Test-TargetResource<ept id="p3">**</ept> 包括在要导出的函数列表中。</target>         
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Following is an example manifest file.</source>
          <target state="translated">以下是一个示例清单文件。</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>