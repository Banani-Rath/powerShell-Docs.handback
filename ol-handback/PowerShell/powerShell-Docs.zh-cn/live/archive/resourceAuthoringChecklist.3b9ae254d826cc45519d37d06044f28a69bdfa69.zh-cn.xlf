<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-cn">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Resource authoring checklist</source>
          <target state="translated">资源创作清单</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Resource module contains .psd1 file and schema.mof for every resource</source>
          <target state="translated">资源模块包含用于所有资源的 .psd1 文件和 schema.mof</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The first think you should do is to check that your resource has correct structure and contains all required files.</source>
          <target state="translated">你首先应检查你的资源是否具有正确的结构以及是否包含所有所需文件。</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Every resource module should contain a .psd1 file and every non-composite resource should have schema.mof file.</source>
          <target state="translated">每个资源模块都应包含 .psd1 文件且每个非复合资源都应具有 schema.mof 文件。</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Resources that do not contain schema will not be listed by <bpt id="p1">**</bpt>Get-DscResource<ept id="p1">**</ept> and users will not be able to use the intellisense when writing code against those modules in ISE.</source>
          <target state="translated">未包含架构的资源不会被 <bpt id="p1">**</bpt>Get-DscResource<ept id="p1">**</ept> 列出且用户在针对 ISE 中的这些模块写入代码时不能使用 IntelliSense。</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The sample directory structure for xRemoteFile resource, which is part of the xPSDesiredStateConfiguration resource module, could look as follows:</source>
          <target state="translated">xRemoteFile 资源是 xPSDesiredStateConfiguration 资源模块的一部分，其示例目录结构如下所示：</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Resource and schema are correct and have been verified using DscResourceDesigner cmdlets</source>
          <target state="translated">资源和架构正确且已使用 DscResourceDesigner cmdlet 进行了验证</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Another important aspect is verifying the resource schema (*.schema.mof) file.</source>
          <target state="translated">另一个重要方面是验证资源架构 (*.schema.mof) 文件。</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Make sure that:</source>
          <target state="translated">请确保：</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Property types are correct (e.g. don’t use String for properties which accept numeric values, you should use UInt32 or other numeric types instead)</source>
          <target state="translated">属性类型正确（例如，不将字符串用于接受数值的属性，应改为使用 UInt32 或其他数值类型）</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Property attributes are specified correctly ([key], [required], [write], [read])</source>
          <target state="translated">正确指定了属性特性（[key]、[required]、[write]、[read]）</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At least one parameter in the schema has to be marked as [key]</source>
          <target state="translated">架构中至少有一个参数被标记为 [key]</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[read] property cannot coexist together with any of: [required], [key], [write]</source>
          <target state="translated">[read] 属性不能与下列任意一个属性共同存在：[required]、[key]、[write]</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If multiple qualifiers are specified except [read], then [key] takes precedence</source>
          <target state="translated">如果指定了除 [read] 之外的多个限定符，则 [key] 优先级最高</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If [write] and [required] are specified, then [required] takes precedence</source>
          <target state="translated">如果指定了 [write] 和 [required]，则 [required] 优先级更高</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>ValueMap is specified where appropriate</source>
          <target state="translated">在适当的位置指定了 ValueMap</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">例如：</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Friendly name is specified and confirms to DSC naming conventions</source>
          <target state="translated">指定了友好名称且符合 DSC 命名约定</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">例如：</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Every field has meaningful description</source>
          <target state="translated">每个字段的说明均有意义</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Below you can find a good example of the resource schema file (this is the actual schema of xRemoteFile resource from the DSC Resource Kit)</source>
          <target state="translated">下面介绍了关于资源架构文件的很好的示例（这是来自 DSC 资源工具包的 xRemoteFile 资源的实际架构）</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Additionally, you should use <bpt id="p1">**</bpt>Test-xDscResource<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Test-xDscSchema<ept id="p2">**</ept> cmdlets from Dsc Resource Designer to automatically verify the resource and schema:</source>
          <target state="translated">此外，你应从 DSC 资源设计器中使用 <bpt id="p1">**</bpt>Test-xDscResource<ept id="p1">**</ept> cmdlet 和 <bpt id="p2">**</bpt>Test-xDscSchema<ept id="p2">**</ept> cmdlet 来自动验证资源和架构：</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Resource loads without errors</source>
          <target state="translated">资源已加载，未出现错误</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Once you verified that resource contains all necessary files and verified them using DSC Resource Designer, it’s time to check whether resource module can be successfully loaded.</source>
          <target state="translated">确保资源包含所有必要文件并使用 DSC 资源设计器对其进行验证之后，就可以开始检查资源模块是否成功加载了。</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can do it either manually, by running <ph id="ph1">`Import-Module &lt;resource_module&gt; -force `</ph> and confirming that no errors occurred, or by writing test automation.</source>
          <target state="translated">你可以通过运行 <ph id="ph1">`Import-Module &lt;resource_module&gt; -force `</ph> 并确认未发生错误来手动执行此操作，或者通过编写测试自动化来执行此操作。</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In case of the latter, you can follow this structure in your test case:</source>
          <target state="translated">如果选用后者，则可以在测试用例中遵循此结构：</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>4   Resource is idempotent in the positive case</source>
          <target state="translated">4   资源在正案例中是幂等的</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>One of the fundamental characteristics of every DSC resource should be idempotence.</source>
          <target state="translated">每个 DSC 资源的基本特征之一应是幂等性。</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It means that we can apply a DSC configuration containing that resource multiple times without changing the result beyond the initial application.</source>
          <target state="translated">这意味着我们可以多次应用包含该资源的 DSC 配置，而不改变超出初始应用程序的结果。</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, if we create a configuration which contains the following File resource:</source>
          <target state="translated">例如，如果创建包含以下文件资源的配置：</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>After applying it for the first time, file test.txt should appear in C:\test folder.</source>
          <target state="translated">在第一次应用它之后，test.txt 文件应出现在 C:\test 文件夹。</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, subsequent runs of the same configuration should not change the state of the machine (e.g. no copies of the test.txt file should be created).</source>
          <target state="translated">但是，后续运行相同配置时不会更改计算机的状态（例如，不会创建 test.txt 文件的任何副本）。</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To ensure our resource is idempotent we can repeatedly call <bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept> when testing the resource directly, or call <bpt id="p2">**</bpt>Start-DscConfiguration<ept id="p2">**</ept> multiple times when doing end to end testing.</source>
          <target state="translated">要确保资源是幂等的，我们可以在直接测试资源时重复调用 <bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept>，或在进行端到端测试时多次调用 <bpt id="p2">**</bpt>Start-DscConfiguration<ept id="p2">**</ept>。</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The result should be the same after every run.</source>
          <target state="translated">每次运行后结果都应是相同的。</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>User modification scenario was tested</source>
          <target state="translated">测试了用户修改方案</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>User modification is another common scenario worth testing out.</source>
          <target state="translated">用户修改是值得测试的另一个常用方案。</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It helps you verify that <bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Test-TargetResource<ept id="p2">**</ept> function properly.</source>
          <target state="translated">它有助于验证 <bpt id="p1">**</bpt>Set-TargetResource<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>Test-TargetResource<ept id="p2">**</ept> 是否正常运行。</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Here are steps you should take to test it:</source>
          <target state="translated">以下是测试它时应该采取的步骤：</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Start with the resource not in the desired state.</source>
          <target state="translated">从未在所需状态的资源开始。</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Run configuration with your resource</source>
          <target state="translated">使用资源运行配置</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Verify <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> returns True</source>
          <target state="translated">验证 <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> 是否返回 True</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Modify the resource out of the desired state</source>
          <target state="translated">修改未在所需状态的资源</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Verify <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> returns false</source>
          <target state="translated">验证 <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> 是否返回 false</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Here’s a more concrete example using Registry resource:</source>
          <target state="translated">下面介绍了一个使用 Registry 资源的更为具体的示例：</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Start with registry key not in the desired state</source>
          <target state="translated">从未在所需状态的注册表项开始</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Run <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> with a configuration to put it in the desired state and verify it passes.</source>
          <target state="translated">运行 <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> 及其配置以将它放入所需状态并验证其是否通过。</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Run <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> and verify it returns true</source>
          <target state="translated">运行 <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> 并验证其是否返回 true</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Modify the value of the key so that it is not in the desired state</source>
          <target state="translated">修改项的值，使它不在所需状态</target>         
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Run <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> and verify it returns false</source>
          <target state="translated">运行 <bpt id="p1">**</bpt>Test-DscConfiguration<ept id="p1">**</ept> 并验证其是否返回 false</target>         
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Get-TargetResource functionality was verified using Get-DscConfiguration</source>
          <target state="translated">已使用 Get-DscConfiguration 验证了 Get-TargetResource 功能</target>         
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Get-TargetResource should return details of the current state of the resource.</source>
          <target state="translated">Get-TargetResource 应该返回资源的当前状态的详细信息。</target>         
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Make sure you test it by calling Get-DscConfiguration after you apply the configuration and verifying that output correctly reflects the current state of the machine.</source>
          <target state="translated">确保通过在应用该配置之后调用 Get-DscConfiguration 并验证输出是否正确反映了计算机的当前状态对其进行测试。</target>         
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It's important to test it separately, since any issues in this area won't appear when calling Start-DscConfiguration.</source>
          <target state="translated">请务必对它进行单独测试，因为在调用 Start-DscConfiguration 时此区域的任何问题都不会出现。</target>         
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Resource was verified by calling <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> functions directly</source>
          <target state="translated">已通过直接调用 <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> 函数验证了资源</target>         
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Make sure you test the <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> functions implemented in your resource by calling them directly and verifying that they work as expected.</source>
          <target state="translated">请确保对在资源中实现的 <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> 函数进行测试，可通过直接调用它们并按预期方式进行验证完成此操作。</target>         
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Resource was verified End to End using <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept></source>
          <target state="translated">已使用 <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> 端到端地验证了资源</target>         
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Testing <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> functions by calling them directly is important, but not all issues will be discovered this way.</source>
          <target state="translated">虽然通过直接调用 <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> 函数对它们进行测试至关重要，但不是所有问题都能以这种方法发现。</target>         
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You should focus significant part of your testing on using <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> or the pull server.</source>
          <target state="translated">你应该将测试的关注重心放在使用 <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> 上或请求服务器上。</target>         
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In fact, this is how users will use the resource, so don’t underestimate the significance of this type of tests.</source>
          <target state="translated">事实上，这就是用户使用资源的方式，所以不要低估此类测试的重要性。</target>         
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Possible types of issues:</source>
          <target state="translated">可能的问题类型：</target>         
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Credential/Session may behave differently because the DSC agent runs as a service.</source>
          <target state="translated">由于 DSC 代理以服务方式运行，因此凭据/会话的行为可能不同。</target>         
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Be sure to test any features here end to end.</source>
          <target state="translated">请务必端到端地测试此处的任何功能。</target>         
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Verify error messages displayed by the resource make sense.</source>
          <target state="translated">验证由资源显示的错误消息是否有意义。</target>         
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, errors outputted by <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> may be different than those displayed when calling the <bpt id="p2">**</bpt>Set-TargetResource<ept id="p2">**</ept> function directly.</source>
          <target state="translated">例如，由 <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> 输出的错误可能与在直接调用 <bpt id="p2">**</bpt>Set-TargetResource<ept id="p2">**</ept> 函数时显示的错误不同。</target>         
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Resource behaves correctly on all DSC supported platforms (or returns a specific error otherwise)</source>
          <target state="translated">资源在所有支持 DSC 的平台上运行正常（或返回特定的错误）</target>         
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Resource should work on all DSC supported platforms (Windows Server 2008 R2 and newer).</source>
          <target state="translated">资源应适用于所有支持 DSC 的平台（Windows Server 2008 R2 或更高版本）。</target>         
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Make sure you install latest WMF (Windows Management Framework) on your OS to get the latest version of DSC.</source>
          <target state="translated">确保在操作系统上安装了最新的 WMF (Windows Management Framework) 以获取最新版本的 DSC。</target>         
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If resource by-design does not work on some of these platforms, a specific error message should be returned.</source>
          <target state="translated">如果资源按设计无法在部分这些平台上运作，则将返回特定的错误消息。</target>         
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Also, make sure your resource checks whether cmdlets you are calling are present on particular machine.</source>
          <target state="translated">此外，确保资源检查你调用的 cmdlet 是否存在于特定的计算机上。</target>         
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Windows Server 2012 added a large number of new cmdlets that are not available on Windows Server 2008R2, even with WMF installed.</source>
          <target state="translated">Windows Server 2012 添加了大量新 cmdlet，即使安装了 WMF，它们在 Windows Server 2008R2 上也不可用。</target>         
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Resource functionality was verified on Windows Client (if applicable)</source>
          <target state="translated">已在 Windows 客户端上验证了资源功能（如果适用）</target>         
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>One very common test gap is verifying the resource only on server versions of Windows.</source>
          <target state="translated">一个非常常见的测试间隙在于，仅在 Windows 的服务器版本上验证资源。</target>         
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Many resources are also designed to work on Client SKUs, so if that’s true in your case, don’t forget to test it on those platforms as well.</source>
          <target state="translated">许多资源也被设计用于客户端 SKU，因此如果你的情况也是这样的话，不要忘记在这些平台上测试它。</target>         
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Get-DSCResource lists the resource</source>
          <target state="translated">Get-DSCResource 用于列出资源</target>         
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>After deploying the module on the machine, calling Get-DscResource should list your resource among others as a result.</source>
          <target state="translated">在计算机上部署模块后，调用 Get-DscResource 将在其他资源之间列出你的资源。</target>         
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you can’t find your resource in the list, make sure that schema.mof file for that resource exists.</source>
          <target state="translated">如果无法在列表中找到你的资源，请确保该资源的 schema.mof 文件存在。</target>         
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Resource module contains examples</source>
          <target state="translated">资源模块包含示例</target>         
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If you intend to share the resource (which you hopefully do), creating quality examples which will help others understand how to use it.</source>
          <target state="translated">如果你要共享资源（你希望这么做），创建好的示例将有助于其他人理解如何使用它。</target>         
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This is crucial, especially since many users treat sample code as documentation.</source>
          <target state="translated">这一点至关重要，因为许多用户会将示例代码视为文档。</target>         
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>First, you should determine the examples that will be included with the module – at minimum, you should cover most important use cases for your resource:</source>
          <target state="translated">首先，你应确定要在模块中包含的示例（至少你应涵盖资源的最重要用例）：</target>         
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If your module contains several resources that need to work together for an end-to-end scenario, the basic end-to-end example would ideally be first.</source>
          <target state="translated">如果模块包含几个需要一起用于端到端方案的资源，则最好将基本的端到端示例作为第一个示例。</target>         
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The initial examples should be very simple -- how to get started with your resources in small manageable chunks (e.g. creating a new VHD)</source>
          <target state="translated">最初的示例应非常简单 -- 如何在小的可管理区块中开始使用你的资源（例如，创建新 VHD）</target>         
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Subsequent examples should build on those examples (e.g. creating a VM from a VHD, removing VM, modifying VM), and show advanced functionality (e.g. creating a VM with dynamic memory)</source>
          <target state="translated">随后的示例应该建立在这些示例之上（例如，从 VHD 中创建 VM、删除 VM、修改 VM），且应介绍高级功能（例如，创建具有动态内存的 VM）</target>         
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Example configurations should be parameterized (all values should be passed to the configuration as parameters and there should be no hardcoded values):</source>
          <target state="translated">示例配置应该参数化（所有的值都应作为参数传递到配置且不能包含硬编码值）：</target>         
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It’s a good practice to include (commented out) example of how to call the configuration with the actual values at the end of the example script.</source>
          <target state="translated">包括（注释掉）关于如何在脚本的末尾使用实际值调用配置的示例，就是一个很好的做法。</target>         
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For example, in the configuration above it won’t be obvious for everyone that the best way to specify UserAgent is:</source>
          <target state="translated">例如，在上面的配置中，指定 UserAgent 最好的方法是以下这种方法，但这并非对每个人都显而易见：</target>         
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>That’s why we should include comment with sample execution of the configuration:</source>
          <target state="translated">这就是我们应该在配置的示例执行中包含注释的原因：</target>         
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For each example, write a short description which explains what it does, and the meaning of the parameters.</source>
          <target state="translated">对于每个示例，编写简短说明，解释它能做什么以及参数的意义。</target>         
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Make sure examples cover most the important scenarios for your resource and if there’s nothing missing, verify that they all execute and put machine in the desired state.</source>
          <target state="translated">确保示例涵盖了资源大部分重要方案，如果没有任何遗漏，验证它们是否都能执行且是否能让计算机达到所需状态。</target>         
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Error messages are easy to understand and help users solve problems</source>
          <target state="translated">错误消息要易于理解，以便帮助用户解决问题</target>         
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Good error messages should be:</source>
          <target state="translated">好的错误消息应具有以下特性：</target>         
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>There: The biggest problem with error messages is that they often don’t exist, so make sure they are there.</source>
          <target state="translated">存在性：错误消息最大的问题在于它们经常不存在，因此应确保它们的确存在。</target>         
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Easy to understand: Human readable, no obscure error codes</source>
          <target state="translated">易于理解：人工可读，没有晦涩的错误代码</target>         
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Precise: Describe what’s exactly the problem</source>
          <target state="translated">精确性：描述问题的具体内容</target>         
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Constructive: Advice how to fix the issue</source>
          <target state="translated">建设性：建议如何修复问题</target>         
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Polite: Don’t blame user or make them feel stupid</source>
          <target state="translated">礼貌用语：不要责怪用户或让他们感到愚笨</target>         
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Make sure you verify errors in End to End scenarios (using <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept>), because they may differ from those returned when running resource functions directly.</source>
          <target state="translated">确保验证端到端方案中的错误（使用 <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept>），因为它们可能与直接运行资源函数时返回的错误不同。</target>         
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Log messages are easy to understand and informative (including –verbose, –debug and ETW logs)</source>
          <target state="translated">日志消息要易于理解且信息量大（包括 –verbose、–debug 和 ETW 日志）</target>         
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Ensure that logs outputted by the resource are easy to understand and provide value to the user.</source>
          <target state="translated">确保由资源输出的日志易于理解且向用户提供有价值的信息。</target>         
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Resources should output all information which might be helpful to the user, but more logs is not always better.</source>
          <target state="translated">资源应输出所有可能对用户有用的信息，但并不总是日志越多越好。</target>         
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You should avoid redundancy and outputting data which does not provide additional value – don’t make someone go through hundreds of log entries in order to find what they're looking for.</source>
          <target state="translated">你应该避免冗余和输出不提供更多价值的数据 – 不要让人为了找到他们要找的内容而浏览成百上千条日志。</target>         
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Of course, no logs is not an acceptable solution for this problem either.</source>
          <target state="translated">当然，针对此问题没有任何日志也是不可接受的解决方案。</target>         
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When testing, you should also analyze verbose and debug logs (by running <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept> with –verbose and –debug switches appropriately), as well as ETW logs.</source>
          <target state="translated">测试时还应分析 verbose 和 debug 日志（通过合理使用 –verbose 和 –debug 开关运行 <bpt id="p1">**</bpt>Start-DscConfiguration<ept id="p1">**</ept>）以及 ETW 日志。</target>         
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To see DSC ETW logs, go to Event Viewer and open the following folder: Applications and Services- Microsoft - Windows - Desired State Configuration.</source>
          <target state="translated">若要查看 DSC ETW 日志，请转到“事件查看器”并打开下列文件夹：Applications and Services- Microsoft - Windows - Desired State Configuration。</target>         
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>By default there will be Operational channel, but make sure you enable Analytic and Debug channels (you have to do it before running the configuration).</source>
          <target state="translated">默认情况下设置有“操作”通道，但要确保启用了“分析”通道和“调试”通道（必须在运行配置前执行）。</target>         
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To enable Analytic/Debug channels, you can execute script below:</source>
          <target state="translated">若要启用“分析”/“调试”通道，可以执行下面的脚本：</target>         
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Resource implementation does not contain hardcoded paths</source>
          <target state="translated">资源实现不包含硬编码路径</target>         
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Ensure there are no hardcoded paths in the resource implementation, particularly if they assume language (en-us), or when there are system variables that can be used.</source>
          <target state="translated">确保资源实现中没有硬编码路径，特别是如果它们表示语言时 (en-us)，或者当存在可以使用的系统变量时。</target>         
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If your resource need to access specific paths, use environment variables instead of hardcoding the path, as it may differ on other machines.</source>
          <target state="translated">如果资源需要访问特定路径，请使用环境变量而非硬编码路径，因为后者在其他计算机上可能有所不同。</target>         
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">例如：</target>         
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">而不是：</target>         
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can write:</source>
          <target state="translated">你可以编写：</target>         
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Resource implementation does not contain user information</source>
          <target state="translated">资源实现不包含用户信息</target>         
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Make sure there are no email names, account information, or names of people in the code.</source>
          <target state="translated">请确保代码中没有电子邮件名称、帐户信息或人员姓名。</target>         
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Resource was tested with valid/invalid credentials</source>
          <target state="translated">已使用有效/无效凭据验证了资源</target>         
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If your resource takes a credential as parameter:</source>
          <target state="translated">如果资源将凭据作为参数：</target>         
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Verify the resource works when Local System (or the computer account for remote resources) does not have access.</source>
          <target state="translated">当本地系统（或远程资源计算机帐户）无访问权限时验证资源是否正常运行。</target>         
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Verify the resource works with a credential specified for Get, Set and Test</source>
          <target state="translated">使用为 Get、Set 和 Test 指定的凭据验证资源是否正常运行。</target>         
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If your resource accesses shares, test all the variants you need to support.</source>
          <target state="translated">如果资源访问共享，测试你需要支持的所有变量。</target>         
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>         
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Standard windows shares.</source>
          <target state="translated">标准 Windows 共享。</target>         
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>DFS shares.</source>
          <target state="translated">DFS 共享。</target>         
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>SAMBA shares (if you want to support Linux.)</source>
          <target state="translated">SAMBA 共享（如果希望支持 Linux。）</target>         
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Resource is not using cmdlets requiring interactive input</source>
          <target state="translated">资源未使用需要交互输入的 cmdlet</target>         
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> functions should be executed automatically and must not wait for user’s input at any stage of execution (e.g. you should not use <bpt id="p2">**</bpt>Get-Credential<ept id="p2">**</ept> inside these functions).</source>
          <target state="translated">应自动执行 <bpt id="p1">**</bpt>Get/Set/Test-TargetResource<ept id="p1">**</ept> 函数，且不能在任何执行阶段等待用户输入（例如，不能在这些函数中使用 <bpt id="p2">**</bpt>Get-Credential<ept id="p2">**</ept>）。</target>         
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If you need to provide user’s input, you should pass it to the configuration as parameter during the compilation phase.</source>
          <target state="translated">如果需要提供用户的输入，应在编译阶段期间将它作为参数传递到配置。</target>         
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Resource functionality was thoroughly tested</source>
          <target state="translated">已全面测试资源功能</target>         
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You are responsible to make sure the resource is behaving correctly, so test its functionality manually or, better yet, write automation.</source>
          <target state="translated">你有责任确保资源行为正确，因此请手动测试它的功能，或者更好的做法是编写自动化。</target>         
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This checklist contains items which are important to be tested and/or are often missed.</source>
          <target state="translated">此清单包含要测试的重要项和/或经常丢失的项。</target>         
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>There will be bunch of tests, mainly functional ones which will be specific to the resource you are testing and are not mentioned here.</source>
          <target state="translated">提供了一系列测试，主要是特定于你要测试的资源和此处未提及的测试。</target>         
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Don’t forget about negative test cases.</source>
          <target state="translated">不要忘记负面测试用例。</target>         
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This will likely be the most time consuming part of the resource testing.</source>
          <target state="translated">这可能是资源测试中最耗时的部分。</target>         
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Best practice: Resource module contains Tests folder with ResourceDesignerTests.ps1 script</source>
          <target state="translated">最佳做法：资源模块包含具有 ResourceDesignerTests.ps1 脚本的 Tests 文件夹</target>         
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>It’s a good practice to create folder “Tests” inside resource module, create ResourceDesignerTests.ps1 file and add tests using <bpt id="p1">**</bpt>Test-xDscResource<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Test-xDscSchema<ept id="p2">**</ept> for all resources in given module.</source>
          <target state="translated">对于给定模块中的所有资源，使用 <bpt id="p1">**</bpt>Test-xDscResource<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>Test-xDscSchema<ept id="p2">**</ept> 在资源模块中创建“Tests”文件夹、创建 ResourceDesignerTests.ps1 文件并添加测试是很好的做法。</target>         
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This way we can quickly validate schemas of all resources from given modules and do sanity check before publishing.</source>
          <target state="translated">这样我们就能快速验证给定模块的所有资源的架构并在发布前执行完整性检查。</target>         
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For xRemoteFile, ResourceTests.ps1 could look as simple as:</source>
          <target state="translated">对于 xRemoteFile，ResourceTests.ps1 可能和以下情况一样简单：</target>         
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Best practice: Resource folder contains resource designer script for generating schema<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>最佳做法：资源文件夹包含用于生成架构的资源设计器脚本<ept id="p1">**</ept></target>         
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Each resource should contain a resource designer script which generates a mof schema of the resource.</source>
          <target state="translated">每个资源应包含生成资源的 mof 架构的资源设计器脚本。</target>         
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This file should be placed in</source>
          <target state="translated">应将此文件放在</target>         
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>\ResourceDesignerScripts and be named Generate</source>
          <target state="translated">\ResourceDesignerScripts 并将其命名为 Generate</target>         
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Schema.ps1</source>
          <target state="translated">Schema.ps1</target>         
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For xRemoteFile resource this file would be called GenerateXRemoteFileSchema.ps1 and contain:</source>
          <target state="translated">对于 xRemoteFile 资源，此文件被称为 GenerateXRemoteFileSchema.ps1 且包含：</target>         
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>22  Best practice: Resource supports -whatif</source>
          <target state="translated">22  最佳做法：资源支持 -whatif</target>         
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If your resource is performing “dangerous” operations, it’s a good practice to implement -whatif functionality.</source>
          <target state="translated">如果资源正在执行“危险”操作，最佳做法是实现 -whatif 功能。</target>         
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>After it’s done, make sure that whatif output correctly describes operations which would happen if command was executed without whatif switch.</source>
          <target state="translated">完成后，请确保 whatif 输出正确地描述了在无 whatif 开关情况下执行命令时可能发生的操作。</target>         
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Also, verify that operations does not execute (no changes to the node’s state are made) when –whatif switch is present.</source>
          <target state="translated">此外，验证当 –whatif 开关存在时操作未执行（未对节点的状态进行更改）。</target>         
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For example, let’s assume we are testing File resource.</source>
          <target state="translated">例如，假设我们正在测试 File 资源。</target>         
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Below is simple configuration which creates file “test.txt” with contents “test”:</source>
          <target state="translated">下面是创建“test.txt”文件及其“test”内容的简单配置：</target>         
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If we compile and then execute the configuration with the –whatif switch, the output is telling us exactly what would happen when we run the configuration.</source>
          <target state="translated">如果我们使用 –whatif 开关进行编译，然后执行配置，则输出将告诉我们当运行该配置时具体会发生的事。</target>         
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The configuration itself however was not executed (test.txt file was not created).</source>
          <target state="translated">但是配置本身并没有被执行（没有创建 test.txt 文件）。</target>         
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This wraps up our checklist.</source>
          <target state="translated">以上就是清单的基础知识。</target>         
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Please keep in mind that this list is not exhaustive, but it covers many important issues which we encountered while designing, developing and testing DSC resources.</source>
          <target state="translated">请记住，此列表并不详尽，但它涵盖了我们在设计、开发和测试 DSC 资源时会遇到的许多重要问题。</target>         
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Having a checklist helps to ensure we didn’t forget about any of those aspects and in fact, we use it at Microsoft when developing DSC resources ourselves.</source>
          <target state="translated">列出清单有助于我们确保不会忘记任何这些方面的问题，事实上，我们自己在开发 DSC 资源时就会在 Microsoft 中用到它。</target>         
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If you developed guidelines and best practices which you use for writing and testing DSC resources, please share them!</source>
          <target state="translated">如果你开发了用于编写和测试 DSC 资源的指导和最佳做法，请和我们分享吧！</target>         
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">291df6b35ab58b5616aebbe412362ef8cc4c2279</xliffext:olfilehash>
  </header>
</xliff>