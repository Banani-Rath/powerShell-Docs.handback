<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Removing-Objects-from-the-Pipeline--Where-Object-.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c5e2b60d96a6c64aedfa9522cbdc0ce5d4aa6b0</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-39517ae" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Removing Objects from the Pipeline  Where Object</source>
          <target state="translated">从管道中删除对象 (Where Object)</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Removing Objects from the Pipeline (Where-Object)</source>
          <target state="translated">从管道中删除对象 (Where-Object)</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, you often generate and pass along more objects to a pipeline than you want.</source>
          <target state="translated">在 Windows PowerShell 中，你通常会生成和传递比预期更多的对象到管道中。</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can specify the properties of particular objects to display by using the <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlets, but this does not help with the problem of removing entire objects from the display.</source>
          <target state="translated">可以通过使用 <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlet 指定特定对象的属性进行显示，但是这对从显示中删除整个对象的问题没有任何帮助。</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You may want to filter objects before the end of a pipeline, so you can perform actions on only a subset of the initially\-generated objects.</source>
          <target state="translated">你可能希望在管道末尾之前筛选对象，以便你可以只对初始生成对象的子集执行操作。</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Windows PowerShell includes a <bpt id="p1">**</bpt>Where\-Object<ept id="p1">**</ept> cmdlet that allows you to test each object in the pipeline and only pass it along the pipeline if it meets a particular test condition.</source>
          <target state="translated">Windows PowerShell 包括 <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet，它可让你在管道中测试每个对象，并且仅沿管道传递满足特定测试条件的对象。</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Objects that do not pass the test are removed from the pipeline.</source>
          <target state="translated">将从管道中删除未通过测试的对象。</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You supply the test condition as the value of the <bpt id="p1">**</bpt>Where\-ObjectFilterScript<ept id="p1">**</ept> parameter.</source>
          <target state="translated">提供测试条件作为 <bpt id="p1">**</bpt>Where-ObjectFilterScript<ept id="p1">**</ept> 参数的值。</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Performing Simple Tests with Where\-Object</source>
          <target state="translated">使用 Where-Object 执行简单测试</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">**</bpt>FilterScript<ept id="p1">**</ept> is a <bpt id="p2">*</bpt>script block<ept id="p2">*</ept> \-  one or more Windows PowerShell commands surrounded by braces {} \- that evaluates to true or false.</source>
          <target state="translated"><bpt id="p1">**</bpt>FilterScript<ept id="p1">**</ept> 的值是一个<bpt id="p2">*</bpt>脚本块<ept id="p2">*</ept> - 由大括号 {} 括起来的一个或多个 Windows PowerShell 命令，其计算结果为 True 或 False。</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These script blocks can be very simple, but creating them requires knowing about another Windows PowerShell concept, comparison operators.</source>
          <target state="translated">这些脚本块可能非常简单，但是创建它们需要了解有关 Windows PowerShell 的另一个概念，即比较运算符。</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A comparison operator compares the items that appear on each side of it.</source>
          <target state="translated">比较运算符比较其每一侧显示的项。</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Comparison operators begin with a '\-' character and are followed by a name.</source>
          <target state="translated">比较运算符以“-”字符开头，后跟名称。</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Basic comparison operators work on almost any kind of object.</source>
          <target state="translated">基本比较运算符适用于几乎任何类型的对象。</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The more advanced comparison operators might only work on text or arrays.</source>
          <target state="translated">更高级的比较运算符可能仅适用于文本或数组。</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!NOTE]</ph> By default, when working with text, Windows PowerShell comparison operators are case\-insensitive.</source>
          <target state="translated"><ph id="ph1">[!NOTE]</ph> 默认情况下，在处理文本时，Windows PowerShell 比较运算符不区分大小写。</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Due to parsing considerations, symbols such as &lt;,&gt;, and \= are not used as comparison operators.</source>
          <target state="translated">出于分析考虑，&lt;、&gt; 和 = 等符号不用作比较运算符。</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Instead, comparison operators are comprised of letters.</source>
          <target state="translated">相反，比较运算符由字母组成。</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The basic comparison operators are listed in the following table.</source>
          <target state="translated">下表中列出了基本比较运算符。</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Comparison Operator</source>
          <target state="translated">比较运算符</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">含义</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example (returns true)</source>
          <target state="translated">示例（返回 True）</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>\-eq</source>
          <target state="translated">-eq</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>is equal to</source>
          <target state="translated">等于</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>1 \-eq 1</source>
          <target state="translated">1 -eq 1</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>\-ne</source>
          <target state="translated">-ne</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Is not equal to</source>
          <target state="translated">不等于</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>1 \-ne 2</source>
          <target state="translated">1 -ne 2</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>\-lt</source>
          <target state="translated">-lt</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Is less than</source>
          <target state="translated">小于</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>1 \-lt 2</source>
          <target state="translated">1 -lt 2</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>\-le</source>
          <target state="translated">-le</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Is less than or equal to</source>
          <target state="translated">小于或等于</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>1 \-le 2</source>
          <target state="translated">1 -le 2</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>\-gt</source>
          <target state="translated">-gt</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Is greater than</source>
          <target state="translated">大于</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>2 \-gt 1</source>
          <target state="translated">2 -gt 1</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>\-ge</source>
          <target state="translated">-ge</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Is greater than or equal to</source>
          <target state="translated">大于或等于</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>2 \-ge 1</source>
          <target state="translated">2 -ge 1</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>\-like</source>
          <target state="translated">-like</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Is like (wildcard comparison for text)</source>
          <target state="translated">相似（文本的通配符比较）</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>"file.doc" \-like "f\*.do?"</source>
          <target state="translated">"file.doc" -like "f*.do?"</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>\-notlike</source>
          <target state="translated">-notlike</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Is not like (wildcard comparison for text)</source>
          <target state="translated">不相似（文本的通配符比较）</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>"file.doc" \-notlike "p\*.doc"</source>
          <target state="translated">"file.doc" -notlike "p*.doc"</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>\-contains</source>
          <target state="translated">-contains</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Contains</source>
          <target state="translated">包含</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>1,2,3 \-contains 1</source>
          <target state="translated">1,2,3 -contains 1</target>         
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>\-notcontains</source>
          <target state="translated">-notcontains</target>         
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Does not contain</source>
          <target state="translated">不包含</target>         
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>1,2,3 \-notcontains 4</source>
          <target state="translated">1,2,3 -notcontains 4</target>         
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Where\-Object script blocks use the special variable '$\_' to refer to the current object in the pipeline.</source>
          <target state="translated">Where-Object 脚本块使用特殊变量“$_”来指代管道中的当前对象。</target>         
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Here is an example of how it works.</source>
          <target state="translated">以下是其工作原理示例。</target>         
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you have a list of numbers, and only want to return the ones that are less than 3, you can use Where\-Object to filter the numbers by typing:</source>
          <target state="translated">如果你有一个数字列表，且希望仅返回小于 3 的数字，则可使用 Where-Object 通过键入以下内容来筛选数字：</target>         
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Filtering Based on Object Properties</source>
          <target state="translated">基于对象属性进行筛选</target>         
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Since $\_ refers to the current pipeline object, we can access its properties for our tests.</source>
          <target state="translated">既然 $_ 指代当前管道对象，我们就可以访问其属性以进行测试。</target>         
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>As an example, we can look at the Win32\_SystemDriver class in WMI.</source>
          <target state="translated">例如，我们可以看看 WMI 中的 Win32_SystemDriver 类。</target>         
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>There might be hundreds of system drivers on a particular system, but you might only be interested in a particular set of the system drivers, such as those which are currently running.</source>
          <target state="translated">一个特定的系统上可能有数百个系统驱动程序，但是你可能只对特定一些系统驱动程序感兴趣，例如那些当前正在运行的程序。</target>         
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you use Get\-Member to view Win32\_SystemDriver members (<bpt id="p1">**</bpt>Get\-WmiObject \-Class Win32\_SystemDriver | Get\-Member \-MemberType Property<ept id="p1">**</ept>) you will see that the relevant property is State, and that it has a value of "Running" when the driver is running.</source>
          <target state="translated">如果你使用 Get-Member 查看 Win32_SystemDriver 成员（<bpt id="p1">**</bpt>Get-WmiObject -Class Win32_SystemDriver | Get-Member -MemberType 属性<ept id="p1">**</ept>），你将发现相关属性为 State，并且在驱动程序运行时，它的值为“Running”。</target>         
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can filter the system drivers, selecting only the running ones by typing:</source>
          <target state="translated">你可以筛选系统驱动程序，通过键入以下内容仅选择正在运行的驱动程序：</target>         
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This still produces a long list.</source>
          <target state="translated">这仍会生成一个较长的列表。</target>         
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You may want to filter to only select the drivers set to start automatically by testing the StartMode value as well:</source>
          <target state="translated">你可能还希望进行筛选，以通过测试 StartMode 值仅选择自动启动的驱动程序集：</target>         
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This gives us a lot of information we no longer need because we know that the drivers are running.</source>
          <target state="translated">这为我们提供了大量不再需要的信息，因为我们知道驱动程序正在运行。</target>         
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In fact, the only information we probably need at this point are the name and the display name.</source>
          <target state="translated">事实上，此时我们可能需要的唯一信息就是名称和显示名。</target>         
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following command includes only those two properties, resulting in much simpler output:</source>
          <target state="translated">下面的命令仅包括这两种属性，从而使输出更简单：</target>         
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>There are two Where\-Object elements in the above command, but they can be expressed in a single Where\-Object element by using the \-and logical operator, like this:</source>
          <target state="translated">上面的命令包含两个 Where-Object 元素，但是可以使用 -and 逻辑运算符将其表示为一个 Where-Object 元素，如下所示：</target>         
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The standard logical operators are listed in the following table.</source>
          <target state="translated">下表中列出了标准逻辑运算符。</target>         
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Logical Operator</source>
          <target state="translated">逻辑运算符</target>         
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">含义</target>         
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example (returns true)</source>
          <target state="translated">示例（返回 True）</target>         
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>\-and</source>
          <target state="translated">-and</target>         
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Logical and; true if both sides are true</source>
          <target state="translated">Logical and；如果两侧都为 True，则返回 True</target>         
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>(1 \-eq 1) \-and (2 \-eq 2)</source>
          <target state="translated">(1 -eq 1) -and (2 -eq 2)</target>         
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>\-or</source>
          <target state="translated">-or</target>         
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Logical or; true if either side is true</source>
          <target state="translated">Logical or；如果某一侧为 True，则返回 True</target>         
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>(1 \-eq 1) \-or (1 \-eq 2)</source>
          <target state="translated">(1 -eq 1) -or (1 -eq 2)</target>         
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>\-not</source>
          <target state="translated">-not</target>         
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Logical not; reverses true and false</source>
          <target state="translated">Logical not；反转 True 和 False</target>         
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>\-not (1 \-eq 2)</source>
          <target state="translated">-not (1 -eq 2)</target>         
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>\!</source>
          <target state="translated">\!</target>         
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Logical not; reverses true and false</source>
          <target state="translated">Logical not；反转 True 和 False</target>         
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>\!(1 \-eq 2)</source>
          <target state="translated">!(1 -eq 2)</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>