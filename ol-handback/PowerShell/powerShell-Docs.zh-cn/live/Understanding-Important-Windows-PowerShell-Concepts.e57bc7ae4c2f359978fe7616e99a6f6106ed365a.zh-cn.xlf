<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\fundamental\Understanding-Important-Windows-PowerShell-Concepts.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db5f410c8f84949c969f21ed59ac48a4e31e91fd</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-39517ae" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Understanding Important Windows PowerShell Concepts</source>
          <target state="translated">了解重要的 Windows PowerShell 概念</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Understanding Important Windows PowerShell Concepts</source>
          <target state="translated">了解重要的 Windows PowerShell 概念</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Windows PowerShell design integrates concepts from many different environments.</source>
          <target state="translated">Windows PowerShell 设计集成了很多不同环境的概念。</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Several of them are familiar to people with experience in specific shells or programming environments, but very few people will know about all of them.</source>
          <target state="translated">具有特定 Shell 或编程环境方面经验的人会对其中几种比较熟悉，但很少有人了解全部概念。</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Looking at some of these concepts provides a useful overview of the shell.</source>
          <target state="translated">查看其中一些概念可获得有关 Shell 的有用概述。</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Commands Are Not Text\-Based</source>
          <target state="translated">命令不基于文本</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Unlike traditional command\-line interface commands, Windows PowerShell cmdlets are designed to deal with objects \- structured information that is more than just a string of characters appearing on the screen.</source>
          <target state="translated">与传统的命令行接口命令不同，Windows PowerShell cmdlet 旨在处理对象结构的信息，这些信息不仅仅只是显示在屏幕上的字符串。</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Command output always carries along extra information that you can use if you need it.</source>
          <target state="translated">命令输出会始终包含你在需要时可使用的额外信息。</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We will discuss this topic in depth in this document.</source>
          <target state="translated">我们将在本文档中深入讨论这个主题。</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you have used text\-processing tools to process command\-line data in the past, you will find that they behave differently if you try to use them in Windows PowerShell.</source>
          <target state="translated">如果你过去使用过文本处理工具来处理命令行数据，你会发现它们在 Windows PowerShell 中的使用和工作方式会有所不同。</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In most cases, you do not need text\-processing tools to extract specific information.</source>
          <target state="translated">在大多数情况下，你不需要文本或文本处理工具来提取特定信息。</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can access portions of the data directly by using standard Windows PowerShell object manipulation commands.</source>
          <target state="translated">可以使用标准 Windows PowerShell 对象操作命令直接访问部分数据。</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Command Family Is Extensible</source>
          <target state="translated">命令系列是可扩展的</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Interfaces such as Cmd.exe do not provide a way for you to directly extend the built\-in command set.</source>
          <target state="translated">接口（比如 Cmd.exe）不提供可直接扩展内置命令集的方法。</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can create external command\-line tools that run in Cmd.exe, but these external tools do not have services, such as Help integration, and Cmd.exe does not automatically know that they are valid commands.</source>
          <target state="translated">你可以创建在 Cmd.exe 中运行的外部命令行工具，但这些外部工具没有服务（例如帮助集成），并且 Cmd.exe 不能自动了解它们是有效命令。</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The native binary commands in Windows PowerShell, known as <bpt id="p1">*</bpt>cmdlets<ept id="p1">*</ept> (pronounced command\-lets), can be augmented by cmdlets that you create and that you add to Windows PowerShell by using snap\-ins.</source>
          <target state="translated">Windows PowerShell 中的本机二进制命令称为 <bpt id="p1">*</bpt>cmdlet<ept id="p1">*</ept>（读作 command-lets），可以通过创建 cmdlet 和使用管理单元向 Windows PowerShell 添加 cmdlet 来进行扩充。</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Windows PowerShell <bpt id="p1">*</bpt>snap\-ins<ept id="p1">*</ept> are compiled, just like binary tools in any other interface.</source>
          <target state="translated">已对 Windows PowerShell <bpt id="p1">*</bpt>管理单元<ept id="p1">*</ept>进行编译，就像任何其他接口中的二进制工具一样。</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can use them to add Windows PowerShell providers to the shell, as well as new cmdlets.</source>
          <target state="translated">可以使用它们将 Windows PowerShell 提供程序以及新的 cmdlet 添加到 Shell 中。</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because of the special nature of the Windows PowerShell internal commands, we will refer to them as <bpt id="p1">*</bpt>cmdlets<ept id="p1">*</ept>.</source>
          <target state="translated">由于 Windows PowerShell 内部命令的特殊性质，我们将视其为 <bpt id="p1">*</bpt>cmdlet<ept id="p1">*</ept>。</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Windows PowerShell can run commands other than cmdlets.</source>
          <target state="translated">Windows PowerShell 可运行不同于 cmdlet 的其他命令。</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>We will not be discussing them in detail in the Windows PowerShell User's Guide, but they are useful to know about as categories of command types.</source>
          <target state="translated">我们不会在 Windows PowerShell 用户指南中详细讨论这些命令，但作为不同类型的命令，对它们进行了解会很有用。</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports scripts that are analogous to UNIX shell scripts and Cmd.exe batch files, but have a .ps1 file name extension.</source>
          <target state="translated">Windows PowerShell 支持类似于 UNIX shell 脚本和 Cmd.exe 批处理文件但文件扩展名为 .ps1 的脚本。</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Windows PowerShell also allows you to create internal functions that can be used directly in the interface or in scripts.</source>
          <target state="translated">Windows PowerShell 还允许你创建可在接口或脚本中直接使用的内部函数。</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Windows PowerShell Handles Console Input and Display</source>
          <target state="translated">Windows PowerShell 处理控制台输入和显示</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you type a command, Windows PowerShell always processes the command\-line input directly.</source>
          <target state="translated">当你键入命令时，Windows PowerShell 会始终直接处理命令行输入。</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Windows PowerShell also formats the output that you see on the screen.</source>
          <target state="translated">Windows PowerShell 还会对你在屏幕上看到的输出进行格式设置。</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is significant because it reduces the work required of each cmdlet and ensures that you can always do things the same way regardless of which cmdlet you are using.</source>
          <target state="translated">这很重要，因为它减少了每个 cmdlet 所需执行的工作，并确保你始终可以相同的方式执行操作而不用考虑所使用的 cmdlet。</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>One example of how this simplifies life for both tool developers and users is command\-line Help.</source>
          <target state="translated">一个有关这会如何简化工具开发人员和用户生活的例子是命令行帮助。</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Traditional command\-line tools have their own schemes for requesting and displaying Help.</source>
          <target state="translated">传统的命令行工具有自己的用于请求和显示帮助的方案。</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Some command\-line tools use <bpt id="p1">**</bpt>\/?<ept id="p1">**</ept></source>
          <target state="translated">某些命令行工具使用 <bpt id="p1">**</bpt>/?<ept id="p1">**</ept></target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>to trigger the Help display; others use <bpt id="p1">**</bpt>\-?<ept id="p1">**</ept>, <bpt id="p2">**</bpt>\/H<ept id="p2">**</ept>, or even <bpt id="p3">**</bpt><ph id="ph1">\/\/</ph><ept id="p3">**</ept>.</source>
          <target state="translated">来触发显示帮助内容；其他工具则使用 <bpt id="p1">**</bpt>\-?<ept id="p1">**</ept>、<bpt id="p2">**</bpt>\/H<ept id="p2">**</ept> 或 <bpt id="p3">**</bpt><ph id="ph1">\/\/</ph><ept id="p3">**</ept>。</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Some will display Help in a GUI window, rather than in the console display.</source>
          <target state="translated">有些工具会在 GUI 窗口而不是在控制台显示区域显示帮助。</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Some complex tools, such as application updaters, unpack internal files before displaying their Help.</source>
          <target state="translated">一些复杂的工具，比如应用程序更新程序，在显示帮助前先将内部文件解压缩。</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you use the wrong parameter, the tool might ignore what you typed and begin performing a task automatically.</source>
          <target state="translated">如果你使用的参数有误，该工具可能会忽略你键入的内容并自动开始执行任务。</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you enter a command in Windows PowerShell, everything you enter is automatically parsed and pre\-processed by Windows PowerShell.</source>
          <target state="translated">当你在 Windows PowerShell 中输入命令时，Windows PowerShell 会自动分析并预处理你输入的任何内容。</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">**</bpt>\-?<ept id="p1">**</ept></source>
          <target state="translated">如果你将 <bpt id="p1">**</bpt>-?<ept id="p1">**</ept> 参数</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>parameter with a Windows PowerShell cmdlet, it always means "show me Help for this command".</source>
          <target state="translated">和 Windows PowerShell cmdlet 结合使用，则始终意味着“显示此命令的帮助”。</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Cmdlet developers do not have to parse the command; they only need to provide the Help text.</source>
          <target state="translated">Cmdlet 开发人员无需分析命令；只需提供帮助文本。</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is important to understand that the Help features of Windows PowerShell are available even when you run traditional command\-line tools in Windows PowerShell.</source>
          <target state="translated">即使在 Windows PowerShell 中运行传统命令行工具，也仍可使用 Windows powershell 的帮助功能，了解这一点很重要。</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Windows PowerShell processes the parameters and passes the results to the external tools.</source>
          <target state="translated">Windows PowerShell 处理参数并将结果传递给外部工具。</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you run an graphic application in Windows PowerShell, the window for the application opens.</source>
          <target state="translated">如果在 Windows PowerShell 中运行图形应用程序，将随即打开该应用程序的窗口。</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Windows PowerShell intervenes only when processing the command\-line input you supply or the application output returned to the console window; it does not affect how the application works internally.</source>
          <target state="translated">Windows PowerShell 仅会在处理你提供的命令行输入或返回到控制台窗口中的应用程序输出时才会进行干预；它不会内在地影响应用程序的工作方式。</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Windows PowerShell Uses Some C\# Syntax</source>
          <target state="translated">Windows PowerShell 使用某些 C\# 语法</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has syntax features and keywords that are very similar to those used in the C\# programming language, because Windows PowerShell is based on the .NET Framework.</source>
          <target state="translated">Windows PowerShell 所具有的语法功能和关键字与 C# 编程语言中所使用的十分类似，因为 Windows PowerShell 是基于 .NET Framework。</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Learning Windows PowerShell will make it much easier to learn C\#, if you are interested in the language.</source>
          <target state="translated">如果你对 C# 语言感兴趣，那么学习 Windows PowerShell 会让 C# 语言的学习变得更加容易。</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If you are not a C\# programmer, this similarity is not important.</source>
          <target state="translated">如果你不是 C# 程序员，这种相似性就不重要了。</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>However, if you are already familiar with C\#, the similarities can make learning Windows PowerShell much easier.</source>
          <target state="translated">但是，如果你已经熟悉了 C#，这种相似性就可以使 Windows PowerShell 的学习变得容易许多。</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>