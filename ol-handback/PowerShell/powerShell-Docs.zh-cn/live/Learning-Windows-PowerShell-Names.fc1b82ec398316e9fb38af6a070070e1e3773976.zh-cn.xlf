<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc504fbde14d0ba743accf644ee5114810afb609</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\fundamental\Learning-Windows-PowerShell-Names.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5eb6c54f1156ef22fe143968bc73a5d8cea5343e</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Learning Windows PowerShell Names</source>
          <target state="translated">学习 Windows PowerShell 名称</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Learning Windows PowerShell Names</source>
          <target state="translated">学习 Windows PowerShell 名称</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Learning names of commands and command parameters is a significant time investment with most command<ph id="ph1">\-</ph>line interfaces.</source>
          <target state="translated">学习命令和命令参数的名称是使用大多数命令行接口时重要的时间投入。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The issue is that there are very few patterns, so the only way to learn is by memorizing each command and each parameter that you need to use on a regular basis.</source>
          <target state="translated">问题是模式非常少，因此学习的唯一方法是通过记住需要定期使用的每个命令和每个参数。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you work with a new command or parameter, you cannot generally use what you already know; you have to find and learn a new name.</source>
          <target state="translated">当使用新命令或参数时，你通常不能使用已知名称；你需要查找和学习新的名称。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you look at how interfaces grow from a small set of tools with incremental additions to functionality, it is easy to see why the structure is nonstandard.</source>
          <target state="translated">如果你看看接口是如何从一小组工具通过递增添加发展为功能，那就很容易明白为什么结构是非标准的。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>With command names in particular, this may sound logical since each command is a separate tool, but there is a better way to handle command names.</source>
          <target state="translated">特别是命令名称，由于每个命令都是独立的工具，所以听起来可能很有逻辑，但还有更好的方法来处理命令名称。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Most commands are built to manage elements of the operating system or applications, such as services or processes.</source>
          <target state="translated">大多数命令用于管理操作系统或应用程序中的元素，如服务或进程。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The commands have a variety of names that may or may not fit into a family.</source>
          <target state="translated">命令具有众多名称，这些名称可能或可能不会纳入一个系列。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, on Windows systems, you can use the <bpt id="p1">**</bpt>net start<ept id="p1">**</ept> and <bpt id="p2">**</bpt>net stop<ept id="p2">**</ept> commands to start and stop a service.</source>
          <target state="translated">例如，在 Windows 系统中，你可以使用 <bpt id="p1">**</bpt>net start<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>net stop<ept id="p2">**</ept> 命令来启动和停止服务。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There is another more generalized service control tool for Windows that has a completely different name, <bpt id="p1">**</bpt>sc<ept id="p1">**</ept>, that does not fit into the naming pattern for the <bpt id="p2">**</bpt>net<ept id="p2">**</ept> service commands.</source>
          <target state="translated">还有另一种对 Windows 更通用的服务控制工具，该工具具有完全不同的名称，即 <bpt id="p1">**</bpt>sc<ept id="p1">**</ept>，但该名称未纳入 <bpt id="p2">**</bpt>net<ept id="p2">**</ept> 服务命令的命名模式。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For process management, Windows has the <bpt id="p1">**</bpt>tasklist<ept id="p1">**</ept> command to list processes and the <bpt id="p2">**</bpt>taskkill<ept id="p2">**</ept> command to kill processes.</source>
          <target state="translated">对于流程管理，Windows 使用 <bpt id="p1">**</bpt>tasklist<ept id="p1">**</ept> 命令列出进程，使用 <bpt id="p2">**</bpt>taskkill<ept id="p2">**</ept> 命令终止进程。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Commands that take parameters have irregular parameter specifications.</source>
          <target state="translated">采用参数的命令的参数规范不规则。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You cannot use the <bpt id="p1">**</bpt>net start<ept id="p1">**</ept> command to start a service on a remote computer.</source>
          <target state="translated">不能使用 <bpt id="p1">**</bpt>net start<ept id="p1">**</ept> 命令来启动远程计算机上的服务。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>sc<ept id="p1">**</ept> command will start a service on a remote computer, but to specify the remote computer, you must prefix its name with a double backslash.</source>
          <target state="translated"><bpt id="p1">**</bpt>sc<ept id="p1">**</ept> 命令将在远程计算机上启动服务，但若要指定远程计算机，必须在其名称前使用双反斜杠作为前缀。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, to start the spooler service on a remote computer named DC01, you would type <bpt id="p1">**</bpt>sc <ph id="ph1">\\\\</ph>DC01 start spooler<ept id="p1">**</ept>.</source>
          <target state="translated">例如，若要在名为 DC01 的远程计算机上启动后台处理程序服务，应键入 <bpt id="p1">**</bpt>sc <ph id="ph1">\\\\</ph>DC01 start spooler<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To list tasks running on DC01, you need to use the <bpt id="p1">**</bpt><ph id="ph1">\/</ph>S<ept id="p1">**</ept> (for "system") parameter and supply the name DC01 without backslashes, like this: <bpt id="p2">**</bpt>tasklist <ph id="ph2">\/</ph>S DC01<ept id="p2">**</ept>.</source>
          <target state="translated">若要列出在 DC01 上运行的任务，需要使用 <bpt id="p1">**</bpt><ph id="ph1">\/</ph>S<ept id="p1">**</ept>（代指“系统”）参数并提供没有反斜杠的名称 DC01，如：<bpt id="p2">**</bpt>tasklist <ph id="ph2">\/</ph>S DC01<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Although there are important technical distinctions between a service and a process, they are both examples of manageable elements on a computer that have a well<ph id="ph1">\-</ph>defined life cycle.</source>
          <target state="translated">尽管服务和进程之间具有重要的技术区别，但它们都是计算机上的可管理元素的示例，具有定义完善的生命周期。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You may want to start or stop a service or process, or get a list of all currently running services or processes.</source>
          <target state="translated">你可能想要启动或停止服务或进程，或获取所有当前正在运行的服务或进程的列表。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In other words, although a service and a process are different things, the actions we perform on a service or a process are often conceptually the same.</source>
          <target state="translated">换而言之，尽管服务和过程是不同的事物，我们对服务或进程执行的操作通常从概念上讲是相同的。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Furthermore, choices we may make to customize an action by specifying parameters may be conceptually similar as well.</source>
          <target state="translated">此外，通过指定参数自定义操作所做的选择从概念上讲也是相似的。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Windows PowerShell exploits these similarities to reduce the number of distinct names you need to know to understand and use cmdlets.</source>
          <target state="translated">Windows PowerShell 利用这些相似之处减少了解和使用 cmdlet 时需要知道的不同名称的数量。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Cmdlets Use Verb<ph id="ph1">\-</ph>Noun Names to Reduce Command Memorization</source>
          <target state="translated">Cmdlet 使用谓词<ph id="ph1">\-</ph>名词的名称来减少命令记忆</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses a "verb<ph id="ph1">\-</ph>noun" naming system, where each cmdlet name consists of a standard verb hyphenated with a specific noun.</source>
          <target state="translated">Windows PowerShell 使用“谓词<ph id="ph1">\-</ph>名词”命名系统，其中每个 cmdlet 名称由标准谓词、连字符、特定名词组成。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Windows PowerShell verbs are not always English verbs, but they express specific actions in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell 谓词并不始终是英文谓词，但在 Windows PowerShell 中表达特定的操作。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Nouns are very much like nouns in any language, they describe specific types of objects that are important in system administration.</source>
          <target state="translated">名词非常类似于任何语言中的名词，它们描述在系统管理中十分重要的特定类型的对象。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is easy to demonstrate how these two<ph id="ph1">\-</ph>part names reduce learning effort by looking at a few examples of verbs and nouns.</source>
          <target state="translated">通过查看一些谓词和名词的示例，可以很容易地演示这些包含两个部分的名称如何减少学习的负担。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Nouns are less restricted, but they should always describe what a command acts upon.</source>
          <target state="translated">名词所受限制更少，但它们应始终描述命令作用的对象。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has commands such as <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Process<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Stop<ph id="ph2">\-</ph>Process<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Get<ph id="ph3">\-</ph>Service<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>Stop<ph id="ph4">\-</ph>Service<ept id="p4">**</ept>.</source>
          <target state="translated">Windows PowerShell 有很多命令，例如 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Process<ept id="p1">**</ept>、<bpt id="p2">**</bpt>Stop<ph id="ph2">\-</ph>Process<ept id="p2">**</ept>、<bpt id="p3">**</bpt>Get<ph id="ph3">\-</ph>Service<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>Stop<ph id="ph4">\-</ph>Service<ept id="p4">**</ept>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the case of two nouns and two verbs, consistency does not simplify learning that much.</source>
          <target state="translated">在两个名词和两个谓词的情况下，一致性并未简化太多学习。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, if you look at a standard set of 10 verbs and 10 nouns, you then have only 20 words to understand, but those words can be used to form 100 distinct command names.</source>
          <target state="translated">但是，如果你查看 10 个谓词和 10 个名词的标准集，那么你仅需了解 20 个词，但这些词可用于组成 100 个不同的命令名。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Frequently, you can recognize what a command does by reading its name, and it is usually apparent what name should be used for a new command.</source>
          <target state="translated">通常情况下，你通过阅读命令的名称就可以识别命令，对新的命令该使用什么名称通常是显而易见的。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, a computer shutdown command might be <bpt id="p1">**</bpt>Stop<ph id="ph1">\-</ph>Computer<ept id="p1">**</ept>.</source>
          <target state="translated">例如，计算机关机命令可能是 <bpt id="p1">**</bpt>Stop<ph id="ph1">\-</ph>Computer<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A command that lists all computers on a network might be <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Computer<ept id="p1">**</ept>.</source>
          <target state="translated">列出网络上的所有计算机的命令可能是 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Computer<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The command that gets the system date is <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Date<ept id="p1">**</ept>.</source>
          <target state="translated">获取系统日期的命令是 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Date<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can list all commands that include a particular verb with the <bpt id="p1">**</bpt><ph id="ph1">\-</ph>Verb<ept id="p1">**</ept> parameter for <bpt id="p2">**</bpt>Get<ph id="ph2">\-</ph>Command<ept id="p2">**</ept> (We will discuss <bpt id="p3">**</bpt>Get<ph id="ph3">\-</ph>Command<ept id="p3">**</ept> in detail in the next section).</source>
          <target state="translated">可以使用 <bpt id="p2">**</bpt>Get<ph id="ph2">\-</ph>Command<ept id="p2">**</ept> 的 <bpt id="p1">**</bpt><ph id="ph1">\-</ph>Verb<ept id="p1">**</ept> 参数列出包含特定谓词的所有命令（我们将在下一节中详细介绍 <bpt id="p3">**</bpt>Get<ph id="ph3">\-</ph>Command<ept id="p3">**</ept>）。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, to see all cmdlets that use the verb <bpt id="p1">**</bpt>Get<ept id="p1">**</ept>, type:</source>
          <target state="translated">例如，若要查看使用谓词 <bpt id="p1">**</bpt>Get<ept id="p1">**</ept> 的所有 cmdlet，键入：</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">\-</ph>Noun<ept id="p1">**</ept> parameter is even more useful because it allows you to see a family of commands that affect the same type of object.</source>
          <target state="translated"><bpt id="p1">**</bpt><ph id="ph1">\-</ph>Noun<ept id="p1">**</ept> 参数更有用，因为它可让你查看将对同一类型的对象产生影响的命令系列。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, if you want to see which commands are available for managing services, type following command:</source>
          <target state="translated">例如，如果你想要查看哪些命令可用于管理服务，请键入以下命令：</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A command is not necessarily a cmdlet, just because it has a verb<ph id="ph1">\-</ph>noun naming scheme.</source>
          <target state="translated">命令不一定是 cmdlet，只是因为命令具有谓词<ph id="ph1">\-</ph>名词的命名结构。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>One example of a native Windows PowerShell command that is not a cmdlet but has a verb<ph id="ph1">\-</ph>noun name, is the command for clearing a console window, Clear<ph id="ph2">\-</ph>Host.</source>
          <target state="translated">并非 cmdlet 但具有谓词<ph id="ph1">\-</ph>名词名称的本机 Windows PowerShell 命令的一个例子为，用于清除控制台窗口的命令：Clear<ph id="ph2">\-</ph>Host。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The Clear<ph id="ph1">\-</ph>Host command is actually an internal function, as you can see if you run Get<ph id="ph2">\-</ph>Command against it:</source>
          <target state="translated">Clear<ph id="ph1">\-</ph>Host 命令实际上是内部函数，如果对其运行 Get<ph id="ph2">\-</ph>Command 便可知道：</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Cmdlets Use Standard Parameters</source>
          <target state="translated">Cmdlet 使用标准参数</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>As noted earlier, commands used in traditional command<ph id="ph1">\-</ph>line interfaces do not generally have consistent parameter names.</source>
          <target state="translated">如前文所述，在传统命令行接口中使用的命令通常没有一致的参数名称。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Sometimes parameters do not have names at all.</source>
          <target state="translated">有时参数根本没有名称。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When they do, they are often single<ph id="ph1">\-</ph>character or abbreviated words that can be typed rapidly but are not easily understood by new users.</source>
          <target state="translated">若有名称，通常是可以快速输入但对新用户来说不易于理解的单个字符或缩写词。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Unlike most other traditional command<ph id="ph1">\-</ph>line interfaces, Windows PowerShell processes parameters directly, and it uses this direct access to the parameters along with developer guidance to standardize parameter names.</source>
          <target state="translated">不同于大多数其他传统的命令行接口，Windows PowerShell 直接处理参数，并使用参数的这种直接访问权限以及开发人员指南标准化参数名称。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Although this does not guarantee that every cmdlet will always conform to the standards, it does encourage it.</source>
          <target state="translated">尽管这样并不保证每个 cmdlet 将始终符合标准，但还是备受鼓舞。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Parameter names always have a '<ph id="ph1">\-</ph>' prepended to them when you use them, to allow Windows PowerShell to clearly identify them as parameters.</source>
          <target state="translated">使用时，参数名始终具有一个预置的“<ph id="ph1">\-</ph>”，以允许 Windows PowerShell 清楚地将它们标识为参数。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Command <ph id="ph2">\-</ph>Name Clear<ph id="ph3">\-</ph>Host<ept id="p1">**</ept> example, the parameter's name is <bpt id="p2">**</bpt>Name<ept id="p2">**</ept>, but it is entered as <ph id="ph4">\-</ph><bpt id="p3">**</bpt>Name<ept id="p3">**</ept>.</source>
          <target state="translated">在 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>Command <ph id="ph2">\-</ph>Name Clear<ph id="ph3">\-</ph>Host<ept id="p1">**</ept> 示例中，参数的名称为 <bpt id="p2">**</bpt>Name<ept id="p2">**</ept>，但输入时为 <ph id="ph4">\-</ph><bpt id="p3">**</bpt>Name<ept id="p3">**</ept>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Here are some of the general characteristics of the standard parameter names and usages.</source>
          <target state="translated">以下是标准参数名称和用法的一些一般特征。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The Help Parameter (?)</source>
          <target state="translated">帮助参数 (?)</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When you specify the <bpt id="p1">**</bpt><ph id="ph1">\-</ph>?<ept id="p1">**</ept></source>
          <target state="translated">指定 <bpt id="p1">**</bpt><ph id="ph1">\-</ph>?<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>parameter to any cmdlet, the cmdlet is not executed.</source>
          <target state="translated">参数到任何 cmdlet，将不会执行 cmdlet。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Instead, Windows PowerShell displays help for the cmdlet.</source>
          <target state="translated">相反，Windows PowerShell 将显示有关 cmdlet 的帮助。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Common Parameters</source>
          <target state="translated">通用参数</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has several parameters known as <bpt id="p1">*</bpt>common parameters<ept id="p1">*</ept>.</source>
          <target state="translated">Windows PowerShell 具有一些名为“通用参数”的参数。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because these parameters are controlled by the Windows PowerShell engine, whenever they are implemented by a cmdlet, they will always behave the same way.</source>
          <target state="translated">因为这些参数由 Windows PowerShell 引擎控制，每当 cmdlet 实现这些参数时，它们的行为方式将始终相同。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The common parameters are <bpt id="p1">**</bpt>WhatIf<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Confirm<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Verbose<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Debug<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Warn<ept id="p5">**</ept>, <bpt id="p6">**</bpt>ErrorAction<ept id="p6">**</ept>, <bpt id="p7">**</bpt>ErrorVariable<ept id="p7">**</ept>, <bpt id="p8">**</bpt>OutVariable<ept id="p8">**</ept>, and <bpt id="p9">**</bpt>OutBuffer<ept id="p9">**</ept>.</source>
          <target state="translated">通用参数有 <bpt id="p1">**</bpt>WhatIf<ept id="p1">**</ept>、<bpt id="p2">**</bpt>Confirm<ept id="p2">**</ept>、<bpt id="p3">**</bpt>Verbose<ept id="p3">**</ept>、<bpt id="p4">**</bpt>Debug<ept id="p4">**</ept>、<bpt id="p5">**</bpt>Warn<ept id="p5">**</ept>、<bpt id="p6">**</bpt>ErrorAction<ept id="p6">**</ept>、<bpt id="p7">**</bpt>ErrorVariable<ept id="p7">**</ept>、<bpt id="p8">**</bpt>OutVariable<ept id="p8">**</ept> 和 <bpt id="p9">**</bpt>OutBuffer<ept id="p9">**</ept></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Suggested Parameters</source>
          <target state="translated">建议参数</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The Windows PowerShell core cmdlets use standard names for similar parameters.</source>
          <target state="translated">对于类似的参数，Windows PowerShell 核心 cmdlet 使用标准名称。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Although the use of parameter names is not enforced, there is explicit guidance for usage to encourage standardization.</source>
          <target state="translated">尽管不强制使用参数名称，但是具有明确的用法指南支持标准化。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, the guidance recommends naming a parameter that refers to a computer by name as <bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept>, rather than Server, Host, System, Node, or other common alternative words.</source>
          <target state="translated">例如，本指南建议使用例如 <bpt id="p1">**</bpt>ComputerName<ept id="p1">**</ept> 等名称命名指示计算机的参数，而不使用 Server、Host、System、Node 或其他常见的备选单词。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Among the important suggested parameter names are <bpt id="p1">**</bpt>Force<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Exclude<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Include<ept id="p3">**</ept>, <bpt id="p4">**</bpt>PassThru<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Path<ept id="p5">**</ept>, and <bpt id="p6">**</bpt>CaseSensitive<ept id="p6">**</ept>.</source>
          <target state="translated">重要的建议参数名称有 <bpt id="p1">**</bpt>Force<ept id="p1">**</ept>、<bpt id="p2">**</bpt>Exclude<ept id="p2">**</ept>、<bpt id="p3">**</bpt>Include<ept id="p3">**</ept>、<bpt id="p4">**</bpt>PassThru<ept id="p4">**</ept>、<bpt id="p5">**</bpt>Path<ept id="p5">**</ept> 和 <bpt id="p6">**</bpt>CaseSensitive<ept id="p6">**</ept>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>