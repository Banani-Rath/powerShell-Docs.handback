<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Using-Format-Commands-to-Change-Output-View.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">411923bac650f0f4a11808a86acaca1de7e1c076</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-39517ae" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Format Commands to Change Output View</source>
          <target state="translated">使用格式命令更改输出视图</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Format Commands to Change Output View</source>
          <target state="translated">使用格式命令更改输出视图</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has a set of cmdlets that allow you to control which properties are displayed for particular objects.</source>
          <target state="translated">Windows PowerShell 具有一组 cmdlet，可让你控制要显示的特定对象的属性。</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The names of all the cmdlets begin with the verb <bpt id="p1">**</bpt>Format<ept id="p1">**</ept>.</source>
          <target state="translated">所有 cmdlet 的名称都以谓词 <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> 开头。</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They let you select one or more properties to show.</source>
          <target state="translated">它们使你可以选择要显示的一个或多个属性。</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlets are <bpt id="p2">**</bpt>Format\-Wide<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Format\-List<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Format\-Table<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Format\-Custom<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlet 包括 <bpt id="p2">**</bpt>Format-Wide<ept id="p2">**</ept>、<bpt id="p3">**</bpt>Format-List<ept id="p3">**</ept>、<bpt id="p4">**</bpt>Format-Table<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>Format-Custom<ept id="p5">**</ept>。</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We will only describe the <bpt id="p1">**</bpt>Format\-Wide<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Format\-List<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Format\-Table<ept id="p3">**</ept> cmdlets in this user's guide.</source>
          <target state="translated">在本用户指南中，我们将只介绍 <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept>、<bpt id="p2">**</bpt>Format-List<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Format-Table<ept id="p3">**</ept> cmdlet。</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each format cmdlet has default properties that will be used if you do not specify specific properties to display.</source>
          <target state="translated">如果不指定要显示的特定属性，则每个 format cmdlet 都具有要使用的默认属性。</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each cmdlet also uses the same parameter name, <bpt id="p1">**</bpt>Property<ept id="p1">**</ept>, to specify which properties you want to display.</source>
          <target state="translated">各 cmdlet 也使用相同的参数名称，<bpt id="p1">**</bpt>Property<ept id="p1">**</ept>，来指定要显示的属性。</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Format\-Wide<ept id="p1">**</ept> only shows a single property, its <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter only takes a single value, but the property parameters of <bpt id="p3">**</bpt>Format\-List<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Format\-Table<ept id="p4">**</ept> will accept a list of property names.</source>
          <target state="translated">因为 <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept> 只显示单个属性，其 <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> 参数仅采用单个值，但 <bpt id="p3">**</bpt>Format-List<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>Format-Table<ept id="p4">**</ept> 的属性参数接受一系列属性名称。</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you use the command <bpt id="p1">**</bpt>Get\-Process \-Name powershell<ept id="p1">**</ept> with two instances of Windows PowerShell running, you get output that looks like this:</source>
          <target state="translated">如果你将命令 <bpt id="p1">**</bpt>Get-Process-Name powershell<ept id="p1">**</ept> 与 Windows PowerShell 运行的两个实例搭配使用，你将得到如下所示的输出：</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the rest of this section, we will explore how to use <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlets to change the way the output of this command is displayed.</source>
          <target state="translated">在本部分接下来的内容中，我们将探究如何使用 <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> cmdlet 更改此命令的输出的显示方式。</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using Format\-Wide for Single\-Item Output</source>
          <target state="translated">将 Format-Wide 用于 Single-Item 输出</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format\-Wide<ept id="p1">**</ept> cmdlet, by default, displays only the default property of an object.</source>
          <target state="translated">默认情况下，<bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept> 只显示对象的默认属性。</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The information associated with each object is displayed in a single column:</source>
          <target state="translated">与每个对象关联的信息将显示在单个列中：</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also specify a non\-default property:</source>
          <target state="translated">你还可以指定非默认属性：</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Controlling Format\-Wide Display with Column</source>
          <target state="translated">使用列控制 Format-Wide 显示</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>With the <bpt id="p1">**</bpt>Format\-Wide<ept id="p1">**</ept> cmdlet, you can only display a single property at a time.</source>
          <target state="translated">使用 <bpt id="p1">**</bpt>Format-Wide<ept id="p1">**</ept> cmdlet，每次只能显示一个属性。</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This makes it useful for displaying simple lists that show only one element per line.</source>
          <target state="translated">这对于显示每行只显示一个元素的简单列表很有用。</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To get a simple listing, set the value of the <bpt id="p1">**</bpt>Column<ept id="p1">**</ept> parameter to 1 by typing:</source>
          <target state="translated">若要获取简单列表，通过键入以下内容将 <bpt id="p1">**</bpt>Column<ept id="p1">**</ept> 参数的值设为 1：</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Using Format\-List for a List View</source>
          <target state="translated">将 Format-List 用于列表视图。</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format\-List<ept id="p1">**</ept> cmdlet displays an object in the form of a listing, with each property labeled and displayed on a separate line:</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> cmdlet 以列表的形式显示对象，同时标记每个属性并在单独的行上显示：</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can specify as many properties as you want:</source>
          <target state="translated">你可以指定所需数目的属性：</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Getting Detailed Information by Using Format\-List with Wildcards</source>
          <target state="translated">通过将 Format-List 与通配符搭配使用获取详细信息</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format\-List<ept id="p1">**</ept> cmdlet lets you use a wildcard as the value of its <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> cmdlet 使你可以将通配符用作其 <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> 参数的值。</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This lets you display detailed information.</source>
          <target state="translated">这样便可以显示详细信息。</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Often, objects include more information than you need, which is why Windows PowerShell does not show all property values by default.</source>
          <target state="translated">通常情况下，对象包含的信息比你需要的多，这就是默认情况下 Windows PowerShell 不显示所有属性值的原因。</target>         
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To show all of properties of an object, use the <bpt id="p1">**</bpt>Format\-List \-Property \&amp;#42;<ept id="p1">**</ept> command.</source>
          <target state="translated">若要显示对象的全部属性，则使用 <bpt id="p1">**</bpt>Format-List-Property \&amp;#42;<ept id="p1">**</ept> 命令。</target>         
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following command generates over 60 lines of output for a single process:</source>
          <target state="translated">下面的命令针对单个进程生成超过 60 行的输出：</target>         
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Although the <bpt id="p1">**</bpt>Format\-List<ept id="p1">**</ept> command is useful for showing detail, if you want an overview of output that includes many items, a simpler tabular view is often more useful.</source>
          <target state="translated">虽然 <bpt id="p1">**</bpt>Format-List<ept id="p1">**</ept> 命令对显示详细信息很有用，但如果你想要包括多个项目的输出的概述，更常用的是一个更简单的表格视图。</target>         
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Using Format\-Table for Tabular Output</source>
          <target state="translated">将 Format-Table 用于表格输出</target>         
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">**</bpt>Format\-Table<ept id="p1">**</ept> cmdlet with no property names specified to format the output of the <bpt id="p2">**</bpt>Get\-Process<ept id="p2">**</ept> command, you get exactly the same output as you do without performing any formatting.</source>
          <target state="translated">如果你在没有指定属性名称的情况下使用 <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> cmdlet 来格式化 <bpt id="p2">**</bpt>Get-Process<ept id="p2">**</ept> 命令的输出，你所得到的输出会和未执行任何格式设置时得到的完全一样。</target>         
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The reason is that processes are usually displayed in a tabular format, as are most Windows PowerShell objects.</source>
          <target state="translated">原因是进程通常以表格格式显示，和大多数 Windows PowerShell 对象一样。</target>         
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Improving Format\-Table Output (AutoSize)</source>
          <target state="translated">改进 Format-Table 输出（自动调整大小）</target>         
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Although a tabular view is useful for displaying a lot of comparable information, it may be difficult to interpret if the display is too narrow for the data.</source>
          <target state="translated">尽管表格视图对显示大量可比较的信息很有用，但如果显示区域对于数据来说太窄，则可能导致数据难以理解。</target>         
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, if you try to display process path, ID, name, and company, you get truncated output for the process path and the company column:</source>
          <target state="translated">例如，如果你尝试显示进程路径、ID、名称和公司，你获得的却是进程路径和公司列的截断了的输出：</target>         
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you specify the <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> parameter when you run the <bpt id="p2">**</bpt>Format\-Table<ept id="p2">**</ept> command, Windows PowerShell will calculate column widths based on the actual data you are going to display.</source>
          <target state="translated">当你运行 <bpt id="p2">**</bpt>Format-Table<ept id="p2">**</ept> 命令时，如果你指定 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> 参数，Windows PowerShell 会根据你要显示的实际数据来计算列宽。</target>         
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This makes the <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> column readable, but the company column remains truncated:</source>
          <target state="translated">这使得<bpt id="p1">**</bpt>路径<ept id="p1">**</ept>列可读，但公司列将仍保持截断状态：</target>         
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format\-Table<ept id="p1">**</ept> cmdlet might still truncate data, but it will only do so at the end of the screen.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> cmdlet 仍可能会截断数据，但仅会在屏幕的末尾处进行截断。</target>         
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Properties, other than the last one displayed, are given as much size as they need for their longest data element to display correctly.</source>
          <target state="translated">除最后一个显示的属性外，会让所有属性获得各自所需的大小，以使最长的数据元素得以正确显示。</target>         
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can see that company name is visible but path is truncated if you swap the locations of <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Company<ept id="p2">**</ept> in the <bpt id="p3">**</bpt>Property<ept id="p3">**</ept> value list:</source>
          <target state="translated">如果你交换<bpt id="p3">**</bpt>属性<ept id="p3">**</ept>值列表中<bpt id="p1">**</bpt>路径<ept id="p1">**</ept>和<bpt id="p2">**</bpt>公司<ept id="p2">**</ept>的位置，你会发现公司名称是可见的，但路径则被截断：</target>         
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Format\-Table<ept id="p1">**</ept> command assumes that the nearer a property is to the beginning of the property list, the more important it is.</source>
          <target state="translated"><bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> 命令假定属性距离属性列表的开头越近，则该属性越重要。</target>         
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>So it attempts to display the properties nearest the beginning completely.</source>
          <target state="translated">因此，它会尝试完整显示离列表开头最近的那些属性。</target>         
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Format\-Table<ept id="p1">**</ept> command cannot display all the properties, it will remove some columns from the display and provide a warning.</source>
          <target state="translated">如果 <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> 命令无法显示所有属性，它将从显示中删除某些列，并发出警告。</target>         
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can see this behavior if you make <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> the last property in the list:</source>
          <target state="translated">如果你使<bpt id="p1">**</bpt>名称<ept id="p1">**</ept>变成列表中的最后一个属性，便可以看到这一行为：</target>         
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the output above, the ID column is truncated to make it fit into the listing, and the column headings are stacked up.</source>
          <target state="translated">在上面的输出中，将截断 ID 列以使其适合列表，并叠加列标题。</target>         
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Automatically resizing the columns does not always do what you want.</source>
          <target state="translated">自动调整列大小不会始终执行所需的操作。</target>         
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Wrapping Format\-Table Output in Columns (Wrap)</source>
          <target state="translated">让列中的 Format-Table 输出自动换行 (Wrap)</target>         
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can force lengthy <bpt id="p1">**</bpt>Format\-Table<ept id="p1">**</ept> data to wrap within its display column by using the <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> parameter.</source>
          <target state="translated">你可以通过使用 <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> 参数让较长的 <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> 数据在其显示列中自动换行。</target>         
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> parameter alone will not necessarily do what you expect, since it uses default settings if you do not also specify <bpt id="p2">**</bpt>AutoSize<ept id="p2">**</ept>:</source>
          <target state="translated">仅使用 <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> 参数不一定会实现所需的操作，因为如果你不同时指定 <bpt id="p2">**</bpt>AutoSize<ept id="p2">**</ept>，它会使用默认设置：</target>         
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An advantage of using the <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> parameter by itself is that it does not slow down processing very much.</source>
          <target state="translated">使用 <bpt id="p1">**</bpt>Wrap<ept id="p1">**</ept> 参数的一个优点是基本不会减慢进程速度。</target>         
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you perform a recursive file listing of a large directory system, it might take a very long time and use a lot of memory before displaying the first output items if you use <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept>.</source>
          <target state="translated">如果你对大型目录系统执行递归文件列表，那么如果你使用 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept>，可能得耗用大量时间和内存，才能显示第一批输出项。</target>         
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you are not concerned about system load, then <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> works well with the <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> parameter.</source>
          <target state="translated">如果你并不关心系统负载，那么结合使用 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> 参数则会获得良好的效果。</target>         
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The initial columns are always allotted as much width as they need to display items on one line, just as when you specify <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> without the <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> parameter.</source>
          <target state="translated">会始终向初始列分配其所需的宽度以使其中的项显示在一行上，就和你指定 <bpt id="p1">**</bpt>AutoSize<ept id="p1">**</ept> 而不使用 <bpt id="p2">**</bpt>Wrap<ept id="p2">**</ept> 参数的效果一样。</target>         
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The only difference is that the final column will be wrapped if necessary:</source>
          <target state="translated">唯一的不同是最后一列将自动换行（如有必要的话）：</target>         
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Some columns might not be displayed if you specify the widest columns first, so it is safest to specify the smallest data elements first.</source>
          <target state="translated">如果你先指定最宽的列，则某些列可能无法显示，因此最安全的做法是先指定最小的数据元素。</target>         
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the following example, we specify the extremely wide path element first, and even with wrapping, we still lose the final <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> column:</source>
          <target state="translated">在下面的示例中，我们首先指定特别宽的路径元素，甚至使用自动换行，但仍丢失了最后的<bpt id="p1">**</bpt>名称<ept id="p1">**</ept>列：</target>         
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Organizing Table Output (\-GroupBy)</source>
          <target state="translated">组织选项卡输出 (-GroupBy)</target>         
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Another useful parameter for tabular output control is <bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept>.</source>
          <target state="translated">用于表格输出控制的另一个有用参数是 <bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept>。</target>         
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Longer tabular listings in particular may be hard to compare.</source>
          <target state="translated">较长的列表可能尤其难以进行比较。</target>         
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept> parameter groups output based on a property value.</source>
          <target state="translated"><bpt id="p1">**</bpt>GroupBy<ept id="p1">**</ept> 参数基于属性值对输出进行分组</target>         
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, we can group processes by company for easier inspection, omitting the company value from the property listing:</source>
          <target state="translated">例如，我们可以按公司对进程分组以便于检查，同时从属性列表中省略公司的值：</target>         
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>