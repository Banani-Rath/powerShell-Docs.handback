<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-US" target-language="zh-cn">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Separating Configuration and Environment Data</source>
          <target state="translated">分离配置和环境数据</target>         
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0</source>
          <target state="translated">适用于：Windows PowerShell 4.0 和 Windows PowerShell 5.0</target>         
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell Desired State Configuration (DSC), it is possible to separate configuration data from the logic of your configuration.</source>
          <target state="translated">在 Windows PowerShell Desired State Configuration (DSC) 中，可以从配置的逻辑中分离配置数据。</target>         
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Another way to look at this is to consider the structural configuration (for example, a configuration might require that IIS be installed) as separate from the environmental configuration (that is, whether the situation is a test environment vs. a production one—the node names would be different, but the configuration applied to them would be the same).</source>
          <target state="translated">看待这个问题的另一种思路是把结构配置（例如，配置可能要求安装 IIS）与环境配置分开来看（即无论是测试环境还是生产环境，节点名称都不相同，但两者应用的配置相同）。</target>         
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This has the following advantages:</source>
          <target state="translated">这中思路具有以下优势：</target>         
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It allows you to reuse your configuration data for different resources, nodes, and configurations.</source>
          <target state="translated">你可以对不同资源、节点和配置重复使用配置数据。</target>         
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Configuration logic is more reusable if it does not contain hard-coded data.</source>
          <target state="translated">不包含硬编码数据的配置逻辑重用性更高。</target>         
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is similar to good scripting guidelines for functions.</source>
          <target state="translated">这类似于好的函数脚本指南。</target>         
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If some of the data needs to change, you can make the changes in one location, thereby saving time and reducing errors.</source>
          <target state="translated">如果需要更改某些数据，你可以在一个位置进行更改，这样可以节省时间并减少错误。</target>         
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Basic concepts and examples</source>
          <target state="translated">基本概念和示例</target>         
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To specify the environmental part of the configuration, DSC uses the <bpt id="p1">**</bpt>ConfigurationData<ept id="p1">**</ept> parameter, which is a hash table (or it can take a .psd1 file which contains the hash table).</source>
          <target state="translated">DSC 使用 <bpt id="p1">**</bpt>ConfigurationData<ept id="p1">**</ept> 参数来指定配置的环境部分，此参数是一个哈希表（或者它可以采用包含哈希表的 .psd1 文件）。</target>         
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This hash table must have at least one key <bpt id="p2">**</bpt>AllNodes<ept id="p2">**</ept>, which has a structured value.</source>
          <target state="translated">此哈希表至少必须具有一个包含结构化值的键 <bpt id="p2">**</bpt>AllNodes<ept id="p2">**</ept>。</target>         
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>         
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Note the AllNodes key, whose value is an array.</source>
          <target state="translated">请注意 AllNodes 键的值是一个数组。</target>         
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each element of this array is also a hash table, which requires NodeName as a key:</source>
          <target state="translated">此数组的每个元素也是一个需要 NodeName 作为键的哈希表：</target>         
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each hash table entry in AllNodes corresponds to configuration data to a node in the configuration.</source>
          <target state="translated">AllNodes 中的每个哈希表项对应着配置中一个节点的配置数据。</target>         
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In addition to the required NodeName key, you can add other keys to the hash table as well, for example:</source>
          <target state="translated">除必需的 NodeName 键之外，你还可以添加其他键到哈希表，例如：</target>         
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>DSC offers three special variables to use in the configuration script:</source>
          <target state="translated">DSC 提供了三个用于配置脚本的特殊变量：</target>         
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p3">**</bpt>$AllNodes<ept id="p3">**</ept>: Refers to all of the nodes.</source>
          <target state="translated"><bpt id="p3">**</bpt>$AllNodes<ept id="p3">**</ept>：指所有节点。</target>         
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use filtering with <bpt id="p4">**</bpt>.Where()<ept id="p4">**</ept> and <bpt id="p5">**</bpt>.ForEach()<ept id="p5">**</ept>, so instead of hard-coding node names to select particular nodes for action, you could write something like this to select VM-1 and VM-3 in the above example:</source>
          <target state="translated">你可以使用带有 <bpt id="p4">**</bpt>.Where()<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>.ForEach()<ept id="p5">**</ept> 的筛选项，这样在上述示例中，你就不必对节点名称进行硬编码来选择操作的特定节点，而可以通过编写类似于以下的内容来选择 VM-1 和 VM-3：</target>         
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p6">**</bpt>$Node<ept id="p6">**</ept>: Once the set of nodes is filtered, you can use $Node to refer to the particular entry.</source>
          <target state="translated"><bpt id="p6">**</bpt>$Node<ept id="p6">**</ept>：筛选出一组节点后，可以使用 $Node 来指代特定项。</target>         
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>         
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To apply a property to all nodes, you can set NodeName = “*”.</source>
          <target state="translated">要将属性应用到所有节点，可以设置成 NodeName = “*”。</target>         
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, to give every node the LogPath property, you could do this:</source>
          <target state="translated">例如，要让每个节点具有 LogPath 属性，你可以执行如下操作：</target>         
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p7">**</bpt>$ConfigurationData<ept id="p7">**</ept>: You can use this variable inside a configuration to access the configuration data hash table passed as a parameter.</source>
          <target state="translated"><bpt id="p7">**</bpt>$ConfigurationData<ept id="p7">**</ept>：你可以在配置内使用此变量来访问作为参数传递的配置数据哈希表。</target>         
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>         
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can find a full example included in the <bpt id="p8">[</bpt>xWebAdministration module<ept id="p8">](https://powershellgallery.com/packages/xWebAdministration)</ept>.</source>
          <target state="translated">可在 <bpt id="p8">[</bpt>xWebAdministration 模块<ept id="p8">](https://powershellgallery.com/packages/xWebAdministration)</ept>中查找完整示例。</target>         
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">291278563679354d4a21858157c0679914131dd3</xliffext:olfilehash>
  </header>
</xliff>