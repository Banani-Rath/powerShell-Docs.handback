<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a76c9ae7117e71833955a67ad8ec06fa7d0ed419</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wmf\5.1\DSC-improvements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c309b7ba3c10f08f8a576fae4e2497966cde2d4</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>DSC Improvements in WMF 5.1 (Preview)</source>
          <target state="translated">WMF 5.1（预览版）中的 DSC 改进</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>PowerShell, DSC, WMF</source>
          <target state="translated">PowerShell, DSC, WMF</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Improvements in Desired State Configuration (DSC) in WMF 5.1</source>
          <target state="translated">WMF 5.1 中的 Desired State Configuration (DSC) 改进</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>DSC class resource improvements</source>
          <target state="translated">DSC 类资源改进</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, we have fixed the following known issues:</source>
          <target state="translated">在 WMF 5.1 中，我们已解决下列已知问题：</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Get-DscConfiguration may return empty values (null) or errors if a complex/hash table type is returned by Get() function of a class-based DSC resource.</source>
          <target state="translated">如果基于类的 DSC 资源的 Get() 函数返回复杂/哈希表类型，则 Get-DscConfiguration 可能会返回空值 (null) 或错误。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Get-DscConfiguration returns error if RunAs credential is used in DSC configuration.</source>
          <target state="translated">如果在 DSC 配置中使用 RunAs 凭据，Get-DscConfiguration 将返回错误。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Class-based resource cannot be used in a composite configuration.</source>
          <target state="translated">不能在复合配置中使用基于类的资源。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Start-DscConfiguration hangs if class-based resource has a property of its own type.</source>
          <target state="translated">如果基于类的资源具有和自己类型一样的属性，Start-DscConfiguration 将挂起。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Class-based resource cannot be used as an exclusive resource.</source>
          <target state="translated">基于类的资源不能用作独占资源。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>DSC resource debugging improvements</source>
          <target state="translated">DSC 资源调试改进</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In WMF 5.0, the PowerShell debugger did not stop at the class-based resource method (Get/Set/Test) directly.</source>
          <target state="translated">在 WMF 5.0 中，PowerShell 调试器不直接在基于类的资源方法（Get/Set/Test）处停止。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, the debugger will stop at the class-based resource method in the same way as for MOF-based resources methods.</source>
          <target state="translated">在 WMF 5.1 中，和基于 MOF 的资源方法一样，调试器也可以在基于类的资源方法处停止。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>DSC pull client supports TLS 1.1 and TLS 1.2</source>
          <target state="translated">DSC 请求客户端支持 TLS 1.1 和 TLS 1.2</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Previously, the DSC pull client only supported SSL3.0 and TLS1.0 over HTTPS connections.</source>
          <target state="translated">以前，DSC 请求客户端仅支持基于 https 连接的 SSL3.0 和 TLS1.0。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When forced to use more secure protocols, the pull client would stop functioning.</source>
          <target state="translated">当强制使用更安全的协议时，请求客户端停止工作了。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, the DSC pull client no longer supports SSL 3.0 and adds support for the more secure TLS 1.1 and TLS 1.2 protocols.</source>
          <target state="translated">在 WMF 5.1 中，DSC 请求客户端不再支持 SSL 3.0，而增加了对更安全的 TLS 1.1 和 TLS 1.2 协议的支持。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Improved pull server registration</source>
          <target state="translated">改进的请求服务器注册</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the earlier versions of WMF, simultaneous registrations/reporting requests to a DSC pull server while using the ESENT database would lead to LCM failing to register and/or report.</source>
          <target state="translated">在 WMF 的早期版本中，在使用 ESENT 数据库时同时注册 DSC 请求服务器或向其报告请求，将导致 LCM 无法注册和/或报告。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In such cases, the event logs on the pull server will have the error "Instance Name already in use."</source>
          <target state="translated">在这种情况下，请求服务器上的事件日志将显示错误“Instance Name already in use.（实例名称正在使用中。）”</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This was due to an incorrect pattern being used to access the ESENT database in a multi-threaded scenario.</source>
          <target state="translated">这是由于在多线程情况下使用不正确的模式访问 ESENT 数据库。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, this issue has been fixed.</source>
          <target state="translated">在 WMF 5.1 中已修复此问题。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Concurrent registrations or reporting (involving ESENT database) will work fine in WMF 5.1.</source>
          <target state="translated">在 WMF 5.1 中并发的注册或报告（涉及 ESENT 数据库）可以正常工作。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This issue is applicable only to the ESENT database and does not apply to the OLEDB database.</source>
          <target state="translated">此问题仅适用于 ESENT 数据库，并不适用于 OLEDB 数据库。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Pull partial configuration naming convention</source>
          <target state="translated">拉取部分配置命名约定</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the previous release, the naming convention for a partial configuration was that the MOF file name in the pull server/service should match the partial configuration name specified in the local configuration manager settings that in turn must match the configuration name embedded in the MOF file.</source>
          <target state="translated">在以前的版本中，部分配置的命名约定为请求服务器/服务中 mof 文件名应与本地配置管理器设置中指定的部分配置名称匹配，反过来后者必须与 MOF 文件中嵌入的配置名称匹配。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See the snapshots below:</source>
          <target state="translated">请参阅以下快照：</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>•   Local configuration settings which defines a partial configuration that a node is allowed to receive.</source>
          <target state="translated">•   本地配置设置，定义了节点可以接收的部分配置。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sample metaconfiguration</source>
          <target state="translated">示例 metaconfiguration</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>•   Sample partial configuration definition</source>
          <target state="translated">•   部分配置定义示例</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>•   'ConfigurationName' embedded in the generated MOF file.</source>
          <target state="translated">•   生成的 MOF 文件中嵌入的“ConfigurationName”。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Sample generated mof file</source>
          <target state="translated">生成的 mof 文件示例</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>•   FileName in the pull configuration repository</source>
          <target state="translated">•   拉取配置存储库中的文件名</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>FileName in Configuration Repository</source>
          <target state="translated">配置存储库中的文件名</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Azure Automation service name generated MOF files as <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>.</source>
          <target state="translated">Azure 自动化服务名称生成的 MOF 文件名为 <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>So the configuration below will compile to PartialOne.localhost.mof.</source>
          <target state="translated">因此下面的配置将编译为 PartialOne.localhost.mof。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This made it impossible to pull one of your partial configuration from Azure Automation service.</source>
          <target state="translated">这样将无法从 Azure 自动化服务中提取一个部分配置。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, partial configuration in the pull server/service can be named as <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>.</source>
          <target state="translated">在 WMF 5.1 中，请求服务器/服务中的部分配置可以命名为 <ph id="ph1">`&lt;ConfigurationName&gt;.&lt;NodeName&gt;.mof`</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Moreover, if a machine is pulling a single configuration from a pull server/service then the configuration file on the pull server configuration repository can have any file name.</source>
          <target state="translated">此外，如果一台计算机从请求服务器/服务中提取一个配置，那么请求服务器配置存储库上的配置文件可以有任何文件名。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This naming flexibility allow you to manage your nodes partially by Azure Automation service, where some configuration for your node is coming from Azure Automation DSC and you have a partial configuration that you wanted to manage locally.</source>
          <target state="translated">这种命名灵活性允许 Azure 自动化服务部分管理你的节点，节点的一些配置来自 Azure Automation DSC，并且你具有希望在本地管理的部分配置。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The metaconfiguration below will set up a node to be managed both locally as well as by Azure Automation service.</source>
          <target state="translated">下面的元配置将设置一个节点，该节点可以在本地管理，也可以由 Azure 自动化服务管理。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Using PsDscRunAsCredential with DSC composite resources</source>
          <target state="translated">在 DSC 复合资源中使用 PsDscRunAsCredential</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We have added support for using <bpt id="p1">[</bpt><bpt id="p2">*</bpt>PsDscRunAsCredential<ept id="p2">*</ept><ept id="p1">](https://msdn.microsoft.com/cs-cz/powershell/dsc/runasuser)</ept> with DSC <bpt id="p3">[</bpt>Composite<ept id="p3">](https://msdn.microsoft.com/en-us/powershell/dsc/authoringresourcecomposite)</ept> resources.</source>
          <target state="translated">我们新增了对 DSC <bpt id="p3">[</bpt>复合<ept id="p3">](https://msdn.microsoft.com/en-us/powershell/dsc/authoringresourcecomposite)</ept>资源使用 <bpt id="p1">[</bpt>PsDscRunAsCredential<ept id="p1">](https://msdn.microsoft.com/cs-cz/powershell/dsc/runasuser)</ept> 的支持。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Users can now specify a value for PsDscRunAsCredential when using composite resources inside configurations.</source>
          <target state="translated">用户现在使用配置内部的复合资源时，可以指定 PsDscRunAsCredential 的值。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When specified, all resources run inside a composite resource as a RunAs user.</source>
          <target state="translated">如果指定了该值，则可以 RunAs 用户身份运行复合资源内部的所有资源。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If a composite resource calls another composite resource, all of its resources are also executed as RunAs user.</source>
          <target state="translated">如果复合资源调用了另一个复合资源，也将以 RunAs 用户运行该复合资源中的所有资源。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>RunAs credentials are propagated to any level of the composite resource hierarchy.</source>
          <target state="translated">RunAs 凭据可以传播到复合资源层次结构的任一级别。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If any resource inside a composite resource specifies its own value for PsDscRunAsCredential, a merge error will result during configuration compilation.</source>
          <target state="translated">如果复合资源内的任何资源指定了自己的 PsDscRunAsCredential 的值，那么在配置编译期间将产生合并错误。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example shows usage with <bpt id="p1">[</bpt>WindowsFeatureSet<ept id="p1">](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_newresources)</ept> composite resource included in PSDesiredStateConfiguration module.</source>
          <target state="translated">本示例演示了在 PSDesiredStateConfiguration 模块中包含的 <bpt id="p1">[</bpt>WindowsFeatureSet<ept id="p1">](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_newresources)</ept> 复合资源中该属性的使用。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>DSC module and configuration signing validations</source>
          <target state="translated">DSC 模块和配置签名验证</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In DSC, configurations and modules are distributed to managed computers from the pull server.</source>
          <target state="translated">在 DSC 中，从请求服务器中将配置和模块分发到托管计算机。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the pull server is compromised, an attacker can potentially modify the configurations and modules on the pull server and have it distributed to all managed nodes, compromising all of them.</source>
          <target state="translated">如果请求服务器受到攻击，攻击者可能修改请求服务器上的配置和模块，并将其分发到所有托管节点，将损害所有这些节点。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In WMF 5.1, DSC supports validating the digital signatures on catalog and configuration (.MOF) files.</source>
          <target state="translated">在 WMF 5.1 中，DSC 支持验证目录和配置文件 (.MOF) 上的数字签名。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This feature will prevent nodes from executing configurations or module files which are not signed by a trusted signer or which have been tampered with after they have been signed by trusted signer.</source>
          <target state="translated">该功能可以防止节点执行未经受信任的签名者签署的配置或模块文件，或者是经受信任的签名者签署后被篡改的配置或模块文件。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>How to sign configuration and module</source>
          <target state="translated">如何对配置和模块进行签名</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Configuration Files (.MOFs): The existing PowerShell cmdlet <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> is extended to support signing of MOF files.</source>
          <target state="translated">配置文件 (.MOF)：已扩展现有的 PowerShell cmdlet <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> 用于支持 MOF 文件签名。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Modules: Signing of modules is done by signing the corresponding module catalog using the following steps:</source>
          <target state="translated">模块：使用以下步骤对相应的模块目录进行签名，从而完成模块签名：</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Create a catalog file: A catalog file contains a collection of cryptographic hashes or thumbprints.</source>
          <target state="translated">创建目录文件：目录文件包含加密哈希或指纹的集合。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Each thumbprint corresponds to a file that is included in the module.</source>
          <target state="translated">每个指纹对应于模块中包含的一个文件。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The new cmdlet <bpt id="p1">[</bpt>New-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept>, has been added to enable users to create a catalog file for their module.</source>
          <target state="translated">增加了新的 cmdlet <bpt id="p1">[</bpt>New-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept>，支持用户为其模块创建目录文件。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Sign the catalog file: Use <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> to sign the catalog file.</source>
          <target state="translated">对目录文件进行签名：使用 <bpt id="p1">[</bpt>Set-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849819.aspx)</ept> 对目录文件进行签名。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Place the catalog file inside the module folder.</source>
          <target state="translated">将目录文件放在模块文件夹中。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>By convention, module catalog file should be placed under the module folder with the same name as the module.</source>
          <target state="translated">按照约定，模块目录文件应放在与模块同名的模块文件夹下面。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>LocalConfigurationManager settings to enable signing validations</source>
          <target state="translated">用于启用签名验证的 LocalConfigurationManager 设置。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Pull</source>
          <target state="translated">请求</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The LocalConfigurationManager of a node performs signing validation of modules and configurations based on its current settings.</source>
          <target state="translated">节点的 LocalConfigurationManager 根据其当前设置执行模块和配置的签名验证。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>By default, signature validation is disabled.</source>
          <target state="translated">默认情况下，签名验证处于禁用状态。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Signature validation can enabled by adding the ‘SignatureValidation’ block to the meta-configuration definition of the node as shown below:</source>
          <target state="translated">你可以将 SignatureValidation 块添加到节点的元配置定义来启用签名验证，如下所示：</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Setting the above metaconfiguration on a node enables signature validation on downloaded configurations and modules.</source>
          <target state="translated">在节点上设置上述元配置可以对下载的配置和模块进行签名验证。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The Local Configuration Manager will perform the following steps to verify the digital signatures.</source>
          <target state="translated">本地配置管理器将执行以下步骤来验证数字签名。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Verify the signature on a configuration file (.MOF) is valid.</source>
          <target state="translated">验证配置文件 (.MOF) 上的签名是否有效。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It uses the PowerShell cmdlet <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept>, which is extended in 5.1 to support MOF signature validation.</source>
          <target state="translated">它使用在 5.1 中扩展的 PowerShell cmdlet <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept> 来支持 MOF 签名验证。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Verify the certificate authority that authorized the signer is trusted.</source>
          <target state="translated">验证授权签名人的证书颁发机构是否可信任。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Download module/resource dependencies of the configuration to a temp location.</source>
          <target state="translated">将配置的模块/资源依赖项下载到临时位置。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Verify the signature of the catalog included inside the module.</source>
          <target state="translated">验证模块中是否包含目录的签名。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Find a <ph id="ph1">`&lt;moduleName&gt;.cat`</ph> file and verify its signature using the cmdlet  <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept>.</source>
          <target state="translated">查找 <ph id="ph1">`&lt;moduleName&gt;.cat`</ph> 文件并使用 cmdlet <bpt id="p1">[</bpt>Get-AuthenticodeSignature<ept id="p1">](https://technet.microsoft.com/library/hh849805.aspx)</ept> 验证其签名。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Verify the certification authority that authenticated the signer is trusted.</source>
          <target state="translated">验证对签名人进行身份验证的证书颁发机构是否可信任。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Verify the content of the modules has not been tampered using the new cmdlet <bpt id="p1">[</bpt>Test-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept>.</source>
          <target state="translated">验证未使用新的 cmdlet <bpt id="p1">[</bpt>Test-FileCatalog<ept id="p1">](https://technet.microsoft.com/library/cc732148.aspx)</ept> 篡改模块的内容。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Install-Module to $env:ProgramFiles\WindowsPowerShell\Modules\</source>
          <target state="translated">将模块安装到 $env:ProgramFiles\WindowsPowerShell\Modules\</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Process configuration</source>
          <target state="translated">进程配置</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Note: Signature validation on module-catalog and configuration is only performed when the configuration is applied to the system for the first time or when the module is downloaded and installed.</source>
          <target state="translated">注意：仅在第一次将配置应用到系统或下载并安装模块时，才执行对模块目录和配置的签名验证。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Consistency runs do not validate the signature of Current.mof or its module dependencies.</source>
          <target state="translated">一致性运行不会验证 Current.mof 或其模块依赖项的签名。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If verification has failed at any stage, for instance, if the configuration pulled from the pull server is unsigned, then processing of the configuration will terminate with the error shown below and all temporary files will be deleted.</source>
          <target state="translated">如果在任何阶段验证失败，例如，如果从请求服务器提取的配置尚未签名，则将终止配置处理，并显示以下错误，以及删除所有临时文件。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Sample Error Output Configuration</source>
          <target state="translated">错误输出配置示例</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Similarily, pulling a module whose catalog is not signed will result in the following error:</source>
          <target state="translated">类似地，提取其目录未签名的模块将导致以下错误：</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Sample Error Output Module</source>
          <target state="translated">错误输出模块示例</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Push</source>
          <target state="translated">推送</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A configuration delivered by using push might be tampered with at its source before it delivered to the node.</source>
          <target state="translated">通过使用推送提供的配置可能会在其提供到节点之前在源处被篡改。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The Local Configuration Manager will perform similar signature validation steps for pushed or published configuration(s).</source>
          <target state="translated">本地配置管理器将对推送或发布的配置执行类似的签名验证步骤。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Below is a complete example of signature validation for push.</source>
          <target state="translated">下面是针对推送的签名验证的完整示例。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Enable signature validation on the node.</source>
          <target state="translated">启用针对节点的签名验证。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Create a sample configuration file.</source>
          <target state="translated">创建示例配置文件。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Try pushing the unsigned configuration file in to the node.</source>
          <target state="translated">尝试将未签名的配置文件推送到节点。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ErrorUnsignedMofPushed</source>
          <target state="translated">ErrorUnsignedMofPushed</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Sign the configuration file using code-signing certificate.</source>
          <target state="translated">使用代码签名证书对配置文件进行签名。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>SignMofFile</source>
          <target state="translated">SignMofFile</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Try pushing the signed MOF file.</source>
          <target state="translated">请尝试推送已签名的 MOF 文件。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>SignMofFile</source>
          <target state="translated">SignMofFile</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>