<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97a312150790be31d82426e81139dcd569d482a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Assignment_Operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c27769f75a5f40740aae4fdfedc323631963127b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c403214c5d4507878e0a7e6bf398e5fc7b9e4c11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell, cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Assignment Operators</source>
          <target state="translated">Sobre operadores de atribuição</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_assignment_operators</source>
          <target state="translated">about_assignment_operators</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIÇÃO BREVE</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use operators to assign values to variables.</source>
          <target state="translated">Descreve como usar operadores para atribuir valores a variáveis.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIÇÃO LONGA</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Assignment operators assign one or more values to a variable.</source>
          <target state="translated">Operadores de atribuição atribuir um ou mais valores para uma variável.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They can perform numeric operations on the values before the assignment.</source>
          <target state="translated">Eles podem executar operações numéricas em valores antes da atribuição.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the following assignment operators.</source>
          <target state="translated">O Windows PowerShell suporta os seguintes operadores de atribuição.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Operator  Description</source>
          <target state="translated">Descrição do operador</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>=         Sets the value of a variable to the specified value.</source>
          <target state="translated">= Define o valor de uma variável para o valor especificado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>+=        Increases the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">+ = Aumenta o valor de uma variável pelo valor especificado ou acrescenta o valor especificado para o valor existente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-=        Decreases the value of a variable by the specified value.</source>
          <target state="translated">-= Diminui o valor de uma variável pelo valor especificado.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>*=        Multiplies the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">* = Multiplica o valor de uma variável pelo valor especificado ou acrescenta o valor especificado para o valor existente.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>/=        Divides the value of a variable by the specified value.</source>
          <target state="translated">= Divide o valor de uma variável pelo valor especificado.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>%=        Divides the value of a variable by the specified value and then assigns the remainder (modulus) to the variable.</source>
          <target state="translated">% = Divide o valor de uma variável pelo valor especificado e, em seguida, atribui o resto à variável.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>++        Increases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">+ + Aumenta o valor de uma variável, uma propriedade pode ser atribuída ou um elemento da matriz em 1.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>--        Decreases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">– Diminui o valor de uma variável, uma propriedade pode ser atribuída ou um elemento da matriz em 1.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">SINTAXE</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The syntax of the assignment operators is as follows:</source>
          <target state="translated">A sintaxe dos operadores de atribuição é da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt; &lt;assignment-operator&gt;</source>
          <target state="translated">&lt; atribuíveis expressão &gt;&lt; operador de atribuição &gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Assignable expressions include variables and properties.</source>
          <target state="translated">Expressões atribuíveis incluem variáveis e propriedades.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The value can be a single value, an array of values, or a command, expression, or statement.</source>
          <target state="translated">O valor pode ser um único valor, uma matriz de valores, ou um comando, expressão ou instrução.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The increment and decrement operators are unary operators.</source>
          <target state="translated">Os operadores de incremento e de decremento são operadores unários.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each has prefix and postfix versions.</source>
          <target state="translated">Cada um tem versões de prefixo e sufixo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt;assignable-expression&gt;</source>
          <target state="translated">&lt; atribuíveis expressão &gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt; atribuíveis expressão &gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The assignable expression must a number or it must be convertible to a number.</source>
          <target state="translated">A expressão pode ser atribuída deve ser um número ou deve ser convertido em um número.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ASSIGNING VALUES</source>
          <target state="translated">ATRIBUINDO VALORES</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Variables are named memory spaces that store values.</source>
          <target state="translated">As variáveis são denominadas espaços de memória que armazenam valores.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You store the values in variables by using the assignment operator (=).</source>
          <target state="translated">Você pode armazenar os valores nas variáveis usando o operador de atribuição (=).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The new value can replace the existing value of the variable, or you can append a new value to the existing value.</source>
          <target state="translated">O novo valor pode substituir o valor da variável existente, ou você pode acrescentar um novo valor para o valor existente.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The basic assignment operator is the equal sign (=)(ASCII 61).</source>
          <target state="translated">O operador de atribuição básico é o sinal de igual (=) (61 ASCII).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following statement assigns the value Windows PowerShell to the $MyShell variable:</source>
          <target state="translated">Por exemplo, a instrução a seguir atribui o valor do Windows PowerShell para a variável $MyShell:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>$MyShell = "Windows PowerShell"</source>
          <target state="translated">$MyShell = "Windows PowerShell"</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you assign a value to a variable in Windows PowerShell, the variable is created if it did not already exist.</source>
          <target state="translated">Quando você atribui um valor a uma variável no Windows PowerShell, a variável é criada se ela ainda não existir.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the first of the following two assignement statements creates the $a variable and assigns a value of 6 to $a.</source>
          <target state="translated">Por exemplo, a primeira das duas instruções assignement a seguir cria a variável $a e atribui um valor de 6 a $um.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The second assignment statement assigns a value of 12 to $a.</source>
          <target state="translated">A segunda instrução de atribuição atribui um valor de 12 a $um.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The first statement creates a new variable.</source>
          <target state="translated">A primeira instrução cria uma nova variável.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The second statement changes only its value:</source>
          <target state="translated">A segunda instrução altera apenas seu valor:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>$a = 6 $a = 12</source>
          <target state="translated">$um = 6 $um = 12</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Variables in Windows PowerShell do not have a specific data type unless you cast them.</source>
          <target state="translated">Variáveis do Windows PowerShell não tem um tipo de dados específico, a menos que você convertê-los.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When a variable contains only one object, the variable takes the data type of that object.</source>
          <target state="translated">Quando uma variável contém apenas um objeto, a variável tem o tipo de dados do objeto.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When a variable contains a collection of objects, the variable has the System.Object data type.</source>
          <target state="translated">Quando uma variável contém uma coleção de objetos, a variável tem o tipo de dados Object.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, you can assign any type of object to the collection.</source>
          <target state="translated">Portanto, você pode atribuir qualquer tipo de objeto à coleção.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example shows that you can add process objects, service objects, strings, and integers to a variable without generating an error:</source>
          <target state="translated">O exemplo a seguir mostra o que você pode adicionar objetos de processo, objetos de serviço, cadeias de caracteres e inteiros em uma variável sem gerar um erro:</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>$a = get-process $a += get-service $a += "string" $a += 12</source>
          <target state="translated">$um = $ get-process um + = get-service $ $a + = 12 um + = "string"</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because the assignment operator (=) has a lower precedence than the pipeline operator (|), parentheses are not required to assign the result of a command pipeline to a variable.</source>
          <target state="translated">Como o operador de atribuição (=) tem a menor precedência que o operador de pipeline (|), parênteses não são necessários para atribuir o resultado de um pipeline de comando para uma variável.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, the following command sorts the services on the computer and then assigns the sorted services to the $a variable:</source>
          <target state="translated">Por exemplo, o comando a seguir classifica os serviços no computador e, em seguida, atribui os serviços classificados a variável $a:</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$a = get-service | sort name</source>
          <target state="translated">$um = get-service | nome da classificação</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also assign the value created by a statement to a variable, as in the following example:</source>
          <target state="translated">Você também pode atribuir o valor criado por uma instrução para uma variável, como no exemplo a seguir:</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>$a = if ($b -lt 0) { 0 } else { $b }</source>
          <target state="translated">$um = se ($b - lt 0) {0} else {$b}</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example assigns 0 to the $a variable if the value of $b is less than 0.</source>
          <target state="translated">Este exemplo atribui 0 a variável $a, se o valor de $b é menor que 0.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It assigns the value of $b to $a if the value of $b is not less than zero.</source>
          <target state="translated">Ele atribui o valor de $b para $a se o valor de $b é não é menor que zero.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT OPERATOR (=)</source>
          <target state="translated">O OPERADOR DE ATRIBUIÇÃO (=)</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The assignment operator (=) assigns values to variables.</source>
          <target state="translated">O operador de atribuição (=) atribui valores a variáveis.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the variable already has a value, the assignment operator (=) replaces the value without warning.</source>
          <target state="translated">Se a variável já tiver um valor, o operador de atribuição (=) substitui o valor sem aviso.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following statement assigns the integer value 6 to the $a variable:</source>
          <target state="translated">A instrução a seguir atribui o valor de inteiro 6 a variável $a:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$um = 6</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To assign a string value to a variable, enclose the string value in quotation marks, as follows:</source>
          <target state="translated">Para atribuir um valor de cadeia de caracteres a uma variável, coloque o valor de cadeia de caracteres entre aspas, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>$a = "baseball"</source>
          <target state="translated">$a = "bola"</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To assign an array (multiple values) to a variable, separate the values with commas, as follows:</source>
          <target state="translated">Para atribuir uma matriz (vários valores) a uma variável, separe os valores com vírgulas, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>$a = "apple", "orange", "lemon", "grape"</source>
          <target state="translated">$a = "apple", "laranja", "limão", "Uva"</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To assign a hash table to a variable, use the standard hash table notation in Windows PowerShell.</source>
          <target state="translated">Para atribuir uma tabela de hash para uma variável, use a notação da tabela de hash padrão no Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Type an at sign (@) followed by key/value pairs that are separated by semicolons (;) and enclosed in braces ({ }).</source>
          <target state="translated">Digite um sinal de arroba (@) seguido de pares chave/valor separados por ponto e vírgula (;) e entre chaves ({}).</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to assign a hash table to the $a variable, type:</source>
          <target state="translated">Por exemplo, para atribuir uma tabela de hash para a variável $a, digite:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>$a = @{one=1; two=2; three=3}</source>
          <target state="translated">$um = @{um = 1; dois = 2; três = 3}</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To assign hexadecimal values to a variable, precede the value with "0x".</source>
          <target state="translated">Para atribuir valores hexadecimais para uma variável, preceda o valor com "0x".</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Windows PowerShell converts the hexadecimal value (0x10) to a decimal value (in this case, 16) and assigns that value to the $a variable.</source>
          <target state="translated">Windows PowerShell converte o valor hexadecimal (0x10) para um valor decimal (nesse caso, 16) e atribui o valor à variável $a.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 0x10 to the $a variable, type:</source>
          <target state="translated">Por exemplo, para atribuir um valor de 0x10 a variável $a, digite:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>$a = 0x10</source>
          <target state="translated">$um = 0x10</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To assign an exponential value to a variable, type the root number, the letter "e", and a number that represents a multiple of 10.</source>
          <target state="translated">Para atribuir um valor exponencial a uma variável, digite o número de raiz, a letra "e" e um número que representa um múltiplo de 10.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 3.1415 to the power of 1,000 to the $a variable, type:</source>
          <target state="translated">Por exemplo, para atribuir um valor de 3,1415 à potência de 1.000 a variável $a, digite:</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>$a = 3.1415e3</source>
          <target state="translated">$um = 3.1415e3</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Windows PowerShell can also convert kilobytes (KB), megabytes (MB), and gigabytes (GB) into bytes.</source>
          <target state="translated">O Windows PowerShell também pode converter quilobytes (KB), megabytes (MB) e gigabytes (GB) em bytes.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 10 kilobytes to the $a variable, type:</source>
          <target state="translated">Por exemplo, para atribuir um valor de 10 quilobytes a variável $a, digite:</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>$a = 10kb</source>
          <target state="translated">$um = 10kb</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY ADDITION OPERATOR (+=)</source>
          <target state="translated">A ATRIBUIÇÃO DE OPERADOR DE ADIÇÃO (+ =)</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The assignment by addition operator (+=) either increments the value of a variable or appends the specified value to the existing value.</source>
          <target state="translated">A atribuição de operador de adição (+ =) incrementa o valor de uma variável ou acrescenta o valor especificado para o valor existente.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The action depends on whether the variable has a numeric or string type and whether the variable contains a single value (a scalar) or multiple values (a collection).</source>
          <target state="translated">A ação depende se a variável tem um tipo numérico ou cadeia de caracteres e se a variável contém um valor único (um valor escalar) ou vários valores (uma coleção).</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The += operator combines two operations.</source>
          <target state="translated">O operador + = combina duas operações.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>First, it adds, and then it assigns.</source>
          <target state="translated">Primeiro, ele adiciona e, em seguida, ele atribui.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">Portanto, as instruções a seguir são equivalentes:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>$a += 2 $a = ($a + 2)</source>
          <target state="translated">$ $um + = 2 um = ($um + 2)</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When the variable contains a single numeric value, the += operator increments the existing value by the amount on the right side of the operator.</source>
          <target state="translated">Quando a variável contém um único valor numérico, o operador + = incrementa o valor existente pela quantidade no lado direito do operador.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Then, the operator assigns the resulting value to the variable.</source>
          <target state="translated">Em seguida, o operador atribui o valor resultante à variável.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the += operator to increase the value of a variable:</source>
          <target state="translated">O exemplo a seguir mostra como usar o operador + = para aumentar o valor de uma variável:</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 4 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 4 c:\ps&gt;Get-applockerpolicy &gt; $um c:\ps&gt;Get-applockerpolicy + = 2 &gt; $um</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When the value of the variable is a string, the value on the right side of the operator is appended to the string, as follows:</source>
          <target state="translated">Quando o valor da variável é uma cadeia de caracteres, o valor à direita do operador é acrescentado à cadeia de caracteres, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "Windows" C:\PS&gt; $a += " PowerShell" C:\PS&gt; $a Windows PowerShell</source>
          <target state="translated">C:\ps&gt; &gt; $a = "Windows" c:\ps&gt;Get-applockerpolicy &gt; $a + = "PowerShell" c:\ps&gt;Get-applockerpolicy &gt; $ Windows PowerShell</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When the value of the variable is an array, the += operator appends the values on the right side of the operator to the array.</source>
          <target state="translated">Quando o valor da variável é uma matriz, o operador + = acrescenta os valores à direita do operador à matriz.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Unless the array is explicitly typed by casting, you can append any type of value to the array, as follows:</source>
          <target state="translated">A menos que a matriz é digitada explicitamente com a conversão, você pode anexar qualquer tipo de valor na matriz, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = c:\ps&gt;Get-applockerpolicy 1,2,3 &gt; $um c:\ps&gt;Get-applockerpolicy + = 2 &gt; $um</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a += "String" C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $a + = "String" c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">Cadeia de caracteres</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When the value of a variable is a hash table, the += operator appends the value on the right side of the operator to the hash table.</source>
          <target state="translated">Quando o valor de uma variável é uma tabela de hash, o operador + = acrescenta o valor à direita do operador à tabela de hash.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, because the only type that you can add to a hash table is another hash table, all other assignments fail.</source>
          <target state="translated">No entanto, como o único tipo que você pode adicionar a uma tabela de hash é outra tabela de hash, todas as outras atribuições falharem.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a hash table to the $a variable.</source>
          <target state="translated">Por exemplo, o comando a seguir atribui uma tabela de hash para a variável $a.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Then, it uses the += operator to append another hash table to the existing hash table, effectively adding a new key/value pair to the existing hash table.</source>
          <target state="translated">Em seguida, ele usa o operador + = para acrescentar outra tabela de hash para a tabela de hash existentes, efetivamente, adicionando um novo par chave/valor à tabela de hash existentes.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This command succeeds, as shown in the output:</source>
          <target state="translated">Este comando for bem-sucedido, conforme mostrado na saída:</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += @{mode = "write"} C:\PS&gt; $a Name                           Value</source>
          <target state="translated">C:\ps&gt; &gt; $um = @{um = 1; b = 2; c = 3} c:\ps&gt;Get-applockerpolicy &gt; $a + = @{modo = "gravação"} c:\ps&gt;Get-applockerpolicy &gt; $um valor de nome</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 mode                           write c                              3</source>
          <target state="translated">a                              1 b                              2 mode                           write c                              3</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following command attempts to append an integer (1) to the hash table in the $a variable.</source>
          <target state="translated">O comando a seguir tenta acrescentar um inteiro (1) para a tabela de hash na variável $a.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This command fails:</source>
          <target state="translated">Esse comando falhar:</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += 1 You can add another hash table only to a hash table.</source>
          <target state="translated">C:\ps&gt; &gt; $um = @{um = 1; b = 2, c = 3} c:\ps&gt;Get-applockerpolicy &gt; $a + = 1, você pode adicionar outra tabela de hash somente a uma tabela de hash.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>At line:1 char:6</source>
          <target state="translated">Na linha: 1 char: 6</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>$a += &lt;&lt;&lt;&lt;  1</source>
          <target state="translated">$a + = &lt;&lt;&lt;&lt; 1</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY SUBTRACTION OPERATOR (-=)</source>
          <target state="translated">A ATRIBUIÇÃO DE OPERADOR DE SUBTRAÇÃO (-)</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The assignment by subtraction operator (-=) decrements the value of a variable by the value that is specified on the right side of the operator.</source>
          <target state="translated">A atribuição por diminui de (-) do operador de subtração o valor de uma variável pelo valor especificado no lado direito do operador.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This operator cannot be used with string variables, and it cannot be used to remove an element from a collection.</source>
          <target state="translated">Este operador não pode ser usado com variáveis de cadeia de caracteres e não pode ser usado para remover um elemento de uma coleção.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The -= operator combines two operations.</source>
          <target state="translated">O-= operador combina duas operações.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>First, it subtracts, and then it assigns.</source>
          <target state="translated">Primeiro, ele subtrai e, em seguida, atribui.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">Portanto, as instruções a seguir são equivalentes:</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>$a -= 2 $a = ($a - 2)</source>
          <target state="translated">$a-= 2 $a = ($a - 2)</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following example shows how to use of the -= operator to decrease the value of a variable:</source>
          <target state="translated">O exemplo a seguir mostra como usar o operador-= para diminuir o valor de uma variável:</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a -= 2 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 8 c:\ps&gt;Get-applockerpolicy &gt; $a-= 2 c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You can also use the -= assignment operator to decrease the value of a member of a numeric array.</source>
          <target state="translated">Você também pode usar o operador de atribuição-= para diminuir o valor de um membro de uma matriz numérica.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To do this, specify the index of the array element that you want to change.</source>
          <target state="translated">Para fazer isso, especifique o índice do elemento da matriz que você deseja alterar.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the third element of an array (element 2) is decreased by 1:</source>
          <target state="translated">No exemplo a seguir, o valor do terceiro elemento de uma matriz (elemento 2) é reduzido em 1:</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a[2] -= 1.</source>
          <target state="translated">C:\ps&gt; &gt; $um = c:\ps&gt; 1,2,3 &gt; $um 1 de-= [2].</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You cannot use the -= operator to delete the values of a variable.</source>
          <target state="translated">Você não pode usar o operador-= excluir os valores de uma variável.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To delete all the values that are assigned to a variable, use the Clear-Item or Clear-Variable cmdlets to assign a value of $null or "" to the variable.</source>
          <target state="translated">Para excluir todos os valores que são atribuídos a uma variável, use os cmdlets Clear-Item ou Clear-Variable para atribuir um valor de $null ou "" para a variável.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>$a = $null</source>
          <target state="translated">$um = $null</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To delete a particular value from an array, use array notation to assign a value of $null to the particular item.</source>
          <target state="translated">Para excluir um determinado valor de uma matriz, use a notação de matriz para atribuir um valor de $null para o item em particular.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For example, the following statement deletes the second value (index position 1) from an array:</source>
          <target state="translated">Por exemplo, a instrução a seguir exclui o segundo valor (índice de posição 1) de uma matriz:</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = c:\ps&gt;Get-applockerpolicy 1,2,3 &gt; $um</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a[1] = $null C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $[1] = $null c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To delete a variable, use the Remove-Variable cmdlet.</source>
          <target state="translated">Para excluir uma variável, use o cmdlet Remove-Variable.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This method is useful when the variable is explicitly cast to a particular data type, and you want an untyped variable.</source>
          <target state="translated">Esse método é útil quando a variável é convertida explicitamente em um determinado tipo de dados, e você quiser uma variável sem tipo.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following command deletes the $a variable:</source>
          <target state="translated">O comando a seguir exclui a variável $a:</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>remove-variable a</source>
          <target state="translated">variável de remover um</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY MULTIPLICATION OPERATOR (*=)</source>
          <target state="translated">A ATRIBUIÇÃO PELO OPERADOR DE MULTIPLICAÇÃO (* =)</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The assignment by multiplication operator (*=) multiplies a numeric value or appends the specified number of copies of the string value of a variable.</source>
          <target state="translated">A atribuição pelo operador de multiplicação (* =) multiplica um valor numérico ou acrescenta o número de cópias do valor de uma variável de cadeia de caracteres especificado.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When a variable contains a single numeric value, that value is multiplied by the value on the right side of the operator.</source>
          <target state="translated">Quando uma variável contém um único valor numérico, esse valor é multiplicado pelo valor à direita do operador.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For example, the following example shows how to use the *= operator to multiply the value of a variable:</source>
          <target state="translated">Por exemplo, o exemplo a seguir mostra como usar o * operador = para multiplicar o valor de uma variável:</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a *= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 3 c:\ps&gt;Get-applockerpolicy &gt; $um * = 4 c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In this case, the *= operator combines two operations.</source>
          <target state="translated">Nesse caso, o * = operador combina duas operações.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>First, it multiplies, and then it assigns.</source>
          <target state="translated">Primeiro, ele multiplica e, em seguida, atribui.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">Portanto, as instruções a seguir são equivalentes:</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</source>
          <target state="translated">$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When a variable contains a string value, Windows PowerShell appends the specified number of strings to the value, as follows:</source>
          <target state="translated">Quando uma variável contém um valor de cadeia de caracteres, o Windows PowerShell acrescenta o número especificado de cadeias de caracteres com o valor, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a *= 4 C:\PS&gt; $a filefilefilefile</source>
          <target state="translated">C:\ps&gt; &gt; $a = "arquivo" c:\ps&gt;Get-applockerpolicy &gt; $um * = 4 c:\ps&gt;Get-applockerpolicy &gt; $a filefilefilefile</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>To multiply an element of an array, use an index to identify the element that you want to multiply.</source>
          <target state="translated">Para multiplicar um elemento de uma matriz, use um índice para identificar o elemento que você deseja multiplicar.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For example, the following command multiplies the first element in the array (index position 0) by 2:</source>
          <target state="translated">Por exemplo, o comando a seguir multiplica o primeiro elemento na matriz (índice de posição 0) por 2:</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>$a[0] *= 2</source>
          <target state="translated">$[0] * = 2</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY DIVISION OPERATOR (/=)</source>
          <target state="translated">A ATRIBUIÇÃO DE OPERADOR DE DIVISÃO (/ =)</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The assignment by division operator (/=) divides a numeric value by the value that is specified on the right side of the operator.</source>
          <target state="translated">A atribuição de operador de divisão (/ =) divide um valor numérico pelo valor especificado no lado direito do operador.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The operator cannot be used with string variables.</source>
          <target state="translated">O operador não pode ser usado com variáveis de cadeia de caracteres.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The /= operator combines two operations.</source>
          <target state="translated">O = operador combina duas operações.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>First, it divides, and then it assigns.</source>
          <target state="translated">Primeiro, ele divide e, em seguida, atribui.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Therefore, the following two statements are equivalent:</source>
          <target state="translated">Portanto, as duas instruções seguintes são equivalentes:</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>$a /= 2 $a = ($a / 2)</source>
          <target state="translated">$um = 2 $a = ($um / 2)</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For example, the following command uses the /= operator to divide the value of a variable:</source>
          <target state="translated">Por exemplo, o comando a seguir usa o operador para dividir o valor de uma variável / =:</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a /=2 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 8 c:\ps&gt;Get-applockerpolicy &gt; $um = 2 c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To divide an element of an array, use an index to identify the element that you want to change.</source>
          <target state="translated">Para dividir um elemento de uma matriz, use um índice para identificar o elemento que você deseja alterar.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, the following command divides the second element in the array (index position 1) by 2:</source>
          <target state="translated">Por exemplo, o comando a seguir divide o segundo elemento na matriz (posição de índice 1) por 2:</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>$a[1] /= 2</source>
          <target state="translated">$[1] = 2</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>THE  ASSIGNMENT BY MODULUS OPERATOR (%=)</source>
          <target state="translated">A ATRIBUIÇÃO DE OPERADOR DE MÓDULO (% =)</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The assignment by modulus operator (%=) divides the value of a variable by the value on the right side of the operator.</source>
          <target state="translated">A atribuição de operador de módulo (% =) divide o valor de uma variável pelo valor à direita do operador.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Then, the %= operator assigns the remainder (known as the modulus) to the variable.</source>
          <target state="translated">Em seguida, % = operador atribui o restante (conhecido como o módulo) à variável.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You can use this operator only when a variable contains a single numeric value.</source>
          <target state="translated">Você pode usar esse operador somente quando uma variável contém um único valor numérico.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You cannot use this operator when a variable contains a string variable or an array.</source>
          <target state="translated">Você não pode usar esse operador quando uma variável contém uma variável de cadeia de caracteres ou uma matriz.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The %= operator combines two operations.</source>
          <target state="translated">% = Operador combina duas operações.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>First, it divides and determines the remainder, and then it assigns the remainder to the variable.</source>
          <target state="translated">Primeiro, ele divide e determina o restante, e, em seguida, atribui o restante à variável.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">Portanto, as instruções a seguir são equivalentes:</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>$a %= 2 $a = ($a % 2)</source>
          <target state="translated">$a % = 2 $a = ($a % 2)</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the %= operator to save the modulus of a quotient:</source>
          <target state="translated">O exemplo a seguir mostra como usar o % operador para salvar o resto de uma quociente =:</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $a %= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 7 c:\ps&gt;Get-applockerpolicy &gt; $a % = 4 c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>THE INCREMENT AND DECREMENT OPERATORS</source>
          <target state="translated">OS OPERADORES DE INCREMENTO E DE DECREMENTO</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The increment operator (++) increases the value of a variable by 1.</source>
          <target state="translated">O operador de incremento (+ +) aumenta o valor de uma variável em 1.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When you use the increment operator in a simple statement, no value is returned.</source>
          <target state="translated">Quando você usa o operador de incremento em uma instrução simples, nenhum valor será retornado.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To view the result, display the value of the variable, as follows:</source>
          <target state="translated">Para exibir o resultado, exiba o valor da variável, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 7 c:\ps&gt;Get-applockerpolicy &gt; + + $a c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To force a value to be returned, enclose the variable and the operator in parentheses, as follows:</source>
          <target state="translated">Para forçar um valor a ser retornado, coloque a variável e o operador entre parênteses, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; (++$a)</source>
          <target state="translated">C:\ps&gt; &gt; $um = 7 c:\ps&gt;Get-applockerpolicy &gt; (+ + $um)</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The increment operator can be placed before (prefix) or after (postfix) a variable.</source>
          <target state="translated">O operador de incremento pode ser colocado antes (prefixo) ou depois de uma variável (sufixo).</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator increments a variable before its value is used in the statement, as follows:</source>
          <target state="translated">A versão do prefixo do operador incrementa uma variável antes de seu valor é usado na instrução, como segue:</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 7 c:\ps&gt; &gt; $c = + + $a c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\ps&gt; &gt; $c</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator increments a variable after its value is used in the statement.</source>
          <target state="translated">A versão de sufixo do operador incrementa uma variável depois que seu valor é usado na instrução.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In the following example, the $c and $a variables have different values because the value is assigned to $c before $a changes:</source>
          <target state="translated">No exemplo a seguir, $c e $um variáveis têm valores diferentes, como o valor é atribuído a $c antes de $um alterações:</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = $a++ C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 7 c:\ps&gt; &gt; $c = $um + + c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\ps&gt; &gt; $c</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The decrement operator (--) decreases the value of a variable by 1.</source>
          <target state="translated">O operador de decremento (-) diminui o valor de uma variável em 1.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>As with the increment operator, no value is returned when you use the operator in a simple statement.</source>
          <target state="translated">Como com o operador de incremento, nenhum valor é retornado quando você usar o operador em uma instrução simples.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Use parentheses to return a value, as follows:</source>
          <target state="translated">Use parênteses para retornar um valor, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; --$a C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 7 c:\ps&gt;Get-applockerpolicy &gt;-$a c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (--$a)</source>
          <target state="translated">C:\ps&gt; &gt; (-$um)</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator decrements a variable before its value is used in the statement, as follows:</source>
          <target state="translated">A versão do prefixo do diminui operador uma variável antes de seu valor é usada na instrução, como segue:</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = --$a C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 7 c:\ps&gt;Get-applockerpolicy $c &gt; =-$a c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\ps&gt; &gt; $c</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator decrements a variable after its value is used in the statement.</source>
          <target state="translated">A versão de sufixo do diminui operador uma variável depois que seu valor é usado na instrução.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>In the following example, the $d and $a variables have different values because the value is assigned to $d before $a changes:</source>
          <target state="translated">No exemplo a seguir, $d e $um variáveis têm valores diferentes, como o valor é atribuído a $d antes de $um alterações:</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $d = $a-- C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 7 c:\ps&gt;Get-applockerpolicy &gt; $d = $um – c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $d</source>
          <target state="translated">C:\ps&gt; &gt; $d</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>MICROSOFT .NET FRAMEWORK TYPES</source>
          <target state="translated">TIPOS DO MICROSOFT .NET FRAMEWORK</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>By default, when a variable has only one value, the value that is assigned to the variable determines the data type of the variable.</source>
          <target state="translated">Por padrão, quando uma variável tem apenas um valor, o valor é atribuído à variável determina o tipo de dados da variável.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For example, the following command creates a variable that has the Integer (System.Int32) type:</source>
          <target state="translated">Por exemplo, o comando a seguir cria uma variável do tipo inteiro (Int32):</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$um = 6</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>To find the .NET Framework type of a variable, use the GetType method and its FullName property, as follows.</source>
          <target state="translated">Para localizar o tipo .NET Framework de uma variável, use o método GetType e sua propriedade FullName, da seguinte maneira.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Be sure to include the parentheses after the GetType method name, even though the method call has no arguments:</source>
          <target state="translated">Certifique-se de incluir os parênteses após o nome do método GetType, mesmo que a chamada de método não possui argumentos:</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a.gettype().fullname System.Int32</source>
          <target state="translated">C:\ps&gt; &gt; $um = 6 c:\ps&gt;Get-applockerpolicy &gt; $a.gettype () .fullname System. Int32</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>To create a variable that contains a string, assign a string value to the variable.</source>
          <target state="translated">Para criar uma variável que contém uma cadeia de caracteres, atribua um valor de cadeia de caracteres para a variável.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>To indicate that the value is a string, enclose it in quotation marks, as follows:</source>
          <target state="translated">Para indicar que o valor é uma cadeia de caracteres, coloque-o entre aspas, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "6" C:\PS&gt; $a.gettype().fullname System.String</source>
          <target state="translated">C:\ps&gt; &gt; $um c:\ps&gt;Get-applockerpolicy = "6" &gt; $a.gettype () .fullname System. String</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If the first value that is assigned to the variable is a string, Windows PowerShell treats all operations as string operations and casts new values to strings.</source>
          <target state="translated">Se o primeiro valor é atribuído à variável for uma cadeia de caracteres, o Windows PowerShell trata todas as operações como operações de cadeia de caracteres e converte os novos valores em cadeias de caracteres.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">Isso ocorre no exemplo a seguir:</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a += 3 C:\PS&gt; $a file3</source>
          <target state="translated">C:\ps&gt; &gt; $a = "arquivo" c:\ps&gt; &gt; $a + = 3 c:\ps&gt;Get-applockerpolicy &gt; $a arquivo3</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If the first value is an integer, Windows PowerShell treats all operations as integer operations and casts new values to integers.</source>
          <target state="translated">Se o primeiro valor for um inteiro, o Windows PowerShell trata todas as operações como operações de inteiros e converte os novos valores para números inteiros.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">Isso ocorre no exemplo a seguir:</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a += "3" C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; $um = 6 c:\ps&gt;Get-applockerpolicy &gt; $um c:\ps&gt;Get-applockerpolicy + = "3" &gt; $um</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>You can cast a new scalar variable as any .NET Framework type by placing the type name in brackets that precede either the variable name or the first assignment value.</source>
          <target state="translated">Você pode converter uma nova variável escalar como qualquer tipo .NET Framework, colocando o nome do tipo entre colchetes que precede o nome da variável ou o primeiro valor de atribuição.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>When you cast a variable, you can determine the types of data that can be stored in the variable.</source>
          <target state="translated">Quando você converter uma variável, você pode determinar os tipos de dados que podem ser armazenados na variável.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>And, you can determine how the variable behaves when you manipulate it.</source>
          <target state="translated">E, você pode determinar como a variável se comporta quando você manipulá-lo.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string type:</source>
          <target state="translated">Por exemplo, o comando a seguir converte a variável como um tipo de cadeia de caracteres:</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = 27 C:\PS&gt; $a += 3 C:\PS&gt; $a</source>
          <target state="translated">C:\ps&gt; &gt; [string] $um = 27 c:\ps&gt;Get-applockerpolicy &gt; $a + = 3 c:\ps&gt;Get-applockerpolicy &gt; $um</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>273</source>
          <target state="translated">273</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The following example casts the first value, instead of casting the variable:</source>
          <target state="translated">O exemplo a seguir converte o primeiro valor, em vez de converter a variável:</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>$a = [string]27</source>
          <target state="translated">$a = [string] 27</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>When you cast a variable to a specific type, the common convention is to cast the variable, not the value.</source>
          <target state="translated">Quando você converter uma variável para um tipo específico, a convenção comum é converter a variável, não o valor.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>However, you cannot recast the data type of an existing variable if its value cannot be converted to the new data type.</source>
          <target state="translated">No entanto, você não pode Reformule o tipo de dados de uma variável existente se seu valor não pode ser convertido para o novo tipo de dados.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>To change the data type, you must replace its value, as follows:</source>
          <target state="translated">Para alterar o tipo de dados, você deve substituir o valor, da seguinte maneira:</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "string" C:\PS&gt; [int]$a Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\ps&gt; &gt; $a "cadeia de caracteres" c:\ps&gt;Get-applockerpolicy = &gt; [int] $um não é possível converter o valor "string" no tipo "System. Int32".</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">Erro: "cadeia de caracteres de entrada não estava no formato correto."</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>At line:1 char:8</source>
          <target state="translated">Na linha: 1 char: 8</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>[int]$a &lt;&lt;&lt;&lt;</source>
          <target state="translated">[int] $um &lt;&lt;&lt;&lt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a =3</source>
          <target state="translated">C:\ps&gt; &gt; [int] $um = 3</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In addition, when you precede a variable name with a data type, the type of that variable is locked unless you explicitly override the type by specifying another data type.</source>
          <target state="translated">Além disso, quando você preceder o nome de uma variável com um tipo de dados, o tipo da variável é bloqueado, a menos que você substituir o tipo explicitamente especificando outro tipo de dados.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If you try to assign a value that is incompatible with the existing type, and you do not explicitly override the type, Windows PowerShell displays an error, as shown in the following example:</source>
          <target state="translated">Se você tentar atribuir um valor que é incompatível com o tipo existente, e não substituir explicitamente o tipo, o Windows PowerShell exibe um erro, como mostrado no exemplo a seguir:</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a = "string"</source>
          <target state="translated">C:\ps&gt; &gt; $um = 3 c:\ps&gt;Get-applockerpolicy &gt; $a = "string"</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a = 3 C:\PS&gt; $a = "string" Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\ps&gt; &gt; [int] $um = 3 c:\ps&gt;Get-applockerpolicy &gt; $a = "string" não é possível converter o valor "string" no tipo "System. Int32".</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">Erro: "cadeia de caracteres de entrada não estava no formato correto."</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>At line:1 char:3</source>
          <target state="translated">Na linha: 1 char: 3</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>$a &lt;&lt;&lt;&lt;  = "string"</source>
          <target state="translated">$um &lt;&lt;&lt;&lt; = "string"</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = "string"</source>
          <target state="translated">C:\ps&gt; &gt; [string] $a = "string"</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, the data types of variables that contain multiple items in an array are handled differently from the data types of variables that contain a single item.</source>
          <target state="translated">No Windows PowerShell, os tipos de dados de variáveis que contêm vários itens em uma matriz são tratados diferentemente dos tipos de dados de variáveis que contêm um único item.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Unless a data type is specifically assigned to an array variable, the data type is always System.Object [].</source>
          <target state="translated">A menos que um tipo de dados está especificamente atribuído a uma variável de matriz, o tipo de dados é sempre [Object].</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This data type is specific to arrays.</source>
          <target state="translated">Esse tipo de dados é específico para matrizes.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Sometimes, you can override the default type by specifying another type.</source>
          <target state="translated">Às vezes, você pode substituir o tipo padrão especificando outro tipo.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string [] array type:</source>
          <target state="translated">Por exemplo, o comando a seguir converte a variável como um tipo de matriz string []:</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>[string []] $a = "one", "two", "three"</source>
          <target state="translated">[string []] $a = "um", "dois", "três"</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Windows PowerShell variables can be any .NET Framework data type.</source>
          <target state="translated">Variáveis do Windows PowerShell podem ser qualquer tipo de dados do .NET Framework.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>In addition, you can assign any fully qualified .NET Framework data type that is available in the current process.</source>
          <target state="translated">Além disso, você pode atribuir qualquer tipo de dados totalmente qualificado do .NET Framework que está disponível no processo atual.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For example, the following command specifies a System.DateTime data type:</source>
          <target state="translated">Por exemplo, o comando a seguir especifica um tipo de dados datetime:</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>[system.datetime]$a = "5/31/2005"</source>
          <target state="translated">[system.datetime]$a = "31/5/2005"</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The variable will be assigned a value that conforms to the System.DateTime data type.</source>
          <target state="translated">A variável será atribuída um valor que está de acordo com o tipo de dados datetime.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The value of the $a variable would be the following:</source>
          <target state="translated">O valor da variável $a seria o seguinte:</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Tuesday, May 31, 2005 12:00:00 AM</source>
          <target state="translated">Terça-feira, 31 de maio de 2005 12:00:00 AM</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>ASSIGNING MULTIPLE VARIABLES</source>
          <target state="translated">ATRIBUIÇÃO DE DIVERSAS VARIÁVEIS</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, you can assign values to multiple variables by using a single command.</source>
          <target state="translated">No Windows PowerShell, você pode atribuir valores a variáveis múltiplas usando um único comando.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The first element of the assignment value is assigned to the first variable, the second element is assigned to the second variable, the third element to the third variable, and so on.</source>
          <target state="translated">O primeiro elemento da atribuição de valor é atribuído à primeira variável, o segundo elemento é atribuído para a segunda variável, o terceiro elemento para a terceira variável e assim por diante.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns the value 1 to the $a variable, the value 2 to the $b variable, and the value 3 to the $c variable:</source>
          <target state="translated">Por exemplo, o comando a seguir atribui o valor 1 para o $uma variável, o valor 2 à variável $b e o valor 3 à variável $c:</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a, $b, $c = 1, 2, 3</source>
          <target state="translated">C:\ps&gt; &gt; $a, $b, $c = 1, 2, 3</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the assignment value contains more elements than variables, all the remaining values are assigned to the last variable.</source>
          <target state="translated">Se o valor de atribuição contém mais elementos que variáveis, todos os valores restantes são atribuídos à última variável.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>For example, the following command contains three variables and five values:</source>
          <target state="translated">Por exemplo, o comando a seguir contém três variáveis e cinco valores:</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>$a, $b, $c = 1, 2, 3, 4, 5</source>
          <target state="translated">$a, $b, $c = 1, 2, 3, 4 e 5</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Therefore, Windows PowerShell assigns the value 1 to the $a variable and the value 2 to the $b variable.</source>
          <target state="translated">Portanto, o Windows PowerShell atribui o valor 1 para a variável $a e o valor 2 à variável $b.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>It assigns the values 3, 4, and 5 to the $c variable.</source>
          <target state="translated">Ele atribui os valores 3, 4 e 5 para a variável $c.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>To assign the values in the $c variable to three other variables, use the following format:</source>
          <target state="translated">Para atribuir os valores na variável $c a três outras variáveis, use o seguinte formato:</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>$d, $e, $f = $c</source>
          <target state="translated">$d, $e, $f = $c</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This command assigns the value 3 to the $d variable, the value 4 to the $e variable, and the value 5 to the $f variable.</source>
          <target state="translated">Este comando atribui o valor 3 à variável $d, o valor 4 à variável $e e o valor 5 para a variável $f.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>You can also assign a single value to multiple variables by chaining the variables.</source>
          <target state="translated">Você também pode atribuir um valor único para diversas variáveis, relacionando as variáveis.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a value of "three" to all four variables:</source>
          <target state="translated">Por exemplo, o comando a seguir atribui um valor de "três" para todos os quatro variáveis:</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>$a = $b = $c = $d = "three"</source>
          <target state="translated">$um = $b = $c = $d = "três"</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>VARIABLE-RELATED CMDLETS</source>
          <target state="translated">CMDLETS RELACIONADOS A VARIÁVEL</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>In addition to using an assignment operation to set a variable value, you can also use the Set-Variable cmdlet.</source>
          <target state="translated">Além de usar uma operação de atribuição para definir um valor de variável, você também pode usar o cmdlet Set-Variable.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>For example, the following command uses Set-Variable to assign an array of 1, 2, 3 to the $a variable.</source>
          <target state="translated">Por exemplo, o comando a seguir usa Set-Variable para atribuir uma matriz de 1, 2, 3 a variável $a.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Set-Variable -name a -value 1, 2, 3</source>
          <target state="translated">Set-Variable - nome de um - valor 1, 2, 3</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">CONSULTE TAMBÉM</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>about_Arrays about_Hash_Tables about_Variables Clear-Variable Remove-Variable Set-Variable</source>
          <target state="translated">about_Arrays about_Hash_Tables about_Variables Clear-Variable Remove-Variable Set-Variable</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>