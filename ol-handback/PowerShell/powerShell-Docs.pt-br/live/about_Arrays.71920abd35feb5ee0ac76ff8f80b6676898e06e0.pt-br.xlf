<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d313114a8046ac99753ad1ef84fb9ebe0f3796ed</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Arrays.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09c5db60fa9451cda05db30890e3f6fb73c47fa0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebdbf2165af51d00ef07a49e89db2b57b51b773b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_Arrays</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell, cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Arrays</source>
          <target state="translated">Sobre matrizes</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_Arrays</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">TÓPICO</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_Arrays</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIÇÃO BREVE</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes arrays, which are data structures designed to store collections of items.</source>
          <target state="translated">Descreve matrizes, que são projetadas para armazenar coleções de itens de estruturas de dados.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIÇÃO LONGA</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An array is a data structure that is designed to store a collection of items.</source>
          <target state="translated">Uma matriz é uma estrutura de dados que foi projetada para armazenar uma coleção de itens.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The items can be the same type or different types.</source>
          <target state="translated">Os itens podem ser o mesmo tipo ou tipos diferentes.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, a collection of zero or one object has some properties of arrays.</source>
          <target state="translated">Começando no Windows PowerShell 3.0, uma coleção de zero ou um objeto tem algumas propriedades de matrizes.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CREATING AND INITIALIZING AN ARRAY</source>
          <target state="translated">CRIANDO E INICIALIZANDO UMA MATRIZ</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create and initialize an array, assign multiple values to a variable.</source>
          <target state="translated">Para criar e inicializar uma matriz, atribua vários valores para uma variável.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The values stored in the array are delimited with a comma and separated from the variable name by the assignment operator (=).</source>
          <target state="translated">Os valores armazenados na matriz são delimitados por uma vírgula e separados do nome de variável pelo operador de atribuição (=).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, to create an array named $A that contains the seven numeric (int) values of 22, 5, 10, 8, 12, 9, and 80, type:</source>
          <target state="translated">Por exemplo, para criar uma matriz chamada $A que contém os valores numéricos (int) sete 22, 5, 10, 8, 12, 9 e 80, digite:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>$A = 22,5,10,8,12,9,80</source>
          <target state="translated">$A = 22,5,10,8,12,9,80</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also create and initialize an array by using the range operator (..).</source>
          <target state="translated">Você também pode criar e inicializar uma matriz usando o operador de intervalo (.).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, to create and initialize an array named "$B" that contains the values 5 through 8, type:</source>
          <target state="translated">Por exemplo, para criar e inicializar uma matriz chamada "$B" que contém os valores 5 a 8, digite:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>$B = 5..8</source>
          <target state="translated">$B = 5..8</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a result, $B contains four values: 5, 6, 7, and 8.</source>
          <target state="translated">Como resultado, $B contém quatro valores: 5, 6, 7 e 8.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When no data type is specified, Windows PowerShell creates each array as an object array (type: System.Object[]).</source>
          <target state="translated">Quando nenhum tipo de dados for especificado, o Windows PowerShell cria cada matriz como uma matriz de objetos (tipo: System.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To determine the data type of an array, use the GetType() method.</source>
          <target state="translated">Para determinar o tipo de dados de uma matriz, use o método GetType ().</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, to determine the data type of the $a array, type:</source>
          <target state="translated">Por exemplo, para determinar o tipo de dados de $a matriz, digite:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>$a.GetType()</source>
          <target state="translated">$a.GetType()</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To create a strongly typed array, that is, an array that can contain only values of a particular type, cast the variable as an array type, such as string[], long[], or int32[].</source>
          <target state="translated">Para criar uma matriz com rigidez de tipos, ou seja, uma matriz que pode conter apenas valores de um tipo específico, converta a variável como um tipo de matriz, como string [], [] longos ou int32 [].</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To cast an array, precede the variable name with an array type enclosed in brackets.</source>
          <target state="translated">Para converter uma matriz, preceda o nome da variável com um tipo de matriz entre colchetes.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, to create a 32-bit integer array named $ia containing four integers (1500, 2230, 3350, and 4000), type:</source>
          <target state="translated">Por exemplo, para criar uma matriz de inteiros de 32 bits, chamada $ia que contém quatro inteiros (1500, 2230, 3350 e 4000), digite:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>[int32[]]$ia = 1500,2230,3350,4000</source>
          <target state="translated">[int32 []] $ia = 1500,2230,3350,4000</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As a result, the $ia array can contain only integers.</source>
          <target state="translated">Como resultado, a matriz de $ia pode conter apenas números inteiros.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can create arrays that are cast to any supported type in the Microsoft .NET Framework.</source>
          <target state="translated">Você pode criar matrizes que são convertidos em qualquer tipo com suporte no Microsoft .NET Framework.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the objects that Get-Process retrieves to represent processes are of the System.Diagnostics.Process type.</source>
          <target state="translated">Por exemplo, os objetos que recupera Get-Process para representar processos são do tipo System.Diagnostics.Process.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create a strongly typed array of process objects, enter the following command:</source>
          <target state="translated">Para criar uma matriz com rigidez de tipos de objetos de processo, digite o seguinte comando:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>[Diagnostics.Process[]]$zz = Get-Process</source>
          <target state="translated">[Diagnostics.Process[]]$zz = Get-Process</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>THE ARRAY SUB-EXPRESSION OPERATOR</source>
          <target state="translated">O OPERADOR DE SUBEXPRESSÃO DE MATRIZ</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The array sub-expression operator creates an array, even if it contains zero or one object.</source>
          <target state="translated">O operador de subexpressão matriz cria uma matriz, mesmo que ele contém zero ou um objeto.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The syntax of the array operator is as follows:</source>
          <target state="translated">A sintaxe do operador de matriz é o seguinte:</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>@( ... )</source>
          <target state="translated">@( ... )</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use the array operator to create an array of zero or one object.</source>
          <target state="translated">Você pode usar o operador de matriz para criar uma matriz de zero ou um objeto.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>PS C:&gt;$a = @("One") PS C:&gt;$a.Count</source>
          <target state="translated">PS c &gt;$ um = c: @("One") PS &gt; $a.Count</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>PS C:&gt;$b = @() PS C:&gt;$b.Count</source>
          <target state="translated">PS c &gt; $b = @ () PS c &gt; $b.Count</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The array operator is particularly useful in scripts when you are getting objects, but do not know how many objects you will get.</source>
          <target state="translated">O operador de matriz é particularmente útil em scripts quando você estiver recebendo objetos, mas não sabe quantos objetos será exibida.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $p = @(Get-Process Notepad)</source>
          <target state="translated">PS C: &gt; $p = @(Get-Process Notepad)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about the array sub-expression operator, see about_Operators.</source>
          <target state="translated">Para obter mais informações sobre o operador de subexpressão de matriz, consulte about_Operators.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>READING AN ARRAY</source>
          <target state="translated">UMA MATRIZ DE LEITURA</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can refer to an array by using its variable name.</source>
          <target state="translated">Você pode consultar uma matriz usando seu nome de variável.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To display all the elements in the array, type the array name.</source>
          <target state="translated">Para exibir todos os elementos na matriz, digite o nome da matriz.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Por exemplo:</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$a</source>
          <target state="translated">$um</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can refer to the elements in an array by using an index, beginning at position 0.</source>
          <target state="translated">Você pode consultar os elementos em uma matriz usando um índice, começando na posição 0.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Enclose the index number in brackets.</source>
          <target state="translated">Colocar o número de índice entre colchetes.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, to display the first element in the $a array, type:</source>
          <target state="translated">Por exemplo, para exibir o primeiro elemento em $a matriz, digite:</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>$a[0]</source>
          <target state="translated">$[0]</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To display the third element in the $a array, type:</source>
          <target state="translated">Para exibir o terceiro elemento em $a matriz, digite:</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>$a[2]</source>
          <target state="translated">$um [2]</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Negative numbers count from the end of the array.</source>
          <target state="translated">Contagem de números negativos do final da matriz.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, "-1" refers to the last element of the array.</source>
          <target state="translated">Por exemplo, "-1" refere-se para o último elemento da matriz.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To display the last three elements of the array, type:</source>
          <target state="translated">Para exibir os últimos três elementos da matriz, digite:</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>$a[-3..-1]</source>
          <target state="translated">$um [-3... -1]</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>However, be cautious when using this notation.</source>
          <target state="translated">No entanto, tenha cuidado ao usar essa notação.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>$a[0..-2]</source>
          <target state="translated">$um [0... -2]</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This command does not refer to all the elements of the array, except for the last one.</source>
          <target state="translated">Esse comando não se refere a todos os elementos da matriz, exceto o último.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It refers to the first, last, and second-to-last elements in the array.</source>
          <target state="translated">Ele se refere a primeira, última e o segundo ao último elementos na matriz.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can use the range operator to display a subset of all the values in an array.</source>
          <target state="translated">Você pode usar o operador de intervalo para exibir um subconjunto de todos os valores em uma matriz.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to display the data elements at index position 1 through 3, type:</source>
          <target state="translated">Por exemplo, para exibir os elementos de dados na posição de índice 1 a 3, digite:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>$a[1..3]</source>
          <target state="translated">$[1..3]</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can use the plus operator (+) to combine a range with a list of elements in an array.</source>
          <target state="translated">Você pode usar o operador de adição (+) para combinar um intervalo com uma lista de elementos em uma matriz.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, to display the elements at index positions 0, 2, and 4 through 6, type:</source>
          <target state="translated">Por exemplo, para exibir os elementos em posições de índice 0, 2 e 4 a 6, digite:</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>$a[0,2+4..6]</source>
          <target state="translated">$um [0, 2 + 4..6]</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To determine how many items are in an array, use the Length property or its Count alias.</source>
          <target state="translated">Para determinar quantos itens estão em uma matriz, use a propriedade Length ou seu alias de contagem.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>$a.Count</source>
          <target state="translated">$a.Count</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also use looping constructs, such as ForEach, For, and While loops, to refer to the elements in an array.</source>
          <target state="translated">Você também pode usar construções de loop, como ForEach, e loops While, para se referir a elementos de uma matriz.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, to use a ForEach loop to display the elements in the $a array, type:</source>
          <target state="translated">Por exemplo, para usar um loop ForEach para exibir os elementos em $a matriz, digite:</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>foreach ($element in $a) {$element}</source>
          <target state="translated">foreach ($element $ um) {$element}</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The Foreach loop iterates through the array and returns each value in the array until reaching the end of the array.</source>
          <target state="translated">O loop Foreach percorre a matriz e retorna cada valor na matriz até alcançar o final da matriz.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The For loop is useful when you are incrementing counters while examining the elements in an array.</source>
          <target state="translated">O loop é útil quando são incrementados contadores ao examinar os elementos em uma matriz.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, to use a For loop to  return every other value in an array, type:</source>
          <target state="translated">Por exemplo, para usar um loop for para retornar todos os outros valores em uma matriz, digite:</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>for ($i = 0; $i -le ($a.length - 1); $i += 2) {$a[$i]}</source>
          <target state="translated">para ($i = 0; $i-le ($a.length - 1); + $i = 2) {$[$i]}</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can use a While loop to display the elements in an array until a defined condition is no longer true.</source>
          <target state="translated">Você pode usar um While loop para exibir os elementos em uma matriz até que uma condição definida não é verdadeira.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, to display the elements in the $a array while the array index is less than 4, type:</source>
          <target state="translated">Por exemplo, para exibir os elementos em $a matriz enquanto o índice da matriz é menor que 4, digite:</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>$i=0 while($i -lt 4) {$a[$i]; $i++}</source>
          <target state="translated">$i = 0 enquanto (4 $i - lt) {$[$i]; $i + +}</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>GET THE MEMBERS OF AN ARRAY</source>
          <target state="translated">OBTER OS MEMBROS DE UMA MATRIZ</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To get the properties and methods of an array, such as the Length property and the SetValue method, use the InputObject parameter of the Get-Member cmdlet.</source>
          <target state="translated">Para obter as propriedades e métodos de uma matriz, como a propriedade de comprimento e o método SetValue, use o parâmetro InputObject do cmdlet Get-Member.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you pipe an array to Get-Member, Windows PowerShell sends the items one at a time and Get-Member returns the type of each item in the array (ignoring duplicates).</source>
          <target state="translated">Quando você direcionar uma matriz para Get-Member, o Windows PowerShell enviará o um item por vez e Get-Member retorna o tipo de cada item na matriz (ignorando as duplicatas).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you use the InputObject parameter, Get-Member returns the members of the array.</source>
          <target state="translated">Quando você usa o parâmetro InputObject, Get-Member retorna os membros da matriz.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the members of the array in the $a variable.</source>
          <target state="translated">Por exemplo, o comando a seguir obtém os membros da matriz na variável $a.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Get-Member -InputObject $a</source>
          <target state="translated">Get-Member - InputObject $um</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can also get the members of an array by typing a comma (,) before the value that is piped to the Get-Member cmdlet.</source>
          <target state="translated">Você também pode obter os membros de uma matriz, digite uma vírgula (,) antes do valor que é enviada por pipe para o cmdlet Get-Member.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The comma makes the array the second item in an array of arrays.</source>
          <target state="translated">A vírgula torna a matriz do segundo item em uma matriz de matrizes.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Windows PowerShell pipes the arrays one at a time and Get-Member returns the members of the array.</source>
          <target state="translated">Windows PowerShell redireciona as matrizes um por vez e Get-Member retorna os membros da matriz.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>,$a | Get-Member</source>
          <target state="translated">,$a | Get-Member</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>,(1,2,3) | Get-Member</source>
          <target state="translated">, (1,2, 3) | Get-Member</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>MANIPULATING AN ARRAY</source>
          <target state="translated">MANIPULANDO UMA MATRIZ</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can change the elements in an array, add an element to an array, and combine the values from two arrays into a third array.</source>
          <target state="translated">Você pode alterar os elementos em uma matriz, adicione um elemento em uma matriz e combinar os valores de duas matrizes em uma terceira matriz.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To change the value of a particular element in an array, specify the array name and the index of the element that you want to change, and then use the assignment operator (=) to specify a new value for the element.</source>
          <target state="translated">Para alterar o valor de um elemento específico em uma matriz, especifique o nome da matriz e o índice do elemento que você deseja alterar e, em seguida, use o operador de atribuição (=) para especificar um novo valor para o elemento.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, to change the value of the second item in the $a array (index position 1) to 10, type:</source>
          <target state="translated">Por exemplo, para alterar o valor do segundo item em $a matriz (índice de posição 1) a 10, digite:</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>$a[1] = 10</source>
          <target state="translated">$[1] = 10</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can also use the SetValue method of an array to change a value.</source>
          <target state="translated">Você também pode usar o método SetValue de uma matriz para alterar um valor.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following example changes the second value (index position 1) of the $a array to 500:</source>
          <target state="translated">O exemplo a seguir altera o valor de segundo (índice de posição 1) de $a matriz para 500:</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>$a.SetValue(500,1)</source>
          <target state="translated">$a.SetValue(500,1)</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can use the += operator to add an element to an array.</source>
          <target state="translated">Você pode usar o operador + = para adicionar um elemento em uma matriz.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When you use it, Windows PowerShell actually creates a new array with the values of the original array and the added value.</source>
          <target state="translated">Quando você usá-lo, o Windows PowerShell, na verdade, cria uma nova matriz com os valores da matriz original e o valor agregado.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, to add an element with a value of 200 to the array in the $a variable, type:</source>
          <target state="translated">Por exemplo, para adicionar um elemento com um valor de 200 a matriz na variável $a, digite:</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>$a += 200</source>
          <target state="translated">$a + = 200</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>It is not easy to delete elements from an array, but you can create a new array that contains only selected elements of an existing array.</source>
          <target state="translated">Não é fácil excluir elementos de uma matriz, mas você pode criar uma nova matriz que contém apenas elementos selecionados de uma matriz existente.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, to create the $t array with all the elements in the $a array except for the value at index position 2, type:</source>
          <target state="translated">Por exemplo, para criar a matriz $t com todos os elementos em $a matriz, exceto o valor na posição de índice 2, digite:</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>$t = $a[0,1 + 3..($a.length - 1)]</source>
          <target state="translated">$t = $um [0,1 + 3... ( $a.length - 1)]</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To combine two arrays into a single array, use the plus operator (+).</source>
          <target state="translated">Para combinar duas matrizes em uma única matriz, use o operador de adição (+).</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example creates two arrays, combines them, and then displays the resulting combined array.</source>
          <target state="translated">O exemplo a seguir cria duas matrizes, combina-os e, em seguida, exibe a matriz combinada resultante.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>$x = 1,3 $y = 5,9 $z = $x + $y</source>
          <target state="translated">$x = 1,3 $y = 5,9 $z = $x + $y</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>As a result, the $z array contains 1, 3, 5, and 9.</source>
          <target state="translated">Como resultado, a matriz $z contém 1, 3, 5 e 9.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To delete an array, assign a value of $null to the array.</source>
          <target state="translated">Para excluir uma matriz, atribua um valor de $null na matriz.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following command deletes the array in the $a variable.</source>
          <target state="translated">O comando a seguir exclui a matriz na variável $a.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>$a = $null</source>
          <target state="translated">$um = $null</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can also use the Remove-Item cmdlet, but assigning a value of $null is faster, especially for large arrays.</source>
          <target state="translated">Você também pode usar o cmdlet Remove-Item e atribuindo um valor de $null é mais rápido, especialmente para grandes conjuntos.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>ARRAYS OF ZERO OR ONE</source>
          <target state="translated">MATRIZES DE ZERO OU UM</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, a collection of zero or one object has the Count and Length property.</source>
          <target state="translated">Começando no Windows PowerShell 3.0, uma coleção de zero ou um objeto tem a propriedade de contagem e comprimento.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Also, you can index into an array of one object.</source>
          <target state="translated">Além disso, você pode indexar em uma matriz de um objeto.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This feature helps you to avoid scripting errors that occur when a command that expects a collection gets fewer than two items.</source>
          <target state="translated">Esse recurso ajuda a evitar erros de script que ocorrem quando um comando que espera uma coleção obtém menos de dois itens.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate this feature.</source>
          <target state="translated">Os exemplos a seguir demonstram esse recurso.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Zero objects</source>
          <target state="translated">Objetos de zero</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>$a = $null $a.Count</source>
          <target state="translated">$um = $null $a.Count</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>$a.Length</source>
          <target state="translated">$a.Length</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>One object</source>
          <target state="translated">Um objeto</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>$a = 4 $a.Count</source>
          <target state="translated">$um = $a.Count 4</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>$a.Length</source>
          <target state="translated">$a.Length</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>$a[0]</source>
          <target state="translated">$[0]</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>$a[-1]</source>
          <target state="translated">$[-1]</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">CONSULTE TAMBÉM</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators about_Hash_Tables about_Operators about_For about_Foreach about_While</source>
          <target state="translated">about_Assignment_Operators about_Hash_Tables about_Operators about_For about_Foreach about_While</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>