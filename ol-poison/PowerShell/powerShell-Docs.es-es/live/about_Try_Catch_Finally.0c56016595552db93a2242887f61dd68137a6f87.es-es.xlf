<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f92494bf34214dec0aa5aa0cefe972387b7c755</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Try_Catch_Finally.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2d39fa14c37419b7aedaad940ede5d145a65c6e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac22de6e0ef9736ca56bc0e3cd3772e6f5faa735</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">cmdlet de PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Try Catch Finally</source>
          <target state="translated">Aproximadamente Try Catch Finally</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIPCIÓN BREVE</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use the Try, Catch, and Finally blocks to handle terminating errors.</source>
          <target state="translated">Describe cómo utilizar el Try, Catch y Finally bloques para controlar los errores de terminación.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIPCIÓN LARGA</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use Try, Catch, and Finally blocks to respond to or handle terminating errors in scripts.</source>
          <target state="translated">Usar Try, Catch y Finally bloques para responder a o controlar los errores de terminación en secuencias de comandos.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Trap statement can also be used to handle terminating errors in scripts.</source>
          <target state="translated">La instrucción de captura también puede utilizarse para controlar los errores de terminación en secuencias de comandos.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see about_Trap.</source>
          <target state="translated">Para obtener más información, consulte about_Trap.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">Un error de terminación detiene una instrucción de ejecución.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script using the current pipeline.</source>
          <target state="translated">Si Windows PowerShell no controla un error de terminación de alguna manera, Windows PowerShell también detiene la ejecución de la función o la secuencia de comandos con la canalización actual.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">En otros lenguajes, como C<ph id="ph1">\#</ph>, errores de terminación se conocen como excepciones.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about errors, see about_Errors.</source>
          <target state="translated">Para obtener más información acerca de los errores, vea about_Errors.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the Try block to define a section of a script in which you want  Windows PowerShell to monitor for errors.</source>
          <target state="translated">Utilizar el bloque Try para definir una sección de una secuencia de comandos en el que desea que Windows PowerShell para supervisar errores.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When an error occurs within the Try block, the error is first saved to the $Error automatic variable.</source>
          <target state="translated">Cuando se produce un error en el bloque Try, el error en primer lugar se guarda en la variable automática $Error.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Windows PowerShell then searches for a Catch block to handle the error.</source>
          <target state="translated">Windows PowerShell, a continuación, busca en un bloque Catch controlar el error.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the Try statement does not have a  matching Catch block,  Windows PowerShell continues to search for an appropriate Catch block or Trap statement in the parent scopes.</source>
          <target state="translated">Si la instrucción Try no tiene un bloque Catch coincidente, Windows PowerShell sigue buscar un bloque Catch apropiado o instrucción de captura en los ámbitos del elemento primario.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After a Catch block is completed or if no appropriate Catch block or Trap statement is found, the Finally block is run.</source>
          <target state="translated">Una vez completado un bloque Catch o si no se encuentra ningún bloque Catch apropiado o instrucción de captura, el bloque Finally se ejecuta.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the error cannot be handled, the error is written to the error stream.</source>
          <target state="translated">Si no se puede controlar el error, el error se escribe en la secuencia de error.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A Catch block can include commands for tracking the failure or for recovering the expected flow of the script.</source>
          <target state="translated">Un bloque Catch puede incluir comandos para realizar un seguimiento del error o para recuperar el flujo esperado de la secuencia de comandos.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A Catch block can specify which error types it catches.</source>
          <target state="translated">Un bloque Catch puede especificar qué error tipos de capturas.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for different kinds of errors.</source>
          <target state="translated">Una instrucción Try puede incluir varios bloques Catch para diferentes tipos de errores.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A Finally block can be used to free any resources that are no longer needed by your script.</source>
          <target state="translated">Un finalmente se puede utilizar el bloque para liberar los recursos que ya no son necesarios para la secuencia de comandos.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Try, Catch, and Finally resemble the Try, Catch, and Finally keywords used in the C<ph id="ph1">\#</ph> programming language.</source>
          <target state="translated">Try, Catch y Finally se parecen a los Try, Catch y Finally palabras clave utilizadas en C<ph id="ph1">\#</ph> lenguaje de programación.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">SINTAXIS</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A Try statement contains a Try block, zero or more Catch blocks, and zero or one Finally block.</source>
          <target state="translated">Una instrucción Try contiene un bloque Try, cero o más bloques Catch, y cero o un bloque Finally.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A Try statement must have at least one Catch block or one Finally block.</source>
          <target state="translated">Una instrucción Try debe tener al menos un bloque Catch o un bloque Finally.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following shows the Try block syntax:</source>
          <target state="translated">A continuación muestra la sintaxis del bloque Try:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Try keyword is followed by a statement list in braces.</source>
          <target state="translated">La palabra clave Try seguida de una lista de instrucciones entre llaves.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs while the statements in the statement list are being run, the script passes the error object from the Try block to an appropriate Catch block.</source>
          <target state="translated">Si se produce un error de terminación mientras se ejecutan las instrucciones en la lista de instrucciones, la secuencia de comandos pasa el objeto de error del bloque Try en un bloque Catch apropiado.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following shows the Catch block syntax:</source>
          <target state="translated">A continuación muestra la sintaxis del bloque Catch:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Error types appear in brackets.</source>
          <target state="translated">Tipos de error aparecen entre corchetes.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The outermost brackets indicate the element is optional.</source>
          <target state="translated">Los corchetes extremos indican que el elemento es opcional.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Catch keyword is followed by an optional list of error type specifications and a statement list.</source>
          <target state="translated">La palabra clave Catch es seguida por una lista opcional de las especificaciones de tipo de error y una lista de instrucciones.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the Try block,  Windows PowerShell searches for an appropriate Catch block.</source>
          <target state="translated">Si se produce un error de terminación en el bloque Try, Windows PowerShell busca en un bloque Catch apropiado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If one is found, the statements in the Catch block are executed.</source>
          <target state="translated">Si encuentra uno, se ejecutan las instrucciones en el bloque Catch.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The Catch block can specify one or more error types.</source>
          <target state="translated">El bloque Catch puede especificar uno o más tipos de error.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An error type is a Microsoft .NET Framework exception or an exception that is derived from a .NET Framework exception.</source>
          <target state="translated">Un tipo de error es una excepción de Microsoft .NET Framework o una excepción que se deriva de una excepción de .NET Framework.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">Un bloque Catch controla los errores de la clase de excepción de .NET Framework especificada o de cualquier clase que deriva de la clase especificada.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a Catch block specifies an error type, that Catch block handles that type of error.</source>
          <target state="translated">Si un bloque Catch especifica un tipo de error, ese bloque Catch controla ese tipo de error.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If a Catch block does not specify an error type, that Catch block handles any error encountered in the Try block.</source>
          <target state="translated">Si un bloque Catch especifica un tipo de error, ese bloque Catch controla cualquier error encontrado en el bloque Try.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for the different specified error types.</source>
          <target state="translated">Una instrucción Try puede incluir varios bloques Catch para los tipos diferentes de error especificado.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following shows the Finally block syntax:</source>
          <target state="translated">La siguiente muestra la sintaxis de bloque Finally:</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Finally keyword is followed by a statement list that runs every time the script is run, even if the Try statement ran without error or an error was caught in a Catch statement.</source>
          <target state="translated">El finalmente palabra clave va seguida de una lista de instrucciones que se ejecuta cada vez que se ejecuta la secuencia de comandos, incluso si la instrucción Try se ejecutó sin errores o se detectó un error en una instrucción Catch.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that pressing CTRL<ph id="ph1">\+</ph>C stops the pipeline.</source>
          <target state="translated">Tenga en cuenta que si presiona CTRL<ph id="ph1">\+</ph>C detiene la canalización.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Objects that are sent to the pipeline will not be displayed as output.</source>
          <target state="translated">Objetos que se envían a la canalización no se mostrará como salida.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, if you include a statement to be displayed, such as "Finally block has run", it will not be displayed after you press CTRL<ph id="ph1">\+</ph>C, even if the Finally block ran.</source>
          <target state="translated">Por lo tanto, si incluye una instrucción que se mostrará, como "Bloque Finally se ejecuta", no se mostrará después de presionar CTRL<ph id="ph1">\+</ph>C, incluso si el finalmente se ejecutó el bloque.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CATCHING ERRORS</source>
          <target state="translated">DETECTAR ERRORES</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following sample script shows a Try block with a Catch block:</source>
          <target state="translated">La secuencia de comandos de ejemplo siguiente muestra un bloque Try con un bloque Catch:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Catch keyword must immediately follow the Try block or another Catch block.</source>
          <target state="translated">La palabra clave Catch debe seguir inmediatamente a la instrucción Try bloque u otro bloque Catch.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Windows PowerShell does not recognize "NonsenseString" as a cmdlet or other item.</source>
          <target state="translated">Windows PowerShell no reconoce "NonsenseString" como un cmdlet u otro elemento.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Running this script returns the following result:</source>
          <target state="translated">Ejecutar este script, devuelve el resultado siguiente:</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the script encounters "NonsenseString", it causes a terminating error.</source>
          <target state="translated">Cuando la secuencia de comandos encuentra "NonsenseString", produce un error de terminación.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Catch block handles the error by running the statement list inside the block.</source>
          <target state="translated">El bloque Catch controla el error mediante la ejecución de la lista de instrucciones dentro del bloque.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>USING MULTIPLE CATCH STATEMENTS</source>
          <target state="translated">USO DE VARIAS INSTRUCCIONES CATCH</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A Try statement can have any number of Catch blocks.</source>
          <target state="translated">Una instrucción Try puede tener cualquier número de bloques Catch.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script has a Try block that downloads MyFile.doc, and it contains two Catch blocks:</source>
          <target state="translated">Por ejemplo, la siguiente secuencia de comandos tiene un bloque Try que descarga miarchivo.doc y contiene dos bloques Catch:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first Catch block handles errors of the System.Net.WebException and System.IO.IOException types.</source>
          <target state="translated">El primer bloque Catch controla los errores de los tipos System.Net.WebException y System.IO.IOException.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second Catch block does not specify an error type.</source>
          <target state="translated">El segundo bloque Catch no especifica un tipo de error.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second Catch block handles any other terminating errors that occur.</source>
          <target state="translated">El segundo bloque Catch controla cualquier otro error de terminación que se produce.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Windows PowerShell matches error types by inheritance.</source>
          <target state="translated">Windows PowerShell coincide con los tipos de errores mediante la herencia.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">Un bloque Catch controla los errores de la clase de excepción de .NET Framework especificada o de cualquier clase que deriva de la clase especificada.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example contains a Catch block that catches a "Command Not Found" error:</source>
          <target state="translated">El ejemplo siguiente contiene un bloque Catch que detecta un error "No se encuentra el comando":</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The specified error type, CommandNotFoundException, inherits from the System.SystemException type.</source>
          <target state="translated">El tipo de error especificado, CommandNotFoundException, que se hereda del tipo System.SystemException.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example also catches a Command Not Found error:</source>
          <target state="translated">El ejemplo siguiente también detecta un error de comando no encontrado:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This Catch block handles the "Command Not Found" error and other errors that inherit from the SystemException type.</source>
          <target state="translated">Este bloque Catch controla el error "Comando no encontrado" y otros errores que se derivan del tipo SystemException.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you specify an error class and one of its derived classes, place the Catch block for the derived class before the Catch block for the general class.</source>
          <target state="translated">Si especifica una clase de error y una de sus clases derivadas, coloque el bloque Catch de la clase derivada antes del bloque Catch de la clase general.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>FREEING RESOURCES BY USING FINALLY</source>
          <target state="translated">LIBERAR RECURSOS USANDO FINALMENTE</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To free resources used by a script, add a Finally block after the Try and Catch blocks.</source>
          <target state="translated">Para liberar los recursos utilizados por una secuencia de comandos, agregue un bloque Finally después de los bloques Try y Catch.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The Finally block statements run regardless of whether the Try block encounters a terminating error.</source>
          <target state="translated">El bloque Finally ejecutarse independientemente de si el bloque Try encuentra un error de terminación de instrucciones.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Windows PowerShell runs the Finally block before the script terminates or before the current block goes out of scope.</source>
          <target state="translated">Windows PowerShell se ejecuta el bloque Finally antes de que finalice la secuencia de comandos o antes de que el bloque actual sale del ámbito.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A Finally block runs even if you use CTRL<ph id="ph1">\+</ph>C to stop the script.</source>
          <target state="translated">Un bloque Finally se ejecuta incluso si utiliza CTRL<ph id="ph1">\+</ph>C para detener la secuencia de comandos.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A Finally block also runs if an Exit keyword stops the script from within a Catch block.</source>
          <target state="translated">Un bloque Finally también se ejecuta si una palabra clave Exit detiene la secuencia de comandos desde un bloque Catch.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VEA TAMBIÉN</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>