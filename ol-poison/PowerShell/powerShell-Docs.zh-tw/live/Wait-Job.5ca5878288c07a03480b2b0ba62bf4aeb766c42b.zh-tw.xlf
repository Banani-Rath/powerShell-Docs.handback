<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73574612b779b31030d1bbb44f6199b410b1e641</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\Wait-Job.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6421f30a99ff0e7f286975d12ed46f424182a63</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a96cb3867323f984feb66157a11bc64d2db9ab3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Wait-Job</source>
          <target state="translated">等候工作</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Wait-Job</source>
          <target state="translated">等候工作</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Suppresses the command prompt until one or all of the Windows PowerShell background jobs running in the session are complete.</source>
          <target state="translated">抑制命令提示字元，直到工作階段中正在執行的其中一個或所有 Windows PowerShell 背景工作完成為止。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SessionIdParameterSet (Default)</source>
          <target state="translated">SessionIdParameterSet （預設值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>JobParameterSet</source>
          <target state="translated">JobParameterSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>NameParameterSet</source>
          <target state="translated">NameParameterSet</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>InstanceIdParameterSet</source>
          <target state="translated">InstanceIdParameterSet</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>StateParameterSet</source>
          <target state="translated">StateParameterSet</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>FilterParameterSet</source>
          <target state="translated">FilterParameterSet</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet waits for Windows PowerShell background jobs to complete before it displays the command prompt.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet 會等待 Windows PowerShell 背景工作完成後才會顯示命令提示字元。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can wait until any background job is complete, or until all background jobs are complete, and you can set a maximum wait time for the job.</source>
          <target state="translated">您可以等到任一背景工作完成，或等到所有背景工作都完成，而且可以設定工作的最長等待時間。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the commands in the job are complete, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> displays the command prompt and returns a job object so that you can pipe it to another command.</source>
          <target state="translated">當工作中的命令都已完成， <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 顯示命令提示字元，並傳回工作物件，以便您可以將它傳送到另一個命令。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet to wait for background jobs, such as those that were started by using the Start-Job cmdlet or the <bpt id="p2">**</bpt>AsJob<ept id="p2">**</ept> parameter of the Invoke-Command cmdlet.</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet 來等待背景工作，例如使用 Start-job cmdlet 或 <bpt id="p2">**</bpt>AsJob<ept id="p2">**</ept> Invoke-command cmdlet 的參數。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about Windows PowerShell background jobs, see about_Jobs.</source>
          <target state="translated">如需有關 Windows PowerShell 背景工作的詳細資訊，請參閱 about_Jobs。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet also waits for custom job types, such as workflow jobs and instances of scheduled jobs.</source>
          <target state="translated">在 Windows PowerShell 3.0 中，從 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 指令程式也可等待自訂工作類型，例如工作流程工作和排程工作的執行個體。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To enable <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to wait for jobs of a particular type, import the module that supports the custom job type into the session before running a <bpt id="p2">**</bpt>Get-Job<ept id="p2">**</ept> command, either by using the Import-Module cmdlet or by using or getting a cmdlet in the module.</source>
          <target state="translated">若要啟用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 等待特定類型的工作，匯入支援的自訂工作類型，再執行工作階段的模組 <bpt id="p2">**</bpt>Get-job<ept id="p2">**</ept> 命令，使用 Import-module cmdlet 或使用或 cmdlet 取得模組中。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For information about a particular custom job type, see the documentation of the custom job type feature.</source>
          <target state="translated">如需有關特定自訂工作類型的資訊，請參閱自訂工作類型功能的文件。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 範例 1 --------------------------</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This command waits for all of the background jobs running in the session to complete.</source>
          <target state="translated">此命令會等待工作階段中正在執行的所有背景工作完成。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Wait-Job cmdlet with jobs started on remote computers by using the Start-Job cmdlet.</source>
          <target state="translated">此範例示範如何將 Wait-Job Cmdlet 與使用 Start-Job Cmdlet 在遠端電腦上啟動的工作搭配使用。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Both the Start-Job and Wait-Job commands are submitted to the remote computer by using the Invoke-Command cmdlet.</source>
          <target state="translated">將 Start-Job 和 Wait-Job 命令送出到遠端電腦時，都是使用 Invoke-Command Cmdlet。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example uses Wait-Job to determine whether a Get-Date command running as a background job on three different computers is complete.</source>
          <target state="translated">此範例使用 Wait-Job 判斷以背景工作方式在三部不同電腦上執行的 Get-Date 命令是否已完成。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The first command creates a Windows PowerShell session (PSSession) on each of the three remote computers and stores them in the $s variable.</source>
          <target state="translated">第一個命令在三部遠端電腦上分別建立 Windows PowerShell 工作階段 (PSSession)，並將它們儲存在 $s 變數中。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The second command uses the Invoke-Command cmdlet to run a Start-Job command in each of the three sessions in $s.</source>
          <target state="translated">第二個命令使用 Invoke-command cmdlet 在每個 $s 中的三個工作階段中執行 Start-job 命令。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All of the jobs are named Date1.</source>
          <target state="translated">所有的作業會命名為 Date1。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The third command uses the Invoke-Command cmdlet to run a Wait-Job command.</source>
          <target state="translated">第三個命令使用 Invoke-Command Cmdlet 執行 Wait-Job 命令。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This command waits for the Date1 jobs on each computer to complete.</source>
          <target state="translated">此命令會等待每一部電腦上的 Date1 工作完成。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It stores the resulting collection (array) of job objects in the $done variable.</source>
          <target state="translated">它將產生的工作物件集合 (陣列) 儲存在 $done 變數中。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The fourth command uses the Count property of the array of job objects in the $done variable to determine how many of the jobs are complete.</source>
          <target state="translated">第四個命令使用 %done 變數中工作物件陣列的 Cout 屬性，判斷有多少工作已完成。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 3 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 3 --------------------------</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This example uses the <bpt id="p1">**</bpt>Any<ept id="p1">**</ept> parameter of <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> to determine when the first of many background jobs running in the current session are complete.</source>
          <target state="translated">這個範例會使用 <bpt id="p1">**</bpt>任何<ept id="p1">**</ept> 參數 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 來判斷目前的工作階段中執行的許多背景工作的第一個已完成。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It also shows how to use the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet to wait for remote jobs to complete.</source>
          <target state="translated">它也示範如何使用 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet 來等待遠端工作完成。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The first command creates a PSSession on each of the computers listed in the Machines.txt file and stores the PSSessions in the $s variable.</source>
          <target state="translated">第一個命令在 Machines.txt 檔案中列出的每一部電腦上建立 PSSession，並將 PSSession 儲存在 $s 變數中。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The command uses the Get-Content cmdlet to get the contents of the file.</source>
          <target state="translated">此命令使用 Get-content cmdlet 取得檔案的內容。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> command is enclosed in parentheses to ensure that it runs before the New-PSSession command.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Get-content<ept id="p1">**</ept> 命令被括在括號，以確保它的 New-pssession 命令之前執行。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The second command stores a <bpt id="p1">**</bpt>Get-EventLog<ept id="p1">**</ept> command string (in quotation marks) in the $c variable.</source>
          <target state="translated">第二個命令儲存 <bpt id="p1">**</bpt>Get-eventlog<ept id="p1">**</ept> 命令 $c 變數中的字串 （引號括住）。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The third command uses the Invoke-Command cmdlet to run a <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> command in each of the sessions in $s.</source>
          <target state="translated">第三個命令會使用 Invoke-command cmdlet 執行 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 命令在每個 $s 中的工作階段。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> command starts a background job that runs the <bpt id="p2">**</bpt>Get-EventLog<ept id="p2">**</ept> command in the $c variable.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 命令會啟動背景工作執行 <bpt id="p2">**</bpt>Get-eventlog<ept id="p2">**</ept> $c 變數中的命令。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier to indicate that the $c variable was defined on the local computer.</source>
          <target state="translated">此命令會使用 <bpt id="p1">**</bpt>使用<ept id="p1">**</ept> 範圍修飾符以指出在本機電腦上已定義 $c 變數。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier is introduced in Windows PowerShell 3.0.</source>
          <target state="translated"> <bpt id="p1">**</bpt>使用<ept id="p1">**</ept> 範圍修飾符在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier, see about_Remote_Variables (http://go.microsoft.com/fwlink/?LinkID=252653).</source>
          <target state="translated">如需詳細資訊 <bpt id="p1">**</bpt>使用<ept id="p1">**</ept> 範圍修飾詞，請參閱 about_Remote_Variables (http://go.microsoft.com/fwlink/?LinkID=252653)。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The fourth command uses the <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> cmdlet to run a <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> command in the sessions.</source>
          <target state="translated">第四個命令會使用 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> cmdlet 來執行 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 命令的工作階段中。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">**</bpt>Any<ept id="p1">**</ept> parameter to wait until the first job on the remote computers is complete.</source>
          <target state="translated">它會使用 <bpt id="p1">**</bpt>任何<ept id="p1">**</ept> 參數來等待遠端電腦上的第一個工作完成。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Timeout parameter of Wait-Job to set a maximum wait time for the jobs running on remote computers.</source>
          <target state="translated">此範例示範如何使用 Wait-Job 的 Timeout 參數，為在遠端電腦上執行的工作設定最長等待時間。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first command creates a PSSession on each of three remote computers (Server01, Server02, and Server03), and it saves the PSSessions in the $s variable.</source>
          <target state="translated">第一個命令在三部遠端電腦 (Server01、Server02 及 Server03) 上分別建立 PSSession，並將這些 PSSession 儲存在 $s 變數中。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second command uses the Invoke-Command cmdlet to run a Start-Job command in each of the PSSessions in $s.</source>
          <target state="translated">第二個命令使用 Invoke-command cmdlet 在每個 Pssession $s 中執行 Start-job 命令。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It saves the resulting job objects in the $jobs variable.</source>
          <target state="translated">它會將產生的工作物件儲存在 $jobs 變數。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The third command uses the Invoke-Command cmdlet to run a Wait-Job command in each of the PSSessions in $s.</source>
          <target state="translated">第三個命令使用 Invoke-command cmdlet 執行 Wait-job 命令在每個 Pssession 中 $s。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Wait-Job command determines whether all of the commands have completed within 30 seconds.</source>
          <target state="translated">Wait-job 命令判斷所有命令是否已在 30 秒內完成。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It uses the Timeout parameter with a value of 30 (seconds) to establish the maximum wait time and saves the results of the command in the $done variable.</source>
          <target state="translated">它使用 Timeout 參數搭配 30 (秒) 的值來建立最長等待時間，並將命令的結果儲存在 $done 變數中。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this case, after 30 seconds, only the command on the Server02 computer has completed.</source>
          <target state="translated">在本例中，30 秒之後，只有 Server02 電腦上的命令已完成。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Wait-Job ends the wait, displays the command prompt, and returns the object that represents the job that was completed.</source>
          <target state="translated">Wait-Job 會結束等待、顯示命令提示字元，然後傳回代表已完成之工作的物件。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The $done variable contains a job object that represents the job that ran on Server02.</source>
          <target state="translated">$done 變數包含代表已在 Server02 上執行之工作的工作物件。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 5 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 5 --------------------------</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This command identifies three jobs by their IDs and waits until any of them are complete.</source>
          <target state="translated">此命令依工作的識別碼來識別三個工作，並等到其中任何一個工作完成為止。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The command prompt returns when the first job completes.</source>
          <target state="translated">當第一個工作完成時，就會返回命令提示字元。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 6 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 6 --------------------------</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This command waits 120 seconds (two minutes) for the DailyLog job to complete.</source>
          <target state="translated">此命令等待 120 秒 (2 分鐘) 讓 DailyLog 工作完成。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the job does not complete in the next two minutes, the command prompt returns anyway, and the job continues to run in the background.</source>
          <target state="translated">如果此工作沒有在接下來的 2 分鐘內完成，仍然會返回命令提示字元，而工作會在背景中繼續執行。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 7 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 7 --------------------------</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This Wait-Job command uses the job name to identify the job to wait for.</source>
          <target state="translated">此 Wait-Job 命令使用工作名稱來識別要等待的工作。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 8 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 8 --------------------------</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Wait-Job cmdlet with jobs started on the local computer by using the Start-Job cmdlet.</source>
          <target state="translated">此範例示範如何將 Wait-Job Cmdlet 與使用 Start-Job Cmdlet 在本機電腦上啟動的工作搭配使用。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>These commands start a job that gets the Windows PowerShell script files that were added or updated in the last week.</source>
          <target state="translated">這些命令啟動可取得上週新增或更新之 Windows PowerShell 指令檔的工作。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The first command uses the Start-Job cmdlet to start a background job on the local computer.</source>
          <target state="translated">第一個命令使用 Start-Job Cmdlet 在本機電腦上啟動背景工作。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The job runs a Get-ChildItem command that gets all of the files with a ".ps1" file name extension that were added or updated in the last week.</source>
          <target state="translated">此工作會執行 Get-ChildItem 命令，此命令會取得所有上週新增或更新且副檔名為 ".ps1" 的檔案。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The third command uses the Wait-Job cmdlet to wait until the job is complete.</source>
          <target state="translated">第三個命令使用 Wait-Job Cmdlet 等待工作完成為止。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When the job completes, the command displays the job object, which contains information about the job.</source>
          <target state="translated">當工作完成時，此命令會顯示工作物件，其中包含工作的相關資訊。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 9 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 9 --------------------------</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Wait-Job cmdlet with jobs started on remote computers by using the AsJob parameter of the Invoke-Command cmdlet.</source>
          <target state="translated">此範例示範如何將 Wait-Job Cmdlet 與使用 Invoke-Command Cmdlet 的 AsJob 參數在遠端電腦上啟動的工作搭配使用。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When using AsJob, the job is created on the local computer and the results are automatically returned to the local computer, even though the job runs on the remote computers.</source>
          <target state="translated">使用 AsJob 時，會在本機電腦上建立工作，而即使工作是在遠端電腦上執行，也會將結果自動傳回到本機電腦。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This example uses Wait-Job to determine whether a Get-Process command running in the sessions on three remote computers is complete.</source>
          <target state="translated">此範例使用 Wait-Job 判斷在三部遠端電腦上的工作階段中執行的 Get-Process 命令是否已完成。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The first command creates PSSessions on three computers and stores them in the $s variable.</source>
          <target state="translated">第一個命令在三部電腦上建立 PSSession，並將它們儲存在 $s 變數中。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The second command uses the Invoke-Command cmdlet to run a Get-Process command in each of the three PSSessions in $s.</source>
          <target state="translated">第二個命令使用 Invoke-command cmdlet 的三個 Pssession $s 中每個執行 Get-process 命令。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The command uses the AsJob parameter to run the command asynchronously as a background job.</source>
          <target state="translated">命令使用 AsJob 參數以背景工作以非同步方式執行命令。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The command returns a job object, just like the jobs started by using Start-Job, and the job object is stored in the $j variable.</source>
          <target state="translated">命令傳回工作物件 (就像使用 Start-Job 啟動的工作一樣)，並將工作物件儲存在 $j 變數中。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The third command uses a pipeline operator (|) to send the job object in $j to the Wait-Job cmdlet.</source>
          <target state="translated">第三個命令使用管線運算子 (|) 將 $j 中的工作物件傳送至 Wait-Job Cmdlet。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Notice that an Invoke-Command command is not required in this case, because the job resides on the local computer.</source>
          <target state="translated">請注意，在本例中並不需要 Invoke-Command 命令，因為工作位於本機電腦上。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 10 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 10 --------------------------</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This command waits for the job with an ID value of 1.</source>
          <target state="translated">此命令等待 ID 值為 1 的工作。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">參數</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>-Any</source>
          <target state="translated">-任何</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Displays the command prompt (and returns the job object) when any job completes.</source>
          <target state="translated">在任何工作完成時，顯示命令提示字元 (並傳回工作物件)。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>By default, Wait-Job waits until all of the specified jobs are complete before displaying the prompt.</source>
          <target state="translated">Wait-Job 預設會等到所有指定的工作都完成之後，才顯示提示。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-Filter</source>
          <target state="translated">篩選器</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Waits for jobs that satisfy all of the conditions established in the associated hash table.</source>
          <target state="translated">等待與相關聯雜湊表中建立的所有條件相符的工作。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Enter a hash table where the keys are job properties and the values are job property values.</source>
          <target state="translated">輸入索引鍵為工作屬性且值為工作屬性值的雜湊表。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This parameter works only on custom job types, such as workflow jobs and scheduled jobs.</source>
          <target state="translated">這個參數只適用於自訂工作類型，例如，工作流程工作和已排程的工作。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>It does not work on standard background jobs, such as those created by using the Start-Job cmdlet.</source>
          <target state="translated">它無法運作的標準背景工作，例如使用 Start-job cmdlet 建立的。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For information about support for this parameter, see the help topic for the job type.</source>
          <target state="translated">如需支援此參數的詳細資訊，請參閱工作類型的說明主題。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>-Id</source>
          <target state="translated">識別碼</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Waits for jobs with the specified IDs.</source>
          <target state="translated">等待具有指定識別碼的工作。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The ID is an integer that uniquely identifies the job within the current session.</source>
          <target state="translated">識別碼是整數，可唯一識別目前工作階段中的工作。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>It is easier to remember and type than the InstanceId, but it is unique only within the current session.</source>
          <target state="translated">與 InstanceId 相比，它比較容易記住並輸入，但是它只有在目前的工作階段內是唯一的。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can type one or more IDs (separated by commas).</source>
          <target state="translated">您可以輸入一個或多個識別碼 (以逗號分隔)。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To find the ID of a job, type "Get-Job" without parameters.</source>
          <target state="translated">若要尋找工作的識別碼，請輸入 "Get-Job" 且不搭配任何參數。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>-InstanceId</source>
          <target state="translated">-執行個體識別碼</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Waits for jobs with the specified instance IDs.</source>
          <target state="translated">等待具有指定執行個體識別碼的工作。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The default is all jobs.</source>
          <target state="translated">預設為所有工作。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>An instance ID is a GUID that uniquely identifies the job on the computer.</source>
          <target state="translated">執行個體識別碼是 GUID，可唯一識別電腦上的工作。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To find the instance ID of a job, use Get-Job.</source>
          <target state="translated">若要尋找工作的執行個體識別碼，請使用 Get-Job。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>-Job</source>
          <target state="translated">作業</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Waits for the specified jobs.</source>
          <target state="translated">等待指定的工作。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the job objects or a command that gets the job objects.</source>
          <target state="translated">輸入包含工作物件的變數，或輸入可取得工作物件的命令。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can also use a pipeline operator to send job objects to the Wait-Job cmdlet.</source>
          <target state="translated">您也可以使用管線運算子將工作物件傳送至 Wait-Job Cmdlet。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>By default, Wait-Job waits for all jobs created in the current session.</source>
          <target state="translated">Wait-Job 預設會等待在目前工作階段中建立的所有工作。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-Name</source>
          <target state="translated">-Name</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Waits for jobs with the specified friendly name.</source>
          <target state="translated">等待具有指定好記名稱的工作。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>-State</source>
          <target state="translated">狀態</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Waits only for jobs in the specified state.</source>
          <target state="translated">只等待處於指定狀態的工作。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Valid values are NotStarted, Running, Completed, Failed, Stopped, Blocked, Suspended, Disconnected, Suspending, Stopping.</source>
          <target state="translated">有效值為 NotStarted、 執行、 已完成、 失敗、 已停止、 已封鎖、 已擱置、 已中斷連線、 正在暫停、 停止。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information about job states, see "JobState Enumeration" in MSDN at http://msdn.microsoft.com/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspxhttp://msdn.microsoft.com/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx</source>
          <target state="translated">工作狀態的詳細資訊，請參閱 MSDN 中的 &lt; JobState 列舉 &gt;，網址 http://msdn.microsoft.com/library/windows/desktop/system.management.automation.jobstate (v=vs.85).aspxhttp://msdn.microsoft.com/library/windows/desktop/system.management.automation.jobstate (vs.85</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>-Timeout</source>
          <target state="translated">逾時</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Determines the maximum wait time for each background job, in seconds.</source>
          <target state="translated">決定每個背景工作的最長等待時間 (單位為秒)。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The default, -1, waits until the job completes, no matter how long it runs.</source>
          <target state="translated">預設值 -1 會等到工作完成，不論工作執行多久。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The timing starts when you submit the Wait-Job command, not the Start-Job command.</source>
          <target state="translated">計時是從送出 Wait-Job 命令 (而不是 Start-Job 命令) 開始。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If this time is exceeded, the wait ends and the command prompt returns, even if the job is still running.</source>
          <target state="translated">如果超過這個時間，即使工作仍在執行，也會結束等待並返回命令提示字元。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>No error message is displayed.</source>
          <target state="translated">不會顯示任何錯誤訊息。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Continues waiting if jobs are in the <bpt id="p1">**</bpt>Suspended<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Disconnected<ept id="p2">**</ept> state.</source>
          <target state="translated">繼續等待，如果工作處於 <bpt id="p1">**</bpt>Suspended<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>已中斷連接<ept id="p2">**</ept> 狀態。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> returns (terminates the wait) when jobs are in one of the following states: Completed, Failed, Stopped, Suspended, or Disconnected.</source>
          <target state="translated">根據預設， <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 傳回 （終止等待） 當工作處於下列狀態之一︰ 已完成、 失敗、 已停止、 已暫停或已中斷連接。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">此參數是在 Windows PowerShell 3.0 引進。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">這個 cmdlet 支援一般參數:-偵錯、-ErrorAction、-ErrorVariable、-InformationAction-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 以及-WarningVariable。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">如需詳細資訊，請參閱 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">輸入</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.RemotingJob</source>
          <target state="translated">System.Management.Automation.RemotingJob</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You can pipe a job object to Wait-Job.</source>
          <target state="translated">您可以使用管線將工作物件傳送至 Wait-Job。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">輸出</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSRemotingJob</source>
          <target state="translated">System.Management.Automation.PSRemotingJob</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Wait-Job returns job objects that represent the completed jobs.</source>
          <target state="translated">Wait-Job 會傳回代表已完成之工作的工作物件。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If the wait ends because the value of the Timeout parameter is exceeded, Wait-Job does not return any objects.</source>
          <target state="translated">如果是因為超出 Timeout 參數的值而結束等待，Wait-Job 就不會傳回任何物件。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">附註</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> returns (terminates the wait) when jobs are in one of the following states: Completed, Failed, Stopped, Suspended, or Disconnected.</source>
          <target state="translated">根據預設， <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 傳回 （終止等待） 當工作處於下列狀態之一︰ 已完成、 失敗、 已停止、 已暫停或已中斷連接。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>To direct <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to continue waiting for <bpt id="p2">**</bpt>Suspended<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Disconnected<ept id="p3">**</ept> jobs, use the <bpt id="p4">**</bpt>Force<ept id="p4">**</ept> parameter.</source>
          <target state="translated">導向 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 等待 <bpt id="p2">**</bpt>擱置<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>已中斷連接<ept id="p3">**</ept> 作業，使用 <bpt id="p4">**</bpt>Force<ept id="p4">**</ept> 參數。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相關的連結</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">取得工作</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Invoke-Command</source>
          <target state="translated">Invoke-Command</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Receive-Job</source>
          <target state="translated">接收工作</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Remove-Job</source>
          <target state="translated">移除工作</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Resume-Job</source>
          <target state="translated">Resume-Job</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Start-Job</source>
          <target state="translated">啟動工作</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Stop-Job</source>
          <target state="translated">停止工作</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Suspend-Job</source>
          <target state="translated">Suspend-Job</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>about_Remote_Jobs</source>
          <target state="translated">about_Remote_Jobs</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>about_Remote_Variables</source>
          <target state="translated">about_Remote_Variables</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>