<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bccc531bc0eaf2af256954135b37392e07e0bd6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Trap.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06bd21232ffcdd187e01c1bc51a66e7b48d04d8c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d1f7251f91415e5add590eeb0192550614f2d8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Trap</source>
          <target state="translated">關於設陷</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">簡短描述</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes a keyword that handles a terminating error.</source>
          <target state="translated">描述處理終止錯誤的關鍵字。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細描述</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">終止錯誤會停止執行的陳述式。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script in the current pipeline.</source>
          <target state="translated">如果 Windows PowerShell 不會處理以某種方式終止錯誤，Windows PowerShell 也會停止目前的管線中執行的函式或指令碼。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">在其他語言，例如 C<ph id="ph1">\#</ph>, ，例外狀況指的終止錯誤。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Trap keyword specifies a list of statements to run when a terminating error occurs.</source>
          <target state="translated">設陷關鍵字指定的終止錯誤發生時執行的陳述式的清單。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Trap statements handle the terminating errors and allow execution of the script or function to continue instead of stopping.</source>
          <target state="translated">設陷陳述式處理終止錯誤，並允許執行指令碼或函式，若要繼續而不是停止。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Trap statement has the following syntax:</source>
          <target state="translated">Trap 陳述式的語法如下︰</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Trap statement includes a list of statements to run when a terminating error occurs.</source>
          <target state="translated">Trap 陳述式包含終止錯誤發生時執行的陳述式的清單。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Trap keyword can optionally specify an error type.</source>
          <target state="translated">設陷關鍵字可以選擇性地指定錯誤類型。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">錯誤類型需要方括號。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A script or command can have multiple Trap statements.</source>
          <target state="translated">指令碼或命令可以有多個設陷陳述式。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Trap statements can appear anywhere in the script or command.</source>
          <target state="translated">設陷陳述式可以出現在指令碼或命令的任何位置。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>TRAPPING ALL TERMINATING ERRORS</source>
          <target state="translated">擷取所有的終止錯誤</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When a terminating error occurs that is not handled in another way in a script or command,  Windows PowerShell checks for a Trap statement that handles the error.</source>
          <target state="translated">時就會發生未處理的指令碼或命令中的另一種方式終止錯誤，檢查有 Windows PowerShell Trap 陳述式會處理錯誤。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a Trap statement is present,  Windows PowerShell continues running the script or command in the Trap statement.</source>
          <target state="translated">如果 Trap 陳述式，則 Windows PowerShell 會繼續在 Trap 陳述式中執行指令碼或命令。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example is a very simple Trap statement:</source>
          <target state="translated">下列範例是非常簡單的 Trap 陳述式︰</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This Trap statement traps any terminating error.</source>
          <target state="translated">此 Trap 陳述式截獲任何終止錯誤。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example is a function that contains this Trap statement:</source>
          <target state="translated">下列範例是包含此 Trap 陳述式的函式︰</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This function includes a nonsense string that causes an error.</source>
          <target state="translated">此函式會包含這些字串會造成錯誤。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Running this function returns the following:</source>
          <target state="translated">執行這個函式傳回下列結果︰</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example includes a Trap statement that displays the error by using the $_ automatic variable:</source>
          <target state="translated">下列範例包含會顯示錯誤，使用 $_ 自動變數的 Trap 陳述式︰</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Running this version of the function returns the following:</source>
          <target state="translated">執行此版本的函式傳回下列結果︰</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Trap statements can also be more complex.</source>
          <target state="translated">設陷陳述式也可以是更複雜。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A Trap statement can include multiple conditions or function calls.</source>
          <target state="translated">Trap 陳述式可以包含多個條件或函式呼叫。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It can log, test, or even run another program.</source>
          <target state="translated">它可以記錄、 測試或甚至還能執行其他程式。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>TRAPPING SPECIFIED TERMINATING ERRORS</source>
          <target state="translated">所指定的終止錯誤截取</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example is a Trap statement that traps the CommandNotFoundException error type:</source>
          <target state="translated">下列範例是 Trap 陳述式的設陷 CommandNotFoundException 錯誤類型︰</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When a function or script encounters a string that does not match a known command, this Trap statement displays the "Command error trapped" string.</source>
          <target state="translated">當函式或指令碼遇到不符合已知的命令的字串時，這個 Trap 陳述式就會顯示 「 命令錯誤截取 」 字串。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After running any statements in the Trap statement list,  Windows PowerShell writes the error object to the error stream and then continues the script.</source>
          <target state="translated">執行之後的任何陳述式的設陷陳述式清單中，Windows PowerShell 會將錯誤物件寫入錯誤資料流，然後再繼續執行指令碼。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the Microsoft .NET Framework exception types.</source>
          <target state="translated">Windows PowerShell 使用 Microsoft.NET Framework 例外狀況型別。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example specifies the System.Exception error type:</source>
          <target state="translated">下列範例會指定 System.Exception 錯誤類型︰</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The CommandNotFoundException error type inherits from the System.Exception type.</source>
          <target state="translated">CommandNotFoundException 錯誤型別繼承自 System.Exception 型別。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This statement traps an error that is created by an unknown command.</source>
          <target state="translated">此陳述式截獲未知的命令會建立錯誤。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It also traps other error types.</source>
          <target state="translated">它也會設陷其他錯誤類型。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can have more than one Trap statement in a script.</source>
          <target state="translated">您可以在指令碼中有一個以上的 Trap 陳述式。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each error can be trapped by only one Trap statement.</source>
          <target state="translated">只有一個 Trap 陳述式會截獲每個錯誤。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If an error occurs, and more than one Trap statement is available,  Windows PowerShell uses the Trap statement with the most specific error type that matches the error.</source>
          <target state="translated">如果發生錯誤，而您一個以上的 Trap 陳述式，Windows PowerShell 會使用 Trap 陳述式最特定的錯誤類型符合錯誤。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following script example contains an error.</source>
          <target state="translated">下列指令碼範例包含錯誤。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The script includes a general Trap statement that traps any terminating error and a specific Trap statement that specifies the CommandNotFoundException type.</source>
          <target state="translated">指令碼包含一般的 Trap 陳述式的任何終止錯誤和特定的 Trap 陳述式，指定 CommandNotFoundException 型別。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">執行這個指令碼會產生下列結果︰</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because  Windows PowerShell does not recognize "nonsenseString" as a cmdlet or other item, it returns a CommandNotFoundException error.</source>
          <target state="translated">Windows PowerShell 指令程式或其他項目為無法辨識"nonsenseString"，因為它會傳回 CommandNotFoundException 錯誤。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This terminating error is trapped by the specific Trap statement.</source>
          <target state="translated">此終止錯誤被困特定 Trap 陳述式。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following script example contains the same Trap statements with a different error:</source>
          <target state="translated">下列指令碼範例包含相同的設陷陳述式使用不同的錯誤︰</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Running this script produces the following result:</source>
          <target state="translated">執行這個指令碼會產生下列結果︰</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The attempt to divide by zero does not create a CommandNotFoundException error.</source>
          <target state="translated">嘗試除以零不會建立 CommandNotFoundException 錯誤。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Instead, that error is trapped by the other Trap statement, which traps any terminating error.</source>
          <target state="translated">相反地，該錯誤被困的其他 Trap 陳述式設陷任何終止錯誤。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>TRAPPING ERRORS AND SCOPE</source>
          <target state="translated">錯誤截取和範圍</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the same scope as the Trap statement, after running the Trap statements,  Windows PowerShell continues at the statement after the error.</source>
          <target state="translated">如果終止錯誤發生在相同範圍 Trap 陳述式執行 Trap 陳述式之後，Windows PowerShell 會繼續在錯誤發生後的陳述式。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the Trap statement is in a different scope from the error, execution continues at the next statement that is in the same scope as the Trap statement.</source>
          <target state="translated">如果 Trap 陳述式，在不同的範圍從錯誤中 Trap 陳述式的相同範圍內的下一個陳述式繼續執行。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For instance, if an error occurs in a function, and the Trap statement is in the function, the script continues at the next statement.</source>
          <target state="translated">比方說，如果函式中發生錯誤，而且 Trap 陳述式的函式中，指令碼將會繼續在下一個陳述式中。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script contains an error and a Trap statement:</source>
          <target state="translated">例如，下列指令碼包含錯誤和 Trap 陳述式︰</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function1 function produces the following result:</source>
          <target state="translated">指令碼，在稍後執行 Function1 函式會產生下列結果︰</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The Trap statement in the function traps the error.</source>
          <target state="translated">Trap 陳述式，函式中的捕捉錯誤。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>After displaying the message,  Windows PowerShell resumes running the function.</source>
          <target state="translated">之後顯示訊息，Windows PowerShell 會繼續執行的函式。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that Function1 was completed.</source>
          <target state="translated">請注意 Function1 指出已完成。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compare this with the following example, which has the same error and Trap statement.</source>
          <target state="translated">此度量與比較下列的範例中，具有相同的錯誤和 Trap 陳述式。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this example, the Trap statement occurs outside the function:</source>
          <target state="translated">在此範例中，Trap 陳述式就會發生在函式以外︰</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Later in the script, running the Function2 function produces the following result:</source>
          <target state="translated">指令碼，在稍後執行 Function2 函式會產生下列結果︰</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this example, the "function2 was completed" command was not run.</source>
          <target state="translated">在此範例中，「 function2 已完成 」 的命令並未執行。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Although both terminating errors occur within a function, if the Trap statement is outside the function,  Windows PowerShell does not go back into the function after the Trap statement runs.</source>
          <target state="translated">雖然這兩個終止錯誤發生函式中，如果 Trap 陳述式是在函式以外，Windows PowerShell 不會不會進入回函式 Trap 陳述式執行之後。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>USING THE BREAK AND CONTINUE KEYWORDS</source>
          <target state="translated">使用 BREAK 和 CONTINUE 關鍵字</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can use the Break and Continue keywords in a Trap statement to determine whether a script or command continues to run after a terminating error.</source>
          <target state="translated">您可以使用分頁，並在 Trap 陳述式來判斷是否有指令碼或命令繼續執行的終止錯誤後繼續的關鍵字。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you include a Break statement in a Trap statement list,  Windows PowerShell stops the function or script.</source>
          <target state="translated">如果您在 Trap 陳述式清單中包含的 Break 陳述式，Windows PowerShell 停止函式或指令碼。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Break keyword in a Trap statement:</source>
          <target state="translated">下列範例函數會在 Trap 陳述式中使用 Break 關鍵字︰</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Because the Trap statement included the Break keyword, the function does not continue to run, and the "Function completed" line is not run.</source>
          <target state="translated">Trap 陳述式包含 Break 關鍵字，因為函式不會繼續執行，並不會執行 「 函式已完成 」 的列。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you include a Continue statement in a Trap statement,  Windows PowerShell resumes after the statement that caused the error, just as it would without Break or Continue.</source>
          <target state="translated">如果您在 Trap 陳述式中包含的 Continue 陳述式，而不會中斷或繼續一樣造成錯誤的陳述式之後繼續執行 Windows PowerShell。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>With the Continue keyword, however,  Windows PowerShell does not write an error to the error stream.</source>
          <target state="translated">使用 Continue 關鍵字，不過，Windows PowerShell 不會寫入錯誤的錯誤資料流。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following sample function uses the Continue keyword in a Trap statement:</source>
          <target state="translated">下列範例函數會在 Trap 陳述式中使用 Continue 關鍵字︰</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The function resumes after the error is trapped, and the "Function completed" statement runs.</source>
          <target state="translated">截獲的錯誤，並 「 函式已完成 」 陳述式執行之後，會繼續執行函式。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>No error is written to the error stream.</source>
          <target state="translated">任何錯誤會不寫入資料流時發生錯誤。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>