<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0ed69e4731a796d2851e384ba2fcd36bccefee3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Types.ps1xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e048ac45db21dab3f3e79adefca24f06530cc63b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90e5515bb689451a5de53796b1b5711c9215c1fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Types.ps1xml</source>
          <target state="translated">關於 Types.ps1xml</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">簡短描述</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Explains how to use Types.ps1xml files to extend the types of objects that are used in Windows PowerShell.</source>
          <target state="translated">說明如何使用 Types.ps1xml 檔案以擴充的 Windows PowerShell 中使用的物件類型。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細描述</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Extended type data defines additional properties and methods ("members") of object types in Windows PowerShell.</source>
          <target state="translated">延伸的類型資料會在 Windows PowerShell 中定義其他屬性和方法 （「 成員 」） 的物件類型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are two techniques for adding extended type data to a Windows PowerShell session.</source>
          <target state="translated">有兩種技術，將延伸的類型資料新增至 Windows PowerShell 工作階段。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>-- Types.ps1xml file: An XML file that defines extended type data.</source>
          <target state="translated">-Types.ps1xml 檔案︰ 定義延伸的類型資料的 XML 檔案。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>-- Update-TypeData: A cmdlet that reloads Types.ps1xml files and defines extended data for types in the current session.</source>
          <target state="translated">-Update-typedata: cmdlet 會重新載入 Types.ps1xml 檔案，並定義目前的工作階段中的擴充的資料類型。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This topic describes Types.ps1xml files.</source>
          <target state="translated">本主題說明 Types.ps1xml 檔案。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about using the Update-TypeData cmdlet to add dynamic extended type data to the current session see Update-TypeData (http://go.microsoft.com/fwlink/?LinkID=113421).</source>
          <target state="translated">如需有關使用 Update-typedata cmdlet 來新增動態擴充的型別目前的工作階段資料，請參閱 Update-typedata (http://go.microsoft.com/fwlink/?LinkID=113421)。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>About Extended Type Data</source>
          <target state="translated">關於擴充型別資料</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Extended type data defines additional properties and methods ("members") of object types in Windows PowerShell.</source>
          <target state="translated">延伸的類型資料會在 Windows PowerShell 中定義其他屬性和方法 （「 成員 」） 的物件類型。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can extend any type that is supported by Windows PowerShell and use the added properties and methods in the same way that you use the properties that are defined on the object types.</source>
          <target state="translated">您可以延伸任何型別所支援的 Windows PowerShell，並使用屬性的物件類型上定義的相同方式來使用新增的屬性和方法。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, Windows PowerShell adds a DateTime property to all System.DateTime objects, such as the ones that the Get-Date cmdlet returns.</source>
          <target state="translated">例如，Windows PowerShell 會將日期時間屬性加入至所有 System.DateTime 物件，例如 Get-date 指令程式可傳回的項目。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>PS C:&gt; (Get-Date).DateTime Sunday, January 29, 2012 9:43:57 AM</source>
          <target state="translated">PS C: &gt; (Get-date)。DateTime 2012 年 1 月 29，星期日上午 9:43:57</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You won't find the DateTime property in the description of the System.DateTime structure (http://msdn.microsoft.com/library/system.datetime.aspx), because Windows PowerShell adds the property and it is visible only in Windows PowerShell.</source>
          <target state="translated">因為 Windows PowerShell 加入的屬性，它只會顯示在 Windows PowerShell，不會在結構描述的 System.DateTime (http://msdn.microsoft.com/library/system.datetime.aspx)，尋找日期時間屬性。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To add the DateTime property to all Windows PowerShell sessions, Windows PowerShell defines the DateTime property in the Types.ps1xml file in the Windows PowerShell installation directory ($pshome).</source>
          <target state="translated">若要加入所有的 Windows PowerShell 工作階段的日期時間屬性，Windows PowerShell 會 Types.ps1xml 檔案中的 Windows PowerShell 安裝目錄 ($pshome) 中定義的日期時間屬性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Adding Extended Type Data to Windows PowerShell.</source>
          <target state="translated">Windows powershell 新增延伸的類型資料。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There are three sources of extended type data in Windows PowerShell sessions.</source>
          <target state="translated">在 Windows PowerShell 工作階段中有三個來源的延伸的類型資料。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>--  The Types.ps1xml files in the Windows PowerShell installation directory are loaded automatically into every Windows PowerShell session.</source>
          <target state="translated">在 Windows PowerShell 安裝目錄--Types.ps1xml 檔案會自動載入每個 Windows PowerShell 工作階段。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>--  The Types.ps1xml files that modules export are loaded when the module is imported into the current session.</source>
          <target state="translated">模組匯入目前的工作階段時，會載入的模組匯出--Types.ps1xml 檔案。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>--  Extended type data that is defined by using the Update-TypeData cmdlet is added only to the current session.</source>
          <target state="translated">-定義使用 Update-typedata cmdlet 的延伸類型資料只能加入目前工作階段。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is not saved in a file.</source>
          <target state="translated">不會儲存在檔案中。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the session, the extended type data from the three sources is applied to objects in the same way and is available on all objects of the specified types.</source>
          <target state="translated">在活動中，三個來源的延伸的類型資料相同的方式套用至物件，並可用於指定類型的所有物件。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The TypeData Cmdlets</source>
          <target state="translated">TypeData 指令程式</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following TypeData cmdlets are included in the Microsoft.PowerShell.Utility module in Windows PowerShell 3.0 and later versions of Windows PowerShell.</source>
          <target state="translated">在 Windows PowerShell 3.0 和更新版本的 Windows PowerShell Microsoft.PowerShell.Utility 模組中包含下列的 TypeData cmdlet。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Get-TypeData:     Gets extended type data in the current session.</source>
          <target state="translated">Get-typedata︰ 取得目前工作階段中的延伸類型資料。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Update-TypeData:  Reloads Types.ps1xml files.</source>
          <target state="translated">Update-typedata︰ 重新載入 Types.ps1xml 檔案。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Adds extended type data to the current session.</source>
          <target state="translated">將目前的工作階段的延伸的類型資料。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remove-TypeData:  Removes extended type data from the current session.</source>
          <target state="translated">Remove-typedata︰ 移除從目前的工作階段延伸類型資料。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about these cmdlets, see the help topic for each cmdlet.</source>
          <target state="translated">如需這些 cmdlet 的詳細資訊，請參閱 [說明] 主題，每個 cmdlet。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Built-in Types.ps1xml Files</source>
          <target state="translated">內建的 Types.ps1xml 檔案</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Types.ps1xml files in the $pshome directory are added automatically to every session.</source>
          <target state="translated">$Pshome 目錄中的 Types.ps1xml 檔案會自動加入至每個工作階段。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The Types.ps1xml file in the Windows PowerShell installation directory ($pshome) is an XML-based text file that lets you add properties and methods to the objects that are used in Windows PowerShell.</source>
          <target state="translated">Types.ps1xml 檔案中的 Windows PowerShell 安裝目錄 ($pshome) 是以 XML 為基礎的文字檔案，可讓您使用 Windows PowerShell 中的物件添加屬性和方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has built-in Types.ps1xml files that add several elements to the .NET Framework types, but you can create additional Types.ps1xml files to further extend the types.</source>
          <target state="translated">Windows PowerShell 的內建的 Types.ps1xml 檔案，將數個項目加入至.NET Framework 型別，但是您可以建立其他的 Types.ps1xml 檔案，來進一步延伸型別。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, by default, array objects (System.Array) have a Length property that lists the number of objects in the array.</source>
          <target state="translated">例如，根據預設，array 物件 (System.Array) 有列出陣列中的物件數目的長度屬性。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, because the name "length" does not clearly describe the property, Windows PowerShell adds an alias property named "Count" that displays the same value.</source>
          <target state="translated">不過，因為名稱為 「 長度 」 不會清楚地描述屬性，Windows PowerShell 別名將屬性加入名為 「 計數 」，以顯示相同的值。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following XML adds the Count property to the System.Array type.</source>
          <target state="translated">下列 XML 會將 Count 屬性加入至 System.Array 型別。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>Count<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph> Length</source>
          <target state="translated">System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>計數<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph> 長度</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To get the new AliasProperty, use a Get-Member command on any array, as shown in the following example.</source>
          <target state="translated">若要取得新的 AliasProperty，如下列範例所示，針對任何的陣列，使用 Get-member 命令。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Get-Member -inputobject (1,2,3,4)</source>
          <target state="translated">Get-member-inputobject (1,2,3,4)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The command returns the following results.</source>
          <target state="translated">此命令會傳回下列結果。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Name           MemberType    Definition</source>
          <target state="translated">名稱 MemberType 定義</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Count          AliasProperty Count = Length Address        Method        System.Object&amp; Address(Int32 ) Clone          Method        System.Object Clone() CopyTo         Method        System.Void CopyTo(Array array, Int32 index): Equals         Method        System.Boolean Equals(Object obj) Get            Method        System.Object Get(Int32 )</source>
          <target state="translated">計數 AliasProperty 計數 = 長度位址方法 System.Object 位址 (Int32) 複製方法 System.Object clone （) CopyTo 方法 System.Void CopyTo(Array array, Int32 index): Equals 方法 System.Boolean Equals(Object obj) 取得方法 System.Object 取得 (Int32)</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As a result, you can use either the Count property or the Length property of arrays in Windows PowerShell.</source>
          <target state="translated">如此一來，您可以在 Windows PowerShell 中使用 Count 屬性或陣列的長度屬性。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (1, 2, 3, 4).count</source>
          <target state="translated">C:\PS&amp;GT; &gt; （1、 2、 3、 4）.count</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (1, 2, 3, 4).length</source>
          <target state="translated">C:\PS&amp;GT; &gt; （1、 2、 3、 4）.length</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Creating New Types.ps1xml Files</source>
          <target state="translated">建立新的 Types.ps1xml 檔案</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The .ps1xml files that are installed with Windows PowerShell are digitally signed to prevent tampering because the formatting can include script blocks.</source>
          <target state="translated">與 Windows PowerShell 一起安裝的.ps1xml 檔案的數位簽章，以防遭到竄改，因為格式可以包含指令碼區塊。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Therefore, to add a property or method to a .NET Framework type, create your own Types.ps1xml files, and then add them to your Windows PowerShell session.</source>
          <target state="translated">因此，要加入.NET Framework 型別屬性或方法，請建立您自己的 Types.ps1xml 檔案，然後將它們新增至您的 Windows PowerShell 工作階段。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To create a new file, start by copying an existing Types.ps1xml file.</source>
          <target state="translated">若要建立新的檔案，啟動藉由複製現有的 Types.ps1xml 檔案。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The new file can have any name, but it must have a .ps1xml file name extension.</source>
          <target state="translated">新的檔案可以具有任何名稱，但它必須擁有的.ps1xml 檔案的副檔名。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can place the new file in any directory that is accessible to Windows PowerShell, but it is useful to place the files in the Windows PowerShell installation directory ($pshome) or in a subdirectory of the installation directory.</source>
          <target state="translated">您可以將新的檔案置於 Windows powershell，存取任何目錄，但很適用於將檔案放在 Windows PowerShell 安裝目錄 ($pshome) 或安裝目錄的子目錄中。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When you have saved the new file, use the Update-TypeData cmdlet to add the new file to your Windows PowerShell session.</source>
          <target state="translated">當您儲存新的檔案時，請將新的檔案加入至您的 Windows PowerShell 工作階段使用 Update-typedata cmdlet。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you want your types to take precedence over the types that are defined in the built-in file, use the PrependData parameter of the Update-TypeData cmdlet.</source>
          <target state="translated">如果您想您的型別優先順序將高於內建的檔案中所定義的型別時，使用 PrependData 參數 Update-typedata 指令程式。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Update-TypeData affects only the current session.</source>
          <target state="translated">Update-typedata 會影響目前工作階段。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To make the change to all future sessions, export the console, or add the Update-TypeData command to your Windows PowerShell profile.</source>
          <target state="translated">若要變更所有未來的工作階段，請匯出主控台中，或將 Update-typedata 命令新增至您的 Windows PowerShell 設定檔。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Types.ps1xml and Add-Member</source>
          <target state="translated">Types.ps1xml 和新增成員</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The Types.ps1xml files add properties and methods to all the instances of the objects of the specified .NET Framework type in the affected Windows PowerShell session.</source>
          <target state="translated">Types.ps1xml 檔案加入屬性和方法的指定之.NET Framework 型別的物件的所有執行個體中受影響的 Windows PowerShell 工作階段。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, if you need to add properties or methods only to one instance of an object, use the Add-Member cmdlet.</source>
          <target state="translated">不過，如果您需要將屬性或方法加入至一個物件的執行個體，請使用 Add-member cmdlet。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information,see Add-Member.</source>
          <target state="translated">如需詳細資訊，請參閱 &lt; 新增成員。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example: Adding an Age Member to FileInfo Objects</source>
          <target state="translated">範例︰ 將 Age 成員加入至 FileInfo 物件</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This example shows how to add an Age property to file objects (System.IO.FileInfo).</source>
          <target state="translated">這個範例示範如何將 Age 屬性新增至檔案物件 (System.IO.FileInfo)。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The age of a file is the difference between its creation time and the current time in days.</source>
          <target state="translated">檔案的存在時間為其建立時間與目前時間之間的差異，以天為單位。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It is easiest to use the original Types.ps1xml file as a template for the new file.</source>
          <target state="translated">是最新的檔案做為範本的原始 Types.ps1xml 檔案。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following command copies the original file to a file called MyTypes.ps1xml in the $pshome directory.</source>
          <target state="translated">下列命令會將原始檔複製到稱為 MyTypes.ps1xml $pshome 目錄中的檔案。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>copy-item Types.ps1xml MyTypes.ps1xml</source>
          <target state="translated">複製項目 Types.ps1xml MyTypes.ps1xml</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Next, open the Types.ps1xml file in any XML or text editor, such as Notepad.</source>
          <target state="translated">接下來，在任何 XML 或文字編輯器中，例如 「 記事本 」 開啟 Types.ps1xml 檔案。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Because the Age property is calculated by using a script block, find a <ph id="ph1">&lt;ScriptProperty&gt;</ph> tag to use as a model for the new Age property.</source>
          <target state="translated">因為 Age 屬性的計算是使用指令碼區塊中，尋找 <ph id="ph1">&lt;ScriptProperty&gt;</ph> 將模型做為新的 Age 屬性標記。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Copy the XML between the <ph id="ph1">&lt;Type&gt;</ph> and <ph id="ph2">&lt;/Type&gt;</ph> tags of the code to create the script property.</source>
          <target state="translated">複製之間的 XML <ph id="ph1">&lt;Type&gt;</ph> 和 <ph id="ph2">&lt;/Type&gt;</ph> 標記程式碼，以建立指令碼屬性。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Then, delete the remainder of the file, except for the opening &lt;?xml&gt; and <ph id="ph1">&lt;Types&gt;</ph> tags and the closing <ph id="ph2">&lt;/Types&gt;</ph> tag.</source>
          <target state="translated">接著，刪除部分檔案，除了開啟 &lt;？ xml &gt; 和 <ph id="ph1">&lt;Types&gt;</ph> 標記和結束 <ph id="ph2">&lt;/Types&gt;</ph> 標記。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You must also delete the digital signature to prevent errors.</source>
          <target state="translated">您也必須刪除數位簽章，以避免錯誤。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Begin with the model script property, such as the following script property, which was copied from the original Types.ps1xml file.</source>
          <target state="translated">模型的指令碼屬性，例如從原始的 Types.ps1xml 檔案複製下列指令碼屬性的開頭。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>System.Guid<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>Guid<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph>$this.ToString()</source>
          <target state="translated">System.Guid<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>Guid<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph>$這。Tostring （)</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Then, change the name of the .NET Framework type, the name of the property, and the value of the script block to create an Age property for file objects.</source>
          <target state="translated">然後，變更的.NET Framework 型別名稱、 屬性的名稱和指令碼區塊，來建立檔案物件的存留期屬性的值。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>Age<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph> ((get-date) - ($this.creationtime)).days</source>
          <target state="translated">System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>時代<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph> ((get-date)-($this.creationtime)).days</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>After you save the file and close it, run an Update-TypeData command, such as the following command, to add the new Types.ps1xml file to the current session.</source>
          <target state="translated">您將檔案儲存並關閉它之後，執行 Update-typedata 命令，例如下列命令，將新的 Types.ps1xml 檔案新增至目前的工作階段。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The command uses the PrependData parameter to place the new file in a higher precedence order than the original file.</source>
          <target state="translated">命令使用 PrependData 參數，將新的檔案放在更高的優先順序比原始的檔案。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>(For more information about Update-TypeData, see Update-TypeData.)</source>
          <target state="translated">（如需 Update-typedata 的詳細資訊，請參閱 Update-typedata）。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>update-typedata -prependpath $pshome\MyTypes.ps1xml</source>
          <target state="translated">更新 typedata-prependpath $pshome\MyTypes.ps1xml</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To test the change, run a Get-ChildItem command to get the PowerShell.exe file in the $pshome directory, and then pipe the file to the Format-List cmdlet to list all of the properties of the file.</source>
          <target state="translated">若要測試變更，請執行 Get-childitem 命令，以取得 PowerShell.exe 檔案，在 $pshome 目錄中，並接著使用管線傳送至 Format-list cmdlet 以列出所有檔案的屬性檔案。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>As a result of the change, the Age property appears in the list.</source>
          <target state="translated">因變更而 Age 屬性會出現在清單中。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>get-childitem $pshome\PowerShell.exe | format-list -property *</source>
          <target state="translated">-get-childitem $pshome\PowerShell.exe |格式清單-屬性 *</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>PSPath            : Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS... PSParentPath      : Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS... PSChildName       : PowerShell.exe PSDrive           : C PSProvider        : Microsoft.PowerShell.Core\FileSystem PSIsContainer     : False Age               : 16 VersionInfo       : File:             C:\WINDOWS\system32\WindowsPow... InternalName:     POWERSHELL OriginalFilename: PowerShell.EXE</source>
          <target state="translated">PSPath: Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS...PSParentPath: Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS...PSChildName: PowerShell.exe PSDrive: C PSProvider: Microsoft.PowerShell.Core\FileSystem PSIsContainer: False 時代︰ 16 VersionInfo︰ 檔案︰ C:\WINDOWS\system32\WindowsPow...InternalName: POWERSHELL OriginalFilename: PowerShell.EXE</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can also display the Age property of the file by using the following command.</source>
          <target state="translated">您也可以使用下列命令，以顯示 Age 屬性的檔案。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>(get-childitem $pshome\PowerShell.exe).age</source>
          <target state="translated">(-get-childitem $pshome\PowerShell.exe).age</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>16</source>
          <target state="translated">16</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The XML in Types.ps1xml Files</source>
          <target state="translated">Types.ps1xml 檔案中的 XML</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;Types&gt;</ph> tag encloses all of the types that are defined in the file.</source>
          <target state="translated"> <ph id="ph1">&lt;Types&gt;</ph> 標記括住所有的檔案中定義的型別。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>There should be only one pair of <ph id="ph1">&lt;Types&gt;</ph> tags.</source>
          <target state="translated">應該只有一對 <ph id="ph1">&lt;Types&gt;</ph> 標記。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Each .NET Framework type mentioned in the file should be represented by a pair of <ph id="ph1">&lt;Type&gt;</ph> tags.</source>
          <target state="translated">在檔案中所述的每個.NET Framework 型別應該由一對 <ph id="ph1">&lt;Type&gt;</ph> 標記。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The type tags must contain the following tags:</source>
          <target state="translated">型別標記必須包含下列標籤︰</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>: A pair of <ph id="ph1">&lt;Name&gt;</ph> tags that enclose the name of the affected .NET Framework type.</source>
          <target state="translated">︰ 一組 <ph id="ph1">&lt;Name&gt;</ph> 括住的受影響的.NET Framework 型別名稱的標籤。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>: A pair of <ph id="ph1">&lt;Members&gt;</ph> tags that enclose the tags for the new properties and methods that are defined for the .NET Framework type.</source>
          <target state="translated">︰ 一組 <ph id="ph1">&lt;Members&gt;</ph> 括住的新屬性和.NET Framework 型別方法所定義的標記的標記。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Any of the following member tags can be inside the <ph id="ph1">&lt;Members&gt;</ph> tags.</source>
          <target state="translated">任何成員標記都可以是內 <ph id="ph1">&lt;Members&gt;</ph> 標記。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>: Defines a new name for an existing property.</source>
          <target state="translated">︰ 定義現有屬性的新名稱。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;AliasProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;ReferencedMemberName&gt;</ph> tags that specify the existing property.</source>
          <target state="translated"> <ph id="ph1">&lt;AliasProperty&gt;</ph> 標記必須有一對 <ph id="ph2">&lt;Name&gt;</ph> 標籤，指定新的屬性及一組名稱 <ph id="ph3">&lt;ReferencedMemberName&gt;</ph> 標籤，指定現有的屬性。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, the Count alias property is an alias for the Length property of array objects.</source>
          <target state="translated">例如，Count 別名屬性是 Length 屬性的陣列物件的別名。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>Count<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph>Length</source>
          <target state="translated">System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>計數<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph>長度</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>:  References a static method of a .NET Framework class.</source>
          <target state="translated">︰ 參考的.NET Framework 類別的靜態方法。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;CodeMethod&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new method and a pair of <ph id="ph3">&lt;GetCodeReference&gt;</ph> tags that specify the code in which the method is defined.</source>
          <target state="translated"> <ph id="ph1">&lt;CodeMethod&gt;</ph> 標記必須有一對 <ph id="ph2">&lt;Name&gt;</ph> 標籤，指定新的方法及一組名稱 <ph id="ph3">&lt;GetCodeReference&gt;</ph> 標籤，指定定義方法的程式碼。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, the Mode property of directories (System.IO.DirectoryInfo objects) is a code property defined in the Windows PowerShell FileSystem provider.</source>
          <target state="translated">例如，[模式] 屬性的目錄 （System.IO.DirectoryInfo 物件） 是 Windows PowerShell FileSystem 提供者中定義的程式碼屬性。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>Mode<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>Mode</source>
          <target state="translated">System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>模式<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>模式</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>: References a static method of a .NET Framework class.</source>
          <target state="translated">︰ 參考的.NET Framework 類別的靜態方法。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;CodeProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;GetCodeReference&gt;</ph> tags that specify the code in which the property is defined.</source>
          <target state="translated"> <ph id="ph1">&lt;CodeProperty&gt;</ph> 標記必須有一對 <ph id="ph2">&lt;Name&gt;</ph> 標籤，指定新的屬性及一組名稱 <ph id="ph3">&lt;GetCodeReference&gt;</ph> 標籤，指定屬性定義所在的程式碼。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, the Mode property of directories (System.IO.DirectoryInfo objects) is a code property defined in the Windows PowerShell FileSystem provider.</source>
          <target state="translated">例如，[模式] 屬性的目錄 （System.IO.DirectoryInfo 物件） 是 Windows PowerShell FileSystem 提供者中定義的程式碼屬性。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>Mode<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>Mode</source>
          <target state="translated">System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>模式<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>模式</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>: Defines a collection of members (properties and methods).</source>
          <target state="translated">︰ 定義集合的成員 （屬性和方法）。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;MemberSet&gt;</ph> tags appear within the primary <ph id="ph2">&lt;Members&gt;</ph> tags.</source>
          <target state="translated"> <ph id="ph1">&lt;MemberSet&gt;</ph> 標記出現在主要 <ph id="ph2">&lt;Members&gt;</ph> 標記。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The tags must enclose a pair of <ph id="ph1">&lt;Name&gt;</ph> tags surrounding the name of the member set and a pair of secondary <ph id="ph2">&lt;Members&gt;</ph> tags that surround the members (properties and methods) in the set.</source>
          <target state="translated">標記必須括住的一組 <ph id="ph1">&lt;Name&gt;</ph> 標籤周圍的成員集，以及一組次要資料庫的名稱 <ph id="ph2">&lt;Members&gt;</ph> 圍繞在集合中的成員 （屬性和方法） 的標記。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Any of the tags that create a property (such as <ph id="ph1">&lt;NoteProperty&gt;</ph> or <ph id="ph2">&lt;ScriptProperty&gt;</ph>) or a method (such as <ph id="ph3">&lt;Method&gt;</ph> or <ph id="ph4">&lt;ScriptMethod&gt;</ph>) can be members of the set.</source>
          <target state="translated">任何建立屬性的標記 (例如 <ph id="ph1">&lt;NoteProperty&gt;</ph> 或 <ph id="ph2">&lt;ScriptProperty&gt;</ph>) 或方法 (例如 <ph id="ph3">&lt;Method&gt;</ph> 或 <ph id="ph4">&lt;ScriptMethod&gt;</ph>) 可以是集合的成員。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In Types.ps1xml files, the <ph id="ph1">&lt;MemberSet&gt;</ph> tag is used to define the default views of the .NET Framework objects in Windows PowerShell.</source>
          <target state="translated">在 Types.ps1xml 檔案中， <ph id="ph1">&lt;MemberSet&gt;</ph> 標記用來在 Windows PowerShell 中定義的.NET Framework 物件的預設檢視。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In this case, the name of the member set (the value within the <ph id="ph1">&lt;Name&gt;</ph> tags) is always "PsStandardMembers", and the names of the properties (the value of the <ph id="ph2">&lt;Name&gt;</ph> tag) are one of the following:</source>
          <target state="translated">成員名稱在此案例中，設定 (內的值 <ph id="ph1">&lt;Name&gt;</ph> 標記) 永遠是 「 PsStandardMembers 」，以及屬性的名稱 (值 <ph id="ph2">&lt;Name&gt;</ph> 標記) 是下列其中一種︰</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>DefaultDisplayProperty: A single property of an object.</source>
          <target state="translated">DefaultDisplayProperty: 單一物件的屬性。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>DefaultDisplayPropertySet: One or more properties of an object.</source>
          <target state="translated">DefaultDisplayPropertySet︰ 一或多個物件的屬性。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>DefaultKeyPropertySet: One or more key properties of an object.</source>
          <target state="translated">DefaultKeyPropertySet︰ 一或多個索引鍵屬性的物件。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A key property identifies instances of property values, such as the ID number of items in a session history.</source>
          <target state="translated">索引鍵屬性會識別執行個體的屬性值，例如工作階段歷程記錄中的項目識別碼。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For example, the following XML defines the default display of services (System.ServiceProcess.ServiceController objects) that are returned by the Get-Service cmdlet.</source>
          <target state="translated">例如，下列的 XML 定義 Get-service cmdlet 所傳回的服務 （System.ServiceProcess.ServiceController 物件） 的預設顯示。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It defines a member set named "PsStandardMembers" that consists of a default property set with the Status, Name, and DisplayName properties.</source>
          <target state="translated">它會定義一個名為 「 PsStandardMembers 」，其中包含設定與狀態、 名稱和 DisplayName 屬性的預設屬性的成員集合。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>Status<ph id="ph4">&lt;/Name&gt;
&lt;Name&gt;</ph>Name<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</source>
          <target state="translated">System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>狀態<ph id="ph4">&lt;/Name&gt;
&lt;Name&gt;</ph>名稱<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>顯示名稱</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>: References a native method of the underlying object.</source>
          <target state="translated">︰ 參考基礎物件的原生方法。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>: A collection of the methods of the object.</source>
          <target state="translated">︰ 集合物件的方法。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>: Defines a property with a static value.</source>
          <target state="translated">︰ 定義具有靜態值的屬性。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;NoteProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;Value&gt;</ph> tags that specify the value of the property.</source>
          <target state="translated"> <ph id="ph1">&lt;NoteProperty&gt;</ph> 標記必須有一對 <ph id="ph2">&lt;Name&gt;</ph> 標籤，指定新的屬性及一組名稱 <ph id="ph3">&lt;Value&gt;</ph> 標籤，指定屬性的值。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For example, the following XML creates a Status property for directories (System.IO.DirectoryInfo objects).</source>
          <target state="translated">例如，下列 XML 程式碼會建立目錄 （System.IO.DirectoryInfo 物件） 的狀態屬性。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The value of the Status property is always "Success".</source>
          <target state="translated">狀態屬性的值永遠是 「 成功 」。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;NoteProperty&gt;
&lt;Name&gt;</ph>Status<ph id="ph2">&lt;/Name&gt;
&lt;Value&gt;</ph>Success</source>
          <target state="translated">System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;NoteProperty&gt;
&lt;Name&gt;</ph>狀態<ph id="ph2">&lt;/Name&gt;
&lt;Value&gt;</ph>成功</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>: Properties that take arguments and return a value.</source>
          <target state="translated">︰ 不接受引數和傳回值的屬性。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>: A collection of the properties of the object.</source>
          <target state="translated">︰ 集合的物件的屬性。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>: A property of the base object.</source>
          <target state="translated">︰ 此屬性的基底物件。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>: Defines a collection of properties of the object.</source>
          <target state="translated">︰ 定義物件的屬性集合。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;PropertySet&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the property set and a pair of <ph id="ph3">&lt;ReferencedProperty&gt;</ph> tags that specify the properties.</source>
          <target state="translated"> <ph id="ph1">&lt;PropertySet&gt;</ph> 標記必須有一對 <ph id="ph2">&lt;Name&gt;</ph> 標籤，指定的屬性集及一組名稱 <ph id="ph3">&lt;ReferencedProperty&gt;</ph> 指定屬性的標記。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The names of the properties are enclosed in <ph id="ph1">&lt;Name&gt;</ph> tag pairs.</source>
          <target state="translated">屬性的名稱會括住 <ph id="ph1">&lt;Name&gt;</ph> 標記組。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>In Types.ps1xml, <ph id="ph1">&lt;PropertySet&gt;</ph> tags are used to define sets of properties for the default display of an object.</source>
          <target state="translated">在 Types.ps1xml， <ph id="ph1">&lt;PropertySet&gt;</ph> 標記用來定義物件的預設顯示的屬性集。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You can identify the default displays by the value "PsStandardMembers" in the <ph id="ph1">&lt;Name&gt;</ph> tag of a <ph id="ph2">&lt;MemberSet&gt;</ph> tag.</source>
          <target state="translated">您可以找出預設會顯示值"PsStandardMembers"中 <ph id="ph1">&lt;Name&gt;</ph> 標記 <ph id="ph2">&lt;MemberSet&gt;</ph> 標記。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example, the following XML creates a Status property for directories (System.IO.DirectoryInfo objects).</source>
          <target state="translated">例如，下列 XML 程式碼會建立目錄 （System.IO.DirectoryInfo 物件） 的狀態屬性。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The value of the Status property is always "Success".</source>
          <target state="translated">狀態屬性的值永遠是 「 成功 」。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>Status&lt;/Name <ph id="ph4">&lt;Name&gt;</ph>Name<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</source>
          <target state="translated">System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>狀態 &lt; / 名稱 <ph id="ph4">&lt;Name&gt;</ph>名稱<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>顯示名稱</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>: Defines a method whose value is the output of a script.</source>
          <target state="translated">︰ 定義的方法，其值為指令碼的輸出。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;ScriptMethod&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new method and a pair of <ph id="ph3">&lt;Script&gt;</ph> tags that enclose the script block that returns the method result.</source>
          <target state="translated"> <ph id="ph1">&lt;ScriptMethod&gt;</ph> 標記必須有一對 <ph id="ph2">&lt;Name&gt;</ph> 標籤，指定新的方法及一組名稱 <ph id="ph3">&lt;Script&gt;</ph> 傳回方法結果的指令碼區塊括住的標記。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For example, the ConvertToDateTime and ConvertFromDateTime methods of management objects (System.System.Management.ManagementObject) are script methods that use the ToDateTime and ToDmtfDateTime static methods of the System.Management.ManagementDateTimeConverter class.</source>
          <target state="translated">例如，管理物件 (System.System.Management.ManagementObject) 的 ConvertToDateTime 和 ConvertFromDateTime 方法是使用 ToDateTime 的指令碼方法和 ToDmtfDateTime System.Management.ManagementDateTimeConverter 類別的靜態方法。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>System.Management.ManagementObject<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptMethod&gt;
&lt;Name&gt;</ph>ConvertToDateTime</source>
          <target state="translated">System.Management.ManagementObject<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptMethod&gt;
&lt;Name&gt;</ph>ConvertToDateTime</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>ConvertFromDateTime<ph id="ph1">&lt;/Name&gt;
&lt;Script&gt;
[System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($args[0])
&lt;/Script&gt;
&lt;/ScriptMethod&gt;
&lt;/Members&gt;
&lt;/Type&gt;

&lt;ScriptProperty&gt;</ph>: Defines a property whose value is the output of a script.</source>
          <target state="translated">ConvertFromDateTime<ph id="ph1">&lt;/Name&gt;
&lt;Script&gt;
[System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($args[0])
&lt;/Script&gt;
&lt;/ScriptMethod&gt;
&lt;/Members&gt;
&lt;/Type&gt;

&lt;ScriptProperty&gt;</ph>︰ 定義的屬性，其值為指令碼的輸出。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;ScriptProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;GetScriptBlock&gt;</ph> tags that enclose the script block that returns the property value.</source>
          <target state="translated"> <ph id="ph1">&lt;ScriptProperty&gt;</ph> 標記必須有一對 <ph id="ph2">&lt;Name&gt;</ph> 標籤，指定新的屬性及一組名稱 <ph id="ph3">&lt;GetScriptBlock&gt;</ph> 以傳回屬性值的指令碼區塊的標記。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For example, the VersionInfo property of files (System.IO.FileInfo objects) is a script property that results from using the FullName property of the GetVersionInfo static method of System.Diagnostics.FileVersionInfo objects.</source>
          <target state="translated">例如，檔案 （System.IO.FileInfo 物件） 的 VersionInfo 屬性是因使用 GetVersionInfo System.Diagnostics.FileVersionInfo 物件的靜態方法的 FullName 屬性而產生的指令碼屬性。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>VersionInfo</source>
          <target state="translated">System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>VersionInfo</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>System.Diagnostics.FileVersionInfo</source>
          <target state="translated">System.Diagnostics.FileVersionInfo</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For more information, see the Windows PowerShell Software Development Kit (SDK) in the MSDN (Microsoft Developer Network )library at http://go.microsoft.com/fwlink/?LinkId=144538.</source>
          <target state="translated">如需詳細資訊，請參閱 Windows PowerShell 軟體開發套件 (SDK) http://go.microsoft.com/fwlink/?LinkId=144538 在 MSDN (Microsoft Developer Network) 文件庫中。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Update-TypeData</source>
          <target state="translated">Update-TypeData</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To load your Types.ps1xml files into a Windows PowerShell session, run the Update-TypeData cmdlet.</source>
          <target state="translated">若要載入 Windows PowerShell 工作階段的 Types.ps1xml 檔案，執行 Update-typedata cmdlet。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If you want the types in your file to take precedence over types in the built-in Types.ps1xml file, add the PrependData parameter of Update-TypeData.</source>
          <target state="translated">如果您希望類型檔案的優先順序高於內建的 Types.ps1xml 檔案中的型別中，加入 Update-typedata 的 PrependData 參數。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Update-TypeData affects only the current session.</source>
          <target state="translated">Update-typedata 會影響目前工作階段。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>To make the change to all future sessions, export the session, or add the Update-TypeData command to your Windows PowerShell profile.</source>
          <target state="translated">若要變更所有未來的工作階段，請匯出工作階段，或將 Update-typedata 命令新增至您的 Windows PowerShell 設定檔。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Exceptions that occur in properties, or from adding properties to an Update-TypeData command, do not report errors to StdErr.</source>
          <target state="translated">在內容中，或是將屬性新增至 Update-typedata 命令，命令就會發生的例外狀況不會報告錯誤至 StdErr。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This is to suppress exceptions that would occur in many common types during formatting and outputting.</source>
          <target state="translated">這是為了在進行格式化與輸出期間，抑制在許多常見類型中可能會出現的例外狀況。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If you are getting .NET Framework properties, you can work around the suppression of exceptions by using method syntax instead, as shown in the following example:</source>
          <target state="translated">如果您要取得 .NET Framework 屬性，您可以改用方法語法來避開例外狀況的抑制，如下列範例所示：</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>"hello".get_Length()</source>
          <target state="translated">「 hello".get_Length()</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Note that method syntax can only be used with .NET Framework properties.</source>
          <target state="translated">請注意方法語法只可以使用於 .NET Framework 屬性。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Properties that are added by running the Update-TypeData cmdlet cannot use method syntax.</source>
          <target state="translated">藉由執行 Update-TypeData Cmdlet 所新增的屬性無法使用方法語法。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Signing a Types.ps1xml File</source>
          <target state="translated">簽署 Types.ps1xml 檔案</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>To protect users of your Types.ps1xml file, you can sign the file using a digital signature.</source>
          <target state="translated">若要保護的 Types.ps1xml 檔案的使用者，您可以簽署使用數位簽章的檔案。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information, see about_Signing.</source>
          <target state="translated">如需詳細資訊，請參閱 about_Signing。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>about_Signing (http://go.microsoft.com/fwlink/?LinkID=113268) Copy-Item (http://go.microsoft.com/fwlink/?LinkID=113292) Copy-ItemProperty (http://go.microsoft.com/fwlink/?LinkID=113293) Get-Member (http://go.microsoft.com/fwlink/?LinkID=113322) Get-TypeData (http://go.microsoft.com/fwlink/?LinkID=217033) Remove-TypeData (http://go.microsoft.com/fwlink/?LinkID=217038) Update-TypeData (http://go.microsoft.com/fwlink/?LinkID=113421)</source>
          <target state="translated">about_Signing (http://go.microsoft.com/fwlink/?LinkID=113268) 複製項目 (http://go.microsoft.com/fwlink/?LinkID=113292) Copy-itemproperty (http://go.microsoft.com/fwlink/?LinkID=113293) Get 成員 (http://go.microsoft.com/fwlink/?LinkID=113322) Get-typedata (http://go.microsoft.com/fwlink/?LinkID=217033) Remove-typedata (http://go.microsoft.com/fwlink/?LinkID=217038) Update-typedata (http://go.microsoft.com/fwlink/?LinkID=113421)</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>