<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6bcccd3b6b5da9223b7c5287370f95f3a12614a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Script_Blocks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ca95e9cf510bd28a3c711ed539641aa59812d6c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b21d52086f85e7a0477b91f4b110953beacc62e1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Script Blocks</source>
          <target state="translated">關於指令碼區塊</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">主題</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">簡短描述</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Defines what a script block is and explains how to use script blocks in the Windows PowerShell programming language.</source>
          <target state="translated">定義指令碼區塊並說明如何使用指令碼區塊，以 Windows PowerShell 程式設計語言。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細描述</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the Windows PowerShell programming language, a script block is a collection of statements or expressions that can be used as a single unit.</source>
          <target state="translated">在 Windows PowerShell 程式設計語言中，指令碼區塊是陳述式或運算式，可用來當做單一單位的集合。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A script block can accept arguments and return values.</source>
          <target state="translated">指令碼區塊可以接受引數和傳回值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Syntactically, a script block is a statement list in braces, as shown in the following syntax:</source>
          <target state="translated">在語法上，指令碼區塊是大括號，陳述式清單，如下列語法所示︰</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>{<ph id="ph1">&lt;statement list&gt;</ph>}</source>
          <target state="translated">{<ph id="ph1">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A script block returns the output of all the commands in the script block, either as a single object or as an array.</source>
          <target state="translated">指令碼區塊會在指令碼區塊中，傳回所有命令的輸出做為單一物件或陣列。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Like functions, a script block can include parameters.</source>
          <target state="translated">函式，類似指令碼區塊可以包含參數。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the Param keyword to assign named parameters, as shown in the following syntax:</source>
          <target state="translated">使用 Param 關鍵字指派具名的參數，如下列語法所示︰</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>{ param ([type]$parameter1 [,[type]$parameter2]) <ph id="ph1">&lt;statement list&gt;</ph> }</source>
          <target state="translated">{param ([type] $parameter1 [，[type] $parameter2]) <ph id="ph1">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a script block, unlike a function, you cannot specify parameters outside the braces.</source>
          <target state="translated">在指令碼區塊中，不同於函式，您無法指定大括號外面的參數。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Like functions, script blocks can include the DynamicParam, Begin, Process, and End keywords.</source>
          <target state="translated">函式，類似指令碼區塊可以包含 DynamicParam、 Begin、 Process 及 End 關鍵字。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see about_Functions and about_Functions_Advanced.</source>
          <target state="translated">如需詳細資訊，請參閱 about_Functions 和 about_Functions_Advanced。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Using Script Blocks</source>
          <target state="translated">使用指令碼區塊</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A script block is an instance of a Microsoft .NET Framework type (System.Management.Automation.ScriptBlock).</source>
          <target state="translated">指令碼區塊是 Microsoft.NET Framework 型別 (System.Management.Automation.ScriptBlock) 的執行個體。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Commands can have script block parameter values.</source>
          <target state="translated">命令可以有指令碼區塊的參數值。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the Invoke-Command cmdlet has a ScriptBlock parameter that takes a script block value, as shown in this example:</source>
          <target state="translated">比方說，Invoke-command cmdlet 具有指令碼區塊值的 ScriptBlock 參數，在此範例所示︰</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock  { get-process } Handles  NPM(K)    PM(K)     WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">C:\PS&amp;GT; &gt; 叫用命令指令碼區塊 {get 程序} 處理 NPM(K) PM(K) WS(K) VM(M) CPU 識別碼 ProcessName</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>999      28    39100     45020   262    15.88   1844 communicator 721      28    32696     36536   222    20.84   4028 explorer</source>
          <target state="translated">999 28 39100 45020 262 15.88 1844 communicator 721 28 32696 36536 222 20.84 4028 總管</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The script block that is used as a value can be more complicated, as shown in the following example:</source>
          <target state="translated">做為值的指令碼區塊可以更為複雜，如下列範例所示︰</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock { param ($uu = "Parameter"); "$uu assigned."</source>
          <target state="translated">C:\PS&amp;GT; &gt; 叫用命令 scriptblock {param ($uu = 「 參數 」)。「 $uu 指派 」。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>} Parameter assigned.</source>
          <target state="translated">} 指定的參數。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The script block in the preceding example uses the Param keyword to create a parameter that has a default value.</source>
          <target state="translated">在上述範例中的指令碼區塊會使用 Param 關鍵字建立的參數有預設值。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example uses the Args parameter of the Invoke-Command cmdlet to assign a different value to the parameter:</source>
          <target state="translated">下列範例會使用 Invoke-command cmdlet 的引數參數，將不同的值指派給參數︰</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock {param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\PS&amp;GT; &gt; 叫用命令 scriptblock {param ($uu = 「 參數 」)。「 $uu 指派。"}</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-args "Other value" Other value assigned.</source>
          <target state="translated">-引數 「 其他值 」 指派其他值。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can assign a script block to a variable, as shown in the following example:</source>
          <target state="translated">下列範例所示，您可以指派給變數，指令碼區塊︰</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = {param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\PS&amp;GT; &gt; a = $ {param ($uu = 「 參數 」)。「 $uu 指派。"}</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use the variable with a cmdlet such as Invoke-Command, as shown in the following example:</source>
          <target state="translated">下列範例所示，您可以使用變數的 cmdlet 叫用命令，例如︰</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock $a -args "Other value" Other value assigned.</source>
          <target state="translated">C:\PS&amp;GT; &gt; 叫用命令指令碼區塊 $a 的引數 「 其他值 」 指派其他值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can run a script block that is assigned to a variable by using the call operator (&amp;), as shown in the following example:</source>
          <target state="translated">您可以執行指派給變數使用呼叫運算子 (&amp;)，如下列範例所示的指令碼區塊︰</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; &amp;$a Parameter assigned.</source>
          <target state="translated">C:\PS&amp;GT; &gt; &amp;$ 參數指派。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also provide a parameter to the script block, as shown in the following example:</source>
          <target state="translated">您也可以提供參數給指令碼區塊中，如下列範例所示︰</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; &amp;$a "Other value" Other value assigned.</source>
          <target state="translated">C:\PS&amp;GT; &gt; &amp;$ 「 其他值 」 指派其他值。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you want to assign the value that is created by a script block to a variable, use the call operator to run the script block directly, as shown in the following example:</source>
          <target state="translated">如果您想要指派由指令碼區塊，此變數的值，使用呼叫運算子，直接執行指令碼區塊，在下列範例所示︰</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = &amp;{param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\PS&amp;GT; &gt; $a = &amp; {param ($uu = 「 參數 」)。「 $uu 指派。"}</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a Parameter assigned.</source>
          <target state="translated">C:\PS&amp;GT; &gt; $ 參數指派。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about the call operator, see about_Operators.</source>
          <target state="translated">如需呼叫運算子的詳細資訊，請參閱 about_Operators。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>about_Functions about_Functions_Advanced about_Operators</source>
          <target state="translated">about_Functions about_Functions_Advanced about_Operators</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>