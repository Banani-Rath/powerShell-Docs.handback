<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e585d23e774bfa69df995ec379eb42f4ecd41081</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Get-PSCallStack.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">31f26a6a5a7edd23fd2111dbaab17af0cb6ed5bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">158c162aaa8b1a3e029b681e2c24a0c445e4ebfa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Get-PSCallStack</source>
          <target state="translated">Get-PSCallStack</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get-PSCallStack</source>
          <target state="translated">Get-PSCallStack</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Displays the current call stack.</source>
          <target state="translated">顯示目前的呼叫堆疊。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">描述</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-PSCallStack<ept id="p1">**</ept> cmdlet displays the current call stack.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Get-pscallstack<ept id="p1">**</ept> 指令程式會顯示目前的呼叫堆疊。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although it is designed to be used with the Windows PowerShelldebugger, you can use this cmdlet to display the call stack in a script or function outside of the debugger.</source>
          <target state="translated">雖然它設計來搭配 Windows PowerShelldebugger，您可以使用這個指令程式，以顯示呼叫堆疊中的指令碼或函式的偵錯工具外。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To run a <bpt id="p1">**</bpt>Get-PSCallStack<ept id="p1">**</ept> command while in the debugger, type <ph id="ph1">`k`</ph> or <ph id="ph2">`Get-PSCallStack`</ph>.</source>
          <target state="translated">若要執行 <bpt id="p1">**</bpt>Get-pscallstack<ept id="p1">**</ept> 命令時使用的偵錯工具中，而型別 <ph id="ph1">`k`</ph> 或 <ph id="ph2">`Get-PSCallStack`</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">範例</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example 1: Get the call stack for a function</source>
          <target state="translated">範例 1︰ 取得呼叫堆疊函式</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This command uses the <bpt id="p1">**</bpt>Get-PSCallStack<ept id="p1">**</ept> cmdlet to display the call stack for My-Alias, a simple function that gets the aliases for a cmdlet name.</source>
          <target state="translated">此命令會使用 <bpt id="p1">**</bpt>Get-pscallstack<ept id="p1">**</ept> cmdlet 來顯示我別名，取得 cmdlet 名稱別名的簡單函式的呼叫堆疊。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The first command enters the function at the Windows PowerShell prompt.</source>
          <target state="translated">第一個命令在 Windows PowerShell 命令提示字元中輸入函式。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The second command uses the Set-PSBreakpoint cmdlet to set a breakpoint on the My-Alias function.</source>
          <target state="translated">第二個命令使用 Set-PSBreakpoint Cmdlet 在 My-Alias 函式上設定中斷點。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The third command uses the My-Alias function to get all of the aliases in the current session for the Get-Content cmdlet.</source>
          <target state="translated">第三個命令使用 My-Alias 函式取得目前工作階段中 Get-Content Cmdlet 的所有別名。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The debugger breaks in at the function call.</source>
          <target state="translated">偵錯工具會在函式呼叫時中斷。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Two consecutive step-into (s) commands begin executing the function line by line.</source>
          <target state="translated">兩個連續「逐步執行」命令 (s) 開始逐行執行函式。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Then, a33 <bpt id="p1">**</bpt>Get-PSCallStack<ept id="p1">**</ept> command is used to retrieve the call stack.</source>
          <target state="translated">然後，答 33 <bpt id="p1">**</bpt>Get-pscallstack<ept id="p1">**</ept> 命令用來擷取呼叫堆疊。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The final command is a Step-Out command (o) that exits the debugger and continues executing the script to completion.</source>
          <target state="translated">最後一個命令是「跳離」命令 (o)，它會結束偵錯工具，並繼續執行指令碼直到完成。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">參數</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">這個 cmdlet 支援一般參數:-偵錯、-ErrorAction、-ErrorVariable、-InformationAction-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 以及-WarningVariable。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">如需詳細資訊，請參閱 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">輸入</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You cannot pipe objects to this cmdlet.</source>
          <target state="translated">您無法使用管線將物件傳送至此 Cmdlet。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">輸出</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.CallStackFrame</source>
          <target state="translated">System.Management.Automation.CallStackFrame</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get-PSCallStack<ept id="p1">**</ept> returns an object that represents the items in the call stack.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-pscallstack<ept id="p1">**</ept> 傳回物件，表示呼叫堆疊中的項目。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">附註</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相關的連結</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Disable-PSBreakpoint</source>
          <target state="translated">Disable-PSBreakpoint</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Enable-PSBreakpoint</source>
          <target state="translated">Enable-PSBreakpoint</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Format-Table</source>
          <target state="translated">Format-Table</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Get-PSBreakpoint</source>
          <target state="translated">Get-PSBreakpoint</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Remove-PSBreakpoint</source>
          <target state="translated">Remove-PSBreakpoint</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Set-PSBreakpoint</source>
          <target state="translated">Set-PSBreakpoint</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Where-Object</source>
          <target state="translated">Where-Object</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>about_Debuggers</source>
          <target state="translated">about_Debuggers</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>