<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f92494bf34214dec0aa5aa0cefe972387b7c755</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Try_Catch_Finally.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2d39fa14c37419b7aedaad940ede5d145a65c6e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac22de6e0ef9736ca56bc0e3cd3772e6f5faa735</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell 指令程式</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Try Catch Finally</source>
          <target state="translated">大約 Try Catch Finally</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">簡短描述</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use the Try, Catch, and Finally blocks to handle terminating errors.</source>
          <target state="translated">描述如何使用 Try、 Catch 和 Finally 區塊來處理終止錯誤。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細描述</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use Try, Catch, and Finally blocks to respond to or handle terminating errors in scripts.</source>
          <target state="translated">使用 Try、 Catch 和 Finally 區塊來回應，或是處理指令碼中的終止錯誤。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Trap statement can also be used to handle terminating errors in scripts.</source>
          <target state="translated">Trap 陳述式也可用來處理指令碼中的終止錯誤。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see about_Trap.</source>
          <target state="translated">如需詳細資訊，請參閱 about_Trap。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">終止錯誤會停止執行的陳述式。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script using the current pipeline.</source>
          <target state="translated">如果 Windows PowerShell 不會處理以某種方式終止錯誤，Windows PowerShell 也會停止執行的函式或指令碼使用目前的管線。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">在其他語言，例如 C<ph id="ph1">\#</ph>, ，例外狀況指的終止錯誤。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about errors, see about_Errors.</source>
          <target state="translated">如需錯誤的詳細資訊，請參閱 about_Errors。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the Try block to define a section of a script in which you want  Windows PowerShell to monitor for errors.</source>
          <target state="translated">使用 Try 區塊來定義您想要監視的 Windows PowerShell 有錯誤的指令碼的區段。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When an error occurs within the Try block, the error is first saved to the $Error automatic variable.</source>
          <target state="translated">Try 區塊內發生錯誤時，錯誤會首先會儲存到 $Error 自動變數。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Windows PowerShell then searches for a Catch block to handle the error.</source>
          <target state="translated">Windows PowerShell 會搜尋在 Catch 區塊來處理錯誤。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the Try statement does not have a  matching Catch block,  Windows PowerShell continues to search for an appropriate Catch block or Trap statement in the parent scopes.</source>
          <target state="translated">如果在 Try 陳述式並沒有相符的 Catch 區塊，Windows PowerShell 會繼續搜尋適當的 Catch 區塊或 Trap 陳述式中的父範圍。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After a Catch block is completed or if no appropriate Catch block or Trap statement is found, the Finally block is run.</source>
          <target state="translated">Catch 區塊完成之後，或如果找到任何適當的 Catch 區塊或 Trap 陳述式，最後執行區塊。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the error cannot be handled, the error is written to the error stream.</source>
          <target state="translated">如果無法處理錯誤，錯誤會寫入到錯誤資料流。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A Catch block can include commands for tracking the failure or for recovering the expected flow of the script.</source>
          <target state="translated">Catch 區塊可以包含的命令，追蹤失敗或復原指令碼的預期的流量。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A Catch block can specify which error types it catches.</source>
          <target state="translated">Catch 區塊可以指定的錯誤類型，攔截。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for different kinds of errors.</source>
          <target state="translated">Try 陳述式可以包含多個 Catch 區塊，不同類型的錯誤。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A Finally block can be used to free any resources that are no longer needed by your script.</source>
          <target state="translated">A 最後區塊可以用來釋放不再需要您的指令碼的任何資源。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Try, Catch, and Finally resemble the Try, Catch, and Finally keywords used in the C<ph id="ph1">\#</ph> programming language.</source>
          <target state="translated">Try、 Catch 和 Finally 類似於 Try、 Catch 和 Finally 關鍵字在 C 中使用<ph id="ph1">\#</ph> 程式設計語言。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">語法</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A Try statement contains a Try block, zero or more Catch blocks, and zero or one Finally block.</source>
          <target state="translated">Try 陳述式包含 Try 區塊中，零或多個 Catch 區塊，以及零個或一個 Finally 區塊。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A Try statement must have at least one Catch block or one Finally block.</source>
          <target state="translated">Try 陳述式必須有至少一個 Catch 區塊或 Finally 區塊。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following shows the Try block syntax:</source>
          <target state="translated">下圖顯示的 Try 區塊的語法︰</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Try keyword is followed by a statement list in braces.</source>
          <target state="translated">Try 關鍵字後面接著括號括住的陳述式清單。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs while the statements in the statement list are being run, the script passes the error object from the Try block to an appropriate Catch block.</source>
          <target state="translated">終止錯誤發生時正在執行的陳述式清單中的陳述式，如果指令碼會從 Try 區塊傳遞錯誤物件給適當的 Catch 區塊中。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following shows the Catch block syntax:</source>
          <target state="translated">下圖顯示的 Catch 區塊的語法︰</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Error types appear in brackets.</source>
          <target state="translated">錯誤類型出現在括號。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The outermost brackets indicate the element is optional.</source>
          <target state="translated">最外層的方括號表示項目是選擇性的。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Catch keyword is followed by an optional list of error type specifications and a statement list.</source>
          <target state="translated">Catch 關鍵字後面跟著選擇性錯誤的型別規格的清單和陳述式清單。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the Try block,  Windows PowerShell searches for an appropriate Catch block.</source>
          <target state="translated">如果終止錯誤發生在 Try 區塊中，Windows PowerShell 搜尋適當的 Catch 區塊。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If one is found, the statements in the Catch block are executed.</source>
          <target state="translated">如果找到一個物件，會執行 Catch 區塊中的陳述式。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The Catch block can specify one or more error types.</source>
          <target state="translated">Catch 區塊可以指定一或多個錯誤類型。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An error type is a Microsoft .NET Framework exception or an exception that is derived from a .NET Framework exception.</source>
          <target state="translated">Microsoft.NET Framework 例外狀況或衍生自.NET Framework 例外狀況的例外狀況的錯誤類型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">Catch 區塊會處理指定的.NET Framework 例外狀況類別或衍生自指定類別的任何類別的錯誤。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a Catch block specifies an error type, that Catch block handles that type of error.</source>
          <target state="translated">如果 Catch 區塊中指定的錯誤類型，該 Catch 區塊會處理該類型的錯誤。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If a Catch block does not specify an error type, that Catch block handles any error encountered in the Try block.</source>
          <target state="translated">如果 Catch 區塊未指定的錯誤類型，該 Catch 區塊會處理 Try 區塊中發生任何錯誤。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for the different specified error types.</source>
          <target state="translated">Try 陳述式可以包含指定的不同錯誤類型的多個 Catch 區塊。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following shows the Finally block syntax:</source>
          <target state="translated">下列顯示 Finally 區塊的語法︰</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Finally keyword is followed by a statement list that runs every time the script is run, even if the Try statement ran without error or an error was caught in a Catch statement.</source>
          <target state="translated">Finally 關鍵字後面每次執行指令碼時，即使在 Try 陳述式不會發生錯誤，或者 Catch 陳述式中發生錯誤時所執行的陳述式清單。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that pressing CTRL<ph id="ph1">\+</ph>C stops the pipeline.</source>
          <target state="translated">請注意，按下 CTRL<ph id="ph1">\+</ph>C 停止管線。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Objects that are sent to the pipeline will not be displayed as output.</source>
          <target state="translated">傳送至管線的物件將不會做為輸出。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, if you include a statement to be displayed, such as "Finally block has run", it will not be displayed after you press CTRL<ph id="ph1">\+</ph>C, even if the Finally block ran.</source>
          <target state="translated">因此，如果您包含的陳述式會顯示，例如 「 最後有執行區塊 」，它將不會顯示按下 CTRL 後<ph id="ph1">\+</ph>C，即使最後區塊執行。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CATCHING ERRORS</source>
          <target state="translated">攔截錯誤</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following sample script shows a Try block with a Catch block:</source>
          <target state="translated">下列範例指令碼顯示使用 Catch 區塊的 Try 區塊︰</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Catch keyword must immediately follow the Try block or another Catch block.</source>
          <target state="translated">Catch 關鍵字必須緊接 Try 區塊或另一個 Catch 區塊。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Windows PowerShell does not recognize "NonsenseString" as a cmdlet or other item.</source>
          <target state="translated">Windows PowerShell 指令程式或其他項目為無法辨識"NonsenseString"。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Running this script returns the following result:</source>
          <target state="translated">執行這個指令碼會傳回下列結果︰</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the script encounters "NonsenseString", it causes a terminating error.</source>
          <target state="translated">當指令碼遇到 「 NonsenseString 」 時，它會讓終止錯誤。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Catch block handles the error by running the statement list inside the block.</source>
          <target state="translated">Catch 區塊會執行陳述式清單，將區塊內部處理錯誤。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>USING MULTIPLE CATCH STATEMENTS</source>
          <target state="translated">使用多個 CATCH 陳述式</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A Try statement can have any number of Catch blocks.</source>
          <target state="translated">Try 陳述式可以有任意數目的 Catch 區塊。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script has a Try block that downloads MyFile.doc, and it contains two Catch blocks:</source>
          <target state="translated">例如，下列指令碼已下載 MyFile.doc，Try 區塊，其中包含兩個 Catch 區塊︰</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first Catch block handles errors of the System.Net.WebException and System.IO.IOException types.</source>
          <target state="translated">第一個 Catch 區塊會處理 System.Net.WebException 和 System.IO.IOException 類型的錯誤。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second Catch block does not specify an error type.</source>
          <target state="translated">第二個 Catch 區塊不指定錯誤類型。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second Catch block handles any other terminating errors that occur.</source>
          <target state="translated">第二個 Catch 區塊會處理任何其他終止所發生的錯誤。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Windows PowerShell matches error types by inheritance.</source>
          <target state="translated">Windows PowerShell 會符合錯誤型別所繼承。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">Catch 區塊會處理指定的.NET Framework 例外狀況類別或衍生自指定類別的任何類別的錯誤。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example contains a Catch block that catches a "Command Not Found" error:</source>
          <target state="translated">下列範例包含 Catch 區塊攔截 「 找不到命令 」 的錯誤︰</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The specified error type, CommandNotFoundException, inherits from the System.SystemException type.</source>
          <target state="translated">指定的錯誤類型，CommandNotFoundException，繼承自 System.SystemException 型別。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example also catches a Command Not Found error:</source>
          <target state="translated">下列範例也會攔截命令找不到的錯誤︰</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This Catch block handles the "Command Not Found" error and other errors that inherit from the SystemException type.</source>
          <target state="translated">這個 Catch 區塊會處理 「 找不到命令 」 的錯誤和繼承 SystemException 型別的其他錯誤。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you specify an error class and one of its derived classes, place the Catch block for the derived class before the Catch block for the general class.</source>
          <target state="translated">如果您指定的錯誤類別和其衍生類別的其中一個，將放在衍生類別的一般類別的 Catch 區塊之前的 Catch 區塊。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>FREEING RESOURCES BY USING FINALLY</source>
          <target state="translated">使用最後釋放資源</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To free resources used by a script, add a Finally block after the Try and Catch blocks.</source>
          <target state="translated">若要釋出指令碼使用的資源，加入 Finally 區塊之後 Try 和 Catch 區塊。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The Finally block statements run regardless of whether the Try block encounters a terminating error.</source>
          <target state="translated">Finally 區塊的 Try 區塊是否發生終止錯誤，不論執行的陳述式。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Windows PowerShell runs the Finally block before the script terminates or before the current block goes out of scope.</source>
          <target state="translated">Windows PowerShell 會執行 Finally 區塊中的指令碼即終止或目前區塊會超出範圍之前。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A Finally block runs even if you use CTRL<ph id="ph1">\+</ph>C to stop the script.</source>
          <target state="translated">Finally 區塊執行，即使您使用 CTRL<ph id="ph1">\+</ph>C 來停止指令碼。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A Finally block also runs if an Exit keyword stops the script from within a Catch block.</source>
          <target state="translated">Finally 區塊也執行 Exit 關鍵字停止在 Catch 區塊內的指令碼。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另請參閱</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>