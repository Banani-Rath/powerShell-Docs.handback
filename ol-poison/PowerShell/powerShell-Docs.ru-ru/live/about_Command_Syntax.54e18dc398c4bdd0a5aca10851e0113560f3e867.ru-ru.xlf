<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e620fef5b62433070bfd04bc495056e564de41e9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Command_Syntax.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb14a85e5d6bab6ede692b8def05bad9317ec96c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c96b9be7b0637652b65b752c362b6c889bd55ba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Command_Syntax</source>
          <target state="translated">about_Command_Syntax</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell, командлет</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Command Syntax</source>
          <target state="translated">О синтаксисе команды</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Command_Syntax</source>
          <target state="translated">about_Command_Syntax</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Command_Syntax</source>
          <target state="translated">about_Command_Syntax</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">КРАТКОЕ ОПИСАНИЕ</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the syntax diagrams that are used in Windows PowerShell.</source>
          <target state="translated">Описывает синтаксические схемы, которые используются в Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">ПОДРОБНОЕ ОПИСАНИЕ</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Get-Help and Get-Command cmdlets display syntax diagrams to help you construct commands correctly.</source>
          <target state="translated">Командлеты Get-Help и Get-Command отображения синтаксис схемы, которые помогут вам правильно создания команд.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic explains how to interpret the syntax diagrams.</source>
          <target state="translated">В этом разделе объясняется, как интерпретировать синтаксисе.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Syntax Diagrams Each paragraph in a command syntax diagram represents a valid form of the command.</source>
          <target state="translated">Синтаксис схемы каждого абзаца в синтаксисе команд Диаграмма представляет допустимое доказательство своей команды.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To construct a command, follow the syntax diagram from left to right.</source>
          <target state="translated">Чтобы создать команду, выполните синтаксическая диаграмма слева направо.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Select from among the optional parameters and provide values for the placeholders.</source>
          <target state="translated">Выберите один из необязательных параметров и укажите значения заполнителей.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the following notation for syntax diagrams.</source>
          <target state="translated">Windows PowerShell используется следующая запись для синтаксисе.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>&lt;command-name&gt; -<ph id="ph1">&lt;Required Parameter Name&gt;</ph> <ph id="ph2">&lt;Required Parameter Value&gt;</ph> [-<ph id="ph3">&lt;Optional Parameter Name&gt;</ph> <ph id="ph4">&lt;Optional Parameter Value&gt;</ph>] [-<ph id="ph5">&lt;Optional Switch Parameters&gt;</ph>] [-<ph id="ph6">&lt;Optional Parameter Name&gt;</ph>]</source>
          <target state="translated">&lt; имя команды &gt; -<ph id="ph1">&lt;Required Parameter Name&gt;</ph> <ph id="ph2">&lt;Required Parameter Value&gt;</ph> [-<ph id="ph3">&lt;Optional Parameter Name&gt;</ph> <ph id="ph4">&lt;Optional Parameter Value&gt;</ph>] [-<ph id="ph5">&lt;Optional Switch Parameters&gt;</ph>] [-<ph id="ph6">&lt;Optional Parameter Name&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following is the syntax for the New-Alias cmdlet.</source>
          <target state="translated">Ниже приведен синтаксис для командлета New-Alias.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>New-Alias [-Name] <ph id="ph1">&lt;string&gt;</ph> [-Value] <ph id="ph2">&lt;string&gt;</ph> [-Description <ph id="ph3">&lt;string&gt;</ph>] [-Force] [-Option {None | ReadOnly | Constant | Private | AllScope}] [-PassThru] [-Scope <ph id="ph4">&lt;string&gt;</ph>] [-Confirm] [-WhatIf] [<ph id="ph5">&lt;CommonParameters&gt;</ph>]</source>
          <target state="translated">Новый псевдоним [-имя] <ph id="ph1">&lt;string&gt;</ph> [-значение] <ph id="ph2">&lt;string&gt;</ph> [-Описание <ph id="ph3">&lt;string&gt;</ph>] [-Force] [-параметр {Нет | Только для чтения | Константа | Закрытый | AllScope}] [-PassThru] [-область <ph id="ph4">&lt;string&gt;</ph>] [-подтверждение] [-WhatIf] [<ph id="ph5">&lt;CommonParameters&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The syntax is capitalized for readability, but Windows PowerShell is case-insensitive.</source>
          <target state="translated">Для удобства чтения капитализируются синтаксис, но Windows PowerShell не учитывается регистр.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The syntax diagram has the following elements.</source>
          <target state="translated">Синтаксическая диаграмма содержит следующие элементы.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Command name</source>
          <target state="translated">Имя команды</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Commands always begin with a command name, such as New-Alias.</source>
          <target state="translated">Команды всегда начинаются с имени команды, например New-Alias.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Type the command name or its alias, such a "gcm" for Get-Command.</source>
          <target state="translated">Введите имя команды или его псевдоним, такой «gcm «Get-Command.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Параметры</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The parameters of a command are options that determine what the command does.</source>
          <target state="translated">Параметры команды являются параметры, которые определяют действия, выполняемые команды.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Some parameters take a "value," which is user input to the command.</source>
          <target state="translated">Некоторые параметры занять «значение» входного пользователя в команду.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, the Get-Help command has a Name parameter that lets you specify the name of the topic for which help is displayed.</source>
          <target state="translated">Например команда Get-Help имеет параметр Name, который позволяет указать имя раздела, для которого отображается справка.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The topic name is the value of the Name parameter.</source>
          <target state="translated">Имя раздела значение параметра Name.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In a Windows PowerShell command, parameter names always begin with a hyphen.</source>
          <target state="translated">Имена параметров в команде Windows PowerShell всегда начинаются с дефисом.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The hyphen tells Windows PowerShell that the item in the command is a parameter name.</source>
          <target state="translated">Дефис сообщает Windows PowerShell, что элемент в команде является именем параметра.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, to use the Name parameter of New-Alias, you type the following:</source>
          <target state="translated">Например чтобы использовать параметр Name командлета New-Alias, введите следующее:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-Name</source>
          <target state="translated">-Name</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Parameters can be mandatory or optional.</source>
          <target state="translated">Параметры могут быть обязательные или необязательные.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In a syntax diagram, optional items are enclosed in brackets ([ ]).</source>
          <target state="translated">В диаграмме синтаксис необязательные элементы заключены в квадратные скобки ([]).</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about parameters, see about_Parameters.</source>
          <target state="translated">Дополнительные сведения о параметрах см. в разделе about_Parameters.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Parameter Values</source>
          <target state="translated">Значения параметров</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A parameter value is the input that the parameter takes.</source>
          <target state="translated">Значение параметра является ввода, который принимает параметр.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because Windows PowerShell is based on the Microsoft .NET Framework, parameter values are represented in the syntax diagram by their .NET type.</source>
          <target state="translated">Поскольку Windows PowerShell основана на Microsoft .NET Framework, значения параметров, представлены в диаграмме синтаксиса по типу .NET.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the Name parameter of Get-Help takes a String value, which is a text string, such as a single word or multiple words enclosed in quotation marks.</source>
          <target state="translated">Например параметр Name командлета Get-Help принимает строковое значение, которое представляет собой текстовую строку, такие как отдельное слово или несколько слов, заключенной в кавычки.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>[-Name]</source>
          <target state="translated">[-Имя]</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The .NET type of a parameter value is enclosed in angle brackets (&lt; &gt;) to indicate that it is placeholder for a value and not a literal that you type in a command.</source>
          <target state="translated">Тип .NET значение параметра заключено в угловые скобки (&lt;&gt;), чтобы указать, что это заполнитель для значения и не литерал, введите в командной.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To use the parameter, replace the .NET type placeholder with an object that has the specified .NET type.</source>
          <target state="translated">Для использования параметра, замените заполнитель типа .NET объект, имеющий указанный тип .NET.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, to use the Name parameter, type "-Name" followed by a string, such as the following:</source>
          <target state="translated">Например, чтобы использовать имя параметра, введите «-имя» и строки, как показано ниже:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>-Name MyAlias</source>
          <target state="translated">-MyAlias имя</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameters with no values</source>
          <target state="translated">Параметры без значений</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Some parameters do not accept input, so they do not have a parameter value.</source>
          <target state="translated">Некоторые параметры не принимают входные данные, поэтому они не имеют значение параметра.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Parameters without values are called "switch parameters" because they work like on/off switches.</source>
          <target state="translated">Параметров без значений называются «параметры-переключатели», поскольку они работают как выключатели.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You include them (on) or you omit them (off) from a command.</source>
          <target state="translated">Включении (on) или исключить их (off) из команды.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To use a switch parameter, just type the parameter name, preceded by a hyphen.</source>
          <target state="translated">Чтобы использовать параметр переключателя, просто введите имя параметра, перед переносом.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, to use the WhatIf parameter of the New-Alias cmdlet, type the following:</source>
          <target state="translated">Например чтобы использовать параметр WhatIf командлет New-Alias, введите:</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>-WhatIf</source>
          <target state="translated">-WhatIf</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parameter Sets</source>
          <target state="translated">Наборы параметров</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The parameters of a command are listed in parameter sets.</source>
          <target state="translated">Параметры команды перечислены в наборы параметров.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Parameter sets look like the paragraphs of a syntax diagram.</source>
          <target state="translated">Параметр задает, как будет выглядеть абзацев синтаксическая диаграмма.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The New-Alias cmdlet has one parameter set, but many cmdlets have multiple parameter sets.</source>
          <target state="translated">Командлет New-Alias имеет один набор параметров, но многие командлеты имеют несколько наборов параметров.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Some of the cmdlet parameters are unique to a parameter set, and others appear in multiple parameter sets.</source>
          <target state="translated">Некоторые параметры командлета уникальны для набор параметров, а другие представлены в несколько наборов параметров.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Each parameter set represents the format of a valid command.</source>
          <target state="translated">Каждый набор параметров представляет формат допустимую команду.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A parameter set includes only parameters that can be used together in a command.</source>
          <target state="translated">Набор параметров включает только те параметры, которые могут использоваться вместе в команде.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If parameters cannot be used in the same command, they appear in separate parameter sets.</source>
          <target state="translated">Если параметры не может использоваться в одной команде, они отображаются в различные наборы параметров.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the Get-Random cmdlet has the following parameter sets:</source>
          <target state="translated">Например командлет Get-Random имеет следующие наборы параметров:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Get-Random [[-Maximum] <ph id="ph1">&lt;Object&gt;</ph>] [-Minimum <ph id="ph2">&lt;Object&gt;</ph>] [-SetSeed <ph id="ph3">&lt;int&gt;</ph>] [<ph id="ph4">&lt;CommonParameters&gt;</ph>]</source>
          <target state="translated">Get-Random [[-максимальное] <ph id="ph1">&lt;Object&gt;</ph>] [-минимальное <ph id="ph2">&lt;Object&gt;</ph>] [-SetSeed <ph id="ph3">&lt;int&gt;</ph>] [<ph id="ph4">&lt;CommonParameters&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Get-Random [-InputObject] &lt;Object[]&gt; [-Count <ph id="ph1">&lt;int&gt;</ph>] [-SetSeed <ph id="ph2">&lt;int&gt;</ph>] [<ph id="ph3">&lt;CommonParameters&gt;</ph>]</source>
          <target state="translated">Get-Random [-InputObject] &lt; объекта [] &gt; [-число <ph id="ph1">&lt;int&gt;</ph>] [-SetSeed <ph id="ph2">&lt;int&gt;</ph>] [<ph id="ph3">&lt;CommonParameters&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The first parameter set, which returns a random number, has the Minimum and Maximum parameters.</source>
          <target state="translated">Первый набор параметров, который возвращает случайное число, имеет минимальные и максимальные параметры.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The second parameter set, which returns a randomly selected object from a set of objects, includes the InputObject and Count parameters.</source>
          <target state="translated">Второй набор параметров, возвращает случайно выбранный объект из набора объектов, включает параметры InputObject и Count.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Both parameter sets have the Set-Seed parameter and the common parameters.</source>
          <target state="translated">Задает оба параметра имеют параметр Set Seed и общие параметры.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>These parameter sets indicate that you can use the InputObject and Count parameters in the same command, but you cannot use the Maximum and Count parameters in the same command.</source>
          <target state="translated">Эти наборы параметров указывать параметры InputObject и количество можно использовать в одной команде, что максимальное и число параметров нельзя использовать в одной команде.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You indicate which parameter set you want to use by using the parameters in that parameter set.</source>
          <target state="translated">Вы указываете, какой набор параметров, которые вы хотите использовать с помощью параметров в том, что значение параметра.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, every cmdlet also has a default parameter set.</source>
          <target state="translated">Однако каждый командлет имеет также задать параметр по умолчанию.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default parameter set is used when you do not specify parameters that are unique to a parameter set.</source>
          <target state="translated">Набор параметров по умолчанию используется в том случае, если не указать параметры, которые являются уникальными для набор параметров.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, if you use Get-Random without parameters, Windows PowerShell assumes that you are using the Number parameter set and it returns a random number.</source>
          <target state="translated">Например, при использовании Get-Random без параметров, Windows PowerShell предполагается, что используется числовой параметр набор и возвращает случайное число.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In each parameter set, the parameters appear in position order.</source>
          <target state="translated">В каждый набор параметров параметры отображаются в порядке позиции.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The order of parameters in a command matters only when you omit the optional parameter names.</source>
          <target state="translated">Порядок параметров в команде имеет значение только в том случае, если опустить имена необязательных параметров.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When parameter names are omitted, Windows PowerShell assigns values to parameters by position and type.</source>
          <target state="translated">Если имена параметров опущены, Windows PowerShell назначает значения параметров по позиции и тип.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information about parameter position, see about_Parameters.</source>
          <target state="translated">Дополнительные сведения о позиции параметров в разделе about_Parameters.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Symbols in Syntax Diagrams The syntax diagram lists the command name, the command parameters, and the parameter values.</source>
          <target state="translated">Символы в синтаксисе схемы списки схема синтаксиса имя команды, параметры команды и значения параметров.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It also uses symbols to show how to construct a valid command.</source>
          <target state="translated">Он также использует символы для демонстрации способов создания допустимой команды.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The syntax diagrams use the following symbols:</source>
          <target state="translated">Синтаксисе использовать следующие символы:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>-- A hyphen (-) indicates a parameter name.</source>
          <target state="translated">--Дефис (-) указывает имя параметра.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In a command, type the hyphen immediately before the parameter name with no intervening spaces, as shown in the syntax diagram.</source>
          <target state="translated">В команде введите дефис непосредственно перед именем параметра без промежуточных пробелов, как показано на схеме синтаксиса.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, to use the Name parameter of New-Alias, type:</source>
          <target state="translated">Например чтобы использовать параметр Name командлета New-Alias, введите следующую команду:</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>-Name</source>
          <target state="translated">-Name</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-- Angle brackets (&lt;&gt;) indicate placeholder text.</source>
          <target state="translated">--Угловые скобки (&lt;&gt;) обозначают текст заполнителя.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You do not type the angle brackets or the placeholder text in a command.</source>
          <target state="translated">В команде не вводите угловых скобок и текста заполнителя.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Instead, you replace it with the item that it describes.</source>
          <target state="translated">Вместо этого вы замените его элемента, который она описывает.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Angle brackets are used to identify the .NET type of the value that a parameter takes.</source>
          <target state="translated">Угловые скобки используются для определения значения, который принимает параметр типа .NET.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, to use the Name parameter of the New-Alias cmdlet, you replace the <ph id="ph1">&lt;string&gt;</ph> with a string, which is a single word or a group of words that are enclosed in quotation marks.</source>
          <target state="translated">Например, чтобы использовать параметр Name командлета New-Alias, замените <ph id="ph1">&lt;string&gt;</ph> со строкой, которая является одно слово или сочетания слов, заключенные в кавычки.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>-- Brackets ([ ]) indicate optional items.</source>
          <target state="translated">--Квадратные скобки ([]) указывают необязательные элементы.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A parameter and its value can be optional, or the name of a required parameter can be optional.</source>
          <target state="translated">Параметр и его значение может быть необязательным или имя обязательного параметра может быть необязательным.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, the Description parameter of New-Alias and its value are enclosed in brackets because they are both optional.</source>
          <target state="translated">Например описание параметра New-Alias и его значение заключаются в квадратные скобки, поскольку оба необязательно.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>[-Description <ph id="ph1">&lt;string&gt;</ph>]</source>
          <target state="translated">[-Описание <ph id="ph1">&lt;string&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The brackets also indicate that the Name parameter value (<ph id="ph1">&lt;string&gt;</ph>) is required, but the parameter name, "Name," is optional.</source>
          <target state="translated">Скобки также показывают, что значение параметра имени (<ph id="ph1">&lt;string&gt;</ph>) — требуется, но имя параметра «Name», является необязательным.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>[-Name]</source>
          <target state="translated">[-Имя]</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-- A right and left bracket ([]) appended to a .NET type indicates that the parameter can accept one or multiple values of that type.</source>
          <target state="translated">--Левую и правую скобку ([]) добавляются в тип .NET показывает, что параметр может принимать одно или несколько значений этого типа.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Enter the values in a comma-separated list.</source>
          <target state="translated">Введите значения в список с разделителями-запятыми.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, the Name parameter of the New-Alias cmdlet takes only one string, but the Name parameter of Get-Process can take one or many strings.</source>
          <target state="translated">Например параметр Name командлета New-Alias принимает только одну строку, но параметр Name командлета Get-Process может занять один или несколько строк.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>New-Alias [-Name]</source>
          <target state="translated">Новый псевдоним [-имя]</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>New-Alias -Name MyAlias</source>
          <target state="translated">Новый Alias - имя MyAlias</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Get-Process [-Name] &lt;string[]&gt;</source>
          <target state="translated">Get-Process [-имя] &lt; string [] &gt;</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Get-Process -Name Explorer, Winlogon, Services</source>
          <target state="translated">Get-Process - имя службы Winlogon, Explorer</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>-- Braces ({}) indicate an "enumeration," which is a set of valid values for a parameter.</source>
          <target state="translated">--Фигурные скобки ({}) указывают» перечисления,» — это набор допустимых значений для параметра.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The values in the braces are separated by vertical bars ( | ).</source>
          <target state="translated">Значения в фигурные скобки разделяются вертикальной чертой (|).</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>These bars indicate an "exclusive or" choice, meaning that you can choose only one value from the set of values that are listed inside the braces.</source>
          <target state="translated">Эти полосы указывают» монопольного или «выбор, это означает, что можно выбрать только одно значение из набора значений, которые указаны внутри фигурных скобок.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, the syntax for the New-Alias cmdlet includes the following value enumeration for the Option parameter:</source>
          <target state="translated">Например синтаксис командлета New-Alias включает следующие значения перечисления параметр:</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>-Option {None | ReadOnly | Constant | Private | AllScope}</source>
          <target state="translated">-Параметр {Нет | Только для чтения | Константа | Закрытый | AllScope}</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The braces and vertical bars indicate that you can choose any one of the listed values for the Option parameter, such as ReadOnly or AllScope.</source>
          <target state="translated">Фигурные скобки и вертикальные полосы указывают, что можно выбрать один из перечисленных значений параметра параметр, например ReadOnly или AllScope.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>-Option ReadOnly</source>
          <target state="translated">-ReadOnly параметр</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Optional Items Brackets ([]) surround optional items.</source>
          <target state="translated">Необязательные элементы квадратные скобки ([]) вокруг необязательные элементы.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, in the New-Alias cmdlet syntax description, the Scope parameter is optional.</source>
          <target state="translated">Например в описании синтаксиса командлет New-Alias параметр области является необязательным.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This is indicated in the syntax by the brackets around the parameter name and type:</source>
          <target state="translated">Это указано в синтаксисе заключаются в квадратные скобки имя параметра и тип:</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>[-Scope <ph id="ph1">&lt;string&gt;</ph>]</source>
          <target state="translated">[-Область <ph id="ph1">&lt;string&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Both the following examples are correct uses of the New-Alias cmdlet:</source>
          <target state="translated">Следующие примеры являются правильно использует командлет New-Alias:</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>New-Alias -Name utd -Value Update-TypeData New-Alias -Name utd -Value Update-TypeData -Scope global</source>
          <target state="translated">New-Alias - utd имя-значение Update-TypeData New-Alias-utd имя-значение Update-TypeData-глобальной области видимости.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A parameter name can be optional even if the value for that parameter is required.</source>
          <target state="translated">Имя параметра может быть необязательный, даже если значение для этого параметра является обязательным.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This is indicated in the syntax by the brackets around the parameter name but not the parameter type, as in this example from the New-Alias cmdlet:</source>
          <target state="translated">Это указано в синтаксисе заключаются в квадратные скобки имя параметра, но не тип параметра, как в следующем примере из командлета New-Alias:</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>[-Name] <ph id="ph1">&lt;string&gt;</ph> [-Value]</source>
          <target state="translated">[-Имя] <ph id="ph1">&lt;string&gt;</ph> [-Значение]</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following  commands correctly use the New-Alias cmdlet.</source>
          <target state="translated">Следующие команды правильно использовать командлет New-Alias.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The commands produce the same result.</source>
          <target state="translated">Команды дают одинаковый результат.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>New-Alias -Name utd -Value Update-TypeData New-Alias -Name utd Update-TypeData New-Alias utd -Value Update-TypeData New-Alias utd Update-TypeData</source>
          <target state="translated">New-Alias - utd имя-значение Update-TypeData New-Alias-utd Update-TypeData New-Alias utd имя-значение Update-TypeData New-Alias utd Update-TypeData</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If the parameter name is not included in the statement as typed, Windows PowerShell tries to use the position of the arguments to assign the values to parameters.</source>
          <target state="translated">Если имя параметра не включен в инструкцию как типизированные, Windows PowerShell пытается использовать положение аргументы для присвоения значений параметров.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following example is not complete:</source>
          <target state="translated">Следующий пример не завершена:</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>New-Alias utd</source>
          <target state="translated">Utd новый псевдоним</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This cmdlet requires values for both the Name and Value parameters.</source>
          <target state="translated">Этот командлет требует значения для параметров имя и значение.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In syntax examples, brackets are also used in naming and casting to .NET Framework types.</source>
          <target state="translated">В примерах синтаксиса в именования и приведения в типы .NET Framework используются скобки.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In this context, brackets do not indicate an element is optional.</source>
          <target state="translated">В этом контексте скобки означает, что элемент является необязательным.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>KEYWORDS</source>
          <target state="translated">КЛЮЧЕВЫЕ СЛОВА</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>about_Symbols about_Punctuation about_Help_Syntax</source>
          <target state="translated">about_Symbols about_Punctuation about_Help_Syntax</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">СМ. ТАКЖЕ</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>about_Parameters Get-Command Get-Help</source>
          <target state="translated">about_Parameters Get-Help Get-Command</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>