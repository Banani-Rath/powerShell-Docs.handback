<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b8e579930c6ff20a32be902992a0774b5ebfe89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c28d666461edba01bcdd7b7831302554d8583c6d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cde7cb1dca8bcc02b87d8648daa30265095a6c75</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Functions</source>
          <target state="translated">関数について</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Functions</source>
          <target state="translated">about_Functions</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to create and use functions in Windows PowerShell.</source>
          <target state="translated">作成して、Windows PowerShell で関数を使用する方法について説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A function is a list of Windows PowerShell statements that has a name that you assign.</source>
          <target state="translated">関数に割り当てる名前を持つ Windows PowerShell のステートメントの一覧を示します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you run a function, you type the function name.</source>
          <target state="translated">関数を実行するときは、関数名を入力します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The statements in the list run as if you had typed them at the command prompt.</source>
          <target state="translated">リスト内のステートメントでは、コマンド プロンプトで型指定した場合を実行します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Functions can be as simple as:</source>
          <target state="translated">関数は同じくらい簡単になります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>function Get-PowerShellProcess {Get-Process PowerShell}</source>
          <target state="translated">関数 Get PowerShellProcess {Get-process PowerShell}</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>or as complex as a cmdlet or an application program.</source>
          <target state="translated">または、コマンドレット、またはアプリケーション プログラムのように複雑です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Like cmdlets, functions can have parameters.</source>
          <target state="translated">パラメーターのコマンドレットのように付けることができます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The parameters can be named, positional, switch, or dynamic parameters.</source>
          <target state="translated">パラメーターには、名前付き、位置指定引数、スイッチ、または動的パラメーターを指定できます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Function parameters can be read from the command line or from the pipeline.</source>
          <target state="translated">関数のパラメーターは、コマンドラインから、または、パイプラインから読み取ることができます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Functions can return values that can be displayed, assigned to variables, or passed to other functions or cmdlets.</source>
          <target state="translated">関数には、他の関数またはコマンドレット表示、変数に割り当てられているまたは渡されたできる値が返されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The function's statement list can contain different types of statement lists with the keywords Begin, Process, and End.</source>
          <target state="translated">ステートメントの関数のリストには、Begin、Process、および最後のキーワードと、ステートメント リストの種類を含めることができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These statement lists handle input from the pipeline differently.</source>
          <target state="translated">これらのステートメント リストが異なる方法で、パイプラインからの入力を処理します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A filter is a special kind of function that uses the Filter keyword.</source>
          <target state="translated">フィルターは、特別な種類のフィルター キーワードを使用する関数です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Functions can also act like cmdlets.</source>
          <target state="translated">関数は、コマンドレットとほぼ同じも操作を実行できます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can create a function that works just like a cmdlet without using C# programming.</source>
          <target state="translated">C# でプログラミングを使用することがなく、コマンドレットと同じように動作する関数を作成することができます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see about_Functions_Advanced (http://go.microsoft.com/fwlink/?LinkID=144511).</source>
          <target state="translated">詳細については、about_Functions_Advanced (http://go.microsoft.com/fwlink/?LinkID=144511) を参照してください。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Syntax The following is the syntax for a function:</source>
          <target state="translated">次の構文は、関数の構文を示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] { param([type]$parameter1 [,[type]$parameter2])</source>
          <target state="translated">関数 [&lt; スコープ: &gt;]<ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] {param ([type] $parameter1 [, [type] $ パラメーター 2])</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>dynamicparam {<ph id="ph1">&lt;statement list&gt;</ph>}</source>
          <target state="translated">dynamicparam {<ph id="ph1">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>begin {<ph id="ph1">&lt;statement list&gt;</ph>} process {<ph id="ph2">&lt;statement list&gt;</ph>} end {<ph id="ph3">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">開始 {<ph id="ph1">&lt;statement list&gt;</ph>} プロセス {<ph id="ph2">&lt;statement list&gt;</ph>} 終了 {<ph id="ph3">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A function includes the following items:</source>
          <target state="translated">関数には、次の項目が含まれています。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A Function keyword</source>
          <target state="translated">Function キーワード</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A scope (optional)</source>
          <target state="translated">(省略可能) のスコープ</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A name that you select</source>
          <target state="translated">選択した名</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Any number of named parameters (optional)</source>
          <target state="translated">(省略可能) 名前付きパラメーターの任意の数</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>One or more Windows PowerShell commands enclosed in braces ({})</source>
          <target state="translated">中かっこ ({}) で囲まれている 1 つまたは複数の Windows PowerShell コマンド</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about the Dynamicparam keyword and dynamic parameters in functions, see about_Functions_Advanced_Parameters.</source>
          <target state="translated">Dynamicparam キーワードおよび機能で動的パラメーターの詳細については、指示を参照してください。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Simple Functions Functions do not have to be complicated to be useful.</source>
          <target state="translated">単純な関数の関数は、役に立つ作業が複雑にありません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The simplest functions have the following format:</source>
          <target state="translated">最も単純な関数では、次の形式があります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>function &lt;function-name&gt; {statements}</source>
          <target state="translated">関数 &lt; 関数名 &gt; {ステートメント}</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, the following function starts Windows PowerShell with the Run as Administrator option.</source>
          <target state="translated">たとえば、次の関数は、[管理者として実行に Windows PowerShell を起動します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>function Start-PSAdmin {Start-Process PowerShell -Verb RunAs}</source>
          <target state="translated">関数の開始 PSAdmin {Start-process PowerShell の動詞 RunAs}</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To use the function, type: Start-PSAdmin</source>
          <target state="translated">関数を使用する入力: 開始 PSAdmin</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To add statements to the function, use a semi-colon (;) to separate the statements, or type each statement on a separate line.</source>
          <target state="translated">関数にステートメントを追加するには、ステートメントをセミコロン (;) を使用してか、別々 の行に各ステートメントを入力します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example, the following function finds all .jpg files in the current user's directories that were changed after the start date.</source>
          <target state="translated">たとえば、次の関数は、開始日後に変更した現在のユーザーのディレクトリにすべての .jpg ファイルを検索します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>function Get-NewPix { $start = Get-Date -Month 1 -Day 1 -Year 2010 $allpix = Get-ChildItem -Path $env:UserProfile<ph id="ph1">\*</ph>.jpg -Recurse $allpix | where {$_.LastWriteTime -gt $Start} }</source>
          <target state="translated">Get NewPix 関数 {$start = Get-date-月 - 1 日 1 - 年 2010 $allpix = Get-childitem-パス $env:path: UserProfile<ph id="ph1">\*</ph>.jpg-$allpix 再帰的に検索 |、{$_ です。LastWriteTime-gt $Start}}</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can create a toolbox of useful small functions.</source>
          <target state="translated">便利な小さな関数のツールボックスを作成することができます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add these functions to your Windows PowerShell profile, as described in about_Profiles and later in this topic.</source>
          <target state="translated">About_Profiles ではこのトピックの後半の説明に従って、Windows PowerShell プロファイルにこれらの関数を追加します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Function Names You can assign any name to a function, but functions that you share with others should follow the naming rules that have been established for all Windows PowerShell commands.</source>
          <target state="translated">任意の名前を関数の場合、関数名を割り当てることができますが、他のユーザーと共有する機能がすべての Windows PowerShell コマンド用に設定されている名前付け規則に従う必要があります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Functions names should consist of a verb-noun pair in which the verb identifies the action that the function performs and the noun identifies the item on which the cmdlet performs its action.</source>
          <target state="translated">関数名は必要があります動詞は、関数を実行するアクションを識別し、名詞コマンドレットがそのアクションを実行する項目を識別する、動詞と名詞を組み合わせたペアで構成されます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Functions should use the standard verbs that have been approved for all Windows PowerShell commands.</source>
          <target state="translated">関数は、すべての Windows PowerShell コマンドの承認されている標準の動詞を使用する必要があります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>These verbs help us to keep our command names simple, consistent, and easy for users to understand.</source>
          <target state="translated">これらの動詞を使用して、単純な一貫性、およびユーザーにわかりやすい、コマンド名に保つ役立てられます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information about the standard Windows PowerShell verbs, see "Cmdlet Verbs" on MSDN at http://go.microsoft.com/fwlink/?LinkID=160773.</source>
          <target state="translated">標準の Windows PowerShell の動詞の詳細についてには、MSDN の「コマンドレット動詞」を参照 http://go.microsoft.com/fwlink/?LinkID=160773 にします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Functions with Parameters You can use parameters with functions, including named parameters, positional parameters, switch parameters, and dynamic parameters.</source>
          <target state="translated">パラメーターを持つ関数は、名前付きパラメーター、位置指定パラメーター、スイッチ パラメーターでは、動的パラメーターなどの関数でパラメーターを使用できます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about dynamic parameters in functions, see about_Functions_Advanced_Parameters (http://go.microsoft.com/fwlink/?LinkID=135173).</source>
          <target state="translated">関数で動的パラメーターの詳細については、指示 (http://go.microsoft.com/fwlink/?LinkID=135173) を参照してください。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Named Parameters You can define any number of named parameters.</source>
          <target state="translated">任意の数の名前付きパラメーターの名前付きパラメーターを定義できます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can include a default value for named parameters, as described later in this topic.</source>
          <target state="translated">このトピックで後述するように、名前付きパラメーターの既定値を含めることができます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can define parameters inside the braces using the Param keyword, as shown in the following sample syntax:</source>
          <target state="translated">次の構文の例のように、Param キーワードを使用して中かっこ内のパラメーターを定義できます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { param ([type]$parameter1[,[type]$parameter2]) <ph id="ph2">&lt;statement list&gt;</ph> }</source>
          <target state="translated">関数 <ph id="ph1">&lt;name&gt;</ph> {param ([type]$parameter1[,[type]$parameter2]) <ph id="ph2">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can also define parameters outside the braces without the Param keyword, as shown in the following sample syntax:</source>
          <target state="translated">以下の構文の例のように Param キーワードを使用せず、中かっこの外側のパラメーターを定義することもできます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] { <ph id="ph2">&lt;statement list&gt;</ph> }</source>
          <target state="translated">関数 <ph id="ph1">&lt;name&gt;</ph> [([type]$parameter1[,[type]$parameter2])] { <ph id="ph2">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>There is no difference between these two methods.</source>
          <target state="translated">これら 2 つのメソッドの違いはありません。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Use the method that you prefer.</source>
          <target state="translated">使用するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When you run the function, the value you supply for a parameter is assigned to a variable that contains the parameter name.</source>
          <target state="translated">この関数を実行すると、パラメーター名を含む変数をパラメーターで指定した値が割り当てられます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The value of that variable can be used in the function.</source>
          <target state="translated">その変数の値は、関数で使用できます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example is a function called Get-SmallFiles.</source>
          <target state="translated">次の例は、Get SmallFiles と呼ばれる機能です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This function has a $size parameter.</source>
          <target state="translated">この関数では、$size パラメーターがあります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The function displays all the files that are smaller than the value of the $size parameter, and it excludes directories:</source>
          <target state="translated">関数が $size パラメーターの値に満たないすべてのファイルを表示し、ディレクトリは含まれません。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>function Get-SmallFiles { param ($size) Get-ChildItem c:\ | where {$.Length -lt $Size -and !$.PSIsContainer} }</source>
          <target state="translated">関数の Get SmallFiles {param ($size) Get-childitem c:\ |、{$ です。長さ lt $Size-、! $ です。PSIsContainer}}</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the function, you can use the $size variable, which is the name defined for the parameter.</source>
          <target state="translated">関数のパラメーターの定義済みの名前になっている $size 変数を使用できます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To use this function, type the following command:</source>
          <target state="translated">この関数を使用するには、次のコマンドを入力します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; function Get-SmallFiles –Size 50</source>
          <target state="translated">C:\PS &gt; 関数 Get SmallFiles – サイズの 50</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can also enter a value for a named parameter without the parameter name.</source>
          <target state="translated">パラメーター名を指定せずに名前付きパラメーターの値を入力することもできます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, the following command gives the same result as a command that names the Size parameter:</source>
          <target state="translated">例えば、次のコマンドでは、サイズのパラメーターの名前を示すコマンドと同じ結果が得られます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; function Get-SmallFiles 50</source>
          <target state="translated">C:\PS &gt; Get SmallFiles 50 の機能</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To define a default value for a parameter, type an equal sign and the value after the parameter name, as shown in the following variation of the Get-SmallFiles example:</source>
          <target state="translated">パラメーターの既定値を定義するには等号と値をパラメーター名の後に示すように入力次の例では、Get SmallFiles のバリエーション。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>function Get-SmallFiles ($size = 100) { Get-ChildItem c:\ | where {$.Length -lt $Size -and !$.PSIsContainer} }</source>
          <target state="translated">Get SmallFiles の機能 ($size = 100) {Get-childitem c:\ |、{$ です。長さ lt $Size-、! $ です。PSIsContainer}}</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you type "Get-SmallFiles" without a value, the function assigns 100 to $size.</source>
          <target state="translated">値のない"Get SmallFiles"を入力した場合、関数は、$size に 100 を割り当てます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you provide a value, the function uses that value.</source>
          <target state="translated">値を指定する場合は、その値を使用します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Optionally, you can provide a brief help string that describes the default value of your parameter, by adding the PSDefaultValue attribute to the description of your parameter, and specifying the Help property of PSDefaultValue.</source>
          <target state="translated">必要に応じて、PSDefaultValue 属性をパラメーターの説明に追加して、PSDefaultValue の Help プロパティを指定することによって、パラメーターの既定値を記述する簡単なヘルプ文字列を提供することができます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To provide a help string that describes the default value (100) of the Size parameter in the Get-SmallFiles function, add the PSDefaultValue attribute as shown in the following example.</source>
          <target state="translated">Get SmallFiles 関数でサイズのパラメーターの既定値 (100) を記述するヘルプの文字列を提供するには、次の例のように、PSDefaultValue 属性を追加します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>function Get-SmallFiles { param ( [PSDefaultValue(Help = '100')] $size = 100</source>
          <target state="translated">関数の Get SmallFiles {param ([PSDefaultValue (ヘルプ = '100')] $size = 100</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For more information about the PSDefaultValue attribute class, see PSDefaultValue Attribute Members on MSDN.</source>
          <target state="translated">PSDefaultValue 属性クラスの詳細については、MSDN の PSDefaultValue 属性メンバーを参照してください。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>(http://msdn.microsoft.com/library/windows/desktop/system.management.automation.psdefaultvalueattribute_members(v=vs.85).aspx</source>
          <target state="translated">(http://msdn.microsoft.com/library/windows/desktop/system.management.automation.psdefaultvalueattribute_members (v=vs.85).aspx</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Positional Parameters A positional parameter is a parameter without a parameter name.</source>
          <target state="translated">位置指定パラメーター、位置指定パラメーターは、パラメーター名のないパラメーターです。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the parameter value order to associate each parameter value with a parameter in the function.</source>
          <target state="translated">Windows PowerShell では、パラメーター値の順序を使用して、関数のパラメーターで各パラメーターの値を関連付けます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you use positional parameters, type one or more values after the function name.</source>
          <target state="translated">位置指定パラメーターを使用する場合は、関数名の後に 1 つまたは複数の値を入力します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Positional parameter values are assigned to the $args array variable.</source>
          <target state="translated">位置指定パラメーターの値は、$args 配列変数に割り当てられます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The value that follows the function name is assigned to the first position in the $args array, $args[0].</source>
          <target state="translated">関数名に続く値には、$args [0]、$args 配列の最初の位置が割り当てられます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following Get-Extension function adds the .txt file name extension to a file name that you supply:</source>
          <target state="translated">次の Get 拡張関数では、指定した名前のファイルに .txt ファイル名拡張子を追加します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>function Get-Extension { $name = $args[0] + ".txt" $name }</source>
          <target state="translated">関数の拡張機能の Get {$name = $args [0] +".txt"$name}</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Get-Extension myTextFile myTextFile.txt</source>
          <target state="translated">C:\PS &gt; Get 拡張子 myTextFile myTextFile.txt</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Switch Parameters A switch is a parameter that does not require a value.</source>
          <target state="translated">スイッチ パラメーター、スイッチは、値を必要としないパラメーターです。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Instead, you type the function name followed by the name of the switch parameter.</source>
          <target state="translated">代わりに、関数名の後にスイッチ パラメーターの名前を入力します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To define a switch parameter, specify the type [switch] before the parameter name, as shown in the following example:</source>
          <target state="translated">スイッチ パラメーターを定義するには、次の例に示すようにパラメーター名の前に [switch] 種類を指定します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>function Switch-Item { param ([switch]$on) if ($on) { "Switch on" } else { "Switch off" } }</source>
          <target state="translated">スイッチ項目を機能 {param ([スイッチ] $に) 場合は ($に) {「スイッチ」} else {「オフ」}}</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you type the On switch parameter after the function name, the function displays "Switch on".</source>
          <target state="translated">関数名の後にスイッチ パラメーターを入力すると、関数が表示されます「オン」です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Without the switch parameter, it displays "Switch off".</source>
          <target state="translated">スイッチ パラメーターがない場合、「オフ」が表示されます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item -on Switch on</source>
          <target state="translated">C:\PS &gt; スイッチ項目-のスイッチを</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item Switch off</source>
          <target state="translated">C:\PS &gt; をオフの切り替えアイテム スイッチ</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can also assign a Boolean value to a switch when you run the function, as shown in the following example:</source>
          <target state="translated">割り当てることもできますブール値をスイッチに、関数を実行すると次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item -on:$true Switch on</source>
          <target state="translated">C:\PS &gt; スイッチ項目の上: $true スイッチ</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Switch-Item -on:$false Switch off</source>
          <target state="translated">C:\PS &gt; 切り替えアイテムの上: $false をオフに</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Using Splatting to Represent Command Parameters You can use splatting to represent the parameters of a command.</source>
          <target state="translated">スプラッティングを表すコマンド パラメーターを使用すると、コマンドのパラメーターを表すスプラッティングが使用することができます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This feature is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">この機能は、Windows PowerShell 3.0 で導入されました。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Use this technique in functions that call commands in the session.</source>
          <target state="translated">セッションでコマンドを呼び出す関数では、この手法を使用します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You do not need to declare or enumerate the command parameters, or change the function when command parameters change.</source>
          <target state="translated">宣言またはコマンドのパラメーターを列挙する必要があります。 またはコマンドのパラメーターを変更するときに関数を変更しません。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following sample function calls the Get-Command cmdlet.</source>
          <target state="translated">次の関数のサンプルでは、Get-command コマンドレットを呼び出します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The command uses @Args to represent the parameters of Get-Command.</source>
          <target state="translated">コマンドでは、@Args を使用して、Get コマンドのパラメーターを表します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>function Get-MyCommand { Get-Command @Args }</source>
          <target state="translated">関数 Get MyCommand {Get-command @Args}</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can use all of the parameters of Get-Command when you call the Get-MyCommand function.</source>
          <target state="translated">Get MyCommand 関数を呼び出すとき、すべての Get コマンドのパラメーターを使用することができます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The parameters and parameter values are passed to the command using @Args.</source>
          <target state="translated">パラメーターとパラメーター値は、@Args を使用して、コマンドに渡されます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>PS C:&gt;Get-MyCommand -Name Get-ChildItem CommandType     Name                ModuleName</source>
          <target state="translated">PS c: &gt; Get MyCommand-Get-childitem CommandType 名 ModuleName という名前を</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Cmdlet          Get-ChildItem       Microsoft.PowerShell.Management</source>
          <target state="translated">コマンドレット、Get-childitem Microsoft.PowerShell.Management</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The @Args feature uses the $Args automatic parameter, which represents undeclared cmdlet parameters and values from remaining arguments.</source>
          <target state="translated">@Args 機能は、残りの引数を宣言されていないコマンドレットのパラメーターと値を表す $Args 自動パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information about splatting, see about_Splatting (http://go.microsoft.com/fwlink/?LinkId=262720).</source>
          <target state="translated">詳細についてはスプラッティング、about_Splatting (http://go.microsoft.com/fwlink/?LinkId=262720) を参照してください。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Piping Objects to Functions Any function can take input from the pipeline.</source>
          <target state="translated">パイプ オブジェクトの関数を任意の関数は、パイプラインから入力にかかります。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can control how a function processes input from the pipeline using Begin, Process, and End keywords.</source>
          <target state="translated">関数が Begin、Process、および最後のキーワードを使用して、パイプラインからの入力を処理する方法を制御することができます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following sample syntax shows the three keywords:</source>
          <target state="translated">次のサンプル構文は、次の 3 つのキーワードを示しています。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { begin {<ph id="ph2">&lt;statement list&gt;</ph>} process {<ph id="ph3">&lt;statement list&gt;</ph>} end {<ph id="ph4">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">関数 <ph id="ph1">&lt;name&gt;</ph> {開始 {<ph id="ph2">&lt;statement list&gt;</ph>} プロセス {<ph id="ph3">&lt;statement list&gt;</ph>} 終了 {<ph id="ph4">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The Begin statement list runs one time only, at the beginning of the function.</source>
          <target state="translated">Begin ステートメントの一覧は、関数の先頭に 1 回のみを実行します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The Process statement list runs one time for each object in the pipeline.</source>
          <target state="translated">プロセスのステートメントの一覧は、パイプラインにオブジェクトごとに 1 回を実行します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>While the Process block is running, each pipeline object is assigned to the $_ automatic variable, one pipeline object at a time.</source>
          <target state="translated">Process ブロックの実行中に、各パイプライン オブジェクトは、$_ 自動変数、一度に 1 つのパイプライン オブジェクトに割り当てられます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>After the function receives all the objects in the pipeline, the End statement list runs one time.</source>
          <target state="translated">関数が、パイプラインのすべてのオブジェクトを受信すると、最後のステートメントの一覧は 1 回実行されます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If no Begin, Process, or End keywords are used, all the statements are treated like an End statement list.</source>
          <target state="translated">開始、プロセス、または最後のキーワードが使用されていない場合のすべてのステートメントは End ステートメント リストのように扱われます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following function uses the Process keyword.</source>
          <target state="translated">次の関数では、プロセスのキーワードを使用します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The function displays examples from the pipeline:</source>
          <target state="translated">関数には、パイプラインから例が表示されます。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>function Get-Pipeline { process {"The value is: $_"} }</source>
          <target state="translated">Get パイプラインを機能 {プロセス {"値: $_"}}</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To demonstrate this function, enter an list of numbers separated by commas, as shown in the following example:</source>
          <target state="translated">この関数を示すためには、次の例に示すように、コンマで区切られた数値のリストを入力します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1,2,4 | Get-Pipeline The value is: 1 The value is: 2 The value is: 4</source>
          <target state="translated">C:\PS &gt; 1,2,4 |Get パイプライン値: 値が 1: 値が 2: 4</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>When you use a function in a pipeline, the objects piped to the function are assigned to the $input automatic variable.</source>
          <target state="translated">パイプラインで関数を使用する場合、関数に渡されたオブジェクトは、$input 自動変数に割り当てられます。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The function runs statements with the Begin keyword before any objects come from the pipeline.</source>
          <target state="translated">関数は、任意のオブジェクトをパイプラインから復元する前に、Begin キーワードを使用してステートメントを実行します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The function runs statements with the End keyword after all the objects have been received from the pipeline.</source>
          <target state="translated">関数では、すべてのオブジェクトがパイプラインから受信した後、End キーワードでステートメントが実行されます。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The following example shows the $input automatic variable with Begin and End keywords.</source>
          <target state="translated">次の例では、Begin と End キーワードと $input 自動変数を示します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>function Get-PipelineBeginEnd { begin {"Begin: The input is $input"} end {"End:   The input is $input" } }</source>
          <target state="translated">Get PipelineBeginEnd 機能 {開始 {"Begin: 入力が $input"} 終了 {"終了: 入力が $input"}}</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If this function is run by using the pipeline, it displays the following results:</source>
          <target state="translated">この関数は、パイプラインを使用して実行される場合は、次の結果が表示されます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1,2,4 | Get-PipelineBeginEnd Begin: The input is End:   The input is 1 2 4</source>
          <target state="translated">C:\PS &gt; 1,2,4 |Get PipelineBeginEnd 開始: 入力が終了します入力が 1 2 4。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>When the Begin statement runs, the function does not have the input from the pipeline.</source>
          <target state="translated">Begin ステートメントを実行すると、関数には、パイプラインからの入力はありません。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The End statement runs after the function has the values.</source>
          <target state="translated">End ステートメントは、関数の値には、後に実行されます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If the function has a Process keyword, the function reads the data in $input.</source>
          <target state="translated">関数では、Process キーワードには、この関数は $input 内のデータを読み取っています。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following example has a Process statement list:</source>
          <target state="translated">次の例では、プロセスのステートメントの一覧があります。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>function Get-PipelineInput { process {"Processing:  $_ " } end {"End:   The input is: $input" } }</source>
          <target state="translated">Get PipelineInput 機能 {プロセス {"の処理: $_"} 終了 {"終了: 入力が: $input"}}</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In this example, each object that is piped to the function is sent to the Process statement list.</source>
          <target state="translated">この例では、関数にパイプされる各オブジェクトは、プロセス ステートメントの一覧に送信されます。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The Process statements run on each object, one object at a time.</source>
          <target state="translated">プロセスのステートメントが、各オブジェクトの実行、一度に 1 つのオブジェクト。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The $input automatic variable is empty when the function reaches the End keyword.</source>
          <target state="translated">End キーワードに達したら、関数、$input 自動変数が空です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1,2,4 | Get-PipelineInput Processing:  1 Processing:  2 Processing:  4 End:   The input is:</source>
          <target state="translated">C:\PS &gt; 1,2,4 |Get PipelineInput 処理: 1、Processing: 2 つの処理: エンド 4: 入力します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Filters A filter is a type of function that runs on each object in the pipeline.</source>
          <target state="translated">フィルターするフィルターとは、パイプライン内の各オブジェクトで実行されている関数の型です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A filter resembles a function with all its statements in a Process block.</source>
          <target state="translated">フィルターには、Process ブロック内のすべてのステートメントを持つ関数に似ています。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The syntax of a filter is as follows:</source>
          <target state="translated">フィルターの構文は次のとおりです。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>filter [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">フィルター [&lt; スコープ: &gt;]<ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following filter takes log entries from the pipeline and then displays either the whole entry or only the message portion of the entry:</source>
          <target state="translated">次のフィルターは、パイプラインからのログ エントリし、エントリ全体、またはエントリのメッセージ部分だけが表示されます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>filter Get-ErrorLog ([switch]$message) { if ($message) { out-host -inputobject $<bpt id="p1">_</bpt>.Message } else { $<ept id="p1">_</ept> } }</source>
          <target state="translated">([スイッチ] $message) の取得のエラー ログをフィルター処理 {場合 ($message) {-inputobject $a を out-host<bpt id="p1">_</bpt>します。メッセージ} else {$<ept id="p1">_</ept> }}</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Function Scope A function exists in the scope in which it was created.</source>
          <target state="translated">関数スコープ、関数が作成されたスコープに存在します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If a function is part of a script, the function is available to statements within that script.</source>
          <target state="translated">関数が、スクリプトの一部である場合は、関数はそのスクリプト内のステートメントを使用します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>By default, a function in a script is not available at the command prompt.</source>
          <target state="translated">既定では、スクリプト内の関数は、コマンド プロンプトで使用できません。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You can specify the scope of a function.</source>
          <target state="translated">関数のスコープを指定できます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For example, the function is added to the global scope in the following example:</source>
          <target state="translated">たとえば、関数は次の例ではグローバル スコープに追加されます。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>function global:Get-DependentSvs { Get-Service | where {$_.DependentServices} }</source>
          <target state="translated">グローバル関数: Get DependentSvs {Get-service |、{$_ です。DependentServices}}</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>When a function is in the global scope, you can use the function in scripts, in functions, and at the command line.</source>
          <target state="translated">グローバル スコープで関数がある場合は、スクリプトでは、関数、およびコマンド ラインで関数を使用できます。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Functions normally create a scope.</source>
          <target state="translated">関数は、通常、スコープを作成します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The items created in a function, such as variables, exist only in the function scope.</source>
          <target state="translated">変数などの関数で作成されたアイテムは、関数のスコープ内にのみ存在します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For more information about scope in Windows PowerShell, see about_Scopes (http://go.microsoft.com/fwlink/?LinkID=113260).</source>
          <target state="translated">Windows PowerShell でのスコープの詳細については、「about_Scopes (http://go.microsoft.com/fwlink/?LinkID=113260) を参照してください。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Finding and Managing Functions Using the Function: Drive All the functions and filters in Windows PowerShell are automatically stored in the Function: drive.</source>
          <target state="translated">検索と管理機能は、関数を使用して: ドライブすべての関数と Windows PowerShell でのフィルターが、関数に自動的に保存します。 ドライブです。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This drive is exposed by the Windows PowerShell Function provider.</source>
          <target state="translated">このドライブは、Windows PowerShell Function プロバイダーによって公開されます。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>When referring to the Function: drive, type a colon after Function, just as you would do when referencing the C or D drive of a computer.</source>
          <target state="translated">この関数を参照する場合: ドライブは、コンピューターの C や D ドライブを参照する場合と同様に、関数の後にコロンを入力します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The following command displays all the functions in the current session of Windows PowerShell:</source>
          <target state="translated">次のコマンドは、Windows PowerShell の現在のセッションですべての関数を表示します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Get-ChildItem function:</source>
          <target state="translated">Get-childitem 関数:</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The commands in the function are stored as a script block in the definition property of the function.</source>
          <target state="translated">関数内のコマンドは、関数の definition プロパティ内のスクリプト ブロックとして格納されます。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For example, to display the commands in the Help function that comes with Windows PowerShell, type:</source>
          <target state="translated">たとえば、コマンドを表示するには、Windows PowerShell に付属しているヘルプ関数内に次のように入力します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>(Get-ChildItem function:help).Definition</source>
          <target state="translated">(Get-childitem 関数: ヘルプ)。定義</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For more information about the Function: drive, see the help topic for the Function provider.</source>
          <target state="translated">関数の詳細については: ドライブは、Function プロバイダーのヘルプ トピックを参照してください。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Type "Get-Help Function" or view it in the TechNet Library at http://go.microsoft.com/fwlink/?LinkID=113436.</source>
          <target state="translated">"Get-help Function"を入力するか、TechNet ライブラリの「http://go.microsoft.com/fwlink/?LinkID=113436 で表示します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Reusing Functions in New Sessions When you type a function at the Windows PowerShell command prompt, the function becomes part of the current session.</source>
          <target state="translated">関数の関数を再利用、Windows PowerShell コマンド プロンプトで関数を入力すると、新しいセッションで、現在のセッションの一部となります。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>It is available until the session ends.</source>
          <target state="translated">これは、セッションが終了するまで使用できます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>To use your function in all Windows PowerShell sessions, add the function to your Windows PowerShell profile.</source>
          <target state="translated">すべての Windows PowerShell セッションで、関数を使用するには、Windows PowerShell プロファイルに関数を追加します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information about profiles, see about_Profiles (http://go.microsoft.com/fwlink/?LinkID=113729).</source>
          <target state="translated">プロファイルの詳細については、「about_Profiles (http://go.microsoft.com/fwlink/?LinkID=113729) を参照してください。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can also save your function in a Windows PowerShell script file.</source>
          <target state="translated">Windows PowerShell スクリプト ファイルで、関数を保存することもできます。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Type your function in a text file, and then save the file with the .ps1 file name extension.</source>
          <target state="translated">テキスト ファイル内の関数を入力し、.ps1 ファイル名拡張子を持つファイルを保存します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Writing Help for Functions The Get-Help cmdlet gets help for functions, as well as for cmdlets, providers, and scripts.</source>
          <target state="translated">関数、Get-help コマンドレットのヘルプを記述して、関数、およびコマンドレット、プロバイダー、およびスクリプトに関してのヘルプを取得します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>To get help for a function, type Get-Help followed by the function name.</source>
          <target state="translated">関数のヘルプを表示するには、ヘルプの表示に続けて関数名を入力します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For example, to get help for the Get-MyDisks function, type:</source>
          <target state="translated">たとえば、Get MyDisks 関数のヘルプを表示する次のように入力します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Get-Help Get-MyDisks</source>
          <target state="translated">Get-help Get MyDisks</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>You can write help for a function by using either of the two following methods:</source>
          <target state="translated">関数のヘルプは、次の 2 つの方法のいずれかを使用して記述できます。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>--  Comment-Based Help  for Functions</source>
          <target state="translated">--関数のコメント ベースのヘルプ</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Create a help topic by using special keywords in the comments.</source>
          <target state="translated">ヘルプ トピックを作成するには、コメントに特別なキーワードを使用します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>To create comment-based help for a function, the comments must be placed at the beginning or end of the function body or on the lines preceding the function keyword.</source>
          <target state="translated">関数のコメント ベースのヘルプを作成するには、先頭または末尾か、関数本体の function キーワードの前の行にコメントを配置する必要があります。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>For more information about comment-based help, see about_Comment_Based_Help.</source>
          <target state="translated">コメント ベースのヘルプの詳細については、about_Comment_Based_Help を参照してください。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>--  XML-Based Help  for Functions</source>
          <target state="translated">--関数の XML ベースのヘルプ</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Create an XML-based help topic, such as the type that is typically created for cmdlets.</source>
          <target state="translated">XML ベースのヘルプ トピックを通常は、コマンドレットの作成の種類などを作成します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>XML-based help is required if you are localizing help topics into multiple languages.</source>
          <target state="translated">ヘルプ トピックは、複数の言語にローカライズする場合、XML ベースのヘルプが必要です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>To associate the function with the XML-based help topic, use the .ExternalHelp comment-based help keyword.</source>
          <target state="translated">関数を XML ベースのヘルプ トピックに関連付けるに使用します。ExternalHelp コメント ベースのヘルプのキーワードです。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Without this keyword, Get-Help cannot find the function help topic and calls to Get-Help for the function return only auto-generated help.</source>
          <target state="translated">このキーワードを使用せずには、Get-help は関数のヘルプ トピックを見つけることはできず、関数の場合、Get-help を呼び出すには自動生成されたヘルプのみが返されます。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For more information about the ExternalHelp keyword, see about_Comment_Based_Help.</source>
          <target state="translated">ExternalHelp キーワードの詳細については、about_Comment_Based_Help を参照してください。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For more information about XML-based help, see "How to Write Cmdlet Help" in MSDN.</source>
          <target state="translated">XML ベースのヘルプの詳細については、"方法に書き込むコマンドレットのヘルプの msdn を参照してください。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>about_Automatic_Variables about_Comment_Based_Help about_Functions_Advanced about_Functions_Advanced_Methods about_Functions_Advanced_Parameters about_Functions_CmdletBindingAttribute about_Functions_OutputTypeAttribute about_Parameters about_Profiles about_Scopes about_Script_Blocks Function (provider)</source>
          <target state="translated">about_Automatic_Variables about_Comment_Based_Help about_Functions_Advanced about_Functions_Advanced_Methods 指示 about_Functions_CmdletBindingAttribute about_Functions_OutputTypeAttribute about_Parameters about_Profiles about_Scopes about_script_blocks」関数 (プロバイダー)</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>