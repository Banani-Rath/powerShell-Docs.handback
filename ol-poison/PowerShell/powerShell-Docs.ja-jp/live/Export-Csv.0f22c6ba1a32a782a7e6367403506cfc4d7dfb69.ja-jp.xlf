<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c06003a454ec52eb3b414f07411ad9d11b0c75de</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Export-Csv.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72ac4c2356a04eafd3462121b07518d9a6a5e991</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a247eeb93c4d4824a0c3fd24871938944939266</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts objects into a series of comma-separated (CSV) strings and saves the strings in a CSV file.</source>
          <target state="translated">オブジェクトを、一連のコンマ区切り (CSV) の文字列に変換し、その文字列を CSV ファイルとして保存します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Delimiter (Default)</source>
          <target state="translated">区切り記号 (既定値)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>UseCulture</source>
          <target state="translated">UseCulture</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> cmdlet creates a CSV file of the objects that you submit.</source>
          <target state="translated"> <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> コマンドレットを送信するオブジェクトの CSV ファイルを作成します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each object is represented as a line or row of the CSV.</source>
          <target state="translated">各オブジェクトは、CSV 形式の行として表されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The row consists of a comma-separated list of the values of object properties.</source>
          <target state="translated">この行は、オブジェクトのプロパティの値がコンマで区切りられたリストになっています。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use this cmdlet to create spreadsheets and share data with programs that take CSV files as input.</source>
          <target state="translated">このコマンドレットを使用すると、スプレッドシートを作成できます。また、CSV ファイルを入力として取得するプログラムとデータを共有することができます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Do not format objects before sending them to the <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">送信する前にオブジェクトの書式設定は、 <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> コマンドレットです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you do, the format properties are represented in the CSV file, instead of the properties of the original objects.</source>
          <target state="translated">書式設定をすると、元のオブジェクトのプロパティではなく、書式設定のプロパティが CSV ファイルの形で出力されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To export only selected properties of an object, use the Select-Object cmdlet.</source>
          <target state="translated">オブジェクトの選択したプロパティだけをエクスポートするには、Select-Object コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example 1: Export process properties</source>
          <target state="translated">例 1: エクスポートのプロセス プロパティ</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This command selects a few properties of the WmiPrvse process and exports them to a CSV file named Data.csv.</source>
          <target state="translated">このコマンドは、WmiPrvse プロセスのプロパティをいくつか選択し、Data.csv という名前の CSV ファイルにエクスポートします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example 2: Export processes to a comma-delimited file</source>
          <target state="translated">例 2: プロセスをコンマで区切られたファイルにエクスポートします。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This command exports objects representing the processes on the computer to the Processes.csv file in the current directory.</source>
          <target state="translated">このコマンドは、コンピューター上のプロセスを表すオブジェクトを現在のディレクトリの Processes.csv ファイルにエクスポートします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because it does not specify a delimiter, a comma (,) is used to separate the fields in the file.</source>
          <target state="translated">区切り文字が指定されていないため、このファイルのフィールドはコンマ (,) で区切られます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example 3: Export processes to a semicolon-delimited file</source>
          <target state="translated">例 3: プロセスをセミコロンで区切られたファイルにエクスポートします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This command exports objects representing the processes on the computer to the Processes.csv file in the current directory.</source>
          <target state="translated">このコマンドは、コンピューター上のプロセスを表すオブジェクトを現在のディレクトリの Processes.csv ファイルにエクスポートします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>Delimiter<ept id="p1">*</ept> parameter to specify the semicolon (;).</source>
          <target state="translated">使用して、 <bpt id="p1">*</bpt>区切り記号<ept id="p1">*</ept> パラメーターをセミコロン (;) を指定します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As a result, the fields in the file are separated by semicolons.</source>
          <target state="translated">その結果、ファイルのフィールドはセミコロン (;) で区切られます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Example 4: Export using the list separator of the current culture</source>
          <target state="translated">例 4: エクスポートの現在のカルチャの区切り記号を使用します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This command exports objects representing the processes on the computer to the Processes.csv file in the current directory.</source>
          <target state="translated">このコマンドは、コンピューター上のプロセスを表すオブジェクトを現在のディレクトリの Processes.csv ファイルにエクスポートします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter to direct <bpt id="p2">**</bpt>Export-CSV<ept id="p2">**</ept> to use the delimiter specified by the ListSeparator property of the current culture.</source>
          <target state="translated">使用して、 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> パラメーターを <bpt id="p2">**</bpt>EXPORT-CSV<ept id="p2">**</ept> 、現在のカルチャの ListSeparator プロパティで指定された区切り記号を使用します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example 5: Export processes without type information</source>
          <target state="translated">例 5: 型情報がないプロセスをエクスポートします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This command exports objects representing the processes on the computer to the Processes.csv file in the current directory.</source>
          <target state="translated">このコマンドは、コンピューター上のプロセスを表すオブジェクトを現在のディレクトリの Processes.csv ファイルにエクスポートします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> parameter to suppress the type information in the file.</source>
          <target state="translated">使用して、 <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> ファイル内の型情報をしないようにするパラメーターです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 6: Export and append script properties</source>
          <target state="translated">例 6: エクスポートをスクリプトのプロパティの追加</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These commands add information about new Windows PowerShell scripts to a script inventory file.</source>
          <target state="translated">これらのコマンドは、新しい Windows PowerShell スクリプトに関する情報を、スクリプトのインベントリ ファイルに追加します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-ChildItem cmdlet to do a recursive search in the D: drive for files with the .ps1 file name extension.</source>
          <target state="translated">最初のコマンドでは、Get-childitem コマンドレットを使用して、ファイル名の拡張子が .ps1 のファイルに対して、d: ドライブで再帰検索を行います。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator to sends the results to the Where-Object cmdlet, which gets only files that were created after January 1, 2011, and then saves them in the $ScriptFiles variable.</source>
          <target state="translated">送信ファイルのみを取得する Where-object コマンドレットに結果が 2011 年 1 月 1 日以降後に作成され、$ScriptFiles 変数に保存にパイプライン演算子を使用します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example 7: Select properties to export</source>
          <target state="translated">例 7: エクスポート対象のプロパティを選択します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This example demonstrates one of most common problems that users encounter when using the <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">この例でを使用する場合に、ユーザーが直面した最も一般的な問題の 1 つ、 <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> コマンドレットです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It explains how to recognize and avoid this error.</source>
          <target state="translated">ここでは、このエラーを理解して回避する方法について説明します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Because a CSV file has a table format, it might seem natural to use the Format-Table cmdlet to format the data in a table to prepare it for export as a CSV file.</source>
          <target state="translated">CSV ファイルには、テーブル形式が付いているために準備するためにテーブル内のデータを CSV ファイルとしてエクスポート形式を Format-table コマンドレットを使用して自然なかもしれません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Also, the <bpt id="p1">**</bpt>Format-Table<ept id="p1">**</ept> cmdlet allows you to select object properties easily.</source>
          <target state="translated">また、 <bpt id="p1">**</bpt>Format-table<ept id="p1">**</ept> コマンドレットでは、オブジェクトのプロパティを簡単に選択することができます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, when you format the data in a table and then export it, you are exporting a table object, not your original data object.</source>
          <target state="translated">しかし、データの書式を表形式にしてからエクスポートすると、元のデータ オブジェクトではなく、表オブジェクトをエクスポートすることになります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The resulting CSV file is not useful.</source>
          <target state="translated">結果として得られる CSV ファイルは有用ではありません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This example shows how to select object properties by using the Select-Object cmdlet, and it shows the <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> formats the data correctly in a CSV file without any preparatory formatting by another cmdlet.</source>
          <target state="translated">この例は、Select-object コマンドレットを使用してオブジェクトのプロパティを選択する方法を示しています。 あり、説明、 <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> 他のコマンドレットで準備書式なし正しく CSV ファイル内のデータを書式設定します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">パラメータ</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>-Append</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet adds the CSV output to the end of the specified file.</source>
          <target state="translated">このコマンドレットでは、指定したファイルの末尾に CSV 出力に追加することを示します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Without this parameter, <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> replaces the file contents without warning.</source>
          <target state="translated">このパラメーターがない <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> 警告なしのファイルの内容が置き換えられます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">このパラメーターは Windows PowerShell 3.0 で導入されました。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>-Confirm</source>
          <target state="translated">-Confirm</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Prompts you for confirmation before running the cmdlet.Prompts you for confirmation before running the cmdlet.</source>
          <target state="translated">コマンドレットを実行する前に確認するように求められます。コマンドレットを実行する前に確認するように求められます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>-Delimiter</source>
          <target state="translated">区切り記号</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Specifies a delimiter to separate the property values.</source>
          <target state="translated">プロパティの値を区切る区切り記号を指定します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">既定値はコンマ (,) です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Enter a character, such as a colon (:).</source>
          <target state="translated">コロン (:) などの文字を入力します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To specify a semicolon (;), enclose it in quotation marks.</source>
          <target state="translated">セミコロン (;) を指定するには、引用符で囲みます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>-Encoding</source>
          <target state="translated">エンコード</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Specifies the encoding for the exported CSV file.</source>
          <target state="translated">エクスポートされた CSV ファイルのエンコード方式を指定します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">このパラメーターに対して使用できる値:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>UTF7</source>
          <target state="translated">UTF7</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>UTF8</source>
          <target state="translated">UTF8</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>ASCII</source>
          <target state="translated">ASCII</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>UTF32</source>
          <target state="translated">UTF32</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>BigEndianUnicode</source>
          <target state="translated">BigEndianUnicode</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">既定</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>OEM</source>
          <target state="translated">OEM</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default value is ASCII.</source>
          <target state="translated">既定値は ASCII です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Forces the command to run without asking for user confirmation.</source>
          <target state="translated">ユーザーに確認せずに、直ちにコマンドを実行します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-Inputobject</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Specifies the objects to export as CSV strings.</source>
          <target state="translated">CSV 文字列としてエクスポートするオブジェクトを指定します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects or type a command or expression that gets the objects.</source>
          <target state="translated">オブジェクトが格納されている変数を入力するか、オブジェクトを取得するコマンドまたは式を入力します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also pipe objects to <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept>.</source>
          <target state="translated">オブジェクトを渡すこともできます <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>-LiteralPath</source>
          <target state="translated">– LiteralPath</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Specifies the path to the CSV output file.</source>
          <target state="translated">CSV 出力ファイルのパスを指定します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">*</bpt>Path<ept id="p1">*</ept>, the value of the <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> parameter is used exactly as it is typed.</source>
          <target state="translated">異なり <bpt id="p1">*</bpt>パス<ept id="p1">*</ept>, の値、 <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> は入力したとおりにパラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>No characters are interpreted as wildcards.</source>
          <target state="translated">ワイルドカードとして解釈される文字はありません。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the path includes escape characters, enclose it in single quotation marks.</source>
          <target state="translated">パスにエスケープ文字が含まれている場合は、単一引用符で囲みます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</source>
          <target state="translated">単一引用符で囲んだ文字はエスケープ シーケンスとして解釈されません。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-NoClobber</source>
          <target state="translated">-NoClobber</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet does not overwrite an existing file.</source>
          <target state="translated">このコマンドレットが既存のファイルを上書きしないことを示します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>By default, if a file exists in the specified path, <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> overwrites the file without warning.</source>
          <target state="translated">既定では、指定したパスにファイルが存在する場合は <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> 警告なしにファイルを上書きします。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>-NoTypeInformation</source>
          <target state="translated">-NoTypeInformation</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet omits the type information from the CSV file.</source>
          <target state="translated">このコマンドレットが CSV ファイルから型情報を省略することを示します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>By default, the first line of the CSV file contains #TYPE followed by the fully-qualified name of the type of the object.</source>
          <target state="translated">既定では、CSV ファイルの最初の行には、#TYPE 続いてオブジェクトの型の完全修飾名が含まれています。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>-Path</source>
          <target state="translated">-Path</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Specifies the path to the CSV output file.</source>
          <target state="translated">CSV 出力ファイルのパスを指定します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>-UseCulture</source>
          <target state="translated">-UseCulture</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet uses the list separator for the current culture as the item delimiter.</source>
          <target state="translated">このコマンドレットが、項目の区切り記号として、現在のカルチャのリスト区切り記号を使用することを示します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">既定値はコンマ (,) です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This parameter is very useful in scripts that are being distributed to users worldwide.</source>
          <target state="translated">このパラメーターは、世界中のユーザーに配布されるスクリプトで使用するのに非常に便利です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To find the list separator for a culture, use the following command: <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>.</source>
          <target state="translated">カルチャの区切り記号を検索するには、次のコマンドを使用します。 <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>-WhatIf</source>
          <target state="translated">-WhatIf</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Shows what would happen if the cmdlet runs.</source>
          <target state="translated">コマンドレットを実行するとどのような結果になるかを表示します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.Shows what would happen if the cmdlet runs.</source>
          <target state="translated">コマンドレットは実行されません。コマンドレットが実行された場合の処理を示しています。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.</source>
          <target state="translated">コマンドレットは実行されません。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">このコマンドレットは、共通のパラメーターをサポートしています:-デバッグ、-erroraction、-errorvariable、- InformationAction-InformationVariable、- OutVariable、-OutBuffer、- PipelineVariable、- Verbose、および - WarningVariable です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">詳細については、about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216) を参照してください。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">入力</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can pipe any object with an Extended Type System (ETS) adapter to <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept>.</source>
          <target state="translated">拡張型システム (ETS) アダプターに任意のオブジェクトをパイプする <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">出力</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The CSV list is sent to the file designated in the Path parameter.</source>
          <target state="translated">CSV リストが Path パラメーターに指定されたファイルに送られます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">ノート</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> cmdlet converts the objects that you submit into a series of CSV variable-length strings and saves them in the specified text file.</source>
          <target state="translated"> <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> コマンドレットは、送信するオブジェクトを一連の CSV 可変長の文字列に変換し、それらの指定したテキスト ファイルに保存します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> to save objects in a CSV file and then use the Import-Csv cmdlet to create objects from the text in the CSV file.</source>
          <target state="translated">使用する <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> オブジェクトの CSV ファイルに保存し、Import-csv コマンドレットを使用して CSV ファイル内のテキストからオブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In the CSV file, each object is represented by a comma-separated list of the property values of the object.</source>
          <target state="translated">CSV ファイルでは、各オブジェクトは、オブジェクトのプロパティ値のコンマ区切りリストで表されます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The property values are converted to strings (by using the ToString() method of the object), so they are generally represented by the name of the property value.</source>
          <target state="translated">プロパティ値はオブジェクトの ToString() メソッドを使用して文字列に変換するため、通常、これらはプロパティ値の名前で表されます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> does not export the methods of the object.</source>
          <target state="translated"><bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> オブジェクトのメソッドではエクスポートされません。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The format of an exported file is as follows:</source>
          <target state="translated">エクスポートされたファイルの形式は次のとおりです。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The first line of the CSV file contains the string #TYPE followed by the fully qualified name of the object, such as <ph id="ph1">`#TYPE System.Diagnostics.Process`</ph>.</source>
          <target state="translated">CSV ファイルの最初の行を含む文字列など、オブジェクトの完全修飾名を続けて #TYPE <ph id="ph1">`#TYPE System.Diagnostics.Process`</ph>します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To suppress this line, use the <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> parameter.</source>
          <target state="translated">この行を抑制するのには、使用、 <bpt id="p1">*</bpt>NoTypeInformation<ept id="p1">*</ept> パラメーター。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The next line of the CSV file represents the column headers.</source>
          <target state="translated">CSV ファイルの次の行では、列ヘッダーを表します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>It contains a comma-separated list of the names of all the properties of the first object.</source>
          <target state="translated">これには、最初のオブジェクトのすべてのプロパティの名前のコンマ区切りリストが含まれます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Additional lines of the file consist of comma-separated lists of the property values of each object.</source>
          <target state="translated">ファイルの行については、各オブジェクトのプロパティ値のコンマ区切りのリストで構成されます。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>When you submit multiple objects to <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Export-CSV<ept id="p2">**</ept> organizes the file based on the properties of the first object that you submit.</source>
          <target state="translated">複数のオブジェクトを送信すると <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept>, 、<bpt id="p2">**</bpt>EXPORT-CSV<ept id="p2">**</ept> を送信する最初のオブジェクトのプロパティに基づいてファイルを整理します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If the remaining objects do not have one of the specified properties, the property value of that object is null, as represented by two consecutive commas.</source>
          <target state="translated">指定したプロパティのいずれかが残りのオブジェクトに含まれない場合、そのオブジェクトのプロパティ値は連続する 2 つのコンマで表される null になります。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If the remaining objects have additional properties, those property values are not included in the file.</source>
          <target state="translated">残りのオブジェクトに追加のプロパティがある場合は、これらのプロパティ値は、ファイルには含まれません。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can use the Import-Csv cmdlet to re-create objects from the CSV strings in the files.</source>
          <target state="translated">Import-Csv コマンドレットを使用すると、ファイルの CSV 文字列からオブジェクトを再作成できます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The resulting objects are CSV versions of the original objects that consist of string representations of the property values and no methods.</source>
          <target state="translated">結果のオブジェクトは、メソッドのない、プロパティ値の文字列形式で構成された元のオブジェクトの CSV バージョンです。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The ConvertTo-Csv and ConvertFrom-Csv cmdlets to convert objects to CSV strings (and back).</source>
          <target state="translated">ConvertTo-Csv コマンドレットおよび ConvertFrom-Csv コマンドレットは、オブジェクトを CSV 文字列に (またはその逆に) 変換します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> is the same as <bpt id="p2">**</bpt>ConvertTo-CSV<ept id="p2">**</ept>, except that it saves the CSV strings in a file.</source>
          <target state="translated"><bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> と同じ <bpt id="p2">**</bpt>CONVERTTO-CSV<ept id="p2">**</ept>, をファイルに、CSV 文字列を保存する点を除いて、します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">関連リンク</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Format-Table</source>
          <target state="translated">Format-Table</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Select-Object</source>
          <target state="translated">Select-Object</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Where-Object</source>
          <target state="translated">Where-Object</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>