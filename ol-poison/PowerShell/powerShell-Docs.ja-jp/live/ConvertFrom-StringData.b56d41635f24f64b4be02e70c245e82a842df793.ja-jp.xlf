<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5fff7ee8182776a0c365d4de94149fa049bf149</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Utility\ConvertFrom-StringData.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62626e97fb2a70fe953ff1aecb7cfaa2b36053d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbb5670ba333f856c18f054149facb3411d9fcac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData</source>
          <target state="translated">ConvertFrom-StringData</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData</source>
          <target state="translated">ConvertFrom-StringData</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts a string containing one or more key and value pairs to a hash table.</source>
          <target state="translated">1 つまたは複数のキーと値のペアを含む文字列をハッシュ テーブルに変換します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The ConvertFrom-StringData cmdlet converts a string that contains one or more key and value pairs into a hash table.</source>
          <target state="translated">ConvertFrom-StringData コマンドレットは、1 つまたは複数のキーと値のペアを含む文字列をハッシュ テーブルに変換します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because each key/value pair must be on a separate line, here-strings are often used as the input format.</source>
          <target state="translated">それぞれのキーと値のペアは別個の行に記述する必要があるため、入力形式としてヒア文字列がよく使用されます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The ConvertFrom-StringData cmdlet is considered to be a safe cmdlet that can be used in the DATA section of a script or function.</source>
          <target state="translated">ConvertFrom-StringData コマンドレットは、スクリプトまたは関数の DATA セクションに使用できる、安全なコマンドレットと見なされます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When used in a DATA section, the contents of the string must conform to the rules for a DATA section.</source>
          <target state="translated">DATA セクションで使用する場合、文字列の内容は DATA セクションの規則に従う必要があります。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see about_Data_Sections.</source>
          <target state="translated">詳細については、「about_Data_Sections」を参照してください。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData supports escape character sequences that are allowed by conventional machine translation tools.</source>
          <target state="translated">ConvertFrom-StringData は、従来の機械翻訳ツールによって許可される、エスケープ文字のシーケンスをサポートします。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>That is, the cmdlet can interpret backslashes (<ph id="ph1">\\</ph>) as escape characters in the string data by using the Regex.Unescape Methodhttp://msdn.microsoft.com/library/vstudio/system.text.regularexpressions.regex.unescape(v=vs.100).aspx, instead of the Windows PowerShell backtick character (<ph id="ph2">\`</ph>) that would normally signal the end of a line in a script.</source>
          <target state="translated">つまり、コマンドレットが円記号を解釈できる (<ph id="ph1">\\</ph>) スクリプト内の行の終わりは通常 Regex.Unescape Methodhttp://msdn.microsoft.com/library/vstudio/system.text.regularexpressions.regex.unescape(v=vs.100).aspx, instead of the Windows PowerShell backtick character (<ph id="ph2">\`</ph>) を使用して、文字列データで文字をエスケープとします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Inside the here-string, the backtick character does not work.</source>
          <target state="translated">ヒア文字列内では、アクサン グラーブ文字は機能しません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also preserve a literal backslash in your results by escaping it with a preceding backslash, like this:  <ph id="ph1">\\\\</ph>.</source>
          <target state="translated">次のように、前にバック スラッシュをエスケープすることにより、結果にリテラル円記号を維持することもできます。  <ph id="ph1">\\\\</ph>します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unescaped backslash characters, such as those that are commonly used in file paths, can render as illegal escape sequences in your results.</source>
          <target state="translated">ファイルのパスでよく使用されるような、エスケープされていない円記号は、結果内で無効なエスケープ シーケンスとして扱われる可能性があります。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 例 1 --------------------------</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These commands convert a single-quoted here-string of user messages into a hash table.</source>
          <target state="translated">これらのコマンドは、ユーザー メッセージの単一引用符で囲まれたヒア文字列をハッシュ テーブルに変換します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In a single-quoted string, values are not substituted for variables and expressions are not evaluated.</source>
          <target state="translated">単一引用符で囲まれた文字列内では、値は変数と置き換えられず、式も評価されません。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The first command creates a here-string and saves it in the $here variable.</source>
          <target state="translated">最初のコマンドは、ヒア文字列を作成して $here 変数に保存します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second command uses the ConvertFrom-StringData cmdlet to convert the here-string in the $here variable to a hash table.</source>
          <target state="translated">2 番目のコマンドは、ConvertFrom-StringData コマンドレットを使用して、$here 変数内のヒア文字列をハッシュ テーブルに変換します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These commands demonstrate that ConvertFrom-StringData actually converts a here-string to a hash table.</source>
          <target state="translated">これらのコマンドは、ConvertFrom-StringData を使用してヒア文字列をハッシュ テーブルに変換する例を示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first command creates a double-quoted here-string that includes one key/value pair and saves it in the $p variable.</source>
          <target state="translated">最初のコマンドは、キーと値のペアを 1 つ含む二重引用符で囲まれたヒア文字列を作成して $p 変数に保存します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The second command uses a pipeline operator (|) to send the $p variable to the Get-Member cmdlet.</source>
          <target state="translated">2 番目のコマンドでは、パイプライン演算子 (|) を使用して、$p 変数を Get-Member コマンドレットに渡しています。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The result shows that $p is a string (System.String).</source>
          <target state="translated">結果を見ると、$p が文字列 (System.String) であることがわかります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The third command uses the ConvertFrom-StringData cmdlet to convert the here-string in $p to a hash table.</source>
          <target state="translated">3 番目のコマンドは、ConvertFrom-StringData コマンドレットを使用して、$p 内のヒア文字列をハッシュ テーブルに変換します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The command stores the result in the $hash variable.</source>
          <target state="translated">結果は $hash 変数に格納されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The final command uses a pipeline operator (|) to send the $hash variable to the Get-Member cmdlet.</source>
          <target state="translated">最後のコマンドでは、パイプライン演算子 (|) を使用して、$hash 変数を Get-Member コマンドレットに渡しています。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The result shows that the content of the $hash variable is a hash table (System.Collections.Hashtable).</source>
          <target state="translated">結果を見ると、$hash 変数の内容がハッシュ テーブル (System.Collections.Hashtable) であることがわかります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 3 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 3 --------------------------</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This command converts a single-quoted here-string that contains multiple key/value pairs into a hash table.</source>
          <target state="translated">このコマンドは、複数のキーと値のペアを含む単一引用符で囲まれたヒア文字列をハッシュ テーブルに変換します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this command, the value of the StringData parameter is a here-string, instead of a variable that contains a here-string.</source>
          <target state="translated">このコマンドでは、StringData パラメーターの値として、ヒア文字列を含む変数ではなくヒア文字列を使用しています。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Either format is valid.</source>
          <target state="translated">どちらの形式も有効です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The here-string includes a comment about one of the strings.</source>
          <target state="translated">ヒア文字列には、文字列の 1 つについてのコメントが含まれています。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Comments are valid in strings, provided that the comment is on a different line than a key/value pair.</source>
          <target state="translated">キーと値のペアとは別の行に含まれていれば、コメントは文字列内で有効です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This example converts a regular double-quoted string (not a here-string) into a hash table and saves it in the $a variable.</source>
          <target state="translated">この例では、(ヒア文字列ではない) 二重引用符で囲まれた通常の文字列をハッシュ テーブルに変換して $a 変数に保存しています。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To satisfy the condition that each key/value pair must be on a separate line, it uses the Windows PowerShell newline character (<ph id="ph1">\`</ph>n) to separate the pairs.</source>
          <target state="translated">キー/値ペアが別々 の行にする必要がある条件を満たすために、Windows PowerShell の改行文字を使用 (<ph id="ph1">\`</ph>n) をペアに区切ります。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The result is a hash table of the input.</source>
          <target state="translated">結果は、入力のハッシュ テーブルとなります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The remaining commands display the output.</source>
          <target state="translated">残りのコマンドによって出力が表示されます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 5 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 5 --------------------------</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This example shows a ConvertFrom-StringData command used in the DATA section of a script.</source>
          <target state="translated">この例では、スクリプトの DATA セクションに使用された ConvertFrom-StringData コマンドを示します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The statements below the DATA section display the text to the user.</source>
          <target state="translated">DATA セクションの下のステートメントによって、テキストがユーザーに表示されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because the text includes variable names, it must be enclosed in a single-quoted string so that the variables are interpreted literally and not expanded.</source>
          <target state="translated">テキストには変数名が含まれています。変数が展開されずにリテラルとして解釈されるようにするには、これを単一引用符の文字列で囲む必要があります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Variables are not permitted in the DATA section.</source>
          <target state="translated">DATA セクションでは、変数を使用できません。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 6 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 6 --------------------------</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This example shows that you can use a pipeline operator (|) to send a string to ConvertFrom-StringData.</source>
          <target state="translated">この例では、パイプライン演算子 (|) を使用して文字列を ConvertFrom-StringData に送信しています。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The first command saves a here-string in the $here variable.</source>
          <target state="translated">最初のコマンドは、ヒア文字列を $here 変数に保存します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The second command uses a pipeline operator (|) to send the $here variable to ConvertFrom-StringData.</source>
          <target state="translated">2 番目のコマンドでは、パイプライン演算子 (|) を使用して、$here 変数を ConvertFrom-StringData に渡しています。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The command saves the result in the $hash variable.</source>
          <target state="translated">結果は $hash 変数に保存されます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The final command displays the contents of the $hash variable.</source>
          <target state="translated">最後のコマンドでは、$hash 変数の内容を表示しています。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 7 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 7 --------------------------</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This example shows the use of escape characters to create new lines and return characters in ConvertFrom-StringData.</source>
          <target state="translated">この例では、ConvertFrom-StringData 内で新しい行を作成して文字を返すためのエスケープ文字の使い方を示します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In this example, the escape sequence <bpt id="p1">**</bpt>\n<ept id="p1">**</ept> is used to create new lines within a block of text (the value, in the resulting hash table) that is associated with a name or item (the name, in the resulting hash table).</source>
          <target state="translated">この例では、エスケープ シーケンスで <bpt id="p1">**</bpt>\n<ept id="p1">**</ept> (結果のハッシュ テーブルの値) の名前または項目 (結果のハッシュ テーブルの名前) に関連付けられているテキストのブロック内で新しい行を作成するために使用します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 8 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 8 --------------------------</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This example shows how to use of the backslash escape character in the string data to allow a file path to render correctly in the resulting ConvertFrom-StringData hash table.</source>
          <target state="translated">この例では、ファイルのパスが結果として得られる ConvertFrom-StringData ハッシュ テーブル内で適切に表示されるようにするために、円記号のエスケープ文字を文字列データ内で使用しています。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The double backslash ensures that the literal backslash characters render correctly in the hash table output.</source>
          <target state="translated">円記号を二重にすることにより、リテラルの円記号がハッシュ テーブルの出力で正しく表示されます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">パラメータ</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-StringData</source>
          <target state="translated">-文字列</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Specifies the string to be converted.</source>
          <target state="translated">変換する文字列を指定します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can use this parameter or pipe a string to ConvertFrom-StringData.</source>
          <target state="translated">このパラメーターを使用することも、パイプを使用して文字列を ConvertFrom-StringData に渡すこともできます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The parameter name is optional.</source>
          <target state="translated">パラメーター名は省略可能です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The value of this parameter must be a string that is enclosed in single quotation marks (a single-quoted string) or a string that is enclosed in double quotation marks (a double-quoted string) or a here-string containing one or more key/value pairs.</source>
          <target state="translated">このパラメーターの値は、単一引用符で囲まれた文字列、二重引用符で囲まれた文字列、または 1 つ以上のキーと値のペアを含むヒア文字列である必要があります。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Each key/value pair must be on a separate line, or each pair must be separated by newline characters (<ph id="ph1">\`</ph>n).</source>
          <target state="translated">キー/値ペアが別々 の行にする必要がありますか、各ペアは、改行文字で区切る必要があります (<ph id="ph1">\`</ph>n)。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can include comments in the string, but the comments cannot be on the same line as a key/value pair.</source>
          <target state="translated">文字列にはコメントを含めることができますが、コメントをキーと値のペアと同じ行に記述することはできません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The comments are not included in the hash table.</source>
          <target state="translated">コメントは、ハッシュ テーブルに含まれません。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A here-string is a string consisting of one or more lines within which quotation marks are interpreted literally.</source>
          <target state="translated">ヒア文字列は、1 つまたは複数の行から構成される文字列で、引用符はリテラルとして解釈されます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see about_Quoting_Rules.</source>
          <target state="translated">詳細については、「about_Quoting_Rules」を参照してください。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">このコマンドレットは、共通のパラメーターをサポートしています:-デバッグ、-erroraction、-errorvariable、- InformationAction-InformationVariable、- OutVariable、-OutBuffer、- PipelineVariable、- Verbose、および - WarningVariable です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">詳細については、about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216) を参照してください。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">入力</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can pipe a string containing a key/value pair to ConvertFrom-StringData.</source>
          <target state="translated">パイプを使用して、キーと値のペアを含む文字列を ConvertFrom-StringData に渡すことができます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">出力</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>System.Collections.Hashtable</source>
          <target state="translated">System.Collections.Hashtable</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData returns a hash table that it creates from the key/value pairs.</source>
          <target state="translated">ConvertFrom-StringData は、キーと値のペアから作成したハッシュ テーブルを返します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">ノート</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A here-string is a string consisting of one or more lines within which quotation marks are interpreted literally.</source>
          <target state="translated">ヒア文字列は、1 つまたは複数の行から構成される文字列で、引用符はリテラルとして解釈されます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see about_Quoting_Rules.</source>
          <target state="translated">詳細については、「about_Quoting_Rules」を参照してください。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData can be useful in scripts that display user messages in multiple spoken languages.</source>
          <target state="translated">ConvertFrom-StringData は、複数の会話言語でユーザー メッセージを表示するスクリプトに役立ちます。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can use the dictionary-style hash tables to isolate text strings from code, such as in resource files, and to format the text strings for use in translation tools.</source>
          <target state="translated">辞書形式のハッシュ テーブルを使用すると、リソース ファイルのようにコードからテキスト文字列を分離したり、翻訳ツールで使用するためにテキスト文字列を書式設定したりできます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">関連リンク</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>about_Quoting_Rules</source>
          <target state="translated">about_Quoting_Rules</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>about_Script_Internationalization</source>
          <target state="translated">about_Script_Internationalization</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>about_Data_Sections</source>
          <target state="translated">about_Data_Sections</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>