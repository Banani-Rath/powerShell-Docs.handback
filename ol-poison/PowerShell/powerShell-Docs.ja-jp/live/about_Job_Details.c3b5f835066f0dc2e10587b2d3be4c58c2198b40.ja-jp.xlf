<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11fa7e855572b48b2714e8448bf1c52caf40258c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Job_Details.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8606bb08232c23dec82e775ff6b06660234e43bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85418af06035ee69bd97af1ce9961a777f09b459</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Job Details</source>
          <target state="translated">ジョブの詳細について</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Provides details about background jobs on local and remote computers.</source>
          <target state="translated">ローカルおよびリモート コンピューター上のバック グラウンド ジョブの詳細を提供します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>DETAILED DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic explains the concept of a background job and provides technical information about how background jobs work in Windows PowerShell.</source>
          <target state="translated">このトピックでは、バック グラウンド ジョブの概念について説明し、Windows PowerShell のバック グラウンド ジョブの機能に関する技術的な情報を示します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic is a supplement to the about_Jobs and about_Remote_Jobs topics.</source>
          <target state="translated">このトピックでは、about_Jobs」および「about_Remote_Jobs のトピックを補完するものです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ABOUT BACKGROUND JOBS</source>
          <target state="translated">バック グラウンド ジョブについて</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A background job runs a command or expression asynchronously.</source>
          <target state="translated">バック グラウンド ジョブでは、コマンドまたは式を非同期的に実行されます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It might run a cmdlet, a function, a script, or any other command-based task.</source>
          <target state="translated">コマンドレット、関数、スクリプト、または、他のコマンド ベースのタスクを実行して可能性があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is designed to run commands that take an extended period of time, but you can use it to run any command in the background.</source>
          <target state="translated">長期間のかかるコマンドを実行するものでは、それを使用して、バック グラウンドでコマンドを実行することができます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When a synchronous command runs, the Windows PowerShell command prompt is suppressed until the command is complete.</source>
          <target state="translated">同期コマンドを実行すると、コマンドが完了するまでに Windows PowerShell コマンド プロンプトは表示されません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>But a background job does not suppress the Windows PowerShell prompt.</source>
          <target state="translated">バック グラウンド ジョブは、Windows PowerShell プロンプトを抑制しません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A command to start a background job returns a job object.</source>
          <target state="translated">バック グラウンド ジョブを開始するコマンドでは、ジョブ オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The prompt returns immediately so you can work on other tasks while the background job runs.</source>
          <target state="translated">ので使用できる他のタスクにバック グラウンド ジョブの実行中の直後に、プロンプトに戻ります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, when you start a background job, you do not get the results immediately even if the job runs very quickly.</source>
          <target state="translated">ただし、バック グラウンド ジョブを開始すると、結果が得られない、ジョブが非常に高速に実行する場合でも即座にします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The job object that is returned contains useful information about the job, but it does not contain the job results.</source>
          <target state="translated">返されるジョブ オブジェクトには、ジョブに関する有用な情報が含まれていますが、ジョブの結果が含まれていません。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You must run a separate command to get the job results.</source>
          <target state="translated">ジョブの結果を取得する個々 のコマンドを実行する必要があります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can also run commands to stop the job, to wait for the job to be completed, and to delete the job.</source>
          <target state="translated">ジョブを完了して、ジョブを削除するまで待機する、ジョブを停止するためのコマンドを実行することもできます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To make the timing of a background job independent of other commands, each background job runs in its own Windows PowerShell environment (a "session").</source>
          <target state="translated">バック グラウンド ジョブのタイミングを他のコマンドの独立させるには、各バック グラウンド ジョブは、独自の Windows PowerShell 環境 (「セッション」) で実行されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, this can be a temporary connection that is created only to run the job and is then destroyed, or it can be a persistent session (a PSSession) that you can use to run several related jobs or commands.</source>
          <target state="translated">ただし、これは、一時的な接続が、ジョブを実行する場合のみ作成され、破棄されるでもかまいません永続的なセッション (PSSession) のジョブまたはコマンドに関連するいくつかの実行に使用できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>USING THE JOB CMDLETS</source>
          <target state="translated">ジョブ コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use a Start-Job command to start a background job on a local computer.</source>
          <target state="translated">ローカルのコンピューターでバック グラウンド ジョブを開始するのにには、Start-job コマンドを使用します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Start-Job returns a job object.</source>
          <target state="translated">開始ジョブでは、ジョブ オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also get objects representing the jobs that were started on the local computer by using the Get-Job cmdlet.</source>
          <target state="translated">Get-job コマンドレットを使用して、ローカル コンピューターで開始されたジョブを表すオブジェクトを取得することもできます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To get the job results, use a Receive-Job command.</source>
          <target state="translated">ジョブの結果を取得するには、Receive-job コマンドを使用します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the job is not complete, Receive-Job returns partial results.</source>
          <target state="translated">ジョブが不完全な場合は、Receive-job は部分的な結果を返します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can also use the Wait-Job cmdlet to suppress the command prompt until one or all of the jobs that were started in the session are complete.</source>
          <target state="translated">1 つまたはすべてのセッションで開始されたジョブが完了するまで、コマンド プロンプトを抑制する Wait-job コマンドレットを使用することもできます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To stop a background job, use the Stop-Job cmdlet.</source>
          <target state="translated">バック グラウンド ジョブを停止するには、Stop-job コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To delete a job, use the Remove-Job cmdlet.</source>
          <target state="translated">ジョブを削除するには、Remove-job コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about how the cmdlets work, see the Help topic for each cmdlet, and see about_Jobs.</source>
          <target state="translated">コマンドレットの動作に関する詳細については、各コマンドレットのヘルプ トピックを参照し、about_jobs」を参照してください。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>STARTING BACKGROUND JOBS ON REMOTE COMPUTERS</source>
          <target state="translated">リモート コンピューターでバック グラウンド ジョブの開始</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can create and manage background jobs on a local or remote computer.</source>
          <target state="translated">作成して、ローカルまたはリモート コンピューターでバック グラウンド ジョブを管理します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To run a background job remotely, use the AsJob parameter of a cmdlet such as Invoke-Command, or use the Invoke-Command cmdlet to run a Start-Job command remotely.</source>
          <target state="translated">バック グラウンド ジョブをリモートで実行するには、など、Invoke-command コマンドレットの AsJob パラメーターを使用または Invoke-command コマンドレットを使用して Start-job コマンドをリモートで実行します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can also start a background job in an interactive session.</source>
          <target state="translated">対話型セッションでバック グラウンド ジョブを開始することもできます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information about remote background jobs, see about_Remote_Jobs.</source>
          <target state="translated">リモート バックグラウンド ジョブの詳細については、「about_Remote_Jobs」を参照してください。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CHILD JOBS</source>
          <target state="translated">子ジョブ</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Each background job consists of a parent job and one or more child jobs.</source>
          <target state="translated">各バック グラウンド ジョブは、親ジョブと 1 つまたは複数の子ジョブで構成されます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In jobs started by using Start-Job or the AsJob parameter of Invoke-Command, the parent job is an executive.</source>
          <target state="translated">Start-job または Invoke-command コマンドレットの AsJob パラメーターを使用して開始されたジョブでは、親ジョブは、役員です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It does not run any commands or return any results.</source>
          <target state="translated">結果が返さや任意のコマンドを実行してしません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The commands are actually run by the child jobs.</source>
          <target state="translated">コマンドは、子ジョブによって実際に実行されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(Jobs started by using other cmdlets might work differently.)</source>
          <target state="translated">(他のコマンドレットを使用して開始されたジョブが動作が異なる)。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The child jobs are stored in the ChildJobs property of the parent job object.</source>
          <target state="translated">子ジョブは、親ジョブ オブジェクトの ChildJobs プロパティに格納されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The ChildJobs property can contain one or many child job objects.</source>
          <target state="translated">ChildJobs プロパティには、1 つまたは複数の子ジョブ オブジェクトを含めることができます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The child job objects have a name, ID, and instance ID that differ from the parent job so that you can manage the parent and child jobs individually or as a unit.</source>
          <target state="translated">ジョブの子オブジェクトは、名前、ID、および親と子ジョブを管理するには、個別にあるいはユニットとして親ジョブとは異なるインスタンス ID があります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To get the parent and child jobs of a job, use the IncludeChildJobs parameter of the Get-Job cmdlet.</source>
          <target state="translated">ジョブの親と子ジョブを取得するには、Get-job コマンドレットの IncludeChildJobs パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The IncludeChildJob parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">IncludeChildJob パラメーターは、Windows PowerShell 3.0 で導入されました。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Get-Job -IncludeChildJob</source>
          <target state="translated">C:\PS &gt; Get-job IncludeChildJob</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>1     Job1   RemoteJob     Failed     True          localhost   Get-Process 2     Job2                 Completed  True          Server01    Get-Process 3     Job3                 Failed     False         localhost   Get-Process</source>
          <target state="translated">1 Job1 RemoteJob 失敗した場合は True。 localhost Get-process 2 Job2 完了 True Server01 Get-process 3 Job3 失敗 False localhost Get-process</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To get the parent job and only the child jobs with a particular State value, use the ChildJobState parameter of the Get-Job cmdlet.</source>
          <target state="translated">ジョブと特定の状態値を持つ子ジョブのみを親を取得するには、Get-job コマンドレットの ChildJobState パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The ChildJobState parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">ChildJobState パラメーターは、Windows PowerShell 3.0 で導入されました。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Get-Job -ChildJobState Failed</source>
          <target state="translated">C:\PS &gt; Get-job ChildJobState に失敗しました</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>1     Job1   RemoteJob     Failed     True          localhost   Get-Process 3     Job3                 Failed     False         localhost   Get-Process</source>
          <target state="translated">1 Job1 RemoteJob 失敗した場合は True。 localhost Get-process 3 Job3 失敗した場合は False localhost Get-process</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To get the child jobs of a job on all versions of Windows PowerShell, use the ChildJob property of the parent job.</source>
          <target state="translated">すべてのバージョンの Windows PowerShell で、子ジョブのジョブを取得するには、親ジョブの ChildJob プロパティを使用します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (Get-Job Job1).ChildJobs</source>
          <target state="translated">C:\PS &gt; (Get-job Job1)。ChildJobs</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>2     Job2                 Completed  True          Server01    Get-Process 3     Job3                 Failed     False         localhost   Get-Process</source>
          <target state="translated">2 Job2 完了 True Server01 Get-process 3 Job3 失敗 False localhost Get-process</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can also use a Get-Job command on the child job, as shown in the following command:</source>
          <target state="translated">次のコマンドに示すようには、子ジョブに、Get-job コマンドを使用することもできます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Get-Job Job3</source>
          <target state="translated">C:\PS &gt; Get-job Job3</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>3     Job3                 Failed     False         localhost   Get-Process</source>
          <target state="translated">3 Job3 失敗 False localhost Get-process</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The configuration of the child job depends on the command that you use to start the job.</source>
          <target state="translated">子ジョブの構成は、ジョブを開始するために使用するコマンドに依存します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-- When you use Start-Job to start a job on a local computer, the job consists of an executive parent job and a child job that runs the command.</source>
          <target state="translated">--ローカル コンピューター上のジョブを開始する開始ジョブを使用すると、executive 親ジョブと、コマンドを実行する子ジョブのジョブで構成されます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-- When you use the AsJob parameter of Invoke-Command to start a job on one or more computers, the job consists of an executive parent job and a child job for each job run on each computer.</source>
          <target state="translated">--1 つまたは複数のコンピューターでジョブを開始する Invoke-command コマンドレットの AsJob パラメーターを使用すると、executive 親ジョブと各コンピューターで実行する各ジョブの子ジョブのジョブで構成されます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-- When you use Invoke-Command to run a Start-Job command on one or more remote computers, the result is the same as a local command run on each remote computer.</source>
          <target state="translated">--Invoke-command コマンドレットを使用して 1 つまたは複数のリモート コンピューターで Start-job コマンドを実行すると、結果の値は、[リモートの各コンピューターで実行されるローカル コマンドと同じです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The command returns a job object for each computer.</source>
          <target state="translated">コマンドは、コンピューターごとにジョブ オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The job object consists of an executive parent job and one child job that runs the command.</source>
          <target state="translated">Executive 親ジョブと、コマンドを実行する 1 つの子ジョブのジョブ オブジェクトで構成されます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The parent job represents all of the child jobs.</source>
          <target state="translated">親ジョブでは、すべての子ジョブを表します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When you manage a parent job, you also manage the associated child jobs.</source>
          <target state="translated">親ジョブを管理する場合は、関連付けられている子ジョブを管理します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, if you stop a parent job, all child jobs are stopped.</source>
          <target state="translated">たとえば、親ジョブを停止すると、すべての子ジョブが停止します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you get the results of a parent job, you get the results of all child jobs.</source>
          <target state="translated">親ジョブの結果が表示された場合は、すべての子ジョブの結果を取得します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, you can also manage child jobs individually.</source>
          <target state="translated">ただし、子ジョブを個別に管理することもできます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is most useful when you want to investigate a problem with a job or get the results of only one of a number of child jobs started by using the AsJob parameter of Invoke-Command.</source>
          <target state="translated">これは、機能は、ジョブに関する問題の調査、または Invoke-command コマンドレットの AsJob パラメーターを使用して開始された子ジョブの数の 1 つだけの結果を取得する場合に適しています。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>(The backtick character [`] is the continuation character.)</source>
          <target state="translated">(アクサン グラーブ文字 (') は、連結文字です)。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following command uses the AsJob parameter of Invoke-Command to start background jobs on the local computer and two remote computers.</source>
          <target state="translated">次のコマンドでは、Invoke-command コマンドレットの AsJob パラメーターを使用して、ローカル コンピューターおよび 2 つのリモート コンピューターでバック グラウンド ジョブを開始します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The command saves the job in the $j variable.</source>
          <target state="translated">コマンドは、$j 変数にジョブを保存します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $j = Invoke-Command -ComputerName localhost, Server01, Server02 ` -Command {Get-Date} -AsJob</source>
          <target state="translated">PS c: &gt; $j Invoke-command-computername localhost、Server01、Server02 = '-{取得日} AsJob コマンド</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When you display the Name and ChildJob properties of the job in $j, it shows that the command returned a job object with three child jobs, one for each computer.</source>
          <target state="translated">$J に、ジョブの名前と ChildJob プロパティを表示する場合は、コマンドは、コンピューターごとに 1 つずつ、3 つの子ジョブでジョブ オブジェクトが返されることを示します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CPS C:&gt; $j | Format-List Name, ChildJobs</source>
          <target state="translated">CPS c: &gt; $j |Format-list Name、ChildJobs</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Name      : Job3 ChildJobs : {Job4, Job5, Job6}</source>
          <target state="translated">[名前]: Job3 ChildJobs: {Job4、Job5、Job6}</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you display the parent job, it shows that the job failed.</source>
          <target state="translated">親ジョブを表示する場合は、ジョブが失敗したことを示します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $j</source>
          <target state="translated">C:\PS &gt; $j</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>3     Job3   RemotingJob   Failed     False         localhost,Server...</source>
          <target state="translated">3 つの Job3 RemotingJob に失敗しました False localhost、Server.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>But when you run a Get-Job command that gets the child jobs, the output shows that only one child job failed.</source>
          <target state="translated">ジョブの子を取得する、Get-job コマンドを実行すると、出力は、その 1 つだけの子ジョブが失敗しましたを示しています。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Get-Job -IncludeChildJobs</source>
          <target state="translated">PS c: &gt; Get-job IncludeChildJobs</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>3     Job3   RemotingJob   Failed     False         localhost,Server... 4     Job4                 Completed  True          localhost   Get-Date 5     Job5                 Failed     False         Server01    Get-Date 6     Job6                 Completed  True          Server02    Get-Date</source>
          <target state="translated">3 つの Job3 RemotingJob に失敗しました False localhost、Server.4 Job4 完了 True localhost Get-date 5 Job5 が失敗しました False Server01 Get-date 6 Job6 完了した場合は True。 Server02 Get-date</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To get the results of all child jobs, use the Receive-Job cmdlet to get the results of the parent job.</source>
          <target state="translated">すべての子ジョブの結果を取得するのにには、親ジョブの結果を取得するのに Receive-job コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>But you can also get the results of a particular child job, as shown in the following command.</source>
          <target state="translated">次のコマンドに示すように、特定の子ジョブの結果を取得することもできます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Name Job6 -Keep | Format-Table ComputerName, DateTime -Auto</source>
          <target state="translated">C:\PS &gt; が表示されるジョブ-Job6 という名前の保持 |表の書式設定のコンピューター名、DateTime-自動</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>ComputerName DateTime</source>
          <target state="translated">ComputerName DateTime</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Server02     Thursday, March 13, 2008 4:16:03 PM</source>
          <target state="translated">Server02 2008 年 3 月 13 日 (木) 午後 4時 16分: 03</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The child jobs feature of Windows PowerShell background jobs gives you more control over the jobs that you run.</source>
          <target state="translated">Windows PowerShell のバック グラウンド ジョブの子ジョブ機能では、ジョブを実行するより詳細に制御できます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>JOB TYPES</source>
          <target state="translated">ジョブの種類</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports different types of jobs for different tasks.</source>
          <target state="translated">Windows PowerShell には、さまざまなタスク用のさまざまな種類のジョブがサポートしています。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, developers can write "job source adapters" that add new job types to Windows PowerShell and include the job source adapters in modules.</source>
          <target state="translated">Windows PowerShell 3.0 以降では、開発者は、「ジョブ ソース アダプター」を Windows PowerShell に新しいジョブの種類を追加し、ジョブのソース アダプターは、モジュールを作成できます。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When you import the module, you can use the new job type in your session.</source>
          <target state="translated">モジュールをインポートするときに、セッションで、新しいジョブの種類を使用できます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, the PSScheduledJob module adds scheduled jobs and the PSWorkflow module adds workflow jobs.</source>
          <target state="translated">たとえば、PSScheduledJob モジュールは、スケジュールされたジョブを追加し、PSWorkflow モジュールは、ワークフロー ジョブを追加します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Custom jobs types might differ significantly from standard Windows PowerShell background jobs.</source>
          <target state="translated">カスタムのジョブの種類は、標準の Windows PowerShell バック グラウンド ジョブから大幅に異なる場合があります。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For example, scheduled jobs are saved on disk; they do not exist only in a particular session.</source>
          <target state="translated">たとえば、スケジュールされたジョブがディスクに保存します。特定のセッションのみに存在しません。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Workflow jobs can be suspended and resumed.</source>
          <target state="translated">ワークフロー ジョブは中断され、再開します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The cmdlets that you use to manage custom jobs depend on the job type.</source>
          <target state="translated">カスタムのジョブの管理に使用するコマンドレットは、ジョブの種類によって異なります。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For some, you use the standard job cmdlets, such as Get-Job and Start-Job.</source>
          <target state="translated">、場合によっては、Get-job や Start-job などの標準的なジョブ コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Others come with specialized cmdlets that manage only a particular type of job.</source>
          <target state="translated">他のユーザーに特定の種類のジョブのみを管理する特殊なコマンドレットいます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For detailed information about custom job types, see the help topics about the job type.</source>
          <target state="translated">カスタムのジョブの種類の詳細については、ジョブの種類についてのヘルプ トピックを参照してください。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To find the job type of a job, use the Get-Job cmdlet.</source>
          <target state="translated">ジョブのジョブの種類を検索するには、Get-job コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Get-Job returns different job objects for different types of jobs.</source>
          <target state="translated">Get ジョブでは、さまざまな種類のジョブの別のジョブ オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The value of the PSJobTypeName property of the job objects that Get-Job returns indicates the job type.</source>
          <target state="translated">Get-job がによって返されるジョブ オブジェクトの PSJobTypeName プロパティの値では、ジョブの種類を示します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following table lists the job types that come with Windows PowerShell.</source>
          <target state="translated">次の表は、Windows PowerShell に付属しているジョブの種類を一覧表示します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Job Type         Description</source>
          <target state="translated">ジョブの種類の説明</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>BackgroundJob    Started by using the Start-Job cmdlet.</source>
          <target state="translated">BackgroundJob は、Start-job コマンドレットを使用して開始します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>RemoteJob        Started by using the AsJob parameter of the Invoke-Command cmdlet.</source>
          <target state="translated">RemoteJob は、Invoke-command コマンドレットの AsJob パラメーターを使用して起動します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>PSWorkflowJob    Started by using the AsJob parameter of a workflow.</source>
          <target state="translated">PSWorkflowJob は、ワークフローの AsJob パラメーターを使用して開始します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>PSScheduledJob   An instance of a scheduled job started by a job trigger.</source>
          <target state="translated">PSScheduledJob、スケジュールされたジョブのインスタンスは、ジョブ トリガーによって開始されます。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CIMJob           Started by using the AsJob parameter of a cmdlet from a CDXML module.</source>
          <target state="translated">CIMJob の CDXML モジュールのコマンドレットの AsJob パラメーターを使用して開始します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>WMIJob           Started by using the AsJob parameter of a cmdlet from a WMI module.</source>
          <target state="translated">WMIJob の WMI モジュールのコマンドレットの AsJob パラメーターを使用して開始します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>PSEventJob       Created by running Register-ObjectEvent and specifying an action with the Action parameter.</source>
          <target state="translated">PSEventJob は、Register-objectevent を実行していると、アクション パラメーターを持つアクションを指定することによって作成されます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>NOTE: Before using the Get-Job cmdlet to get jobs of a particular type, verify that the module that adds the job type is imported into the current session.</source>
          <target state="translated">注: Get-job コマンドレットを使用して、特定の種類のジョブを取得する、前に、ジョブの種類を追加するモジュールが現在のセッションにインポートされることを確認します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Otherwise, Get-Job does not get jobs of that type.</source>
          <target state="translated">それ以外の場合、Get ジョブはその種類のジョブを取得できません。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>EXAMPLE</source>
          <target state="translated">使用例</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following commands create a local background job, a remote background job, a workflow job, and a scheduled job.</source>
          <target state="translated">次のコマンドは、ローカルのバック グラウンド ジョブ、リモートのバック グラウンド ジョブ、ワークフロー ジョブおよびスケジュールされたジョブを作成します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Then, it uses the Get-Job cmdlet to get the jobs.</source>
          <target state="translated">次に、Get-job コマンドレットを使用して、ジョブを取得します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Get-Job does not get the scheduled job, but it gets any started instances of the scheduled job.</source>
          <target state="translated">Get ジョブがスケジュールされたジョブを取得できませんが、スケジュールされたジョブの開始されたインスタンスを取得します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Start a background job on the local computer.</source>
          <target state="translated">ローカル コンピューターでバック グラウンド ジョブを開始します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Start-Job -Name LocalData {Get-Process}</source>
          <target state="translated">PS c: &gt; 開始ジョブの名前をローカル ・ データ {Get-process}</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Id   Name        PSJobTypeName   State   HasMoreData     Location   Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>2    LocalData   BackgroundJob   Running        True     localhost  Get-Process</source>
          <target state="translated">2 つのローカル ・ データ BackgroundJob を実行している場合は True。 localhost Get-process</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Start a background job that runs on a remote computer.</source>
          <target state="translated">リモート コンピューター上で実行されるバック グラウンド ジョブを開始します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Invoke-Command -ComputerName Server01 {Get-Process} -AsJob -JobName RemoteData</source>
          <target state="translated">PS c: &gt; Invoke-command-computername Server01 {Get-process} AsJob-JobName RemoteData</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Id   Name        PSJobTypeName   State   HasMoreData     Location   Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>2    RemoteData  RemoteJob       Running        True     Server01   Get-Process</source>
          <target state="translated">2 つのリモート データ RemoteJob 実行 True Server01 Get-process</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Create a scheduled job PS C:&gt;  Register-ScheduledJob -Name ScheduledJob -ScriptBlock {Get-Process} ` -Trigger (New-JobTrigger -Once -At "3 PM")</source>
          <target state="translated">PS c: スケジュールされたジョブの作成 &gt; Register-scheduledjob-名前 ScheduledJob-scriptblock {Get-process} ' のトリガー (New-jobtrigger-"3 PM"に 1 回だけの)</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Id         Name            JobTriggers     Command       Enabled</source>
          <target state="translated">Id Name JobTriggers コマンドが有効になっています。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>1          ScheduledJob    1               Get-Process   True</source>
          <target state="translated">1 ScheduledJob 1 Get-process True</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Create a workflow.</source>
          <target state="translated">ワークフローを作成します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>PS C:&gt; workflow Test-Workflow {Get-Process}</source>
          <target state="translated">PS c: &gt; ワークフロー テスト ワークフロー {Get-process}</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Run the workflow as a job.</source>
          <target state="translated">ジョブとしてワークフローを実行します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Test-Workflow -AsJob -JobName TestWFJob</source>
          <target state="translated">PS c: &gt; - AsJob-JobName TestWFJob のテストのワークフロー</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Id   Name        PSJobTypeName   State   HasMoreData     Location   Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>2    TestWFJob   PSWorkflowJob   NotStarted     True     localhost  Get-Process</source>
          <target state="translated">2 TestWFJob PSWorkflowJob NotStarted True localhost Get-process</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Get the jobs.</source>
          <target state="translated">ジョブを取得します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The Get-Job command does not get scheduled jobs, but it gets instances of the scheduled job that are started.</source>
          <target state="translated">Get-job コマンドは、スケジュールされたジョブを取得できませんが、開始される、スケジュールされたジョブのインスタンスを取得します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Get-Job</source>
          <target state="translated">PS c: &gt; Get-job</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Id   Name         PSJobTypeName   State     HasMoreData     Location  Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>2    LocalData    BackgroundJob   Completed True            localhost Get-Process 4    RemoteData   RemoteJob       Completed True            Server01  Get-Process 6    TestWFJob    PSWorkflowJob   Completed True            localhost WorkflowJob 8    ScheduledJob PSScheduledJob  Completed True            localhost Get-Process</source>
          <target state="translated">2 つローカル ・ データ BackgroundJob 完了 True localhost Get-process 4 RemoteData RemoteJob 完了 True Server01 Get-process 6 TestWFJob PSWorkflowJob 完了した場合は True。 localhost WorkflowJob 8 ScheduledJob PSScheduledJob 完了した場合は True。 localhost Get-process</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To get scheduled jobs, use the Get-ScheduledJob cmdlet.</source>
          <target state="translated">スケジュールされたジョブを取得するには、Get-scheduledjob コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Get-ScheduledJob</source>
          <target state="translated">PS c: &gt; Get-scheduledjob</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Id         Name            JobTriggers     Command       Enabled</source>
          <target state="translated">Id Name JobTriggers コマンドが有効になっています。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>1          ScheduledJob    1               Get-Process   True</source>
          <target state="translated">1 ScheduledJob 1 Get-process True</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>about_Jobs about_Remote_Jobs about_Remote about_Scheduled_Jobs Invoke-Command Start-Job Get-Job Wait-Job Stop-Job Remove-Job Suspend-Job Resume-Job New-PSSession Enter-PSSession Exit-PSSession Register-ScheduledJob Get-ScheduleJob</source>
          <target state="translated">about_Jobs about_Remote_Jobs about_Remote about_Scheduled_Jobs Invoke-command Start-job Get-job Wait-job Stop-job Remove-job Suspend-job Resume-job New-pssession Enter-pssession Exit-pssession Register-scheduledjob Get-schedulejob</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>