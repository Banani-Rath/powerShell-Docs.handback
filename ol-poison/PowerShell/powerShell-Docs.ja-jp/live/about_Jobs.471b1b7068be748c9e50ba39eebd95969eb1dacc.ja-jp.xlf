<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c515eb55a24c380f3a2c78793d4d33bba5eb4d41</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Jobs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8889ef0e8f1b432489eb70cc91365cf9a55be368</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7148fd6a31045bc405e21fb68c7a8c1241c2030f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Jobs</source>
          <target state="translated">ジョブについて</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Provides information about how Windows PowerShell background jobs run a command or expression in the background without interacting with the current session.</source>
          <target state="translated">どの Windows PowerShell のバック グラウンド ジョブ コマンドまたは式をバック グラウンドで実行せず、現在のセッションと対話する方法について説明します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic explains how to run background jobs in Windows PowerShell on a local computer.</source>
          <target state="translated">このトピックでは、ローカル コンピューターで Windows PowerShell のバック グラウンド ジョブを実行する方法について説明します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information about running background jobs on remote computers, see about_Remote_Jobs.</source>
          <target state="translated">リモート コンピューターでバック グラウンド ジョブを実行する方法の詳細については、about_Remote_Jobs を参照してください。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you start a background job, the command prompt returns immediately, even if the job takes an extended time to complete.</source>
          <target state="translated">バック グラウンド ジョブを開始すると、ジョブの実行を完了するには、長時間なくてで、コマンド プロンプトが、すぐに返されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can continue to work in the session without interruption while the job runs.</source>
          <target state="translated">ジョブの実行中は、中断されることなく引き続きセッションで作業できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>THE JOB CMDLETS</source>
          <target state="translated">ジョブのコマンドレット</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Start-Job        Starts a background job on a local computer.</source>
          <target state="translated">ローカル コンピューター上のバック グラウンド ジョブの開始ジョブが開始します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Get-Job          Gets the background jobs that were started in the current session.</source>
          <target state="translated">Get ジョブが現在のセッションで開始されたバック グラウンド ジョブです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Receive-Job      Gets the results of background jobs.</source>
          <target state="translated">複数のジョブが表示されるバック グラウンド ジョブの結果。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Stop-Job         Stops a background job.</source>
          <target state="translated">停止ジョブの停止をバック グラウンド ジョブです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Wait-Job         Suppresses the command prompt until one or all jobs are complete.</source>
          <target state="translated">1 つまたはすべてのジョブまでコマンド プロンプトは wait-job ジョブを表示しませんが完了しました。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remove-Job       Deletes a background job.</source>
          <target state="translated">削除するジョブを削除するバック グラウンド ジョブです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Invoke-Command   The AsJob parameter runs any command as a background job on a remote computer.</source>
          <target state="translated">Invoke-command、AsJob パラメーターでは、リモート コンピューターでバック グラウンド ジョブとして任意のコマンドを実行します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also use Invoke-Command to run any job command remotely, including a Start-Job command.</source>
          <target state="translated">使用することできますも Invoke-command ジョブ コマンドをリモートで実行するのに Start-job コマンドを含みます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>HOW TO START A JOB ON THE LOCAL COMPUTER</source>
          <target state="translated">ローカル コンピューターで、ジョブを開始するには、方法</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To start a background job on the local computer, use the Start-Job cmdlet.</source>
          <target state="translated">ローカル コンピューターでバック グラウンド ジョブを開始するには、Start-job コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To write a Start-Job command, enclose the command that the job runs in braces ( { } ).</source>
          <target state="translated">Start-job コマンドを書き込むには、中かっこ ({}) で、ジョブが実行されているコマンドを囲みます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use the ScriptBlock parameter to specify the command.</source>
          <target state="translated">コマンドを指定するのにには、ScriptBlock パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following command starts a background job that runs a Get-Process command on the local computer.</source>
          <target state="translated">次のコマンドは、ローカル コンピューター上で Get-process コマンドを実行するバック グラウンド ジョブを開始します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Start-Job -ScriptBlock {Get-Process}</source>
          <target state="translated">Start-job-scriptblock {Get-process}</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The Start-Job command returns an object that represents the job.</source>
          <target state="translated">Start-job コマンドでは、ジョブを表すオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The job object contains useful information about the job, but it does not contain the job results.</source>
          <target state="translated">ジョブ オブジェクトには、ジョブに関する有用な情報が含まれていますが、ジョブの結果は含まれません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Save the job object in a variable, and then use it with the other Job cmdlets to manage the background job.</source>
          <target state="translated">ジョブ オブジェクトを変数に保存し、バック グラウンド ジョブを管理するその他のジョブ コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following command starts a job object and saves the resulting job object in the $job variable.</source>
          <target state="translated">次のコマンドは、ジョブ オブジェクトを開始し、結果のジョブ オブジェクトを $job 変数に保存します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>$job = Start-Job -ScriptBlock {Get-Process}</source>
          <target state="translated">$job = Start-job-scriptblock {Get-process}</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can also use the Get-Job cmdlet to get objects that represent the jobs started in the current session.</source>
          <target state="translated">また、Get-job コマンドレットを使用して、現在のセッションで開始されたジョブを表すオブジェクトを取得することができますもします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Get-Job returns the same job object that Start-Job returns.</source>
          <target state="translated">Get ジョブでは、その開始ジョブを返します。 同じジョブ オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>GETTING JOB OBJECTS</source>
          <target state="translated">ジョブ オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To get object that represent the background jobs that were started in the current session, use the Get-Job cmdlet.</source>
          <target state="translated">現在のセッションで開始されたバック グラウンド ジョブを表すオブジェクトを取得するには、Get-job コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Without parameters, Get-Job returns all of the jobs that were started in the current session.</source>
          <target state="translated">Get ジョブでは、パラメーターを指定せず、すべての現在のセッションで開始されたジョブを返します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the jobs in the current session.</source>
          <target state="translated">たとえば、次のコマンドは、現在のセッションでジョブを取得します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>PS C:&gt;Get-Job</source>
          <target state="translated">PS c: &gt; Get-job</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Id  Name  PSJobTypeName State      HasMoreData  Location   Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>1   Job1  BackgroundJob Running    True         localhost  Get-Process</source>
          <target state="translated">1 Job1 BackgroundJob を実行している場合は True。 localhost Get-process</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can also save the job object in a variable and use it to represent the job in a later command.</source>
          <target state="translated">ジョブ オブジェクトを変数に保存し、[以降のコマンドでジョブを表す使用することもできます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following command gets the job with ID 1 and saves it in the $job variable.</source>
          <target state="translated">次のコマンドは、ID 1 を使用してジョブを取得し、$job 変数に保存します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>$job = Get-Job -Id 1</source>
          <target state="translated">$job = Get-job-Id 1</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The job object contains the state of the job, which indicates whether the job has finished.</source>
          <target state="translated">ジョブ オブジェクトには、ジョブが完了したかどうかを示すと、ジョブの状態が含まれています。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A finished job has a state of "Complete" or "Failed".</source>
          <target state="translated">完成したジョブには、「完了」または"Failed"の状態があります。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A job might also be blocked or running.</source>
          <target state="translated">ジョブは、ブロックしているか実行されていることもあります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">Get-job</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Id  Name  PSJobTypeName State      HasMoreData  Location   Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>1   Job1  BackgroundJob Complete   True         localhost  Get-Process</source>
          <target state="translated">1 Job1 BackgroundJob 完了 True localhost Get-process</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>GETTING THE RESULTS OF A JOB</source>
          <target state="translated">ジョブの結果を取得します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you run a background job, the results do not appear immediately.</source>
          <target state="translated">バック グラウンド ジョブを実行すると、結果はすぐに表示されません。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Instead, the Start-Job cmdlet returns a job object that represents the job, but it does not contain the results.</source>
          <target state="translated">代わりに、Start-job コマンドレットをジョブを表すジョブ オブジェクトを返しますが、結果が含まれていません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To get the results of a background job, use the Receive-Job cmdlet.</source>
          <target state="translated">バック グラウンド ジョブの結果を取得するには、Receive-job コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following command uses the Receive-Job cmdlet to get the results of the job.</source>
          <target state="translated">次のコマンドでは、Receive-job コマンドレットを使用して、ジョブの結果を取得します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It uses a job object saved in the $job variable to identify the job.</source>
          <target state="translated">$Job 変数に保存されているジョブ オブジェクトを使用して、ジョブを特定します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Receive-Job -Job $job</source>
          <target state="translated">表示されるジョブのジョブの $job</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The Receive-Job cmdlet returns the results of the job.</source>
          <target state="translated">Receive-job コマンドレットには、ジョブの結果が返されます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)    Id ProcessName</source>
          <target state="translated">Npm (k) pm (k) ws (k) vm (m) [CPU Id ProcessName を処理します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56           1176 audiodg 804      14    12228      14108   100   101.74  1740 CcmExec 668       7     2672       6168   104    32.26   488 csrss</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec 668 7 2672 6168 104 32.26 488 csrss</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can also save the results of a job in a variable.</source>
          <target state="translated">ジョブの結果は変数に保存することもできます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following command saves the results of the job in the $job variable to the $results variable.</source>
          <target state="translated">次のコマンドは、$results 変数 $job 変数に、ジョブの結果を保存します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>$results = Receive-Job -Job $job</source>
          <target state="translated">$results = Receive-job-$job のジョブ</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>And, you can save the results of the job in a file by using the redirection operator (&gt;) or the Out-File cmdlet.</source>
          <target state="translated">リダイレクト演算子 (&gt;) を使用してファイルにジョブの結果を保存して、または、Out-file コマンドレットです。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following command uses the redirection operator to save the results of the job in the $job variable in the Results.txt file.</source>
          <target state="translated">次のコマンドでは、リダイレクト演算子を使用して、ジョブの結果を Results.txt ファイルで $job 変数に保存します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Receive-Job -Job $job &gt; results.txt</source>
          <target state="translated">表示されるジョブのジョブの $job &gt; results.txt</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>GETTING AND KEEPING PARTIAL JOB RESULTS</source>
          <target state="translated">取得して、部分を保持するジョブの結果</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The Receive-Job cmdlet gets the results of a background job.</source>
          <target state="translated">Receive-job コマンドレットでは、バック グラウンド ジョブの結果を取得します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the job is complete, Receive-Job gets all job results.</source>
          <target state="translated">ジョブが完了したら、Receive-job はすべてのジョブの結果を取得します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the job is still running, Receive-Job gets the results that have been generated thus far.</source>
          <target state="translated">ジョブがまだ実行されている場合、Receive-job はこれまでに生成された結果を取得します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can run Receive-Job commands again to get the remaining results.</source>
          <target state="translated">残りの結果を取得するには、もう一度 Receive-job コマンドを実行することができます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When Receive-Job returns results, by default, it deletes those results from the cache where job results are stored.</source>
          <target state="translated">Receive-job には、既定では、結果が返される、ときに、それらの結果をジョブの結果が格納されているキャッシュから削除します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you run another Receive-Job command, you get only the results that are not yet received.</source>
          <target state="translated">別の受信ジョブ コマンドを実行する場合は、まだ受信されていない結果のみを取得します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following commands show the results of Receive-Job commands run before the job is complete.</source>
          <target state="translated">次のコマンドは、ジョブが完了する前に実行された Receive-job コマンドの結果を示しています。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job</source>
          <target state="translated">C:\PS &gt; Receive-job-$job のジョブ</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">Npm (k) pm (k) ws (k) vm (m) [CPU Id ProcessName を処理します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56            1176 audiodg 804      14    12228      14108   100   101.74   1740 CcmExec</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job</source>
          <target state="translated">C:\PS &gt; Receive-job-$job のジョブ</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">Npm (k) pm (k) ws (k) vm (m) [CPU Id ProcessName を処理します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>68       3     2632        664    29     0.36   1388 ccmsetup 749      22    21468      19940   203   122.13   3644 communicator 905       7     2980       2628    34   197.97    424 csrss 1121      25    28408      32940   174   430.14   3048 explorer</source>
          <target state="translated">68 3 2632 664 29 0.36 1388 ccmsetup 749 22 21468 19940 203 122.13 3644 communicator 905 7 2980 2628 34 197.97 424 csrss 1121 25 28408 32940 174 430.14 3048 エクスプ ローラー</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To prevent Receive-Job from deleting the job results that it has returned, use the Keep parameter.</source>
          <target state="translated">Receive-job がジョブの結果を削除することを防ぐために、Keep パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>As a result, Receive-Job returns all of the results that have been generated until that time.</source>
          <target state="translated">その結果、Receive-job には、すべてのそれまでに生成された結果を返します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following commands show the effect of using the Keep parameter on a job that is not yet complete.</source>
          <target state="translated">次のコマンドが完了していないジョブで、Keep パラメーターを使用する効果を示しています。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job -Keep</source>
          <target state="translated">C:\PS &gt; Receive-job-$job をジョブの保存</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">Npm (k) pm (k) ws (k) vm (m) [CPU Id ProcessName を処理します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56            1176 audiodg 804      14    12228      14108   100   101.74   1740 CcmExec</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Job $job -Keep</source>
          <target state="translated">C:\PS &gt; Receive-job-$job をジョブの保存</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">Npm (k) pm (k) ws (k) vm (m) [CPU Id ProcessName を処理します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>103       4    11328       9692    56            1176 audiodg 804      14    12228      14108   100   101.74   1740 CcmExec 68       3     2632        664    29     0.36   1388 ccmsetup 749      22    21468      19940   203   122.13   3644 communicator 905       7     2980       2628    34   197.97    424 csrss 1121      25    28408      32940   174   430.14   3048 explorer</source>
          <target state="translated">103 4 11328 9692 56 1176 audiodg 804 14 12228 14108 100 101.74 1740 CcmExec 68 3 2632 664 29 0.36 1388 ccmsetup 749 22 21468 19940 203 122.13 3644 communicator 905 7 2980 2628 34 197.97 424 csrss 1121 25 28408 32940 174 430.14 3048 エクスプ ローラー</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>WAITING FOR THE RESULTS</source>
          <target state="translated">結果の待機</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you run a command that takes a long time to complete, you can use the properties of the job object to determine when the job is complete.</source>
          <target state="translated">完了に要する時間を長くするコマンドを実行する場合は、ジョブが完了するかを判断する、ジョブ オブジェクトのプロパティを使用できます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following command uses the Get-Job object to get all of the background jobs in the current session.</source>
          <target state="translated">次のコマンドでは、Get-job オブジェクトを使用して、現在のセッション内のすべてのバック グラウンド ジョブを取得します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">Get-job</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The results appear in a table.</source>
          <target state="translated">テーブルに結果が表示されます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The status of the job appears in the State column.</source>
          <target state="translated">ジョブの状態は、[状態] 列に表示されます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Id  Name  PSJobTypeName State      HasMoreData  Location   Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>1   Job1  BackgroundJob Complete    True         localhost  Get-Process 2   Job2  BackgroundJob Running     True         localhost  Get-EventLog -Log Syst... 3   Job3  BackgroundJob Complete    True         localhost  dir -Path C:<ph id="ph1">\*</ph> -Recurse</source>
          <target state="translated">1 Job1 BackgroundJob 完了 True localhost Get-process 2 Job2 BackgroundJob を実行している場合は True localhost Get-eventlog-ログ Syst..。3 つの Job3 BackgroundJob 完了 True localhost dir-パス c:<ph id="ph1">\*</ph> -再帰的に検索</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In this case, the State property reveals that Job 2 is still running.</source>
          <target state="translated">この場合、State プロパティは、ジョブ 2 がまだ実行されていることがわかります。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you were to use the Receive-Job cmdlet to get the job results now, the results would be incomplete.</source>
          <target state="translated">Receive-job コマンドレットを使用して、ジョブの結果を今すぐ入手した場合、結果が不完全には。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can use the Receive-Job cmdlet repeatedly to get all of the results.</source>
          <target state="translated">すべての結果を取得するのに、Receive-job コマンドレットを繰り返し使用できます。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>By default, each time you use it, you get only the results that were not already received, but you can use the Keep parameter of the Receive-Job cmdlet to retain the results, even though they were already received.</source>
          <target state="translated">既定では、使用するたびには、まだ受信されていない結果のみを取得するが、既に受信された場合でも、結果を保持する Receive-job コマンドレットの Keep パラメーターを使用することができます。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can write the partial results to a file and then append newer results as they arrive or you can wait and check the state of the job later.</source>
          <target state="translated">部分的な結果をファイルに書き込むおよびが到着するごと、または待機し、後で、ジョブの状態を確認し、新しい結果を追加できます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You can use the Wait parameter of the Receive-Job cmdlet, which does not return the command prompt until the job is complete and all results are available.</source>
          <target state="translated">Receive-job コマンドレットは、コマンド プロンプトを返さない場合、ジョブが完了して、すべての結果が利用できるまでの待機パラメーターを使用することができます。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can also use the Wait-Job cmdlet to wait for any or all of the results of the job.</source>
          <target state="translated">いずれかまたはすべてのジョブの結果を待つ Wait-job コマンドレットを使用することもできます。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Wait-Job lets you wait for a particular job, for all jobs, or for any of the jobs to be completed.</source>
          <target state="translated">Wait-job ジョブでは、特定のジョブ、すべてのジョブ、またはのいずれか、ジョブが完了するを待機することができます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following command uses the Wait-Job cmdlet to wait for a job with</source>
          <target state="translated">次のコマンドでは、Wait-job コマンドレットを使用してジョブ</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>ID 10.</source>
          <target state="translated">ID 10 です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Wait-Job -ID 10</source>
          <target state="translated">Wait-job ID 10</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>As a result, the Windows PowerShell prompt is suppressed until the job is completed.</source>
          <target state="translated">結果として、Windows PowerShell が、ジョブが完了するまでの確認が抑制されます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can also wait for a predetermined period of time.</source>
          <target state="translated">事前に定義された一定期間待機することもできます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This command uses the Timeout parameter to limit the wait to 120 seconds.</source>
          <target state="translated">このコマンドでは、タイムアウト パラメーターを使用して、120 秒に待機を制限します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When the time expires, the command prompt returns, but the job continues to run in the background.</source>
          <target state="translated">時間が経過すると、コマンド プロンプトが返されますが、ジョブがバック グラウンドで実行し続けます。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Wait-Job -ID 10 -Timeout 120</source>
          <target state="translated">Wait-job ID 10-timeout 120</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>STOPPING A JOB</source>
          <target state="translated">ジョブの停止</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To stop a background job, use the Stop-Job cmdlet.</source>
          <target state="translated">バック グラウンド ジョブを停止するには、Stop-job コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following command starts a job to get every entry in the System event log.</source>
          <target state="translated">次のコマンドは、システム イベント ログ内のすべてのエントリを取得するジョブを開始します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>It saves the job object in the $job variable.</source>
          <target state="translated">ジョブ オブジェクトは、$job 変数に保存します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>$job = Start-Job -ScriptBlock {Get-EventLog -Log System}</source>
          <target state="translated">$job Start-job ScriptBlock を = {Get-eventlog-ログ システム}</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following command stops the job.</source>
          <target state="translated">次のコマンドは、ジョブを停止します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator (|) to send the job in the $job variable to Stop-Job.</source>
          <target state="translated">停止ジョブを $job 変数にジョブを送信して、パイプライン演算子 (|) を使用します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>$job | Stop-Job</source>
          <target state="translated">$job |停止ジョブ</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>DELETING A JOB</source>
          <target state="translated">ジョブを削除します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>To delete a background job, use the Remove-Job cmdlet.</source>
          <target state="translated">バック グラウンド ジョブを削除するには、Remove-job コマンドレットを使用します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following command deletes the job in the $job variable.</source>
          <target state="translated">次のコマンドは、$job 変数にジョブを削除します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remove-Job -Job $job</source>
          <target state="translated">削除するジョブのジョブの $job</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>INVESTIGATING A FAILED JOB</source>
          <target state="translated">ジョブの失敗の調査</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To find out why a job failed, use the Reason subproperty of the job object.</source>
          <target state="translated">ジョブが失敗の理由について、ジョブ オブジェクトの理由のサブプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following command starts a job without the required credentials.</source>
          <target state="translated">次のコマンドでは、必要な資格情報なしのジョブを開始します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>It saves the job object in the $job variable.</source>
          <target state="translated">ジョブ オブジェクトは、$job 変数に保存します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>$job = Start-Job -ScriptBlock {New-Item -Path HKLM:\Software\MyCompany}</source>
          <target state="translated">$job Start-job ScriptBlock を = {New-item - パス HKLM:\Software\MyCompany}</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Id   Name  PSJobTypeName State    HasMoreData  Location   Command</source>
          <target state="translated">Id 名 PSJobTypeName 状態 HasMoreData 場所コマンド</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>1    Job1  BackgroundJob Failed   False        localhost  New-Item -Path HKLM:\S...</source>
          <target state="translated">1 Job1 BackgroundJob 失敗 False localhost New-item - パス HKLM:\S.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following command uses the Reason property to find the error that caused the job to fail.</source>
          <target state="translated">次のコマンドは、ジョブが失敗するのに原因となったエラーを検索するのに理由プロパティを使用します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>$job.ChildJobs[0].JobStateInfo.Reason</source>
          <target state="translated">$job します。ChildJobs [0]。JobStateInfo.Reason</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In this case, the job failed because the remote computer required explicit credentials to run the command.</source>
          <target state="translated">この場合、リモート コンピューターには、コマンドを実行する明示的な資格情報が必要なため、ジョブが失敗しました。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The value of the Reason property is:</source>
          <target state="translated">理由プロパティの値です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Connecting to remote server failed with the following error message : Access is denied.</source>
          <target state="translated">リモート サーバーに接続する次のエラー メッセージで失敗しました: アクセスが拒否されました。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>about_Remote_Jobs about_Job_Details about_Remote about_PSSessions Start-Job Get-Job Receive-Job Stop-Job Wait-Job Remove-Job Invoke-Command</source>
          <target state="translated">about_Remote_Jobs about_Job_Details about_Remote about_PSSessions Start-job Get-job Receive-job Stop-job Wait-job Remove-job Invoke-command</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>