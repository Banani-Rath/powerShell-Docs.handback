<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1279ddd07011124311dd97bd621ab525501691a3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Operator_Precedence.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfdffbc6a5e96b9db1e0ede0a09eb927ba37be52</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38499558304974aacfe4a41d2a64e8c60090a4b1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Operator_Precedence</source>
          <target state="translated">about_Operator_Precedence</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Operator Precedence</source>
          <target state="translated">演算子の優先順位について</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Operator_Precedence</source>
          <target state="translated">about_Operator_Precedence</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">トピック</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Operator_Precedence</source>
          <target state="translated">about_Operator_Precedence</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Lists the Windows PowerShell operators in precedence order.</source>
          <target state="translated">Windows PowerShell の演算子を優先順位順に一覧表示します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[This topic was contributed by Kirk Munro, a Windows PowerShell MVP from Ottawa, Ontario]</source>
          <target state="translated">[このトピックは、Kirk Munro、オタワ、オンタリオ州からの Windows PowerShell MVP によって提供された]</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">詳細説明</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell operators let you construct simple, but powerful expressions.</source>
          <target state="translated">Windows PowerShell の演算子を使用して、シンプルでありながら強力な式を作成できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This topic lists the operators in precedence order.</source>
          <target state="translated">このトピックでは、優先順位の演算子を示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Precedence order is the order in which Windows PowerShell evaluates the operators when multiple operators appear in the same expression.</source>
          <target state="translated">優先順位は、複数の演算子を同じ式で指定すると、Windows PowerShell 演算子を評価する順序です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When operators have equal precedence, Windows PowerShell evaluates them from left to right.</source>
          <target state="translated">演算子の優先順位の同じ場合は、Windows PowerShell を評価して左から右にします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The exceptions are the assignment operators, the cast operators, and the negation operators (!, -not, -bnot), which are evaluated from right to left.</source>
          <target state="translated">例外は、代入演算子、キャスト演算子、および否定演算子 (!、-、- いません ^)、これは右から左に評価されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use enclosures, such as parentheses, to override the standard precedence order and force Windows PowerShell to evaluate the enclosed part of an expression before an unenclosed part.</source>
          <target state="translated">かっこなどのエンクロージャは、標準の優先順位をオーバーライドし、Windows PowerShell に囲まれていない一部の前に式の含まれている一部の評価を強制的に使用できます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the following list, operators are listed in the order that they are evaluated.</source>
          <target state="translated">次の一覧には、演算子が評価される順序で一覧です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Operators on the same line, or in the same group, have equal precedence.</source>
          <target state="translated">同じ行に、または同じグループ内の演算子には、同じ優先順位があります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Operator column lists the operators.</source>
          <target state="translated">[演算子] 列には、演算子が一覧表示します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Reference column lists the Windows PowerShell Help topic in which the operator is described.</source>
          <target state="translated">参照列には、オペレーターが説明されている Windows PowerShell のヘルプ トピックが一覧表示します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To display the topic, type "get-help &lt;topic-name&gt;".</source>
          <target state="translated">トピックを表示するには、「get-help &lt; トピック名 &gt;」を入力します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>OPERATOR                         REFERENCE</source>
          <target state="translated">演算子リファレンス</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>$()  @()                         about_Operators</source>
          <target state="translated">$ () @ () about_Operators</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(dereference) :: (static)      about_Operators</source>
          <target state="translated">(逆参照):: about_Operators (静的)</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>[0] (index operator)             about_Operators</source>
          <target state="translated">[0] (インデックス演算子) about_Operators</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>[int] (cast operators)           about_Operators</source>
          <target state="translated">[int](キャスト演算子) about_Operators</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-split (unary) -join (unary)     about_Split, about_Join</source>
          <target state="translated">-(単項) を分割 - 結合 (単項) about_Split、about_Join</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>, (comma operator)               about_Operators</source>
          <target state="translated">、(コンマ演算子) about_Operators</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>++ --                            about_Assignment_Operators</source>
          <target state="translated">+ +--about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-not !</source>
          <target state="translated">-ありません!</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-bNot                     about_Logical_Operators, about_Comparison_Operators</source>
          <target state="translated">-いません ^ about_logical_operators」、about_Comparison_Operators</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>..</source>
          <target state="translated">..</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>(range operator)              about_Operators</source>
          <target state="translated">(範囲演算子) about_Operators</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-f (format operator)             about_Operators</source>
          <target state="translated">-f (形式演算子) about_Operators</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>/ %                            about_Arithmetic_Operators</source>
          <target state="translated">/%about_arithmetic_operators</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>about_Arithmetic_Operators</source>
          <target state="translated">about_Arithmetic_Operators</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following group of operators have equal precedence.</source>
          <target state="translated">演算子の次のグループには、同じ優先順位があります。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Their case-sensitive and explicitly case-insensitive variants have the same precedence.</source>
          <target state="translated">大文字と小文字および大文字を明示的に変化形では、同じ優先順位があります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>-split (binary)                  about_Split -join (binary)                   about_Join -is  -isnot  -as                 about_Type_Operators -eq  -ne  -gt  -gt  -lt  -le     about_Comparison_Operators -like  -notlike                  about_comparison_operators -match  -notmatch                about_comparison_operators -in -notIn                       about_comparison_operators -contains -notContains           about_comparison_operators -replace                         about_comparison_operators</source>
          <target state="translated">-(バイナリ) about_Split を分割-about_Join (バイナリ) に参加-- isnot は-about_Type_Operators-eq-ne-gt-gt lt として-le about_Comparison_Operators-などの notlike about_comparison_operators--notmatch about_comparison_operators が一致-- ない about_comparison_operators の-- notContains about_comparison_operators が含まれています-about_comparison_operators を置き換える</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The list resumes here with the following operators in precedence order:</source>
          <target state="translated">次の演算子を優先順位の一覧がここで再開されます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-band -bor -bxor                 about_Comparison_Operators</source>
          <target state="translated">-- bor-bxor about_Comparison_Operators の帯域外</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>-and -or -xor                    about_Comparison_Operators</source>
          <target state="translated">-および - または - xor about_Comparison_Operators</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(dot-source)  &amp; (call)         about_Scopes, about_Operators</source>
          <target state="translated">(ドット ソース形式) (&amp; a) (呼び出し) about_Scopes、about_Operators</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>| (pipeline operator)            about_Operators</source>
          <target state="translated">|(パイプライン演算子) about_Operators</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>2&gt;  2&gt;&gt;  2&gt;&amp;1             about_Redirection</source>
          <target state="translated">2 &gt; 2 &gt;&gt; 2 &gt; &amp; 1 about_Redirection</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>=  +=  -=  *=  /= %=             about_Assignment_Operators</source>
          <target state="translated">+ =-= = * =、/= % = about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following two commands show the arithmetic operators and the effect of using parentheses to force Windows PowerShell to evaluate the enclosed part of the expression first.</source>
          <target state="translated">次の 2 つのコマンドは、最初に、式の囲まれた部分を評価するには、算術演算子とかっこを使用して、Windows PowerShell を強制する効果を示します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 2 + 3 * 4</source>
          <target state="translated">C:\PS &gt; 2 + 3 * 4</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>14</source>
          <target state="translated">14</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (2 + 3) * 4</source>
          <target state="translated">C:\PS &gt; (2 + 3) * 4</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>20</source>
          <target state="translated">20</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example gets the read-only text files from the local directory and saves them in the $read_only variable.</source>
          <target state="translated">次の例では、ローカル ディレクトリから読み取り専用のテキスト ファイルを取得し、$read_only 変数に保存します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>$read_only = get-childitem *.txt | where-object {$_.isReadOnly}</source>
          <target state="translated">$read_only =、get-childitem *.txt |where-object {$_.isReadOnly}</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It is equivalent to the following example.</source>
          <target state="translated">これは、次の例に相当します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>$read_only = ( get-childitem *.txt | where-object {$_.isReadOnly} )</source>
          <target state="translated">$read_only = (get-childitem *.txt | where-object {$_.isReadOnly})</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because the pipeline operator (|) has a higher precedence than the assignment operator (=), the files that the Get-ChildItem cmdlet gets are sent to the Where-Object cmdlet for filtering before they are assigned to the $read_only variable.</source>
          <target state="translated">パイプライン演算子 (|) は、代入演算子 (=) より高い優先順位があるために、Get-childitem コマンドレットを取得するファイルは $read_only 変数に割り当てられる前にフィルター処理、Where-object コマンドレットに送信されます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example demonstrates that the index operator takes precedence over the cast operator.</source>
          <target state="translated">次の例では、ある添字演算子よりも優先、キャスト演算子を示します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The first expression creates an array of three strings.</source>
          <target state="translated">最初の式では、3 つの文字列の配列を作成します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Then, it uses the index operator with a value of 0 to select the first object in the array, which is the first string.</source>
          <target state="translated">次に、その、インデックス演算子を使用して、値 0 は、配列は、最初の文字列で最初のオブジェクトを選択します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Finally, it casts the selected object as a string.</source>
          <target state="translated">最後に、選択したオブジェクトを文字列としてキャストします。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In this case, the cast has no effect.</source>
          <target state="translated">この場合は、キャストは、影響を与えません。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]@('Windows','PowerShell','2.0')[0] Windows</source>
          <target state="translated">C:\PS &gt; [string]@('Windows','PowerShell','2.0') [0] ウィンドウ</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The second expression uses parentheses to force the cast operation to occur before the index selection.</source>
          <target state="translated">2 番目の式は、インデックスの選択が発生すると、キャスト操作を強制的にかっこを使用します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>As a result, the entire array is cast as a (single) string.</source>
          <target state="translated">その結果、配列全体は、(1 つ) の文字列としてキャストされます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Then, the index operator selects the first item in the string array, which is the first character.</source>
          <target state="translated">次に、添字演算子は、最初の文字は、文字列の配列の最初の項目を選択します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; ([string]@('Windows','PowerShell','2.0'))[0]</source>
          <target state="translated">C:\PS &gt; ([string]@('Windows','PowerShell','2.0')) [0]</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the following example, because the -gt (greater-than) operator has a higher precedence than the -and (logical AND) operator, the result of the expression is FALSE.</source>
          <target state="translated">次の例でため、-gt (大きい-よりも) 演算子より高い優先順位は、(論理 and) 演算子、式の結果は FALSE。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 2 -gt 4 -and 1 False</source>
          <target state="translated">C:\PS &gt; 2-gt し 1、4 - False</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It is equivalent to the following expression.</source>
          <target state="translated">これは、次の式に相当します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (2 -gt 4) -and 1 False</source>
          <target state="translated">C:\PS &gt; (2-gt 4)-1 には false</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If the -and operator had higher precedence, the answer would be TRUE.</source>
          <target state="translated">場合は、演算子が優先順位が高いと、その答えは TRUE になります。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 2 -gt (4 -and 1) True</source>
          <target state="translated">C:\PS &gt; 2-gt (4 - および 1) True</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, this example demonstrates an important principle of managing operator precedence.</source>
          <target state="translated">ただし、この例は、演算子の優先順位の管理における重要な原則を示します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When an expression is difficult for people to interpret, use parentheses to force the evaluation order, even when it forces the default operator precedence.</source>
          <target state="translated">式が解釈することが困難である場合は、かっこを使用して、既定の演算子の優先順位を強制している場合でも、評価順序を強制的にします。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The parentheses make your intentions clear to people who are reading and maintaining your scripts.</source>
          <target state="translated">かっこは、オフにすると、スクリプトを維持しているユーザー、開発者の意図を作成します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">関連項目</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators about_Comparison_Operators about_Join about_Logical_Operators about_Operators about_Redirection about_Scopes about_Split about_Type_Operators</source>
          <target state="translated">about_Assignment_Operators about_Comparison_Operators about_Join about_logical_operators」about_Operators about_Redirection about_Scopes about_Split about_Type_Operators</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>