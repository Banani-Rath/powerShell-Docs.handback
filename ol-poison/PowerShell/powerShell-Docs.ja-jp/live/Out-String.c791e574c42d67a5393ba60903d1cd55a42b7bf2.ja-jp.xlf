<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60af40f1100548229d2e571293b832a23ac852da</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Out-String.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d36c2ac520544c0e050972d1d754a96f1cfad84</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d09caffddee3a2bfc29f67cd6387c3ca814a29ee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell コマンドレット</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Out-String</source>
          <target state="translated">Out-String</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Out-String</source>
          <target state="translated">Out-String</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">概要</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Sends objects to the host as a series of strings.</source>
          <target state="translated">オブジェクトを一連の文字列としてホストに送信します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">構文</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Out-String<ept id="p1">**</ept> cmdlet converts the objects that Windows PowerShell manages into an array of strings.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Out-string<ept id="p1">**</ept> コマンドレットは、Windows PowerShell を管理するオブジェクトを文字列の配列に変換します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Out-String<ept id="p1">**</ept> accumulates the strings and returns them as a single string, but you can use the stream parameter to direct <bpt id="p2">**</bpt>Out-String<ept id="p2">**</ept> to return one string at a time.</source>
          <target state="translated">既定では、 <bpt id="p1">**</bpt>Out-string<ept id="p1">**</ept> は文字列を蓄積を特定する stream パラメーターを使用して 1 つの文字列として返します <bpt id="p2">**</bpt>Out-string<ept id="p2">**</ept> を一度に 1 つの文字列を返します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This cmdlet lets you search and manipulate string output as you would in traditional shells when object manipulation is less convenient.</source>
          <target state="translated">オブジェクトを簡単に操作できないときに、このコマンドレットを使用すると、従来のシェルで行う場合と同じように文字列出力を検索して操作することができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example 1: Output text to the console as a string</source>
          <target state="translated">文字列としてコンソールに出力テキストの例 1:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This command sends the content of the Testfile2.txt file to the console as a single string.</source>
          <target state="translated">このコマンドは、Testfile2.txt ファイルの内容を 1 つの文字列としてコンソールに送信します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It uses the Get-Content cmdlet to get the content of the file.</source>
          <target state="translated">Get-content コマンドレットを使用して、ファイルの内容を取得します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The pipeline operator (|) sends the content to <bpt id="p1">**</bpt>Out-String<ept id="p1">**</ept>, which sends the content to the console as a string.</source>
          <target state="translated">パイプライン演算子 (|) を送信するコンテンツ <bpt id="p1">**</bpt>Out-string<ept id="p1">**</ept>, 、コンテンツを文字列としてコンソールに送信します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example 2: Get the current culture and convert the data to strings.</source>
          <target state="translated">例 2: は、現在のカルチャを取得し、データを文字列に変換します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These commands get the regional settings for the current user and convert the data to strings.</source>
          <target state="translated">これらのコマンドは、現在のユーザーの地域の設定を取得し、データを文字列に変換します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example 3: Working with objects</source>
          <target state="translated">例 3: オブジェクトの使用</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This example demonstrates the difference between working with objects and working with strings.</source>
          <target state="translated">この例では、オブジェクトの使用と文字列の使用の違いを示します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The command displays aliases that include the phrase Get-Command.</source>
          <target state="translated">Get コマンドの語句を含むエイリアスを表示します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It uses the Get-Alias cmdlet to get a set of <bpt id="p1">**</bpt>AliasInfo<ept id="p1">**</ept> objects (one for each alias in the current session).</source>
          <target state="translated">セットを取得する Get-alias コマンドレットを使用して <bpt id="p1">**</bpt>AliasInfo<ept id="p1">**</ept> (現在のセッションでエイリアスごとに 1 つ) のオブジェクト。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The pipeline operator (|) sends the output of the <bpt id="p1">**</bpt>Get-Alias<ept id="p1">**</ept> cmdlet to the <bpt id="p2">**</bpt>Out-String<ept id="p2">**</ept> cmdlet, which converts the objects to a series of strings.</source>
          <target state="translated">パイプライン演算子 (|) の出力を送信する、 <bpt id="p1">**</bpt>Get-alias<ept id="p1">**</ept> コマンドレットを <bpt id="p2">**</bpt>Out-string<ept id="p2">**</ept> コマンドレットに渡して、オブジェクトを一連の文字列に変換します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>Stream<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>Out-String<ept id="p2">**</ept> to send each string individually, instead of concatenating them into a single string.</source>
          <target state="translated">使用して、 <bpt id="p1">*</bpt>ストリーム<ept id="p1">*</ept> のパラメーター <bpt id="p2">**</bpt>Out-string<ept id="p2">**</ept> が 1 つの文字列に連結するのではなく、個別に各文字列を送信します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Another pipeline operator sends the strings to the Select-String cmdlet, which selects the strings that include <bpt id="p1">**</bpt>Get-Command<ept id="p1">**</ept> anywhere in the string.</source>
          <target state="translated">別のパイプライン演算子を含む文字列を選択して、Select-string コマンドレットに文字列を送信する <bpt id="p1">**</bpt>Get-command<ept id="p1">**</ept> 文字列の任意の場所。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you omit the <bpt id="p1">*</bpt>Stream<ept id="p1">*</ept> parameter, the command displays all of the aliases, because <bpt id="p2">**</bpt>Select-String<ept id="p2">**</ept> finds <bpt id="p3">**</bpt>Get-Command<ept id="p3">**</ept> in the single string that <bpt id="p4">**</bpt>Out-String<ept id="p4">**</ept> returns, and the formatter displays the string as a table.</source>
          <target state="translated">省略すると、 <bpt id="p1">*</bpt>ストリーム<ept id="p1">*</ept> コマンドのパラメーターではのエイリアスのすべてが表示されるため <bpt id="p2">**</bpt>Select-string<ept id="p2">**</ept> 検索 <bpt id="p3">**</bpt>Get-command<ept id="p3">**</ept> 、1 つの文字列を <bpt id="p4">**</bpt>Out-string<ept id="p4">**</ept> を返し、フォーマッタは、文字列をテーブルとして表示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">パラメータ</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-Inputobject</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specifies the objects to be written to a string.</source>
          <target state="translated">文字列に書き込むオブジェクトを指定します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects, or type a command or expression that gets the objects.</source>
          <target state="translated">オブジェクトが格納されている変数を入力するか、オブジェクトを取得するコマンドまたは式を入力します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-Stream</source>
          <target state="translated">-ストリーム</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Indicates that the cmdlet sends the strings for each object separately.</source>
          <target state="translated">コマンドレットとは別にオブジェクトごとに文字列を送信することを示します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By default, the strings for each object are accumulated and sent as a single string.</source>
          <target state="translated">既定では、各オブジェクトのための文字列が蓄積されて 1 つの文字列として送信されます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To use the <bpt id="p1">*</bpt>Stream<ept id="p1">*</ept> parameter, type <ph id="ph1">`-Stream`</ph> or its alias, <ph id="ph2">`ost`</ph>.</source>
          <target state="translated">使用する、 <bpt id="p1">*</bpt>ストリーム<ept id="p1">*</ept> パラメーターには、型 <ph id="ph1">`-Stream`</ph> またはそのエイリアス <ph id="ph2">`ost`</ph>します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>-Width</source>
          <target state="translated">幅</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specifies the number of characters in each line of output.</source>
          <target state="translated">出力の各行の文字数を指定します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Any additional characters are truncated, not wrapped.</source>
          <target state="translated">これを超過する文字は、折り返されることなく切り捨てられます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you omit this parameter, the width is determined by the characteristics of the host program.</source>
          <target state="translated">このパラメーターを省略した場合、ホスト プログラムの特性によって幅が決まります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default value for the Windows PowerShell console is 80 (characters).</source>
          <target state="translated">Windows PowerShell コンソールの既定値は 80 (文字) です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">このコマンドレットは、共通のパラメーターをサポートしています:-デバッグ、-erroraction、-errorvariable、- InformationAction-InformationVariable、- OutVariable、-OutBuffer、- PipelineVariable、- Verbose、および - WarningVariable です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">詳細については、about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216) を参照してください。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">入力</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can pipe objects to <bpt id="p1">**</bpt>Out-String<ept id="p1">**</ept>.</source>
          <target state="translated">オブジェクトをパイプする <bpt id="p1">**</bpt>Out-string<ept id="p1">**</ept>します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">出力</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Out-String<ept id="p1">**</ept> returns the string that it creates from the input object.</source>
          <target state="translated"><bpt id="p1">**</bpt>Out-string<ept id="p1">**</ept> 入力オブジェクトから作成した文字列を返します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">ノート</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The cmdlets that contain the <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> verb that do not format objects; they just render them and send them to the specified display destination.</source>
          <target state="translated">含む、 <bpt id="p1">**</bpt>アウト<ept id="p1">**</ept> 動詞をオブジェクトを書式設定されません。 を単レンダリングして指定された表示先に送信します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you send an unformatted object to an <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> cmdlet, the cmdlet sends it to a formatting cmdlet before rendering it.</source>
          <target state="translated">書式設定されていないオブジェクトを送信する場合、 <bpt id="p1">**</bpt>アウト<ept id="p1">**</ept> コマンドレットでは、送信書式設定コマンドレットを表示する前にします。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> cmdlets do not have parameters that take names or file paths.</source>
          <target state="translated"> <bpt id="p1">**</bpt>アウト<ept id="p1">**</ept> コマンドレットには名前を取得またはファイル パス パラメーターがありません。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To send data to an <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> cmdlet, use a pipeline operator (|) to send the output of a Windows PowerShell command to the cmdlet.</source>
          <target state="translated">データを送信する、 <bpt id="p1">**</bpt>アウト<ept id="p1">**</ept> コマンドレットでは、パイプライン演算子 (|) を使用して、Windows PowerShell コマンドの出力をコマンドレットに送信します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can also store data in a variable and use the <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> parameter to pass the data to the cmdlet.</source>
          <target state="translated">変数で使用するデータを格納することも、 <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> にデータをコマンドレットに渡すパラメーター。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">関連リンク</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Out-Default</source>
          <target state="translated">Out-Default</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Out-File</source>
          <target state="translated">Out-file します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Out-GridView</source>
          <target state="translated">Out-GridView</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Out-Host</source>
          <target state="translated">Out-Host</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Out-Null</source>
          <target state="translated">Out-Null</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Out-Printer</source>
          <target state="translated">Out-printer</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>