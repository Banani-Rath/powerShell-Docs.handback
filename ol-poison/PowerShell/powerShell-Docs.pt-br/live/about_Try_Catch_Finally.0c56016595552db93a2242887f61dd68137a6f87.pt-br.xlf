<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f92494bf34214dec0aa5aa0cefe972387b7c755</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Try_Catch_Finally.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2d39fa14c37419b7aedaad940ede5d145a65c6e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac22de6e0ef9736ca56bc0e3cd3772e6f5faa735</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell, cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Try Catch Finally</source>
          <target state="translated">Sobre Try Catch Finally</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIÇÃO BREVE</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use the Try, Catch, and Finally blocks to handle terminating errors.</source>
          <target state="translated">Descreve como usar o Try, Catch e Finally blocos para manipular erros de finalização.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIÇÃO LONGA</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use Try, Catch, and Finally blocks to respond to or handle terminating errors in scripts.</source>
          <target state="translated">Use Try, Catch e Finally blocos para responder a ou manipular os erros de finalização em scripts.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Trap statement can also be used to handle terminating errors in scripts.</source>
          <target state="translated">A instrução Trap também pode ser usada para manipular erros de finalização em scripts.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see about_Trap.</source>
          <target state="translated">Para obter mais informações, consulte about_Trap.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">Um erro de encerramento interrompe uma instrução de execução.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script using the current pipeline.</source>
          <target state="translated">Se o Windows PowerShell não manipular um erro de encerramento de alguma forma, o Windows PowerShell também interrompe executando a função ou script usando o pipeline atual.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">Em outras linguagens, como C<ph id="ph1">\#</ph>, erros de finalização são conhecidos como exceções.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about errors, see about_Errors.</source>
          <target state="translated">Para obter mais informações sobre erros, consulte about_Errors.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the Try block to define a section of a script in which you want  Windows PowerShell to monitor for errors.</source>
          <target state="translated">Use o bloco Try para definir uma seção de um script no qual você deseja o Windows PowerShell para monitorar erros.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When an error occurs within the Try block, the error is first saved to the $Error automatic variable.</source>
          <target state="translated">Quando ocorre um erro dentro do bloco Try, o erro é salvo primeiro a variável automática $Error.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Windows PowerShell then searches for a Catch block to handle the error.</source>
          <target state="translated">O Windows PowerShell, em seguida, procura por um bloco Catch manipular o erro.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the Try statement does not have a  matching Catch block,  Windows PowerShell continues to search for an appropriate Catch block or Trap statement in the parent scopes.</source>
          <target state="translated">Se a instrução Try não tem um bloco Catch coincidente, Windows PowerShell continuará a procurar por um bloco Catch adequado ou instrução Trap em escopos pai.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After a Catch block is completed or if no appropriate Catch block or Trap statement is found, the Finally block is run.</source>
          <target state="translated">Após a conclusão de um bloco Catch ou se nenhum bloco Catch adequado ou instrução Trap for encontrada, o bloco Finally será executado.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the error cannot be handled, the error is written to the error stream.</source>
          <target state="translated">Se o erro não pode ser tratado, o erro é gravado para o fluxo de erro.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A Catch block can include commands for tracking the failure or for recovering the expected flow of the script.</source>
          <target state="translated">Um bloco Catch pode incluir comandos para controlar a falha ou para recuperar o fluxo esperado do script.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A Catch block can specify which error types it catches.</source>
          <target state="translated">Um bloco Catch pode especificar qual erro tipos, captura.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for different kinds of errors.</source>
          <target state="translated">Uma instrução Try pode incluir vários blocos Catch para diferentes tipos de erros.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A Finally block can be used to free any resources that are no longer needed by your script.</source>
          <target state="translated">Um por último bloco pode ser usado para liberar quaisquer recursos que não são mais necessários pelo script.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Try, Catch, and Finally resemble the Try, Catch, and Finally keywords used in the C<ph id="ph1">\#</ph> programming language.</source>
          <target state="translated">Try, Catch e Finally lembram o Try, Catch e Finally palavras-chave usadas de C<ph id="ph1">\#</ph> linguagem de programação.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">SINTAXE</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A Try statement contains a Try block, zero or more Catch blocks, and zero or one Finally block.</source>
          <target state="translated">Uma instrução Try contém um bloco Try, zero ou mais blocos Catch, e zero ou um bloco Finally.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A Try statement must have at least one Catch block or one Finally block.</source>
          <target state="translated">Uma instrução Try deve ter pelo menos um bloco Catch ou um bloco Finally.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following shows the Try block syntax:</source>
          <target state="translated">O exemplo a seguir mostra a sintaxe do bloco Try:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Try keyword is followed by a statement list in braces.</source>
          <target state="translated">A palavra-chave Try é seguida por uma lista de instruções entre chaves.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs while the statements in the statement list are being run, the script passes the error object from the Try block to an appropriate Catch block.</source>
          <target state="translated">Se ocorrer um erro de finalização enquanto as instruções na lista de instrução estiverem sendo executadas, o script passa o objeto de erro do bloco Try para um bloco Catch apropriado.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following shows the Catch block syntax:</source>
          <target state="translated">O exemplo a seguir mostra a sintaxe do bloco Catch:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Error types appear in brackets.</source>
          <target state="translated">Tipos de erro aparecem entre colchetes.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The outermost brackets indicate the element is optional.</source>
          <target state="translated">As chaves mais externas indicam que o elemento é opcional.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Catch keyword is followed by an optional list of error type specifications and a statement list.</source>
          <target state="translated">A palavra-chave Catch é seguida por uma lista opcional de especificações de tipo de erro e uma lista de instruções.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the Try block,  Windows PowerShell searches for an appropriate Catch block.</source>
          <target state="translated">Se ocorrer um erro de terminação no bloco Try, o Windows PowerShell procura um bloco Catch adequado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If one is found, the statements in the Catch block are executed.</source>
          <target state="translated">Se uma for encontrada, são executadas as instruções no bloco Catch.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The Catch block can specify one or more error types.</source>
          <target state="translated">O bloco Catch pode especificar um ou mais tipos de erro.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An error type is a Microsoft .NET Framework exception or an exception that is derived from a .NET Framework exception.</source>
          <target state="translated">Um tipo de erro é uma exceção do Microsoft .NET Framework ou uma exceção que é derivada de uma exceção do .NET Framework.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">Um bloco Catch lida com erros de classe de exceção do .NET Framework especificado ou de qualquer classe que deriva da classe especificada.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a Catch block specifies an error type, that Catch block handles that type of error.</source>
          <target state="translated">Se um bloco Catch Especifica um tipo de erro, esse bloco Catch lida com esse tipo de erro.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If a Catch block does not specify an error type, that Catch block handles any error encountered in the Try block.</source>
          <target state="translated">Se um bloco Catch não especificar um tipo de erro, esse bloco Catch lida com qualquer erro encontrado no bloco Try.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for the different specified error types.</source>
          <target state="translated">Uma instrução Try pode incluir vários blocos Catch para os tipos diferentes de erro especificada.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following shows the Finally block syntax:</source>
          <target state="translated">A seguir mostra o bloco Finally a sintaxe:</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Finally keyword is followed by a statement list that runs every time the script is run, even if the Try statement ran without error or an error was caught in a Catch statement.</source>
          <target state="translated">O finalmente a palavra-chave é seguido por uma lista de instrução que será executada sempre que o script é executado, mesmo se a instrução Try for executado sem erro ou um erro foi detectado em uma instrução Catch.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that pressing CTRL<ph id="ph1">\+</ph>C stops the pipeline.</source>
          <target state="translated">Observe que pressionar CTRL<ph id="ph1">\+</ph>C interrompe o pipeline.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Objects that are sent to the pipeline will not be displayed as output.</source>
          <target state="translated">Objetos que são enviados para o pipeline não serão exibidos como saída.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, if you include a statement to be displayed, such as "Finally block has run", it will not be displayed after you press CTRL<ph id="ph1">\+</ph>C, even if the Finally block ran.</source>
          <target state="translated">Portanto, se você incluir uma instrução a ser exibida, como "Finalmente bloco foi executado", ele não será exibido depois que você pressionar CTRL<ph id="ph1">\+</ph>C, mesmo se o finalmente bloco foi executado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CATCHING ERRORS</source>
          <target state="translated">CAPTURA DE ERROS</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following sample script shows a Try block with a Catch block:</source>
          <target state="translated">O script de exemplo a seguir mostra um bloco Try com um bloco Catch:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Catch keyword must immediately follow the Try block or another Catch block.</source>
          <target state="translated">A palavra-chave Catch deve vir logo após a tentativa de bloco ou outro bloco Catch.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Windows PowerShell does not recognize "NonsenseString" as a cmdlet or other item.</source>
          <target state="translated">O Windows PowerShell não reconhece "NonsenseString" como um cmdlet ou outro item.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Running this script returns the following result:</source>
          <target state="translated">Executar esse script retorna o seguinte resultado:</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the script encounters "NonsenseString", it causes a terminating error.</source>
          <target state="translated">Quando o script encontra "NonsenseString", ocorrerá um erro de encerramento.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Catch block handles the error by running the statement list inside the block.</source>
          <target state="translated">O bloco Catch lida com o erro ao executar a lista de instruções dentro do bloco.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>USING MULTIPLE CATCH STATEMENTS</source>
          <target state="translated">USANDO VÁRIAS INSTRUÇÕES CATCH</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A Try statement can have any number of Catch blocks.</source>
          <target state="translated">Uma instrução Try pode ter qualquer número de blocos Catch.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script has a Try block that downloads MyFile.doc, and it contains two Catch blocks:</source>
          <target state="translated">Por exemplo, o script a seguir tem um bloco Try que baixa MeuArquivo e contém dois blocos Catch:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first Catch block handles errors of the System.Net.WebException and System.IO.IOException types.</source>
          <target state="translated">O primeiro bloco Catch lida com os erros dos tipos System.Net.WebException e System.IO.IOException.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second Catch block does not specify an error type.</source>
          <target state="translated">O segundo bloco Catch não especifica um tipo de erro.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second Catch block handles any other terminating errors that occur.</source>
          <target state="translated">O segundo bloco Catch lida com quaisquer outros erros de finalização que ocorrem.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Windows PowerShell matches error types by inheritance.</source>
          <target state="translated">Windows PowerShell faz a correspondência de tipos de erro por herança.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">Um bloco Catch lida com erros de classe de exceção do .NET Framework especificado ou de qualquer classe que deriva da classe especificada.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example contains a Catch block that catches a "Command Not Found" error:</source>
          <target state="translated">O exemplo a seguir contém um bloco Catch que captura um erro "Comando não encontrado":</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The specified error type, CommandNotFoundException, inherits from the System.SystemException type.</source>
          <target state="translated">O tipo de erro especificada, CommandNotFoundException, herda do tipo System. SystemException.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example also catches a Command Not Found error:</source>
          <target state="translated">O exemplo a seguir também detecta um erro de comando não encontrado:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This Catch block handles the "Command Not Found" error and other errors that inherit from the SystemException type.</source>
          <target state="translated">Esse bloco Catch lida com o erro "Comando não encontrado" e outros erros que herdam do tipo SystemException.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you specify an error class and one of its derived classes, place the Catch block for the derived class before the Catch block for the general class.</source>
          <target state="translated">Se você especificar uma classe de erro e uma de suas classes derivadas, coloque o bloco Catch para a classe derivada antes do bloco Catch para a classe geral.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>FREEING RESOURCES BY USING FINALLY</source>
          <target state="translated">LIBERAÇÃO DE RECURSOS USANDO FINALLY</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To free resources used by a script, add a Finally block after the Try and Catch blocks.</source>
          <target state="translated">Para liberar recursos usados por um script, adicione um bloco Finally após os blocos Try e Catch.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The Finally block statements run regardless of whether the Try block encounters a terminating error.</source>
          <target state="translated">O bloco Finally declarações são executadas, independentemente se o bloco Try encontra um erro de encerramento.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Windows PowerShell runs the Finally block before the script terminates or before the current block goes out of scope.</source>
          <target state="translated">O Windows PowerShell executa o bloco Finally antes do script é encerrado ou antes do bloco atual sai do escopo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A Finally block runs even if you use CTRL<ph id="ph1">\+</ph>C to stop the script.</source>
          <target state="translated">Um bloco Finally é executado mesmo se você usar CTRL<ph id="ph1">\+</ph>C para interromper o script.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A Finally block also runs if an Exit keyword stops the script from within a Catch block.</source>
          <target state="translated">Um bloco Finally também é executado se uma palavra-chave Exit para o script de um bloco Catch.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">CONSULTE TAMBÉM</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>