<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3c2087bf369456b20a16a8cb57793c7fcaebe79</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Try_Catch_Finally.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00842595bbbf58525893553e3c10f4a203254ab3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac22de6e0ef9736ca56bc0e3cd3772e6f5faa735</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Try Catch Finally</source>
          <target state="translated">약 Catch를 마지막으로 시도</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Try_Catch_Finally</source>
          <target state="translated">about_Try_Catch_Finally</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use the Try, Catch, and Finally blocks to handle terminating errors.</source>
          <target state="translated">종료 오류를 처리 하는 Try, Catch, 및 Finally 블록을 사용 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use Try, Catch, and Finally blocks to respond to or handle terminating errors in scripts.</source>
          <target state="translated">Try, Catch, 및 Finally 블록을 사용 하 여 응답 하거나 스크립트에서 종료 오류를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Trap statement can also be used to handle terminating errors in scripts.</source>
          <target state="translated">Trap 문은 스크립트의 종료 오류 처리 데도 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see about_Trap.</source>
          <target state="translated">자세한 내용은 about_Trap를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A terminating error stops a statement from running.</source>
          <target state="translated">종료 오류는 문 실행에서을 중지합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If  Windows PowerShell� does not handle a terminating error in some way,  Windows PowerShell also stops running the function or script using the current pipeline.</source>
          <target state="translated">Windows PowerShell 어떤 식으로든에서 종료 오류를 처리 하지 않는 Windows PowerShell도 중지 함수 또는 현재 파이프라인을 사용 하 여 스크립트 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In other languages, such as C<ph id="ph1">\#</ph>, terminating errors are referred to as exceptions.</source>
          <target state="translated">C와 같은 다른 언어로<ph id="ph1">\#</ph>, 종료 오류가 예외 라고 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about errors, see about_Errors.</source>
          <target state="translated">오류에 대 한 자세한 내용은 about_Errors를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the Try block to define a section of a script in which you want  Windows PowerShell to monitor for errors.</source>
          <target state="translated">오류에 대 한 Windows PowerShell을 모니터링 하려는 스크립트의 섹션을 정의 하는 Try 블록을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When an error occurs within the Try block, the error is first saved to the $Error automatic variable.</source>
          <target state="translated">Try 블록 내에서 오류가 발생 하는 경우 오류 먼저 $Error 자동 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Windows PowerShell then searches for a Catch block to handle the error.</source>
          <target state="translated">Windows PowerShell에서 오류를 처리 하는 Catch 블록에 대 한 검색 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the Try statement does not have a  matching Catch block,  Windows PowerShell continues to search for an appropriate Catch block or Trap statement in the parent scopes.</source>
          <target state="translated">Try 문을 일치 하는 Catch 블록에 없는 경우 Windows PowerShell는 적절 한 Catch 블록 또는 부모 범위에 Trap 문을 검색할 계속 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After a Catch block is completed or if no appropriate Catch block or Trap statement is found, the Finally block is run.</source>
          <target state="translated">있으면 Trap 문을 없거나 적절 한 Catch 블록 또는 Catch 블록에서 완료 된 후의 마지막 블록은 실행 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the error cannot be handled, the error is written to the error stream.</source>
          <target state="translated">오류를 처리할 수 없는 경우 오류는 오류 스트림에 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A Catch block can include commands for tracking the failure or for recovering the expected flow of the script.</source>
          <target state="translated">Catch 블록에 오류를 추적 하기 위한 또는 스크립트의 예상된 흐름을 복구 하기 위한 명령을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A Catch block can specify which error types it catches.</source>
          <target state="translated">Catch 블록은 오류 유형의 catch 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for different kinds of errors.</source>
          <target state="translated">Try 문 다른 종류의 오류에 대 한 여러 Catch 블록을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A Finally block can be used to free any resources that are no longer needed by your script.</source>
          <target state="translated">마지막으로 스크립트에서 더 이상 필요 없는 모든 리소스를 해제 블록을 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Try, Catch, and Finally resemble the Try, Catch, and Finally keywords used in the C<ph id="ph1">\#</ph> programming language.</source>
          <target state="translated">Try, Catch 및 Finally Try, Catch, 및 마지막으로 C에 사용 된 키워드와 유사<ph id="ph1">\#</ph> 프로그래밍 언어입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A Try statement contains a Try block, zero or more Catch blocks, and zero or one Finally block.</source>
          <target state="translated">Try 문을 Try 블록을 0 개 이상의 Catch 블록을 포함 하 고 0 개 또는 한 Finally 블록입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A Try statement must have at least one Catch block or one Finally block.</source>
          <target state="translated">Try 문 또는 Catch 블록 Finally 블록을 하나 이상 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following shows the Try block syntax:</source>
          <target state="translated">다음은 Try 블록 구문입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Try keyword is followed by a statement list in braces.</source>
          <target state="translated">Try 키워드 중괄호로 문 목록이 나옵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs while the statements in the statement list are being run, the script passes the error object from the Try block to an appropriate Catch block.</source>
          <target state="translated">종료 오류가 발생 하는 문 목록에 있는 문은 실행 되는 동안 스크립트 error 개체 Try 블록에서 적절 한 Catch 블록은 전달 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following shows the Catch block syntax:</source>
          <target state="translated">Catch 블록 구문을 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Error types appear in brackets.</source>
          <target state="translated">오류 유형 대괄호 안에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The outermost brackets indicate the element is optional.</source>
          <target state="translated">가장 바깥쪽 대괄호는 요소는 선택적 요소를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Catch keyword is followed by an optional list of error type specifications and a statement list.</source>
          <target state="translated">Catch 키워드 다음 문 목록과 오류 유형 지정의 선택적 목록입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If a terminating error occurs in the Try block,  Windows PowerShell searches for an appropriate Catch block.</source>
          <target state="translated">종료 오류가 Try 블록 내에서 발생 하는 경우 적절 한 Catch 블록은 Windows PowerShell 검색 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If one is found, the statements in the Catch block are executed.</source>
          <target state="translated">가 있는 경우 Catch 블록의 문이 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The Catch block can specify one or more error types.</source>
          <target state="translated">Catch 블록 하나 이상의 오류 유형을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An error type is a Microsoft .NET Framework exception or an exception that is derived from a .NET Framework exception.</source>
          <target state="translated">오류 형식은 Microsoft.NET Framework 예외 나.NET Framework 예외에서 파생 된 예외입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">지정된 된 클래스에서 파생 된 모든 클래스 또는 지정된 된.NET Framework 예외 클래스의 오류를 처리 하는 Catch 블록입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a Catch block specifies an error type, that Catch block handles that type of error.</source>
          <target state="translated">오류 유형을 지정 하는 Catch 블록을 하는 경우 해당 Catch 블록 이러한 유형의 오류를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If a Catch block does not specify an error type, that Catch block handles any error encountered in the Try block.</source>
          <target state="translated">Catch 블록에서 오류 유형을 지정 하지 않으면, 해당 Catch 블록 Try 블록에서 발생 한 모든 오류를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A Try statement can include multiple Catch blocks for the different specified error types.</source>
          <target state="translated">Try 문 다른 지정 된 오류 형식에 대 한 여러 Catch 블록을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following shows the Finally block syntax:</source>
          <target state="translated">에서는 다음의 구문 Finally 블록을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Finally keyword is followed by a statement list that runs every time the script is run, even if the Try statement ran without error or an error was caught in a Catch statement.</source>
          <target state="translated">오류 없이 Try 문을 실행 하거나 Catch 문을에서 오류가 발견 되었습니다 하는 경우에 스크립트를 실행할 때마다 실행 되는 문 목록 키워드 다음 마지막으로 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that pressing CTRL<ph id="ph1">\+</ph>C stops the pipeline.</source>
          <target state="translated">해당 키를 누르면 CTRL 참고<ph id="ph1">\+</ph>C 파이프라인을 중지 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Objects that are sent to the pipeline will not be displayed as output.</source>
          <target state="translated">파이프라인으로 보내지는 개체를 출력으로 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, if you include a statement to be displayed, such as "Finally block has run", it will not be displayed after you press CTRL<ph id="ph1">\+</ph>C, even if the Finally block ran.</source>
          <target state="translated">따라서 같은 표시 되어야 하는 문을 포함 하는 경우 "Finally 블록에 실행"을 CTRL 키를 누르면 표시 될<ph id="ph1">\+</ph>C, 경우에도 Finally 블록을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CATCHING ERRORS</source>
          <target state="translated">오류 검색</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following sample script shows a Try block with a Catch block:</source>
          <target state="translated">다음 예제 스크립트는 Catch 블록을 사용 하 여 Try 블록을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Catch keyword must immediately follow the Try block or another Catch block.</source>
          <target state="translated">Catch 키워드 Try 블록이 나 다른 Catch 블록을 즉시 따라야 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Windows PowerShell does not recognize "NonsenseString" as a cmdlet or other item.</source>
          <target state="translated">Windows PowerShell cmdlet 또는 기타 항목으로 "NonsenseString"를 인식 하지 못합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Running this script returns the following result:</source>
          <target state="translated">이 스크립트를 실행에 다음과 같은 결과 반환 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the script encounters "NonsenseString", it causes a terminating error.</source>
          <target state="translated">스크립트에서 "NonsenseString"를 발견 하면 종료 오류가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Catch block handles the error by running the statement list inside the block.</source>
          <target state="translated">Catch 블록의 문 목록 블록 내에서 실행 하 여 오류를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>USING MULTIPLE CATCH STATEMENTS</source>
          <target state="translated">여러 CATCH 문을 사용 하 여</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A Try statement can have any number of Catch blocks.</source>
          <target state="translated">Try 문 Catch 블록의 모든 수를 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following script has a Try block that downloads MyFile.doc, and it contains two Catch blocks:</source>
          <target state="translated">예를 들어 다음 스크립트 MyFile.doc를 다운로드 하 여 Try 블록을 있으며 Catch 블록을 두 개를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first Catch block handles errors of the System.Net.WebException and System.IO.IOException types.</source>
          <target state="translated">첫 번째 Catch 블록 형식 System.Net.WebException 및 System.IO.IOException 오류를 처리합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second Catch block does not specify an error type.</source>
          <target state="translated">두 번째 Catch 블록에는 오류 유형을 지정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second Catch block handles any other terminating errors that occur.</source>
          <target state="translated">두 번째 Catch 블록 발생 하는 다른 모든 종료 오류를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Windows PowerShell matches error types by inheritance.</source>
          <target state="translated">오류 형식 상속으로 일치 하는 Windows PowerShell 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A Catch block handles errors of the specified .NET Framework exception class or of any class that derives from the specified class.</source>
          <target state="translated">지정된 된 클래스에서 파생 된 모든 클래스 또는 지정된 된.NET Framework 예외 클래스의 오류를 처리 하는 Catch 블록입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example contains a Catch block that catches a "Command Not Found" error:</source>
          <target state="translated">다음 예제는 "명령 파일을 찾을 수 없음" 오류를 catch 하는 Catch 블록이 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The specified error type, CommandNotFoundException, inherits from the System.SystemException type.</source>
          <target state="translated">지정 된 오류 유형, CommandNotFoundException, System.SystemException 형식에서 상속합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example also catches a Command Not Found error:</source>
          <target state="translated">다음 예제에서는 또한 명령을 찾을 수 없습니다를 찾아냅니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This Catch block handles the "Command Not Found" error and other errors that inherit from the SystemException type.</source>
          <target state="translated">이 Catch 블록 "명령 파일을 찾을 수 없음" 오류 및 SystemException 형식에서 상속 하는 다른 오류를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you specify an error class and one of its derived classes, place the Catch block for the derived class before the Catch block for the general class.</source>
          <target state="translated">오류 클래스와 파생된 클래스 중 하나를 지정 하면 파생된 된 클래스는 일반 클래스에 대 한 Catch 블록 앞에 대 한 Catch 블록을 배치 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>FREEING RESOURCES BY USING FINALLY</source>
          <target state="translated">마지막으로 사용 하 여 리소스를 확보 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To free resources used by a script, add a Finally block after the Try and Catch blocks.</source>
          <target state="translated">스크립트를 사용 하는 리소스를 확보 하기 위해 추가 Try 및 Catch 블록 Finally 블록을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The Finally block statements run regardless of whether the Try block encounters a terminating error.</source>
          <target state="translated">Finally 블록 문이 Try 블록에서 종료 오류를 발견 하는 여부에 관계 없이 실행 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Windows PowerShell runs the Finally block before the script terminates or before the current block goes out of scope.</source>
          <target state="translated">Windows PowerShell 실행 된 Finally 블록을 스크립트가 종료 전에 또는 현재 블록 범위를 벗어나기 전에 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A Finally block runs even if you use CTRL<ph id="ph1">\+</ph>C to stop the script.</source>
          <target state="translated">A Finally 블록이 실행 ctrl 키를 사용 하는 경우에<ph id="ph1">\+</ph>C를 스크립트 실행을 중단 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A Finally block also runs if an Exit keyword stops the script from within a Catch block.</source>
          <target state="translated">A Finally 블록도 실행 Exit 키워드는 Catch 블록 내에서 스크립트를 중지 하는 경우.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>about_Break</source>
          <target state="translated">about_Break</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>about_Continue</source>
          <target state="translated">about_Continue</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>about_Throw</source>
          <target state="translated">about_Throw</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Trap</source>
          <target state="translated">about_Trap</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>