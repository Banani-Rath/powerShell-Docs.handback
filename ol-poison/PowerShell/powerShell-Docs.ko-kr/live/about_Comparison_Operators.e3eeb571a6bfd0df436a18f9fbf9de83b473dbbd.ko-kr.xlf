<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74464b6926b65070e9bc9db58cb61ae988b9966e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Comparison_Operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93695e3a362c0f816c9c492af380d363cf9906e5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1245e24d5c3b795f59724009c5fbd71bcda2dec</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Comparison_Operators</source>
          <target state="translated">about_comparison_operators</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Comparison Operators</source>
          <target state="translated">비교 연산자 정보</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Comparison_Operators</source>
          <target state="translated">about_comparison_operators</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Comparison_Operators</source>
          <target state="translated">about_comparison_operators</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the operators that compare values in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell의 값을 비교하는 연산자에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Comparison operators let you specify conditions for comparing values and finding values that match specified patterns.</source>
          <target state="translated">비교 연산자를 통해 값을 비교 하 고 지정 된 패턴 일치 하는 값을 찾기 조건을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To use a comparison operator, specify the values that you want to compare together with an operator that separates these values.</source>
          <target state="translated">비교 연산자를 사용 하려면 이러한 값을 구분 하는 연산자와 함께 비교할 수 있는 값을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell includes the following comparison operators:</source>
          <target state="translated">다음 비교 연산자를 포함 하는 Windows PowerShell:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>-eq -ne -gt -ge -lt -le -Like -NotLike -Match -NotMatch -Contains -NotContains -In -NotIn -Replace</source>
          <target state="translated">-eq-ne-gt-ge lt-le-NotLike-같은 문자열이 일치--NotContains 포함--NotIn에서-바꾸기</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By default, all comparison operators are case-insensitive.</source>
          <target state="translated">기본적으로 모든 비교 연산자는 대 소문자를 구분 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To make a comparison operator case-sensitive, precede the operator name with a "c".</source>
          <target state="translated">비교 연산자를 대/소문자 구분 하려면 "c"로 운영자 이름 앞에 야 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, the case-sensitive version of "-eq" is "-ceq".</source>
          <target state="translated">예를 들어, 대/소문자 구분 버전의 "-eq"은 "-ceq"입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To make the case-insensitivity explicit, precede the operator with an "i".</source>
          <target state="translated">명시적으로 만들어야 하는 case-insensitivity, "i"를 포함 하는 연산자 앞에 야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, the explicitly case-insensitive version of "-eq" is "-ieq".</source>
          <target state="translated">예를 들어, 명시적으로 대/소문자 구분 버전의 "-eq"은 "-ieq"입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When the input to an operator is a scalar value, comparison operators return a Boolean value.</source>
          <target state="translated">연산자에 대 한 입력의 스칼라 값이 비교 연산자는 부울 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the input is a collection of values, the comparison operators return any matching values.</source>
          <target state="translated">입력 값의 컬렉션을 경우 비교 연산자는 일치 하는 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If there are no matches in a collection, comparison operators do not return anything.</source>
          <target state="translated">컬렉션에 일치 하지 않는, 비교 연산자에 아무 것도 반환 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The exceptions are the containment operators (-Contains, -NotContains), the In operators (-In, -NotIn), and the type operators (-Is, -IsNot), which always return a Boolean value.</source>
          <target state="translated">예외는 포함 연산자 (--NotContains를 포함), In 연산자 (--NotIn에서), 및 형식 연산자 (--IsNot 이면)는 항상 부울 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the following comparison operators.</source>
          <target state="translated">Windows PowerShell 다음 비교 연산자를 지원합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-eq Description: Equal to.</source>
          <target state="translated">-eq 설명: 같음.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Includes an identical value.</source>
          <target state="translated">동일한 값을 포함합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc" -eq "abc" True</source>
          <target state="translated">PS c: &gt; "abc"를 "abc"-eq True</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc" -eq "abc", "def" False</source>
          <target state="translated">PS c: &gt; "abc", "def" False "abc"-eq</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc", "def" -eq "abc" abc</source>
          <target state="translated">PS c: &gt; "abc", "def"-eq "abc" abc</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>-ne Description: Not equal to.</source>
          <target state="translated">-ne 설명: 같지 않습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Includes a different value.</source>
          <target state="translated">다른 값을 포함합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc" -ne "def" True</source>
          <target state="translated">PS c: &gt; "def" True "abc"-ne</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc" -ne "abc" False</source>
          <target state="translated">PS c: &gt; "abc"-ne "abc" False</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc" -ne "abc", "def" True</source>
          <target state="translated">PS c: &gt; "abc", "def" True "abc"-ne</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc", "def" -ne "abc" def</source>
          <target state="translated">PS c: &gt; "abc", "def"-ne "abc" def</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-gt Description: Greater-than.</source>
          <target state="translated">-gt 설명: 큰-보다 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 8 -gt 6 True</source>
          <target state="translated">&gt; 8-gt 6 True PS c:</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 7, 8, 9 -gt 8</source>
          <target state="translated">PS c: &gt; 7, 8, 9-gt 8</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-ge Description: Greater-than or equal to.</source>
          <target state="translated">-ge 설명: 큰-보다 작거나 같음.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 8 -ge 8 True</source>
          <target state="translated">&gt; 8-ge 8 True PS c:</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 7, 8, 9 -ge 8</source>
          <target state="translated">PS c: &gt; 7, 8, 9-ge 8</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>-lt Description: Less-than.</source>
          <target state="translated">-lt 설명: 덜-보다 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 8 -lt 6 False</source>
          <target state="translated">&gt; 8-lt 6 False PS c:</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 7, 8, 9 -lt 8</source>
          <target state="translated">PS c: &gt; 7, 8, 9-lt 8</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>-le Description: Less-than or equal to.</source>
          <target state="translated">-le 설명: 덜-보다 작거나 같음.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 6 -le 8 True</source>
          <target state="translated">PS c: &gt; 6-8 le True</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 7, 8, 9 -le 8</source>
          <target state="translated">PS c: &gt; 7, 8, 9-le 8</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-Like Description: Match using the wildcard character (*).</source>
          <target state="translated">-Like 설명: 와일드 카드 문자 (*)를 사용 하 여 일치 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows PowerShell" -like "*shell" True</source>
          <target state="translated">PS c: &gt; "Windows PowerShell"-같은 "* 셸" True</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows PowerShell", "Server" -like "*shell" Windows PowerShell</source>
          <target state="translated">PS c: &gt; "Windows PowerShell", "서버"-같은 "* 셸" Windows PowerShell</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-NotLike Description: Does not match using the wildcard character (*).</source>
          <target state="translated">-NotLike 설명: 와일드 카드 문자 (*)를 사용 하 여 일치 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows PowerShell" -NotLike "*shell" False</source>
          <target state="translated">PS c: &gt; "Windows PowerShell"-NotLike "* 셸" False</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows PowerShell", "Server" -NotLike "*shell" Server</source>
          <target state="translated">PS c: &gt; "Windows PowerShell", "서버"-NotLike "* 셸" 서버</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>-Match Description: Matches a string using regular expressions.</source>
          <target state="translated">일치 설명: 정규식을 사용 하 여 문자열을 찾습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When the input is scalar, it populates the $Matches automatic variable.</source>
          <target state="translated">입력이 스칼라 인 $Matches 자동 변수를 채웁니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Sunday" -Match "sun" True</source>
          <target state="translated">PS c: &gt; "일요일"-"sun" True 일치</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $matches Name Value</source>
          <target state="translated">PS c: &gt; $matches 이름 값입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>0    Sun</source>
          <target state="translated">Sun 0</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Sunday", "Monday" -Match "sun" Sunday</source>
          <target state="translated">PS c: &gt; "일요일", "월요일"-"sun" 일요일 일치</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>-NotMatch Description: Does not match a string.</source>
          <target state="translated">-NotMatch 설명: 문자열을 일치 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Uses regular expressions.</source>
          <target state="translated">정규식을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When the input is scalar, it populates the $Matches automatic variable.</source>
          <target state="translated">입력이 스칼라 인 $Matches 자동 변수를 채웁니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Sunday" -NotMatch "sun" False</source>
          <target state="translated">PS c: &gt; "일요일"-NotMatch "sun" False</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $matches Name Value</source>
          <target state="translated">PS c: &gt; $matches 이름 값입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>0    sun</source>
          <target state="translated">0 sun</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Sunday", "Monday" -NotMatch "sun" Monday</source>
          <target state="translated">PS c: &gt; "일요일", "Monday"-NotMatch "sun" 월요일</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-Contains Description: Containment operator.</source>
          <target state="translated">-포함 포함 합니다. 설명: 연산자입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Tells whether a collection of reference values includes a single test value.</source>
          <target state="translated">단일 테스트 값 참조 값의 컬렉션에 포함 되는지 여부를 알려 줍니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Always returns a Boolean value.</source>
          <target state="translated">항상 부울 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Returns TRUE only when the test value exactly matches at least one of the reference values.</source>
          <target state="translated">정확 하 게 테스트 값은 하나 이상의 참조 값과 일치 하는 경우에 TRUE를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>When the test value is a collection, the Contains operator uses reference equality.</source>
          <target state="translated">테스트 값은 컬렉션, Contains 연산자 참조 일치를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It returns TRUE only when one of the reference values is the same instance of the test value object.</source>
          <target state="translated">참조 값 중 하나는 테스트 값 개체의 동일한 인스턴스에 있는 경우에 TRUE를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Syntax: &lt;Reference-values&gt; -Contains &lt;Test-value&gt;</source>
          <target state="translated">구문: &lt; 참조 값 &gt;-&lt; 테스트 값 &gt;를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">예제:</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc", "def" -Contains "def" True</source>
          <target state="translated">PS c: &gt; "abc", "def"-"def" True를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows", "PowerShell" -Contains "Shell" False  #Not an exact match</source>
          <target state="translated">PS c: &gt; "Windows", "PowerShell"-"셸" False #Not 정확 하 게 일치 하는 값을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Does the list of computers in $domainServers include $thisComputer?</source>
          <target state="translated">$DomainServers 컴퓨터 목록을 $thisComputer 포함 되어 있습니까?</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $domainServers -Contains $thisComputer True</source>
          <target state="translated">C: &gt; $domainServers PS-True $thisComputer 포함</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc", "def", "ghi" -Contains "abc", "def" False</source>
          <target state="translated">PS c: &gt; "abc", "def", "ghi"-"def" False "abc"를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $a = "abc", "def" PS C:&gt; "abc", "def", "ghi" -Contains $a False PS C:&gt; $a, "ghi" -Contains $a True</source>
          <target state="translated">PS c: &gt; $a = "abc", "def" PS &gt; "abc", "def", "ghi"-포함 $ False PS c: a &gt; $ "ghi"-a $ True a를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>-NotContains Description: Containment operator.</source>
          <target state="translated">-NotContains 설명: 연산자를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Tells whether a collection of reference values includes a single test value.</source>
          <target state="translated">단일 테스트 값 참조 값의 컬렉션에 포함 되는지 여부를 알려 줍니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Always returns a Boolean value.</source>
          <target state="translated">항상 부울 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns TRUE when the test value is not an exact matches for at least one of the reference values.</source>
          <target state="translated">테스트 값이 하나 이상의 참조 값에 정확히 일치 하는 경우 TRUE를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When the test value is a collection, the NotContains operator uses reference equality.</source>
          <target state="translated">테스트 값은 컬렉션, NotContains 연산자 참조 일치를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Syntax: &lt;Reference-values&gt; -NotContains &lt;Test-value&gt;</source>
          <target state="translated">구문: &lt; 참조 값 &gt;-NotContains &lt; 테스트 값 &gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">예제:</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows", "PowerShell" -NotContains "Shell" True  #Not an exact match</source>
          <target state="translated">PS c: &gt; "Windows", "PowerShell" NotContains "셸" True #Not 정확히 일치</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Get cmdlet parameters, but exclude common parameters function get-parms ($cmdlet) { $Common = "Verbose", "Debug", "WarningAction", "WarningVariable", ` "ErrorAction", "ErrorVariable", "OutVariable", "OutBuffer"</source>
          <target state="translated">Cmdlet 매개 변수 가져오기는 공통 매개 변수 함수 get-parms ($cmdlet)를 제외 시킬 {$Common = "Verbose", "Debug", "WarningAction", "WarningVariable" ' "ErrorAction", "ErrorVariable", "OutVariable", "OutBuffer"</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>$allparms = (Get-Command $Cmdlet).parametersets | foreach {$<bpt id="p1">_</bpt>.Parameters} | ` foreach {$<ept id="p1">_</ept>.Name} | Sort-Object | Get-Unique</source>
          <target state="translated">$allparms (Get-command $Cmdlet).parametersets = | foreach {$<bpt id="p1">_</bpt>합니다. 매개 변수} | ' foreach {$<ept id="p1">_</ept>합니다. Name} | Sort-object | Get-unique</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>$allparms | where {$Common -NotContains $_ } }</source>
          <target state="translated">$allparms | 여기서 {$Common-NotContains $_}}</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Find unapproved verbs in the functions in my module</source>
          <target state="translated">모듈의 함수에서 승인 되지 않은 동사를 찾기</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $ApprovedVerbs = Get-Verb | foreach {$<bpt id="p1">_</bpt>.verb} PS C:&gt; $myVerbs = Get-Command -Module MyModule | foreach {$<ept id="p1">_</ept>.verb}</source>
          <target state="translated">C: &gt; $ApprovedVerbs PS = Get-verb | foreach {$<bpt id="p1">_</bpt>.verb} c: &gt; $myVerbs PS = Get-command-모듈 MyModule | foreach {$<ept id="p1">_</ept>.verb}</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $myVerbs | where {$ApprovedVerbs -NotContains $_} ForEach Sort Tee Where</source>
          <target state="translated">C: &gt; $myVerbs PS | 여기서 {$ApprovedVerbs-NotContains $_} ForEach 정렬 Tee 위치</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>-In Description: In operator.</source>
          <target state="translated">-:에서 설명 In 연산자 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Tells whether a test value appears in a collection of reference values.</source>
          <target state="translated">참조 값의 컬렉션에 테스트 값을 표시 하는지 여부를 알려 줍니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Always return as Boolean value.</source>
          <target state="translated">항상 부울 값으로 반환 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Returns TRUE only when the test value exactly matches at least one of the reference values.</source>
          <target state="translated">정확 하 게 테스트 값은 하나 이상의 참조 값과 일치 하는 경우에 TRUE를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When the test value is a collection, the In operator uses reference equality.</source>
          <target state="translated">테스트 값은 컬렉션, In 연산자는 참조 일치를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It returns TRUE only when one of the reference values is the same instance of the test value object.</source>
          <target state="translated">참조 값 중 하나는 테스트 값 개체의 동일한 인스턴스에 있는 경우에 TRUE를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The In operator was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">In 연산자는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Syntax: &lt;Test-value&gt; -in &lt;Reference-values&gt;</source>
          <target state="translated">구문: &lt; 테스트 값 &gt;-&lt; 참조 값 &gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">예제:</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "def" -in "abc", "def" True</source>
          <target state="translated">PS c: &gt; "def"-"def" True "abc"의</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Shell" -in "Windows", "PowerShell" False  #Not an exact match</source>
          <target state="translated">PS c: &gt; "셸"-"windows"에서 "PowerShell" False #Not 정확히 일치</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows" -in "Windows", "PowerShell" True  #An exact match</source>
          <target state="translated">PS c: &gt; "Windows"-"PowerShell" True "Windows"에서 #An 정확히 일치</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows", "PowerShell" -in "Windows", "PowerShell", "ServerManager" False  #Using reference equality</source>
          <target state="translated">PS c: &gt; "Windows", "PowerShell"-"PowerShell", "Windows", "ServerManager" False #Using 참조 같음을</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $a = "Windows", "PowerShell" PS C:&gt; $a -in $a, "ServerManager" True  #Using reference equality</source>
          <target state="translated">PS c: &gt; $a = "Windows" PS c: "PowerShell" &gt; $a-$에서 a, "ServerManager" True #Using 참조 일치</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Does the list of computers in $domainServers include $thisComputer?</source>
          <target state="translated">$DomainServers 컴퓨터 목록을 $thisComputer 포함 되어 있습니까?</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $thisComputer -in  $domainServers True</source>
          <target state="translated">C: &gt; $thisComputer PS-$domainServers에서 True</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>-NotIn Description: NotIn operator.</source>
          <target state="translated">-NotIn 설명: NotIn 연산자입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Tells whether a test value appears in a collection of reference values.</source>
          <target state="translated">참조 값의 컬렉션에 테스트 값을 표시 하는지 여부를 알려 줍니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Always returns a Boolean value.</source>
          <target state="translated">항상 부울 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Returns TRUE when the test value is not an exact match for at least one of the reference values.</source>
          <target state="translated">테스트 값이 하나 이상의 참조 값에 정확히 일치 하는 경우 TRUE를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>When the test value is a collection, the In operator uses reference equality.</source>
          <target state="translated">테스트 값은 컬렉션, In 연산자는 참조 일치를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>It returns TRUE only when one of the reference values is the same instance of the test value object.</source>
          <target state="translated">참조 값 중 하나는 테스트 값 개체의 동일한 인스턴스에 있는 경우에 TRUE를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The NotIn operator was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">NotIn 연산자는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Syntax: &lt;Test-value&gt; -NotIn &lt;Reference-values&gt;</source>
          <target state="translated">구문: &lt; 테스트 값 &gt;-NotIn &lt; 참조 값 &gt;</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">예제:</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "def" -NotIn "abc", "def" False</source>
          <target state="translated">PS c: &gt; "def"-NotIn "abc", "def" False</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "ghi" -NotIn "abc", "def" True</source>
          <target state="translated">PS c: &gt; "ghi"-NotIn "abc", "def" True</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Shell" -NotIn "Windows", "PowerShell" True  #Not an exact match</source>
          <target state="translated">PS c: &gt; "셸"-NotIn "Windows", "PowerShell" True #Not 정확히 일치</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows" -NotIn "Windows", "PowerShell" False  #An exact match</source>
          <target state="translated">PS c: &gt; "Windows"-NotIn "Windows" False "PowerShell" #An 정확히 일치</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Find unapproved verbs in the functions in my module</source>
          <target state="translated">모듈의 함수에서 승인 되지 않은 동사를 찾기</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $ApprovedVerbs = Get-Verb | foreach {$<bpt id="p1">_</bpt>.verb} PS C:&gt; $myVerbs = Get-Command -Module MyModule | foreach {$<ept id="p1">_</ept>.verb}</source>
          <target state="translated">C: &gt; $ApprovedVerbs PS = Get-verb | foreach {$<bpt id="p1">_</bpt>.verb} c: &gt; $myVerbs PS = Get-command-모듈 MyModule | foreach {$<ept id="p1">_</ept>.verb}</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $myVerbs | where {$_ -NotIn $ApprovedVerbs} ForEach Sort Tee Where</source>
          <target state="translated">C: &gt; $myVerbs PS | 여기서 {$_-NotIn $ApprovedVerbs} ForEach 정렬 Tee 위치</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>-Replace Description: Replace operator.</source>
          <target state="translated">바꾸기 설명: 연산자를 대체 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Changes the specified elements of a value.</source>
          <target state="translated">값의 지정 된 요소를 변경합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Get-Process" -Replace "Get", "Stop" Stop-Process</source>
          <target state="translated">PS c: &gt; "Get-process"-"Get", "Stop" Stop-process 바꾸기</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Change all .GIF file name extension to .JPG PS C:&gt; dir *.gif | foreach {$_ -Replace ".gif", ".jpg"}</source>
          <target state="translated">모든 변경 합니다. GIF 파일 이름 확장명입니다. JPG PS c: &gt; dir *.gif | foreach {$_-.gif"Replace", ".jpg"}</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Equality Operators The equality operators (-eq, -ne) return a value of TRUE or the matches when one or more of the input values is identical to the specified pattern.</source>
          <target state="translated">같음 연산자는 같음 연산자 (-eq,-ne) 하나 이상의 입력된 값이 지정된 된 패턴과 동일 TRUE 또는 일치 하는 항목의 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The entire pattern must match an entire value.</source>
          <target state="translated">전체 패턴에는 전체 값을 일치 해야 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>C:PS&gt; 2 -eq 2 True</source>
          <target state="translated">C:PS &gt; 2-eq 2 True</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>C:PS&gt; 2 -eq 3 False</source>
          <target state="translated">C:PS &gt; 2-eq 3 False</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>C:PS&gt; 1,2,3 -eq 2</source>
          <target state="translated">C:PS &gt; 1,2,3-eq 2</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>C:PS&gt; "PowerShell" -eq "Shell" False</source>
          <target state="translated">C:PS &gt;-eq "셸" False "PowerShell"</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>C:PS&gt; "Windows", "PowerShell" -eq "Shell"</source>
          <target state="translated">C:PS &gt; "Windows", "PowerShell"-eq "셸"</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>C:PS&gt;</source>
          <target state="translated">C:PS &gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc", "def", "123" -eq "def" def</source>
          <target state="translated">PS c: &gt; "abc", "def", "123"-eq "def" def</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc", "def", "123" -ne "def" abc</source>
          <target state="translated">PS c: &gt; "abc", "def", "123"-ne "def" abc</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>123</source>
          <target state="translated">123</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Containment Operators The containment operators (-Contains and -NotContains) are similar to the equality operators.</source>
          <target state="translated">포함 연산자 포함 연산자 (-를 포함 하 고-NotContains) 같음 연산자와 비슷합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>However, the containment operators always return a Boolean value, even when the input is a collection.</source>
          <target state="translated">그러나 포함 연산자는 항상 반환 부울 값을 입력 컬렉션은 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Also, unlike the equality operators, the containment operators return a value as soon as they detect the first match.</source>
          <target state="translated">또한, 같음 연산자와 달리 포함 연산자 값을 반환 하면 첫 번째 일치를 검색 하는 즉시 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The equality operators evaluate all input and then return all the matches in the collection.</source>
          <target state="translated">같음 연산자는 모든 입력을 평가 하 고 컬렉션의 모든 일치 항목을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The following examples show the effect of the -Contains operator:</source>
          <target state="translated">다음 예의 효과 보여 줍니다.-연산자를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>C:PS&gt; 1,2,3 -contains 2 True</source>
          <target state="translated">C:PS &gt; 1,2,3-2를 True 포함</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>C:PS&gt; "PowerShell" -contains "Shell" False</source>
          <target state="translated">C:PS &gt; "PowerShell"-"셸" False가 포함</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>C:PS&gt; "Windows", "PowerShell" -contains "Shell" False</source>
          <target state="translated">C:PS &gt; "Windows", "PowerShell"-"셸" False가 포함</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "abc", "def", "123" -contains "def" True</source>
          <target state="translated">PS c: &gt; "abc", "def", "123"-"def" True를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "true", "blue", "six" -contains "true" True</source>
          <target state="translated">PS c: &gt; "true", "blue", "6"-"true" true</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The following example shows how the containment operators differ from the equal to operator.</source>
          <target state="translated">다음 예제에서는 같음 연산자 포함 연산자는 등호에서 어떻게 다른 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The containment operators return a value of TRUE on the first match.</source>
          <target state="translated">포함 연산자는 첫 번째 일치 항목에 TRUE 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 1,2,3,4,5,4,3,2,1 -eq 2</source>
          <target state="translated">PS c: &gt; 1,2,3,4,5,4,3,2,1-eq 2</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 1,2,3,4,5,4,3,2,1 -contains 2 True</source>
          <target state="translated">PS c: &gt; 1,2,3,4,5,4,3,2,1-2를 True 포함</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>In a very large collection, the -Contains operator returns results quicker than the equal to operator.</source>
          <target state="translated">매우 큰 컬렉션에서-포함 연산자는 같음 연산자 보다 빠르게 결과 반환 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Match Operators The match operators (-Match and -NotMatch) find elements that match or do not match a specified pattern using regular expressions.</source>
          <target state="translated">일치 연산자 일치 연산자 (-일치 하 고-NotMatch)과 일치 하거나 정규식을 사용 하 여 지정된 된 패턴과 일치 하지 않는 구성 요소를 찾습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The syntax is:</source>
          <target state="translated">구문:</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>&lt;string[]&gt; -Match &lt;regular-expression&gt; &lt;string[]&gt; -NotMatch &lt;regular-expression&gt;</source>
          <target state="translated">&lt; String &gt;-&lt; 정규식 &gt;&lt; string &gt;-NotMatch &lt; 정규식 &gt; 일치</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The following examples show some uses of the -Match operator:</source>
          <target state="translated">다음 예제에서는-Match 연산자의 일부에서는:</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Windows", "PowerShell" -Match ".shell" PowerShell</source>
          <target state="translated">PS c: &gt; "Windows", "PowerShell"-".shell" PowerShell 일치</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>PS C:&gt; (Get-Command Get-Member -Syntax) -Match "-view" True</source>
          <target state="translated">PS c: &gt; (Get-command Get-member-구문)-Match "-보기" True</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>PS C:&gt; (Get-Command Get-Member -Syntax) -NotMatch "-path" True</source>
          <target state="translated">PS c: &gt; (Get-command Get-member-구문)-NotMatch "-path" True</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>PS C:&gt; (Get-Content Servers.txt) -Match "^Server\d\d" Server01 Server02</source>
          <target state="translated">PS c: &gt; (Get-content Servers.txt)-Match "^ Server\d\d" Server01 Server02</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The match operators search only in strings.</source>
          <target state="translated">일치 연산자 문자열 에서만에서 검색합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>They cannot search in arrays of integers or other objects.</source>
          <target state="translated">정수 또는 다른 개체의 배열에서 검색할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The -Match and -NotMatch operators populate the $Matches automatic variable when the input (the left-side argument) to the operator is a single scalar object.</source>
          <target state="translated">-연산자의 입력 (왼쪽 인수)은 단일 스칼라 개체 때 일치 하 고-NotMatch 연산자 $Matches 자동 변수를 채웁니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>When the input is scalar, the -Match and -NotMatch operators return a Boolean value and set the value of the $Matches automatic variable to the matched components of the argument.</source>
          <target state="translated">입력이 스칼라 경우-일치 하 고-NotMatch 연산자는 부울 값을 반환 하 고 인수 일치 하는 구성 요소에 $Matches 자동 변수의 값을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If the input is a collection, the -Match and -NotMatch operators return the matching members of that collection, but the operator does not populate the $Matches variable.</source>
          <target state="translated">입력 컬렉션을이-일치 하 고-NotMatch 연산자는 해당 컬렉션의 일치 하는 멤버를 반환 하지만 연산자 $Matches 변수를 채우지 않습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For example, the following command submits a collection of strings to the -Match operator.</source>
          <target state="translated">다음 명령은 문자열의 컬렉션을 전송 하는 예를 들어-Match 연산자를 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The -Match operator returns the items in the collection that match.</source>
          <target state="translated">-일치 연산자와 일치 하는 컬렉션의 항목을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>It does not populate the $Matches automatic variable.</source>
          <target state="translated">$Matches 자동 변수의 채우지 않습니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Sunday", "Monday", "Tuesday" -Match "sun" Sunday</source>
          <target state="translated">PS c: &gt; "일요일", "Monday", "Tuesday"-"sun" 일요일 일치</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $matches</source>
          <target state="translated">C: &gt; $matches PS</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>PS C:&gt;</source>
          <target state="translated">PS C: &gt;</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>In contrast, the following command submits a single string to the -Match operator.</source>
          <target state="translated">다음 명령은 단일을 제출 하는 반면, 문자열-Match 연산자입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The -Match operator returns a Boolean value and populates the $Matches automatic variable.</source>
          <target state="translated">-일치 하는 부울 연산자 반환 값 및 $Matches 자동 변수를 채웁니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Sunday" -Match "sun" True</source>
          <target state="translated">PS c: &gt; "일요일"-"sun" True 일치</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $matches</source>
          <target state="translated">C: &gt; $matches PS</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Name                           Value</source>
          <target state="translated">이름 값</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>0                              Sun</source>
          <target state="translated">0                              Sun</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The -NotMatch operator populates the $Matches automatic variable when the input is scalar and the result is False, that it, when it detects a match.</source>
          <target state="translated">-NotMatch 연산자는 입력이 스칼라 하 고 결과 False를 $Matches 자동 변수를 채웁니다 it, 일치 하는 검색 되 면 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Sunday" -NotMatch "rain" True</source>
          <target state="translated">PS c: &gt; "일요일"-NotMatch "비가" True</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $matches</source>
          <target state="translated">C: &gt; $matches PS</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>PS C:&gt;</source>
          <target state="translated">PS C: &gt;</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "Sunday" -NotMatch "day" False</source>
          <target state="translated">PS c: &gt; "일요일"-NotMatch "day" False</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $matches</source>
          <target state="translated">C: &gt; $matches PS</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>PS C:&gt;</source>
          <target state="translated">PS C: &gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Name                           Value</source>
          <target state="translated">이름 값</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>0                              day</source>
          <target state="translated">0                              day</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Replace Operator The -Replace operator replaces all or part of a value with the specified value using regular expressions.</source>
          <target state="translated">-Replace 연산자를 대체 합니다. 지정 된 값이 정규식을 사용 하는 값의 전체 또는 일부를 대체 하는 연산자입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>You can use the -Replace operator for many administrative tasks, such as renaming files.</source>
          <target state="translated">사용할 수 있습니다-Replace 연산자 파일 이름 바꾸기와 같은 여러 가지 관리 작업을 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>For example, the following command changes the file name extensions of all .gif files to .jpg:</source>
          <target state="translated">예를 들어 다음 명령은.jpg으로 모든.gif 파일의 파일 이름 확장명을 변경합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Get-ChildItem | Rename-Item -NewName { $_ -Replace '.gif$','.jpg$' }</source>
          <target state="translated">Get-childitem | 항목 이름 바꾸기-NewName {$_-바꾸기 '.gif$ ', '.jpg$ '을 (를)</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The syntax of the -Replace operator is as follows, where the <ph id="ph1">&lt;original&gt;</ph> placeholder represents the characters to be replaced, and the <ph id="ph2">&lt;substitute&gt;</ph> placeholder represents the characters that will replace them:</source>
          <target state="translated">구문은 연산자는 다음과 같이-e의 위치는 <ph id="ph1">&lt;original&gt;</ph> 자리 표시자를 바꿀 문자를 나타냅니다 및 <ph id="ph2">&lt;substitute&gt;</ph> 바꿀 문자 자리 표시자를 나타냅니다:</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>By default, the -Replace operator is case-insensitive.</source>
          <target state="translated">기본적으로-Replace 연산자는 대 소문자를 구분 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>To make it case sensitive, use -cReplace.</source>
          <target state="translated">대/소문자 확인 하려면-cReplace를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>To make it explicitly case-insensitive, use -iReplace.</source>
          <target state="translated">대/소문자 구분 명시적으로 확인 하려면-iReplace를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Consider the following examples:</source>
          <target state="translated">다음과 같은 예를 고려할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>PS C:&gt; "book" -Replace "B", "C" Cook PS C:&gt; "book" -iReplace "B", "C" Cook PS C:&gt; "book" -cReplace "B", "C" book</source>
          <target state="translated">PS c: &gt; "book"-바꾸기 "B", "C" Cook PS c: &gt;-iReplace "B", "C" Cook PS c: "book" &gt; "book"-cReplace "B", "C" 책</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>PS C:&gt; '&lt;command:parameter required="false" variableLength="true" globbing="false"'` | foreach {$_ -replace 'globbing="false"', 'globbing="true"'} &lt;command:parameter required="false" variableLength="true" globbing="true"</source>
          <target state="translated">PS c: &gt; ' &lt; 명령: 필수 매개 변수 "false" variableLength = "true" 와일드 카드 사용 = = "false" ' | foreach {$_-바꾸기 ' 와일드 카드 사용 = "false" ', ' 와일드 카드 사용 = "true" '} &lt; 명령: 필수 매개 변수 "false" variableLength = "true" 와일드 카드 사용 = = "true"</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Bitwise Operators Windows PowerShell supports the standard bitwise operators, including bitwise-AND (-bAnd), the inclusive and exclusive bitwise-OR operators (-bOr and -bXor), and bitwise-NOT (-bNot).</source>
          <target state="translated">비트 연산자 Windows PowerShell 지원 비트를 포함 한 표준 비트 연산자,-및 (-대역 외), (포함) 및 배타적 비트 OR 연산자 (-bOr 및-bXor), 및 비트 NOT (-관련)입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 2.0, all bitwise operators work with 64-bit integers.</source>
          <target state="translated">Windows PowerShell 2.0 부터는 모든 비트 단위 연산자는 64 비트 정수에서 작동 합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, the -shr (shift-right) and -shl (shift-left) are introduced to support bitwise arithmetic in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell 3.0부터,-shr (오른쪽) 및-shl (왼쪽 shift) Windows PowerShell에서 비트 산술을 지원 하기 위해 도입 됩니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the following bitwise operators.</source>
          <target state="translated">Windows PowerShell에서는 다음과 같은 비트 연산자를 지원합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Operator  Description               Example</source>
          <target state="translated">연산자 설명 예제</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>-bAnd     Bitwise AND               PS C:&gt; 10 -band 3</source>
          <target state="translated">-비트 AND PS c: 대역 외 &gt; 10-3 밴드</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>-bOr      Bitwise OR (inclusive)    PS C:&gt; 10 -bor 3</source>
          <target state="translated">-bOr 비트 OR (포함) PS &gt; 10-bor 3</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="translated">11</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>-bXor     Bitwise OR (exclusive)    PS C:&gt; 10 -bxor 3</source>
          <target state="translated">-bXor 비트 OR (제외) PS c: &gt; 10-bxor 3</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>-bNot     Bitwise NOT               PS C:&gt; -bNot 10</source>
          <target state="translated">-관련 비트 NOT PS &gt;-관련 10</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>-11</source>
          <target state="translated">-11</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>-shl      Shift-left                PS C:&gt; 100 -shl 2</source>
          <target state="translated">왼쪽 시프트 PS-shl c: &gt; 100-shl 2</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>400</source>
          <target state="translated">400</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>-shr      Shift-right               PS C:&gt; 100 -shr 1</source>
          <target state="translated">-shr Shift 오른쪽 PS c: &gt; 100-shr 1</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>50</source>
          <target state="translated">50</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Bitwise operators act on the binary format of a value.</source>
          <target state="translated">비트 연산자는 값의 이진 형식에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>For example, the bit structure for the number 10 is 00001010 (based on 1 byte), and the bit structure for the number 3 is 00000011.</source>
          <target state="translated">예를 들어 숫자 10에 대 한 비트 구조 (1 바이트에 기반), 00001010 이며 숫자 3에 대 한 비트 구조 00000011 합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>When you use a bitwise operator to compare 10 to 3, the individual bits in each byte are compared.</source>
          <target state="translated">비트 연산자를 사용 하 여 10 ~ 3을 비교할 때 각 바이트의 개별 비트 비교 됩니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>In a bitwise AND operation, the resulting bit is set to 1 only when both input bits are 1.</source>
          <target state="translated">비트 AND 연산에서 결과 비트는 입력된 양쪽 비트가 모두 1 하는 경우에 1로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>1010      (10)</source>
          <target state="translated">1010      (10)</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>0011      ( 3)</source>
          <target state="translated">0011      ( 3)</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>--------------  bAND</source>
          <target state="translated">--------------  bAND</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>0010      ( 2)</source>
          <target state="translated">0010      ( 2)</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>In a bitwise OR (inclusive) operation, the resulting bit is set to 1 when either or both input bits are 1.</source>
          <target state="translated">비트 OR (포함) 작업에서 결과 비트는 입력된 중 하나 또는 두 비트가 모두 1 하는 경우 1로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The resulting bit is set to 0 only when both input bits are set to 0.</source>
          <target state="translated">결과 비트는 입력된 두 비트가 모두 0으로 설정 되어 있는 경우에 0으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>1010      (10)</source>
          <target state="translated">1010      (10)</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>0011      ( 3)</source>
          <target state="translated">0011      ( 3)</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>--------------  bOR (inclusive)</source>
          <target state="translated">---bOR (포함)</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>1011      (11)</source>
          <target state="translated">1011      (11)</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>In a bitwise OR (exclusive) operation, the resulting bit is set to 1 only when one input bit is 1.</source>
          <target state="translated">비트 OR (배타) 작업에서 결과 비트는 입력된 한 비트가 1 인 경우에 1로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>1010      (10)</source>
          <target state="translated">1010      (10)</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>0011      ( 3)</source>
          <target state="translated">0011      ( 3)</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>--------------  bXOR (exclusive)</source>
          <target state="translated">---bXOR (제외)</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>1001      ( 9)</source>
          <target state="translated">1001      ( 9)</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The bitwise NOT operator is a unary operator that produces the binary complement of the value.</source>
          <target state="translated">비트 NOT 연산자가 있는 값의 이진 보수를 생성 하는 단항 연산자입니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A bit of 1 is set to 0 and a bit of 0 is set to 1.</source>
          <target state="translated">1 비트는 0으로 설정 되어 및 0 비트는 1로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>For example, the binary complement of 0 is -1, the maximum unsigned integer (0xffffffff), and the binary complement of -1 is 0.</source>
          <target state="translated">예를 들어 0의 이진 보수는-1, 최대 부호 없는 정수 (0xffffffff) 및-1의 보수 이진은 0입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>PS C:&gt; -bNOT 10</source>
          <target state="translated">PS c: &gt;-관련 10</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>-11</source>
          <target state="translated">-11</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>0000 0000 0000 1010  (10)</source>
          <target state="translated">0000 0000 0000 1010  (10)</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>------------------------- bNOT 1111 1111 1111 0101  (-11, xfffffff5)</source>
          <target state="translated">---관련 1111 1111 1111 0101-(11 xfffffff5)</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In a bitwise shift-left operation, all bits are moved "n" places to the left, where "n" is the value of the right operand.</source>
          <target state="translated">비트 왼쪽 시프트 연산에서 모든 비트는 "n" 왼쪽에 배치, 여기서 "n"은 오른쪽 피연산자의 값 이동 합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A zero is inserted in the ones place.</source>
          <target state="translated">0과 삽입 되어 배치 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>When the left operand is an Integer (32-bit) value, the lower 5 bits of the right operand determine how many bits of the left operand are shifted.</source>
          <target state="translated">왼쪽된 피연산자는 정수 (32 비트) 값 이면 왼쪽된 피연산자의 비트 수 만큼 이동 오른쪽 피연산자의 하위 5 비트 결정 합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>When the left operand is a Long (64-bit) value, the lower 6 bits of the right operand determine how many bits of the left operand are shifted.</source>
          <target state="translated">왼쪽된 피연산자의 장기 (64 비트) 값이 오른쪽 피연산자의 하위 6 비트 결정 왼쪽된 피연산자의 비트 수 만큼 이동 합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 21 -shl 1</source>
          <target state="translated">PS c: &gt; 21-shl 1</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>42</source>
          <target state="translated">42</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>00010101  (21)</source>
          <target state="translated">00010101  (21)</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>00101010  (42)</source>
          <target state="translated">00101010  (42)</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 21 -shl 2</source>
          <target state="translated">PS c: &gt; 21-shl 2</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>84</source>
          <target state="translated">84</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>00010101  (21)</source>
          <target state="translated">00010101  (21)</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>00101010  (42)</source>
          <target state="translated">00101010  (42)</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>01010100  (84)</source>
          <target state="translated">01010100  (84)</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>In a bitwise shift-right operation, all bits are moved "n" places to the right, where "n" is specified by the right operand.</source>
          <target state="translated">비트 오른쪽 시프트 연산에서 "n" 리디렉터를 오른쪽에서 "n"가 오른쪽 피연산자가 지정 된 하는 경우 모든 비트가 이동 됩니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The shift-right operator (-shr) inserts a zero in the left-most place when shifting a positive or unsigned value to the right.</source>
          <target state="translated">오른쪽 시프트 연산자 (-shr) 양수 또는 부호 없는 값을 오른쪽으로 이동 하는 경우 맨 왼쪽 위치에 0을 삽입 합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>When the left operand is an Integer (32-bit) value, the lower 5 bits of the right operand determine how many bits of the left operand are shifted.</source>
          <target state="translated">왼쪽된 피연산자는 정수 (32 비트) 값 이면 왼쪽된 피연산자의 비트 수 만큼 이동 오른쪽 피연산자의 하위 5 비트 결정 합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>When the left operand is a Long (64-bit) value, the lower 6 bits of the right operand determine how many bits of the left operand are shifted.</source>
          <target state="translated">왼쪽된 피연산자의 장기 (64 비트) 값이 오른쪽 피연산자의 하위 6 비트 결정 왼쪽된 피연산자의 비트 수 만큼 이동 합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 21 -shr 1</source>
          <target state="translated">PS c: &gt; 21-shr 1</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="translated">10</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>00010101  (21)</source>
          <target state="translated">00010101  (21)</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>00001010  (10)</source>
          <target state="translated">00001010  (10)</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 21 -shr 2</source>
          <target state="translated">PS c: &gt; 21-shr 2</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>00010101  (21)</source>
          <target state="translated">00010101  (21)</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>00001010  (10)</source>
          <target state="translated">00001010  (10)</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>00000101  ( 5)</source>
          <target state="translated">00000101  ( 5)</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>about_Operators about_Regular_Expressions about_Wildcards Compare-Object Foreach-Object Where-Object</source>
          <target state="translated">about_Operators about_Regular_Expressions about_Wildcards Compare-object Foreach-object Where-object</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>