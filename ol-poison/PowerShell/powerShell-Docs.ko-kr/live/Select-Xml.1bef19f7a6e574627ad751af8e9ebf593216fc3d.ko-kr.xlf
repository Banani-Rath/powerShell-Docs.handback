<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4175a950634d9afe88200dd3c1c5d38c44cda222</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Select-Xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3badd25164fe045a77230b6897ae3889bd51f8e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7868bf2dbacc7b7fcf364ea6f464375e942de7b9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Select-Xml</source>
          <target state="translated">Select-xml</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Select-Xml</source>
          <target state="translated">Select-xml</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Finds text in an XML string or document.</source>
          <target state="translated">XML 문자열 또는 문서에서 텍스트를 찾습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Xml (Default)</source>
          <target state="translated">Xml (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">경로</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LiteralPath</source>
          <target state="translated">LiteralPath</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Content</source>
          <target state="translated">콘텐츠</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Select-Xml<ept id="p1">**</ept> cmdlet lets you use XPath queries to search for text in XML strings and documents.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Select-xml<ept id="p1">**</ept> cmdlet를 사용 하면 XPath 쿼리를 사용 하 여 XML 문자열 및 문서에 텍스트를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Enter an XPath query, and use the <bpt id="p1">*</bpt>Content<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Path<ept id="p2">*</ept>, or <bpt id="p3">*</bpt>Xml<ept id="p3">*</ept> parameter to specify the XML to be searched.</source>
          <target state="translated">XPath 쿼리를 입력 하 고 사용는 <bpt id="p1">*</bpt>콘텐츠<ept id="p1">*</ept>, <bpt id="p2">*</bpt>경로<ept id="p2">*</ept>, 또는 <bpt id="p3">*</bpt>Xml<ept id="p3">*</ept> 매개 변수를 지정 하는 XML을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example 1: Select AliasProperty nodes</source>
          <target state="translated">예제 1: AliasProperty 노드를 선택 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example gets the alias properties in the Types.ps1xml.</source>
          <target state="translated">이 예제에서는 Types.ps1xml에 있는 별칭 속성을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>(For information about this file, see about_Types.ps1xml.)</source>
          <target state="translated">(이 파일에 대 한 내용은 about_Types.ps1xml 참조).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first command saves the path to the Types.ps1xml file in the $Path variable.</source>
          <target state="translated">첫 번째 명령은 Types.ps1xml 파일의 경로를 $Path 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The second command saves the XML path to the AliasProperty node in the $XPath variable.</source>
          <target state="translated">두 번째 명령은 AliasProperty 노드에 대한 XML 경로를 $XPath 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The third command uses the <bpt id="p1">**</bpt>Select-Xml<ept id="p1">**</ept> cmdlet to get the AliasProperty nodes that are identified by the XPath statement from the Types.ps1xml file.</source>
          <target state="translated">세 번째 명령은 <bpt id="p1">**</bpt>Select-xml<ept id="p1">**</ept> cmdlet을 사용 Types.ps1xml 파일에서 XPath 문으로 식별 된 AliasProperty 노드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The command uses a pipeline operator to send the AliasProperty nodes to the Select-Object cmdlet.</source>
          <target state="translated">명령은 파이프라인 연산자를 사용 하 여 AliasProperty 노드를 Select-object cmdlet으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>ExpandProperty<ept id="p1">*</ept> parameter expands the <bpt id="p2">**</bpt>Node<ept id="p2">**</ept> object and returns its Name and ReferencedMemberName properties.</source>
          <target state="translated"> <bpt id="p1">*</bpt>ExpandProperty<ept id="p1">*</ept> 확장 매개 변수는 <bpt id="p2">**</bpt>노드<ept id="p2">**</ept> 개체 및 해당 Name 및 ReferencedMemberName 속성을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The result shows the Name and ReferencedMemberName of each alias property in the Types.ps1xml file.</source>
          <target state="translated">결과는 Types.ps1xml 파일에 있는 각 별칭 속성의 Name 및 ReferencedMemberName을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, there is a <bpt id="p1">**</bpt>Count<ept id="p1">**</ept> property that is an alias of the <bpt id="p2">**</bpt>Length<ept id="p2">**</ept> property.</source>
          <target state="translated">예를 들어, 한 <bpt id="p1">**</bpt>Count<ept id="p1">**</ept> 속성의 별칭을는 <bpt id="p2">**</bpt>길이<ept id="p2">**</ept> 속성입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example 2: Input an XML document</source>
          <target state="translated">예제 2: 입력 XML 문서</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>XML<ept id="p1">*</ept> parameter to provide an XML document to the <bpt id="p2">**</bpt>Select-Xml<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">*</bpt>XML<ept id="p1">*</ept> 매개 변수를 XML 문서에 <bpt id="p2">**</bpt>Select-xml<ept id="p2">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Content cmdlet to get the content of the Types.ps1xml file and save it in the $Types variable.</source>
          <target state="translated">첫 번째 명령은 Get-content cmdlet를 사용 하 여 Types.ps1xml 파일의 내용을 가져오고 $Types 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">\[</ph>xml<ph id="ph2">\]</ph> casts the variable as an XML object.</source>
          <target state="translated"> <ph id="ph1">\[</ph>xml<ph id="ph2">\]</ph> 변수를 XML 개체로 캐스팅 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>Select-Xml<ept id="p1">**</ept> cmdlet to get the MethodName nodes in the Types.ps1xml file.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">**</bpt>Select-xml<ept id="p1">**</ept> cmdlet을 사용 Types.ps1xml 파일의 MethodName 노드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>Xml<ept id="p1">*</ept> parameter to specify the XML content in the $Types variable and the <bpt id="p2">*</bpt>XPath<ept id="p2">*</ept> parameter to specify the path to the MethodName node.</source>
          <target state="translated">명령을 사용 하 여는 <bpt id="p1">*</bpt>Xml<ept id="p1">*</ept> $Types 변수에 XML 콘텐츠를 지정 하려면 매개 변수 및 <bpt id="p2">*</bpt>XPath<ept id="p2">*</ept> 매개 변수를 MethodName 노드의 경로 지정 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example 3: Search PowerShell Help files</source>
          <target state="translated">예제 3: 검색 PowerShell 도움말 파일</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">**</bpt>Select-Xml<ept id="p1">**</ept> cmdlet to search the Windows PowerShell XML-based cmdlet help files.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">**</bpt>Select-xml<ept id="p1">**</ept> cmdlet을 Windows PowerShell XML 기반 cmdlet 도움말 파일을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this example, we'll search for the cmdlet name that serves as a title for each help file and the path to the help file.</source>
          <target state="translated">각 도움말 파일의 제목 역할을 하는 cmdlet 이름 및 도움말 파일의 경로를 검색합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The first command creates a hash table that represents the XML namespace that is used for the help files and saves it in the $Namespace variable.</source>
          <target state="translated">첫 번째 명령은 도움말 파일에 사용되는 XML 네임스페이스를 나타내는 해시 테이블을 만든 다음 $Namespace 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example 4: Different ways to input XML</source>
          <target state="translated">예 4: 다양 한 방법 입력 XML</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This example shows two different ways to send XML to the <bpt id="p1">**</bpt>Select-Xml<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">XML을 보내는 두 가지 방법을 보여 주는이 예제는 <bpt id="p1">**</bpt>Select-xml<ept id="p1">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The first command saves a here-string that contains XML in the $Xml variable.</source>
          <target state="translated">첫 번째 명령은 $Xml 변수의 XML이 포함 된 here-string을 저장 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>(For more information about here-strings, see about_Quoting_Rules.)</source>
          <target state="translated">(Here-strings에 대 한 자세한 내용은 about_Quoting_Rules 참조).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example 5: Use the default xmlns namespace</source>
          <target state="translated">예제 5: 기본 xmlns 네임 스페이스를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">**</bpt>Select-Xml<ept id="p1">**</ept> cmdlet with XML documents that use the default xmlns namespace.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">**</bpt>Select-xml<ept id="p1">**</ept> 기본 xmlns 네임 스페이스를 사용 하는 XML 문서를 사용 하 여 cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The example gets the titles of Windows PowerShell ISE user-created snippet files.</source>
          <target state="translated">Windows PowerShell ISE 사용자 생성 조각 파일의 제목을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For information about snippets, see New-IseSnippet.</source>
          <target state="translated">New-isesnippet 조각에 대 한 정보를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The first command creates a hash table for the default namespace that snippet XML files use and assigns it to the $SnippetNamespace variable.</source>
          <target state="translated">첫 번째 명령은 조각 XML 파일을 사용 하 고 $SnippetNamespace 변수에 할당 하는 기본 네임 스페이스에 대 한 해시 테이블이 만들어집니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The hash table value is the XMLNS schema URI in the snippet XML.</source>
          <target state="translated">해시 테이블 값은 조각 XML의 XMLNS 스키마 URI입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The hash table key name, snip, is arbitrary.</source>
          <target state="translated">해시 테이블 키 이름, 캡처는 임의로 지정 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can use any name that is not reserved, but you cannot use xmlns.</source>
          <target state="translated">예약 되지 않은 모든 이름을 사용할 수 있지만 xmlns를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>-Content</source>
          <target state="translated">-콘텐츠</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Specifies a string that contains the XML to search.</source>
          <target state="translated">검색할 XML이 포함된 문자열을 지정합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can also pipe strings to <bpt id="p1">**</bpt>Select-Xml<ept id="p1">**</ept>.</source>
          <target state="translated">문자열을 파이프할 수도 있습니다 <bpt id="p1">**</bpt>Select-xml<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>-LiteralPath</source>
          <target state="translated">-LiteralPath</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies the paths and file names of the XML files to search.</source>
          <target state="translated">검색할 XML 파일의 경로 및 파일 이름을 지정합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">*</bpt>Path<ept id="p1">*</ept>, the value of the <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> parameter is used exactly as it is typed.</source>
          <target state="translated">와 달리 <bpt id="p1">*</bpt>경로<ept id="p1">*</ept>, 의 값은 <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> 매개 변수는 입력 된 대로 정확 하 게 사용 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>No characters are interpreted as wildcards.</source>
          <target state="translated">어떠한 문자도 와일드카드로 해석되지 않습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If the path includes escape characters, enclose it in single quotation marks.</source>
          <target state="translated">이스케이프 문자가 포함된 경로는 작은따옴표로 묶으세요.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</source>
          <target state="translated">작은따옴표는 Windows PowerShell이 어떤 문자도 이스케이프 시퀀스로 해석하지 않도록 지시합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>-Namespace</source>
          <target state="translated">-네임 스페이스</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Specifies a hash table of the namespaces used in the XML.</source>
          <target state="translated">XML에서 사용되는 네임스페이스의 해시 테이블을 지정합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use the format @{<ph id="ph1">\&lt;</ph>namespaceName<ph id="ph2">\&gt; = \&lt;</ph>namespaceValue<ph id="ph3">\&gt;</ph>}.</source>
          <target state="translated">형식을 사용 하 여 @{<ph id="ph1">\&lt;</ph>namespaceName<ph id="ph2">\&gt; = \&lt;</ph>namespaceValue<ph id="ph3">\&gt;</ph>}입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When the XML uses the default namespace, which begins with xmlns, use an arbitrary key for the namespace name.</source>
          <target state="translated">XML과 xmlns로 시작 하는 기본 네임 스페이스를 사용 하는 경우 네임 스페이스 이름에 대 한 임의 키를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You cannot use xmlns.</source>
          <target state="translated">Xmlns를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the XPath statement, prefix each node name with the namespace name and a colon, such as //namespaceName:Node.</source>
          <target state="translated">XPath 문에서 각 노드 이름 접두사 네임 스페이스 이름과 콜론을 사용 하 여 예: / / namespaceName:Node 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>-Path</source>
          <target state="translated">-Path</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies the path and file names of the XML files to search.</source>
          <target state="translated">검색할 XML 파일의 경로 및 파일 이름을 지정합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Wildcard characters are permitted.</source>
          <target state="translated">와일드카드 문자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>-XPath</source>
          <target state="translated">-XPath</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Specifies an XPath search query.</source>
          <target state="translated">XPath 검색 쿼리를 지정합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The query language is case-sensitive.</source>
          <target state="translated">쿼리 언어는 대/소문자를 구분합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This parameter is required.</source>
          <target state="translated">이 매개 변수는 필수입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-Xml</source>
          <target state="translated">Xml</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Specifies one or more XML nodes.</source>
          <target state="translated">하나 이상의 XML 노드를 지정합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An XML document will be processed as a collection of XML nodes.</source>
          <target state="translated">XML 문서는 XML 노드의 컬렉션으로 처리됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you pipe an XML document to <bpt id="p1">**</bpt>Select-Xml<ept id="p1">**</ept>, each document node will be searched separately as it comes through the pipeline.</source>
          <target state="translated">XML 문서를 파이프 <bpt id="p1">**</bpt>Select-xml<ept id="p1">**</ept>, 각 문서 노드 검색 됩니다 개별적으로 파이프라인을 통해 제공 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>System.String or System.Xml.XmlNode</source>
          <target state="translated">System.String 또는 System.Xml.XmlNode</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can pipe a path or XML node to this cmdlet.</source>
          <target state="translated">경로 또는 XML 노드를이 cmdlet으로 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Microsoft.PowerShell.Commands.SelectXmlInfo</source>
          <target state="translated">Microsoft.PowerShell.Commands.SelectXmlInfo</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>XPath is a standard language that is designed to identify parts of an XML document.</source>
          <target state="translated">XPath는 XML 문서의 부분을 식별하도록 설계된 표준 언어입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information about the XPath language, see the Selection Filters section of the Event Selectionhttp://go.microsoft.com/fwlink/?LinkId=143608 topic in the MSDN (Microsoft Developer Network) library at http://go.microsoft.com/fwlink/?LinkId=143608.</source>
          <target state="translated">XPath 언어에 대 한 자세한 내용은 http://go.microsoft.com/fwlink/?LinkId=143608 MSDN (Microsoft Developer Network) 라이브러리에 이벤트 Selectionhttp://go.microsoft.com/fwlink/?LinkId=143608 항목의 선택 필터 섹션을 참조 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>And, see the XPath Referencehttp://go.microsoft.com/fwlink/?LinkId=143609 in the MSDN library at http://go.microsoft.com/fwlink/?LinkId=143609.</source>
          <target state="translated">그리고 XPath Referencehttp://go.microsoft.com/fwlink/?LinkId=143609 http://go.microsoft.com/fwlink/?LinkId=143609 MSDN library에서를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>ConvertTo-Xml</source>
          <target state="translated">ConvertTo-Xml</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>