<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">548dca15dd70dfebe9727df1c119ab7ffc2adea6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Import-Csv.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5f932097c81d7ca9e3483f238217e799f1e4d12</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ce7ab7313c2149b119b9e73db55cd3e63dc250a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creates table-like custom objects from the items in a CSV file.</source>
          <target state="translated">CSV 파일의 항목으로 테이블 형식의 사용자 지정 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Delimiter (Default)</source>
          <target state="translated">구분 기호 (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>UseCulture</source>
          <target state="translated">UseCulture</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet creates table-like custom objects from the items in CSV files.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> cmdlet은 CSV 파일에 있는 항목의 테이블 형식의 사용자 지정 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each column in the CSV file becomes a property of the custom object and the items in rows become the property values.</source>
          <target state="translated">CSV 파일의 각 열에는 사용자 지정 개체의 속성이 되 고 행의 항목 수 속성 값.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> works on any CSV file, including files that are generated by the Export-Csv cmdlet.</source>
          <target state="translated"><bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> Export-csv cmdlet에 의해 생성 되는 파일을 포함 한 모든 CSV 파일에서 작동 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use the parameters of the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to specify the column header row and the item delimiter, or direct <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> to use the list separator for the current culture as the item delimiter.</source>
          <target state="translated">매개 변수를 사용할 수는 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 열 머리글 행과 항목 구분 기호를 지정 하거나 직접 cmdlet <bpt id="p2">**</bpt>Import-csv<ept id="p2">**</ept> 현재 문화권에 대 한 목록 구분 기호를 항목 구분 기호로 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also use the ConvertTo-Csv and ConvertFrom-Csv cmdlets to convert objects to CSV strings (and back).</source>
          <target state="translated">또한 개체를 CSV 문자열로 변환 (및 백업)를 Convertto-csv 및 Convertfrom-csv cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These cmdlets are the same as the <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> cmdlets, except that they do not deal with files.</source>
          <target state="translated">이 cmdlet과 동일는 <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> 및 <bpt id="p2">**</bpt>Import-csv<ept id="p2">**</ept> cmdlet, 파일 처리 하지 않는다는 점을 제외 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, if a header row entry in a CSV file contains an empty or null value, Windows PowerShell inserts a default header row name and displays a warning message.</source>
          <target state="translated">Windows PowerShell 3.0부터는 CSV 파일의 머리글 행 항목에 빈 값이나 null 값이 있으면 Windows PowerShell에서 기본 머리글 행 이름을 삽입하고 경고 메시지를 표시합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In previous versions of Windows PowerShell, if a header row entry in a CSV file contains an empty or null value, the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> command fails.</source>
          <target state="translated">이전 버전의 Windows PowerShell에서는 CSV 파일의 머리글 행 항목에는 비어 있거나 null 값을 포함 하는 경우에 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 명령이 실패 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example 1: Import process objects</source>
          <target state="translated">예제 1: 프로세스 개체 가져오기</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example shows how to export and then import a CSV file of process objects.</source>
          <target state="translated">이 예제에는 내보낸 다음 프로세스 개체의 CSV 파일을 가져와야 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Process cmdlet to get the processes on the local computer.</source>
          <target state="translated">첫 번째 명령은 Get-Process cmdlet을 사용하여 로컬 컴퓨터의 프로세스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator (|) to send the process objects to the Export-Csv cmdlet, which exports the process objects to the Processes.csv file in the current directory.</source>
          <target state="translated">파이프라인 연산자 (|)를 사용 하 여 프로세스 개체를 Export-csv cmdlet으로 프로세스 개체를 현재 디렉터리의 Processes.csv 파일로 내보냅니다 보내려고 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to import the processes in the <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> file.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 의 프로세스를 가져오려는 cmdlet은 <bpt id="p2">**</bpt>Import-csv<ept id="p2">**</ept> 파일.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Then it saves the resulting process objects in the $P variable.</source>
          <target state="translated">그런 다음 $P 변수에 결과 프로세스 개체를 저장합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The third command uses a pipeline operator to pipe the imported objects to the Get-Member cmdlet.</source>
          <target state="translated">세 번째 명령은 파이프라인 연산자를 사용 하 여 가져온된 개체를 Get-member cmdlet으로 파이프 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The result shows that they are <bpt id="p1">**</bpt>CSV:System.Diagnostic.Process<ept id="p1">**</ept> objects, not the <bpt id="p2">**</bpt>System.Diagnostic.Process<ept id="p2">**</ept> objects that <bpt id="p3">**</bpt>Get-Process<ept id="p3">**</ept> returns.</source>
          <target state="translated">결과 표시 되는지 <bpt id="p1">**</bpt>작업<ept id="p1">**</ept> 개체가 아닌는 <bpt id="p2">**</bpt>System.Diagnostic.Process<ept id="p2">**</ept> 개체 <bpt id="p3">**</bpt>Get-process<ept id="p3">**</ept> 를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Also, because there is no entry type in the formatting files for the CSV version of the process objects, these objects are not formatted in the same way that standard process objects are formatted.</source>
          <target state="translated">또한 프로세스 개체의 CSV 버전에 대한 형식 지정 파일에는 항목 유형이 없으므로 이들 개체는 표준 프로세스 개체와 동일한 방식으로 형식이 지정되지 않습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To display the objects, use the formatting cmdlets, such as Format-Table and Format-List, or pipe the objects to Out-GridView.</source>
          <target state="translated">개체를 표시하려면 Format-Table 및 Format-List와 같은 형식 지정 cmdlet을 사용하거나 개체를 Out-GridView로 파이프합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example 2: Specify the delimiter</source>
          <target state="translated">예제 2: 구분 기호를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>Delimiter<ept id="p1">*</ept> parameter of the <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">*</bpt>구분 기호<ept id="p1">*</ept> 의 매개 변수는 <bpt id="p2">**</bpt>Import-csv<ept id="p2">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this example, the processes are exported to a file that uses a colon (:) as a delimiter.</source>
          <target state="translated">이 예제에서는 프로세스를 콜론(:)을 구분 기호로 사용하는 파일로 내보냅니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When importing, the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> file uses the <bpt id="p2">*</bpt>Delimiter<ept id="p2">*</ept> parameter to indicate the delimiter that is used in the file.</source>
          <target state="translated">를 가져올 때의 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 사용 하 여 파일의 <bpt id="p2">*</bpt>구분 기호<ept id="p2">*</ept> 파일에 사용 되는 구분 기호를 나타내는 매개 변수를 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 3: Specify the current culture for the delimiter</source>
          <target state="translated">구분 기호에 대 한 현재 문화권을 지정 하는 예제 3:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter of the <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> 의 매개 변수는 <bpt id="p2">**</bpt>Import-csv<ept id="p2">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first command imports the objects in the Processes.csv file into the $P variable.</source>
          <target state="translated">첫 번째 명령은 $P 변수로 Processes.csv 파일에에서 있는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter to direct <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> to use the list separator defined for the current culture.</source>
          <target state="translated">사용 하 여는 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> 매개 변수를 <bpt id="p2">**</bpt>Import-csv<ept id="p2">**</ept> 현재 문화권에 대해 정의 된 목록 구분 기호를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The second command displays the list separator for the current culture.</source>
          <target state="translated">두 번째 명령은 현재 문화권의 목록 구분 기호를 표시합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It uses the Get-Culture cmdlet to get the current culture.</source>
          <target state="translated">Get-culture cmdlet를 사용 하 여 현재 문화권을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It uses the dot (.) method to get the TextInfo property of the current culture and the ListSeparator property of the object in TextInfo.</source>
          <target state="translated">점(.) 메서드를 사용하여 현재 문화권의 TextInfo 속성과 TextInfo에 있는 개체의 ListSeparator 속성을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this example, the command returns a comma.</source>
          <target state="translated">이 예에서 명령은 쉼표를 반환합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example 4: Change property names in an imported object</source>
          <target state="translated">예 4: 가져온된 개체의 속성 이름 변경</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> to change the names of properties in the resulting imported object.</source>
          <target state="translated">사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">*</bpt>헤더<ept id="p1">*</ept> 의 매개 변수 <bpt id="p2">**</bpt>Import-csv<ept id="p2">**</ept> 가져온된 결과 개체에서 속성의 이름을 변경 해야 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The first command uses the Start-Job cmdlet to start a background job that runs a Get-Process command on the local computer.</source>
          <target state="translated">첫 번째 명령은 Start-Job cmdlet을 사용하여 로컬 컴퓨터에서 Get-Process 명령을 실행하는 백그라운드 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A pipeline operator (|) sends the resulting job object to the Export-Csv cmdlet, which converts the job object to CSV format.</source>
          <target state="translated">파이프라인 연산자 (|)를 작업 개체를 CSV 형식으로 변환 하는 Export-csv cmdlet으로 결과 작업 개체를 보냅니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The second command saves a header in the $Header variable.</source>
          <target state="translated">두 번째 명령은 $Header 변수에 헤더를 저장합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Unlike the default header, this header uses MoreData instead of HasMoreData and State instead of JobStateInfo.</source>
          <target state="translated">기본 머리글과 달리이 헤더는 HasMoreData 및 JobStateInfo 대신 상태 대신 MoreData를 사용합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The next three commands delete the original header (the second line) from the Jobs.csv file.</source>
          <target state="translated">다음의 세 명령은 Jobs.csv 파일에서 원래 머리글(두 번째 줄)을 삭제합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The sixth command uses the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to import the Jobs.csv file and convert the CSV strings into a CSV version of the job object.</source>
          <target state="translated">여섯 번째 명령은 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> Jobs.csv 파일을 가져오고 CSV를 변환 하는 cmdlet이 작업 개체의 CSV 버전으로 문자열입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter to submit the alternate header.</source>
          <target state="translated">명령을 사용 하는 <bpt id="p1">*</bpt>헤더<ept id="p1">*</ept> 매개 변수를 대체 머리글을 제출 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The results are stored in the $J variable.</source>
          <target state="translated">결과 $J 변수에 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The seventh command displays the object in the $J variable.</source>
          <target state="translated">일곱 번째 명령은 $J 변수에 개체를 표시합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The resulting object has MoreData and State properties, as shown in the command output.</source>
          <target state="translated">결과 개체는 명령 출력에 표시 된 것 처럼 MoreData 및 상태 속성에 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example 5: Create a custom object using a CSV file</source>
          <target state="translated">예제 5: CSV 파일을 사용 하 여 사용자 지정 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example shows how to create a custom object in Windows PowerShell by using a CSV file.</source>
          <target state="translated">이 예제에서는 CSV 파일을 사용하여 Windows PowerShell에서 사용자 지정 개체를 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Content cmdlet to get the Links.csv file.</source>
          <target state="translated">첫 번째 명령은 Get-Content cmdlet을 사용하여 Links.csv 파일을 검색합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to import the Links.csv file.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> cmdlet Links.csv 파일을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter to specify LinkId and TopicTitle as property names for the new custom objects.</source>
          <target state="translated">이 명령은 사용는 <bpt id="p1">*</bpt>헤더<ept id="p1">*</ept> 매개 변수를 LinkId 및 TopicTitle 새 사용자 지정 개체의 속성 이름으로 지정 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The command saves the imported objects in the $A variable.</source>
          <target state="translated">이 명령은 $A 변수에 가져온된 개체를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The third command uses the Get-Member cmdlet to get the type and members of the custom objects in the $A variable.</source>
          <target state="translated">세 번째 명령은 Get-member cmdlet를 사용 하 여 $A 변수에 유형 및 사용자 지정 개체의 멤버를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The output shows that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> returns a collection of custom objects (<bpt id="p2">**</bpt>PSCustomObject<ept id="p2">**</ept>).</source>
          <target state="translated">출력에 표시 하는 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 사용자 지정 개체의 컬렉션을 반환 (<bpt id="p2">**</bpt>PSCustomObject<ept id="p2">**</ept>).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In addition to some default properties, the custom objects have LinkID and TopicTitle note properties.</source>
          <target state="translated">일부 기본 속성 외에도 사용자 지정 개체는 LinkID 및 TopicTitle 메모 속성을 가집니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This command shows that you can use the custom object like you would any object in Windows PowerShell.</source>
          <target state="translated">이 명령은 Windows PowerShell의 모든 개체처럼 사용자 지정 개체를 사용할 수 있음을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The command pipes the custom objects in the $A variable to the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet, which gets only objects with a <bpt id="p2">**</bpt>TopicTitle<ept id="p2">**</ept> property that includes alias.</source>
          <target state="translated">명령은 $A 변수에서 사용자 지정 개체를 파이프는 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> cmdlet은 인 개체만 <bpt id="p2">**</bpt>TopicTitle<ept id="p2">**</ept> 별칭을 포함 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The Where-Object command uses the new simplified command format that does not require symbols, script blocks, or curly braces.</source>
          <target state="translated">기호, 스크립트 블록 또는 중괄호가 필요 하지 않은 새 간소화 된 명령 형식을 사용 하는 Where-object 명령입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Example 6: Import a CSV that is missing a value</source>
          <target state="translated">예제 6: 값이 없습니다 CSV 가져오기</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This example shows how the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet in Windows PowerShell 3.0 responds when the header row in a CSV file includes a null or empty value.</source>
          <target state="translated">이 예에서는 방법을 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> CSV 파일의 머리글 행에 null 또는 빈 값을 포함 하는 경우 Windows PowerShell 3.0에서 cmdlet 응답 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> substitutes a default name for the header row.</source>
          <target state="translated"><bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 머리글 행에 대 한 기본 이름을 대체 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default name becomes the name of the property of the object that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> returns.</source>
          <target state="translated">기본 이름은 개체의 속성 이름이 있는 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 반환 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Content cmdlet to get the Projects.csv file on the Server02 remote computer.</source>
          <target state="translated">첫 번째 명령은 Get-content cmdlet를 사용 하 여 Server02 원격 컴퓨터에서 Projects.csv 파일을 가져오십시오.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The output shows that the header row of the file is missing a value between ProjectName and Completed.</source>
          <target state="translated">출력 파일의 머리글 행 ProjectName과 완료 사이의 값 없음을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to import the Projects.csv file.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> cmdlet Projects.csv 파일을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The output shows that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> generates a warning and substitutes a default name, H1, for the missing header row value.</source>
          <target state="translated">출력에 표시 하는 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 경고를 생성 하 고 기본 이름이 H1, 누락 된 머리글 행 값에 대 한 대체 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>H1 is also used for the name of the object property.</source>
          <target state="translated">또한 H1은 개체 속성의 이름에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The third command uses the dot method to get the value of the H1 property of the object that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> creates.</source>
          <target state="translated">세 번째 명령은 점 메서드를 사용 하는 개체의 H1 속성의 값을 가져옵니다 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 만듭니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>-Delimiter</source>
          <target state="translated">구분 기호</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Specifies the delimiter that separates the property values in the CSV file.</source>
          <target state="translated">CSV 파일의 속성 값을 구분하는 구분 기호를 지정합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">기본값은 쉼표(,)입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Enter a character, such as a colon (:).</source>
          <target state="translated">콜론(:)과 같은 문자를 입력합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To specify a semicolon (;), enclose it in quotation marks.</source>
          <target state="translated">세미콜론(;)을 지정하려면 따옴표로 묶어야 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the actual string delimiter in the file, <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cannot create objects from the CSV strings.</source>
          <target state="translated">파일에서 실제 문자열 구분 기호 이외의 문자를 지정 하는 경우 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> CSV 문자열에서 개체를 만들 수 없습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">대신 이 cmdlet은 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>-Encoding</source>
          <target state="translated">인코딩</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Specifies the type of character encoding that was used in the CSV file.</source>
          <target state="translated">CSV 파일에서 사용된 문자 인코딩 유형을 지정합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">이 매개 변수에 허용되는 값은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">유니코드</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>UTF7</source>
          <target state="translated">UTF7</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>UTF8</source>
          <target state="translated">UTF8</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>ASCII</source>
          <target state="translated">ASCII</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>UTF32</source>
          <target state="translated">UTF32</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>BigEndianUnicode</source>
          <target state="translated">BigEndianUnicode</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>OEM</source>
          <target state="translated">OEM</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The default is ASCII.</source>
          <target state="translated">기본값은 ASCII입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>-Header</source>
          <target state="translated">헤더</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Specifies an alternate column header row for the imported file.</source>
          <target state="translated">가져온 파일의 대체 열 머리글 행을 지정합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The column header determines the names of the properties of the object that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> creates.</source>
          <target state="translated">열 머리글은 개체의 속성의 이름을 결정 하는 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 만듭니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Enter a comma-separated list of the column headers.</source>
          <target state="translated">쉼표로 구분된 열 머리글 목록을 입력합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Enclose each item in quotation marks (single or double).</source>
          <target state="translated">각 항목을 작은따옴표 또는 큰따옴표로 묶습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Do not enclose the header string in quotation marks.</source>
          <target state="translated">머리글 문자열을 따옴표로 묶지 마세요.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If you enter fewer column headers than there are columns, the remaining columns will have no header.</source>
          <target state="translated">열 수보다 적은 수의 열 머리글을 입력하면 나머지 열에 머리글이 표시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you enter more headers than there are columns, the extra headers are ignored.</source>
          <target state="translated">열 수보다 많은 수의 머리글을 입력하면 나머지 머리글은 무시됩니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When using the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter, delete the original header row from the CSV file.</source>
          <target state="translated">사용 하는 경우는 <bpt id="p1">*</bpt>헤더<ept id="p1">*</ept> 매개 변수를 CSV 파일에서 원래 머리글 행을 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> creates an extra object from the items in the header row.</source>
          <target state="translated">그렇지 않으면 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 머리글 행 항목에서 개체를 추가로 만듭니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>-LiteralPath</source>
          <target state="translated">-LiteralPath</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Specifies the path to the CSV file to import.</source>
          <target state="translated">가져올 CSV 파일의 경로를 지정합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">*</bpt>Path<ept id="p1">*</ept>, the value of the <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> parameter is used exactly as it is typed.</source>
          <target state="translated">와 달리 <bpt id="p1">*</bpt>경로<ept id="p1">*</ept>, 의 값은 <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> 매개 변수는 입력 된 대로 정확 하 게 사용 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>No characters are interpreted as wildcards.</source>
          <target state="translated">어떠한 문자도 와일드카드로 해석되지 않습니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If the path includes escape characters, enclose it in single quotation marks.</source>
          <target state="translated">이스케이프 문자가 포함된 경로는 작은따옴표로 묶으세요.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</source>
          <target state="translated">작은따옴표는 Windows PowerShell이 어떤 문자도 이스케이프 시퀀스로 해석하지 않도록 지시합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>-Path</source>
          <target state="translated">-Path</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Specifies the path to the CSV file to import.</source>
          <target state="translated">가져올 CSV 파일의 경로를 지정합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can also pipe a path to <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept>.</source>
          <target state="translated">에 대 한 경로 파이프할 수도 있습니다 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-UseCulture</source>
          <target state="translated">-UseCulture</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet uses the list separator for the current culture as the item delimiter.</source>
          <target state="translated">이 cmdlet에서는 목록 구분 기호는 현재 문화권에 대 한 항목 구분 기호로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">기본값은 쉼표(,)입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>To find the list separator for a culture, use the following command: <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>.</source>
          <target state="translated">문화권에 대 한 목록 구분 기호를 찾으려면 다음 명령을 사용 하 여: <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the delimiter used in the CSV strings, ConvertFrom-Csv cannot create objects from the CSV strings.</source>
          <target state="translated">CSV 문자열에 사용 되는 구분 기호 이외의 문자를 지정 하는 경우 Convertfrom-csv는 CSV 문자열에서 개체를 만들 수 없습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">대신 이 cmdlet은 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can pipe a string that contains a path to <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept>.</source>
          <target state="translated">에 대 한 경로 포함 하는 문자열을 파이프할 수 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">개체</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This cmdlet returns the objects described by the content in the CSV file.</source>
          <target state="translated">이 cmdlet은 CSV 파일의 내용에 의해 설명 되는 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Because the imported objects are CSV versions of the object type, they are not recognized and formatted by the Windows PowerShell type formatting entries that format the non-CSV versions of the object type.</source>
          <target state="translated">가져온 개체는 개체 유형의 CSV 버전이므로 CSV가 아닌 개체 유형 버전 형식을 지정하는 Windows PowerShell 유형 형식 지정 항목을 통해 인식되지 않으며 형식이 지정되지도 않습니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The result of an <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> command is a collection of strings that form a table-like custom object.</source>
          <target state="translated">결과 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> 명령 테이블 형식의 사용자 지정 개체를 구성 하는 문자열의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Each row is a separate string, so you can use the <bpt id="p1">**</bpt>Count<ept id="p1">**</ept> property of the object to count the table rows.</source>
          <target state="translated">각 행은 별도 문자열로 사용할 수 있도록는 <bpt id="p1">**</bpt>개수<ept id="p1">**</ept> 테이블 행 수를 계산 하는 개체의 속성입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The columns are the properties of the object and items in the rows are the property values.</source>
          <target state="translated">열은 개체의 속성이고 행의 항목은 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The column header row determines the number of columns and the column names.</source>
          <target state="translated">열 머리글 행에 따라 열 수와 열 이름이 결정됩니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The column names are also the names of the properties of the objects.</source>
          <target state="translated">또한 열 이름은 개체의 속성 이름입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The first row is interpreted to be the column headers, unless you use the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter to specify column headers.</source>
          <target state="translated">첫 번째 행은으로 해석 되어서는 열 머리글을 사용 하지 않는 경우는 <bpt id="p1">*</bpt>헤더<ept id="p1">*</ept> 매개 변수 열 머리글을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If any row has more values than the header row, the additional values are ignored.</source>
          <target state="translated">모든 행에 머리글 행보다 많은 값이 있으면 추가 값이 무시됩니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If the column header row is missing a value or contains a null or empty value, <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> uses H followed by a number for the missing column header and property name.</source>
          <target state="translated">열 머리글 행에 값이 누락 또는 null 또는 빈 값을 포함 하는 경우 <bpt id="p1">**</bpt>Import-csv<ept id="p1">**</ept> H 뒤 누락 된 열 머리글 및 속성 이름에 대 한 숫자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In the CSV file, each object is represented by a comma-separated list of the property values of the object.</source>
          <target state="translated">CSV 파일에서 각 개체는 쉼표로 구분된 개체 속성 값 목록으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The property values are converted to strings (by using the ToString() method of the object), so they are generally represented by the name of the property value.</source>
          <target state="translated">속성 값은 개체의 ToString() 메서드를 통해 문자열로 변환될 수도 있으므로 일반적으로 속성 값 이름으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Export-Csv does not export the methods of the object.</source>
          <target state="translated">Export-csv는 개체의 메서드를 내보내지 않습니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>