<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba185115ed4d25c52d3006d5cfba59b98eadf230</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Export-Clixml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4c4fd6a4f048ef528b4f908e2f57b94c1b46fc9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f4f12dade76e7517534db33a5458ce975f81911</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Export-Clixml</source>
          <target state="translated">Export-clixml</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Export-Clixml</source>
          <target state="translated">Export-clixml</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creates an XML-based representation of an object or objects and stores it in a file.</source>
          <target state="translated">개체의 XML 기반 표시를 만들고 이 표시를 파일에 저장합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ByPath (Default)</source>
          <target state="translated">ByPath (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ByLiteralPath</source>
          <target state="translated">ByLiteralPath</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> cmdlet creates an XML-based representation of an object or objects and stores it in a file.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> cmdlet 개체 또는 개체의 XML 기반 표시를 만들고이 파일에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can then use the Import-Clixml cmdlet to re-create the saved object based on the contents of that file.</source>
          <target state="translated">그런 다음 해당 파일의 내용에 따라 저장된 된 개체를 다시 만들려고 Import-clixml cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This cmdlet is similar to ConvertTo-Xml, except that <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> stores the resulting XML in a file.</source>
          <target state="translated">이 cmdlet은 된다는 점을 제외 하면 Convertto-xml과 유사 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> 결과 XML 파일에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ConvertTo-XML<ept id="p1">**</ept> returns the XML, so you can continue to process it in Windows PowerShell.</source>
          <target state="translated"><bpt id="p1">**</bpt>CONVERTTO-XML<ept id="p1">**</ept> Windows PowerShell의 처리를 계속할 수 있도록 XML을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A valuable use of <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> is to export credentials and secure strings securely as XML.</source>
          <target state="translated">사용 하는 귀중 한 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> 자격 증명을 내보내고 문자열을 XML로 안전 하 게 보호 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For an example of how to do this, see Example 3.</source>
          <target state="translated">이 작업을 수행 하는 방법의 예를 들어 예 3을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example 1: Export a string to an XML file</source>
          <target state="translated">예제 1: 문자열 XML 파일로 내보내기</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This command creates an XML file that stores a representation of the string, "This is a test".</source>
          <target state="translated">이 명령은 "This is a test"라는 문자열의 표시를 저장하는 XML 파일을 만듭니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example 2: Export an object to an XML file</source>
          <target state="translated">예 2: 개체를 XML 파일로 내보내기</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example shows how to export an object to an XML file and then create an object by importing the XML from the file.</source>
          <target state="translated">이 예제에서는 개체를 XML 파일로 내보낸 다음 파일에서 XML을 가져와 개체를 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Acl cmdlet to get the security descriptor of the Test.txt file.</source>
          <target state="translated">첫 번째 명령은 Get-acl cmdlet를 사용 하 여 Test.txt 파일의 보안 설명자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator to pass the security descriptor to <bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept>, which stores an XML-based representation of the object in a file named FileACL.xml.</source>
          <target state="translated">파이프라인 연산자를 사용 하 여 보안 설명자를 전달 하려면 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept>, 개체의 XML 기반 표시를 FileACL.xml 이라는 파일에 저장 하는 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second command uses the Import-Clixml cmdlet to create an object from the XML in the FileACL.xml file.</source>
          <target state="translated">두 번째 명령은 Import-Clixml cmdlet을 사용하여 FileACL.xml 파일에 있는 XML에서 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Then, it saves the object in the $FileAcl variable.</source>
          <target state="translated">그런 다음 이 명령은 개체를 $FileAcl 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example 3: Encrypt an exported credential object</source>
          <target state="translated">예제 3: 내보낸된 자격 증명 개체를 암호화 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> cmdlet encrypts credential objects by using the Windows Data Protection APIhttp://msdn.microsoft.com/library/windows/apps/xaml/hh464970.aspx.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> cmdlet는 Windows 데이터 보호 APIhttp://msdn.microsoft.com/library/windows/apps/xaml/hh464970.aspx를 사용 하 여 자격 증명 개체를 암호화 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This ensures that only your user account can decrypt the contents of the credential object.</source>
          <target state="translated">이렇게 하면 현재 사용자 계정 자격 증명 개체의 콘텐츠를 해독할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this example, given a credential that you've stored in the $Credential variable by running the Get-Credential cmdlet, you can run the <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> cmdlet to save the credential to disk.In the example, the file in which the credential is stored is represented by TestScript.ps1.credential.</source>
          <target state="translated">Get-credential cmdlet을 실행 하 여 $Credential 변수에 저장 되어 있는 자격 증명을 제공 하는이 예제에서는 실행할 수는 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> cmdlet 자격 증명을 디스크에 저장 합니다. 예제에서는 자격 증명 저장 된 파일은 TestScript.ps1.credential으로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Replace TestScript with the name of the script with which you are loading the credential.</source>
          <target state="translated">TestScript을 자격 증명 로드 된 스크립트의 이름을 바꿉니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the second command, pipe the credential object to <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept>, and save it to the path, $CredXmlPath, that you specified in the first command.</source>
          <target state="translated">두 번째 명령에서 자격 증명 개체를 파이프 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept>, $CredXmlPath 첫 번째 명령에서 지정한 경로에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To import the credential automatically into your script, run the final two commands.</source>
          <target state="translated">스크립트에 자동으로 자격 증명을 가져올 마지막 두 명령을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This time, you are running Import-Clixml to import the secured credential object into your script.</source>
          <target state="translated">이 이번에 실행 하는 스크립트에 보안된 자격 증명 개체를 가져오려면 Import-clixml 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This eliminates the risk of exposing plain-text passwords in your script.</source>
          <target state="translated">이렇게 하면 스크립트에 일반 텍스트 암호에 노출 될 위험이 없습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-Confirm</source>
          <target state="translated">-Confirm</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Prompts you for confirmation before running the cmdlet.Prompts you for confirmation before running the cmdlet.</source>
          <target state="translated">이 cmdlet을 실행 하기 전에 확인 하면 메시지를 표시 합니다. 이 cmdlet을 실행 하기 전에 확인 하면 메시지를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>-Depth</source>
          <target state="translated">방어</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Specifies how many levels of contained objects are included in the XML representation.</source>
          <target state="translated">XML 표시에 포함되는 포함 개체 수준을 지정합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default value is 2.</source>
          <target state="translated">기본값은 2입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The default value can be overridden for the object type in the Types.ps1xml files.</source>
          <target state="translated">Types.ps1xml 파일에서 개체 유형에 대한 기본값을 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see about_Types.ps1xml.</source>
          <target state="translated">자세한 내용은 about_Types.ps1xml을 참조하세요.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-Encoding</source>
          <target state="translated">인코딩</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specifies the type of encoding for the target file.</source>
          <target state="translated">대상 파일의 인코딩 유형을 지정합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">이 매개 변수에 허용되는 값은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ASCII</source>
          <target state="translated">ASCII</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>UTF8</source>
          <target state="translated">UTF8</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>UTF7</source>
          <target state="translated">UTF7</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>UTF32</source>
          <target state="translated">UTF32</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">유니코드</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>BigEndianUnicode</source>
          <target state="translated">BigEndianUnicode</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>OEM</source>
          <target state="translated">OEM</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default value is Unicode.</source>
          <target state="translated">기본값은 유니코드입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Forces the command to run without asking for user confirmation.</source>
          <target state="translated">사용자 확인을 요청하지 않고 명령을 강제 실행합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Causes the cmdlet to clear the read-only attribute of the output file if necessary.</source>
          <target state="translated">필요한 경우 Cmdlet을 사용하여 출력 파일의 읽기 전용 특성을 제거합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The cmdlet will attempt to reset the read-only attribute when the command completes.</source>
          <target state="translated">명령이 완료되면 cmdlet이 읽기 전용 특성을 다시 설정하려고 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies the object to be converted.</source>
          <target state="translated">변환할 개체를 지정합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects, or type a command or expression that gets the objects.</source>
          <target state="translated">개체를 포함하는 변수를 입력하거나 개체를 가져오는 명령 또는 식을 입력하세요.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can also pipe objects to <bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept>.</source>
          <target state="translated">개체를 파이프할 수도 있습니다 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-LiteralPath</source>
          <target state="translated">-LiteralPath</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Specifies the path to the file where the XML representation of the object will be stored.</source>
          <target state="translated">개체의 XML 표시를 저장할 파일 경로를 지정합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">*</bpt>Path<ept id="p1">*</ept>, the value of the <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> parameter is used exactly as it is typed.</source>
          <target state="translated">와 달리 <bpt id="p1">*</bpt>경로<ept id="p1">*</ept>, 의 값은 <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> 매개 변수는 입력 된 대로 정확 하 게 사용 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>No characters are interpreted as wildcards.</source>
          <target state="translated">어떠한 문자도 와일드카드로 해석되지 않습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the path includes escape characters, enclose it in single quotation marks.</source>
          <target state="translated">이스케이프 문자가 포함된 경로는 작은따옴표로 묶으세요.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</source>
          <target state="translated">작은따옴표는 Windows PowerShell이 어떤 문자도 이스케이프 시퀀스로 해석하지 않도록 지시합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-NoClobber</source>
          <target state="translated">-NoClobber</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Indicates that the cmdlet does not overwrite the contents of an existing file.</source>
          <target state="translated">Cmdlet는 기존 파일의 내용을 덮어쓰지 않습니다 나타냅니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>By default, if a file exists in the specified path, <bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept> overwrites the file without warning.</source>
          <target state="translated">지정된 된 경로에 파일이 있는 경우 기본적으로 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> 경고 없이 파일을 덮어씁니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>-Path</source>
          <target state="translated">-Path</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Specifies the path to the file where the XML representation of the object will be stored.</source>
          <target state="translated">개체의 XML 표시를 저장할 파일 경로를 지정합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>-WhatIf</source>
          <target state="translated">-WhatIf</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Shows what would happen if the cmdlet runs.</source>
          <target state="translated">cmdlet이 실행될 경우 결과 동작을 표시합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.Shows what would happen if the cmdlet runs.</source>
          <target state="translated">Cmdlet은 실행 되지 않습니다. Cmdlet이 실행 되 면 어떻게 되는지를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The cmdlet is not run.</source>
          <target state="translated">cmdlet이 실행되지 않습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can pipe any object to <bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept>.</source>
          <target state="translated">모든 개체를 파이프할 수 있습니다 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>System.IO.FileInfo</source>
          <target state="translated">System.IO.FileInfo</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Export-Clixml<ept id="p1">**</ept> creates a file that contains the XML.</source>
          <target state="translated"><bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> XML이 포함 된 파일을 만듭니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use PowerShell to Pass Credentials to Legacy Systems</source>
          <target state="translated">PowerShell을 사용 하 여 레거시 시스템 자격 증명을 전달 하려면</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Securely Store Credentials on Disk</source>
          <target state="translated">디스크에 자격 증명을 안전 하 게 저장</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>ConvertTo-Html</source>
          <target state="translated">ConvertTo-Html</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>ConvertTo-Xml</source>
          <target state="translated">ConvertTo-Xml</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Import-Clixml</source>
          <target state="translated">Import-clixml</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>