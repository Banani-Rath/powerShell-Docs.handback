<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73574612b779b31030d1bbb44f6199b410b1e641</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\Wait-Job.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6421f30a99ff0e7f286975d12ed46f424182a63</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a96cb3867323f984feb66157a11bc64d2db9ab3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Wait-Job</source>
          <target state="translated">대기 작업</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Wait-Job</source>
          <target state="translated">대기 작업</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Suppresses the command prompt until one or all of the Windows PowerShell background jobs running in the session are complete.</source>
          <target state="translated">세션에서 실행 중인 Windows PowerShell 백그라운드 작업 중 하나 또는 모두가 완료될 때까지 명령 프롬프트를 표시하지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SessionIdParameterSet (Default)</source>
          <target state="translated">SessionIdParameterSet (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>JobParameterSet</source>
          <target state="translated">JobParameterSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>NameParameterSet</source>
          <target state="translated">NameParameterSet</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>InstanceIdParameterSet</source>
          <target state="translated">InstanceIdParameterSet</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>StateParameterSet</source>
          <target state="translated">StateParameterSet</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>FilterParameterSet</source>
          <target state="translated">FilterParameterSet</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet waits for Windows PowerShell background jobs to complete before it displays the command prompt.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet 명령 프롬프트를 표시 하기 전에 완료 하려면 Windows PowerShell 백그라운드 작업 때까지 대기 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can wait until any background job is complete, or until all background jobs are complete, and you can set a maximum wait time for the job.</source>
          <target state="translated">백그라운드 작업 중 하나가 완료되거나 모든 백그라운드 작업이 완료될 때까지 기다릴 수 있으며 작업의 최대 대기 시간을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the commands in the job are complete, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> displays the command prompt and returns a job object so that you can pipe it to another command.</source>
          <target state="translated">작업의 명령이 완료 되 면 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 명령 프롬프트를 표시 하 고 다른 명령으로 파이프할 수 있도록 작업 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet to wait for background jobs, such as those that were started by using the Start-Job cmdlet or the <bpt id="p2">**</bpt>AsJob<ept id="p2">**</ept> parameter of the Invoke-Command cmdlet.</source>
          <target state="translated">사용할 수 있습니다 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> Start-job cmdlet을 사용 하 여 시작 된 것과 같은 백그라운드 작업에 대 한 대기 하는 cmdlet 또는 <bpt id="p2">**</bpt>AsJob<ept id="p2">**</ept> Invoke-command cmdlet의 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about Windows PowerShell background jobs, see about_Jobs.</source>
          <target state="translated">Windows PowerShell 백그라운드 작업에 대 한 자세한 내용은 about_Jobs를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet also waits for custom job types, such as workflow jobs and instances of scheduled jobs.</source>
          <target state="translated">Windows PowerShell 3.0 부터는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet은 또한 워크플로 작업 및 예약 된 작업 인스턴스 등의 사용자 지정 작업 유형도 될 때까지 대기 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To enable <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to wait for jobs of a particular type, import the module that supports the custom job type into the session before running a <bpt id="p2">**</bpt>Get-Job<ept id="p2">**</ept> command, either by using the Import-Module cmdlet or by using or getting a cmdlet in the module.</source>
          <target state="translated">사용 하도록 설정 하려면 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 특정 유형의 작업에 대 한 대기를 실행 하기 전에 세션에 사용자 지정 작업 유형을 지 원하는 모듈을 가져올는 <bpt id="p2">**</bpt>Get-job<ept id="p2">**</ept> 명령을 Import-module cmdlet을 사용 하 여 또는 사용 하 여 모듈의 cmdlet을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For information about a particular custom job type, see the documentation of the custom job type feature.</source>
          <target state="translated">특정한 사용자 지정 작업 유형에 대한 자세한 내용은 사용자 지정 작업 유형 기능에 대한 설명서를 참조하세요.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 예제 1 --------------------------</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This command waits for all of the background jobs running in the session to complete.</source>
          <target state="translated">이 명령은 세션에서 실행 중인 모든 백그라운드 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Wait-Job cmdlet with jobs started on remote computers by using the Start-Job cmdlet.</source>
          <target state="translated">이 예제에서는 Start-Job cmdlet을 사용하여 원격 컴퓨터에서 시작된 작업에 Wait-Job cmdlet을 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Both the Start-Job and Wait-Job commands are submitted to the remote computer by using the Invoke-Command cmdlet.</source>
          <target state="translated">Start-Job 및 Wait-Job 명령은 둘 다 Invoke-Command cmdlet을 사용하여 원격 컴퓨터로 제출됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example uses Wait-Job to determine whether a Get-Date command running as a background job on three different computers is complete.</source>
          <target state="translated">이 예제에서는 Wait-Job을 사용하여 컴퓨터 3개에서 백그라운드 작업으로 실행 중인 Get-Date 명령이 완료되었는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The first command creates a Windows PowerShell session (PSSession) on each of the three remote computers and stores them in the $s variable.</source>
          <target state="translated">첫 번째 명령은 원격 컴퓨터 3개에서 각각 Windows PowerShell 세션(PSSession)을 만든 다음 $s 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The second command uses the Invoke-Command cmdlet to run a Start-Job command in each of the three sessions in $s.</source>
          <target state="translated">두 번째 명령은 Invoke-command cmdlet를 사용 하 여 각 $s에 3 개의 세션에서 Start-job 명령을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All of the jobs are named Date1.</source>
          <target state="translated">모든 작업 Date1 라고 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The third command uses the Invoke-Command cmdlet to run a Wait-Job command.</source>
          <target state="translated">세 번째 명령은 Invoke-Command cmdlet을 사용하여 Wait-Job 명령을 실행합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This command waits for the Date1 jobs on each computer to complete.</source>
          <target state="translated">이 명령은 각 컴퓨터에서 Date1 작업이 완료될 때까지 기다린 다음</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It stores the resulting collection (array) of job objects in the $done variable.</source>
          <target state="translated">작업 개체로 이루어진 결과 컬렉션(배열)을 $done 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The fourth command uses the Count property of the array of job objects in the $done variable to determine how many of the jobs are complete.</source>
          <target state="translated">네 번째 명령은 $done 변수에 있는 작업 개체 배열의 Count 속성을 사용하여 완료된 작업 수를 확인합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 3 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 3 --------------------------</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This example uses the <bpt id="p1">**</bpt>Any<ept id="p1">**</ept> parameter of <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> to determine when the first of many background jobs running in the current session are complete.</source>
          <target state="translated">사용 하 여이 예제는 <bpt id="p1">**</bpt>모든<ept id="p1">**</ept> 의 매개 변수 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 시기를 결정 하는 현재 세션에서 실행 중인 많은 백그라운드 작업의 첫 번째 조건이 완료 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It also shows how to use the <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> cmdlet to wait for remote jobs to complete.</source>
          <target state="translated">또한 사용 하는 방법을 보여 줍니다는 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> cmdlet을 원격 작업이 완료 될 때까지 기다립니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The first command creates a PSSession on each of the computers listed in the Machines.txt file and stores the PSSessions in the $s variable.</source>
          <target state="translated">첫 번째 명령은 Machines.txt 파일에 나열된 각 컴퓨터에서 PSSession을 만든 다음 $s 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The command uses the Get-Content cmdlet to get the contents of the file.</source>
          <target state="translated">명령은은 Get-content cmdlet을 사용 하 여 파일의 내용을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> command is enclosed in parentheses to ensure that it runs before the New-PSSession command.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Get-content<ept id="p1">**</ept> 명령은 New-pssession 명령 전에 실행 되도록 괄호로 묶여 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The second command stores a <bpt id="p1">**</bpt>Get-EventLog<ept id="p1">**</ept> command string (in quotation marks) in the $c variable.</source>
          <target state="translated">두 번째 명령은 저장소는 <bpt id="p1">**</bpt>Get-eventlog<ept id="p1">**</ept> 명령 문자열 (인용 부호 제외)는 $c 변수에 보관 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The third command uses the Invoke-Command cmdlet to run a <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> command in each of the sessions in $s.</source>
          <target state="translated">세 번째 명령은 Invoke-command cmdlet를 사용 하 여 실행 하는 <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> $s 세션의 각 명령입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Start-Job<ept id="p1">**</ept> command starts a background job that runs the <bpt id="p2">**</bpt>Get-EventLog<ept id="p2">**</ept> command in the $c variable.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Start-job<ept id="p1">**</ept> 명령을 실행 하는 백그라운드 작업을 시작는 <bpt id="p2">**</bpt>Get-eventlog<ept id="p2">**</ept> $c 변수에 명령입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier to indicate that the $c variable was defined on the local computer.</source>
          <target state="translated">명령을 사용 하는 <bpt id="p1">**</bpt>를 사용 하 여<ept id="p1">**</ept> 범위 한정자를 $c 변수는 로컬 컴퓨터에 정의 된 않았음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier is introduced in Windows PowerShell 3.0.</source>
          <target state="translated"> <bpt id="p1">**</bpt>를 사용 하 여<ept id="p1">**</ept> 범위 한정자는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>Using<ept id="p1">**</ept> scope modifier, see about_Remote_Variables (http://go.microsoft.com/fwlink/?LinkID=252653).</source>
          <target state="translated">에 대 한 자세한 내용은 <bpt id="p1">**</bpt>를 사용 하 여<ept id="p1">**</ept> 범위 한정자 about_Remote_Variables (http://go.microsoft.com/fwlink/?LinkID=252653)를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The fourth command uses the <bpt id="p1">**</bpt>Invoke-Command<ept id="p1">**</ept> cmdlet to run a <bpt id="p2">**</bpt>Wait-Job<ept id="p2">**</ept> command in the sessions.</source>
          <target state="translated">네 번째 명령은 <bpt id="p1">**</bpt>Invoke-command<ept id="p1">**</ept> cmdlet를 실행 한 <bpt id="p2">**</bpt>Wait-job<ept id="p2">**</ept> 세션에서 명령 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">**</bpt>Any<ept id="p1">**</ept> parameter to wait until the first job on the remote computers is complete.</source>
          <target state="translated">사용 하 여는 <bpt id="p1">**</bpt>모든<ept id="p1">**</ept> 매개 변수는 원격 컴퓨터의 첫 번째 작업이 완료 될 때까지 기다려야 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Timeout parameter of Wait-Job to set a maximum wait time for the jobs running on remote computers.</source>
          <target state="translated">이 예제에서는 Wait-Job의 Timeout 매개 변수를 사용하여 원격 컴퓨터에서 실행 중인 작업의 최대 대기 시간을 설정하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first command creates a PSSession on each of three remote computers (Server01, Server02, and Server03), and it saves the PSSessions in the $s variable.</source>
          <target state="translated">첫 번째 명령은 원격 컴퓨터 3개(Server01, Server02 및 Server03)에서 각각 PSSession을 만든 다음 $s 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second command uses the Invoke-Command cmdlet to run a Start-Job command in each of the PSSessions in $s.</source>
          <target state="translated">두 번째 명령은 Invoke-command cmdlet를 사용 하 여 각 $s의 Pssession에서 Start-job 명령을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It saves the resulting job objects in the $jobs variable.</source>
          <target state="translated">결과 작업 개체 $jobs 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The third command uses the Invoke-Command cmdlet to run a Wait-Job command in each of the PSSessions in $s.</source>
          <target state="translated">세 번째 명령은 Invoke-command cmdlet를 사용 하 여 각 $s의 Pssession에서 Wait-job 명령을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Wait-Job command determines whether all of the commands have completed within 30 seconds.</source>
          <target state="translated">Wait-job 명령은 모든 명령이 30 초 내 완료 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It uses the Timeout parameter with a value of 30 (seconds) to establish the maximum wait time and saves the results of the command in the $done variable.</source>
          <target state="translated">명령에서 값이 30(초)인 Timeout 매개 변수를 사용하여 최대 대기 시간을 설정하고 명령의 결과를 $done 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this case, after 30 seconds, only the command on the Server02 computer has completed.</source>
          <target state="translated">이 경우 30초 후에 Server02 컴퓨터의 명령만 완료됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Wait-Job ends the wait, displays the command prompt, and returns the object that represents the job that was completed.</source>
          <target state="translated">Wait-Job은 대기를 종료하고 명령 프롬프트를 표시한 다음 완료된 작업을 나타내는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The $done variable contains a job object that represents the job that ran on Server02.</source>
          <target state="translated">$done 변수에는 Server02에서 실행된 작업을 나타내는 작업 개체가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 5 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 5 --------------------------</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This command identifies three jobs by their IDs and waits until any of them are complete.</source>
          <target state="translated">이 명령은 작업 ID로 작업 3개를 식별하고 작업 중 하나가 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The command prompt returns when the first job completes.</source>
          <target state="translated">첫 번째 작업이 완료되면 명령 프롬프트가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 6 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 6 --------------------------</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This command waits 120 seconds (two minutes) for the DailyLog job to complete.</source>
          <target state="translated">이 명령은 DailyLog 작업이 완료될 때까지 120초(2분) 동안 대기합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the job does not complete in the next two minutes, the command prompt returns anyway, and the job continues to run in the background.</source>
          <target state="translated">작업이 다음 2분 이내에 완료되지 않으면 명령 프롬프트가 반환되고 해당 작업이 백그라운드에서 계속 실행됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 7 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 7 --------------------------</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This Wait-Job command uses the job name to identify the job to wait for.</source>
          <target state="translated">이 Wait-Job 명령은 작업 이름을 사용하여 기다릴 작업을 식별합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 8 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 8 --------------------------</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Wait-Job cmdlet with jobs started on the local computer by using the Start-Job cmdlet.</source>
          <target state="translated">이 예제에서는 Start-Job cmdlet을 사용하여 로컬 컴퓨터에서 시작된 작업에 Wait-Job cmdlet을 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>These commands start a job that gets the Windows PowerShell script files that were added or updated in the last week.</source>
          <target state="translated">이 명령은 지난주에 추가 또는 업데이트된 Windows PowerShell 스크립트 파일을 가져오는 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The first command uses the Start-Job cmdlet to start a background job on the local computer.</source>
          <target state="translated">첫 번째 명령은 Start-Job cmdlet을 사용하여 로컬 컴퓨터에서 백그라운드 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The job runs a Get-ChildItem command that gets all of the files with a ".ps1" file name extension that were added or updated in the last week.</source>
          <target state="translated">이 작업은 지난 주에 추가 또는 업데이트되었으며 파일 이름 확장명이 ".ps1"인 파일을 모두 가져오는 Get-ChildItem 명령을 실행합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The third command uses the Wait-Job cmdlet to wait until the job is complete.</source>
          <target state="translated">세 번째 명령은 Wait-Job cmdlet을 사용하여 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When the job completes, the command displays the job object, which contains information about the job.</source>
          <target state="translated">작업이 완료되면 명령에서 작업에 대한 정보가 포함된 작업 개체를 표시합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 9 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 9 --------------------------</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Wait-Job cmdlet with jobs started on remote computers by using the AsJob parameter of the Invoke-Command cmdlet.</source>
          <target state="translated">이 예제에서는 Invoke-Command cmdlet의 AsJob 매개 변수를 사용하여 원격 컴퓨터에서 시작된 작업에 Wait-Job cmdlet을 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When using AsJob, the job is created on the local computer and the results are automatically returned to the local computer, even though the job runs on the remote computers.</source>
          <target state="translated">AsJob을 사용할 경우 작업이 원격 컴퓨터에서 실행되어도 로컬 컴퓨터에서 만들어지고 결과가 로컬 컴퓨터에 자동으로 반환됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This example uses Wait-Job to determine whether a Get-Process command running in the sessions on three remote computers is complete.</source>
          <target state="translated">이 예제에서는 Wait-Job을 사용하여 원격 컴퓨터 3개의 세션에서 실행 중인 Get-Process 명령이 완료되었는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The first command creates PSSessions on three computers and stores them in the $s variable.</source>
          <target state="translated">첫 번째 명령은 컴퓨터 3개에서 PSSession을 만든 다음 $s 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The second command uses the Invoke-Command cmdlet to run a Get-Process command in each of the three PSSessions in $s.</source>
          <target state="translated">두 번째 명령은 $s에서 Pssession 3 개에서 각각 Get-process 명령을 실행 하려면 Invoke-command cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The command uses the AsJob parameter to run the command asynchronously as a background job.</source>
          <target state="translated">명령은 AsJob 매개 변수를 사용 하 여 백그라운드 작업으로 명령을 비동기적으로 실행 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The command returns a job object, just like the jobs started by using Start-Job, and the job object is stored in the $j variable.</source>
          <target state="translated">또한 Start-Job을 사용하여 시작된 작업과 마찬가지로 작업 개체를 반환하며, 이 작업 개체는 $j 변수에 저장됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The third command uses a pipeline operator (|) to send the job object in $j to the Wait-Job cmdlet.</source>
          <target state="translated">세 번째 명령은 파이프라인 연산자(|)를 사용하여 $j의 작업 개체를 Wait-Job cmdlet으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Notice that an Invoke-Command command is not required in this case, because the job resides on the local computer.</source>
          <target state="translated">작업이 로컬 컴퓨터에 있기 때문에 이 경우 Invoke-Command 명령은 필요하지 않습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 10 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 10 --------------------------</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This command waits for the job with an ID value of 1.</source>
          <target state="translated">이 명령은 ID 값이 1인 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>-Any</source>
          <target state="translated">-모든</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Displays the command prompt (and returns the job object) when any job completes.</source>
          <target state="translated">작업이 완료될 때마다 명령 프롬프트를 표시하고 작업 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>By default, Wait-Job waits until all of the specified jobs are complete before displaying the prompt.</source>
          <target state="translated">기본적으로 Wait-Job은 지정한 모든 작업이 완료될 때까지 기다렸다가 프롬프트를 표시합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-Filter</source>
          <target state="translated">필터</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Waits for jobs that satisfy all of the conditions established in the associated hash table.</source>
          <target state="translated">연결된 해시 테이블에서 설정된 모든 조건을 충족하는 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Enter a hash table where the keys are job properties and the values are job property values.</source>
          <target state="translated">키는 작업 속성이고 값은 작업 속성 값인 해시 테이블을 입력합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This parameter works only on custom job types, such as workflow jobs and scheduled jobs.</source>
          <target state="translated">이 매개 변수는 워크플로 작업, 예약된 작업 등의 사용자 지정 작업 유형에서만 적용됩니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>It does not work on standard background jobs, such as those created by using the Start-Job cmdlet.</source>
          <target state="translated">Start-job cmdlet을 사용 하 여 만든 것과 같은 표준 백그라운드 작업에는 작동 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For information about support for this parameter, see the help topic for the job type.</source>
          <target state="translated">이 매개 변수 지원에 대한 자세한 내용은 작업 유형 도움말 항목을 참조하세요.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>-Id</source>
          <target state="translated">-Id</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Waits for jobs with the specified IDs.</source>
          <target state="translated">지정한 ID를 가진 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The ID is an integer that uniquely identifies the job within the current session.</source>
          <target state="translated">ID는 현재 세션 내에서 작업을 고유하게 식별하는 정수입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>It is easier to remember and type than the InstanceId, but it is unique only within the current session.</source>
          <target state="translated">InstanceId보다 기억하고 입력하기 쉽지만 현재 세션 내에서만 고유합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can type one or more IDs (separated by commas).</source>
          <target state="translated">쉼표로 구분하여 ID를 하나 이상 입력할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To find the ID of a job, type "Get-Job" without parameters.</source>
          <target state="translated">작업 ID를 찾으려면 매개 변수 없이 "Get-Job"을 입력하세요.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>-InstanceId</source>
          <target state="translated">-InstanceId</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Waits for jobs with the specified instance IDs.</source>
          <target state="translated">지정한 인스턴스 ID를 가진 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The default is all jobs.</source>
          <target state="translated">기본값은 모든 작업입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>An instance ID is a GUID that uniquely identifies the job on the computer.</source>
          <target state="translated">인스턴스 ID는 컴퓨터에서 작업을 고유하게 식별하는 GUID입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To find the instance ID of a job, use Get-Job.</source>
          <target state="translated">작업의 인스턴스 ID를 찾으려면 Get-Job을 사용합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>-Job</source>
          <target state="translated">-작업</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Waits for the specified jobs.</source>
          <target state="translated">지정한 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the job objects or a command that gets the job objects.</source>
          <target state="translated">작업 개체가 포함된 변수 또는 작업 개체를 가져오는 명령을 입력하세요.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can also use a pipeline operator to send job objects to the Wait-Job cmdlet.</source>
          <target state="translated">파이프라인 연산자를 사용하여 작업 개체를 Wait-Job cmdlet으로 보낼 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>By default, Wait-Job waits for all jobs created in the current session.</source>
          <target state="translated">기본적으로 Wait-Job은 현재 세션에서 만든 모든 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-Name</source>
          <target state="translated">-Name</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Waits for jobs with the specified friendly name.</source>
          <target state="translated">지정한 이름을 가진 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>-State</source>
          <target state="translated">-상태</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Waits only for jobs in the specified state.</source>
          <target state="translated">지정한 상태의 작업만 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Valid values are NotStarted, Running, Completed, Failed, Stopped, Blocked, Suspended, Disconnected, Suspending, Stopping.</source>
          <target state="translated">유효한 값 NotStarted, 실행 중, 완료 됨, 실패, 중지 됨, 차단 됨, 일시 중지 됨, 연결 끊김, 일시 중단 중, 중지 됩니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information about job states, see "JobState Enumeration" in MSDN at http://msdn.microsoft.com/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspxhttp://msdn.microsoft.com/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx</source>
          <target state="translated">작업 상태에 대 한 자세한 내용은 MSDN의 "JobState 열거형" http://msdn.microsoft.com/library/windows/desktop/system.management.automation.jobstate (v = vs.85).aspxhttp://msdn.microsoft.com/library/windows/desktop/system.management.automation.jobstate (v=vs.85).aspx에서 참조</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>-Timeout</source>
          <target state="translated">시간 제한</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Determines the maximum wait time for each background job, in seconds.</source>
          <target state="translated">각 백그라운드 작업에 대한 최대 대기 시간을 초 단위로 결정합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The default, -1, waits until the job completes, no matter how long it runs.</source>
          <target state="translated">기본값 -1은 작업이 얼마나 오래 실행되는지에 관계없이 작업이 완료될 때까지 대기합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The timing starts when you submit the Wait-Job command, not the Start-Job command.</source>
          <target state="translated">타이밍은 Start-Job 명령이 아니라 Wait-Job 명령을 제출할 때 시작됩니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If this time is exceeded, the wait ends and the command prompt returns, even if the job is still running.</source>
          <target state="translated">이 시간을 초과할 경우 작업이 여전히 실행 중이어도 대기가 종료되고 명령 프롬프트가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>No error message is displayed.</source>
          <target state="translated">오류 메시지는 표시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Continues waiting if jobs are in the <bpt id="p1">**</bpt>Suspended<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Disconnected<ept id="p2">**</ept> state.</source>
          <target state="translated">작업 중인 경우 계속 대기는 <bpt id="p1">**</bpt>Suspended<ept id="p1">**</ept> 또는 <bpt id="p2">**</bpt>연결 끊김<ept id="p2">**</ept> 상태입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> returns (terminates the wait) when jobs are in one of the following states: Completed, Failed, Stopped, Suspended, or Disconnected.</source>
          <target state="translated">기본적으로 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 반환 (대기 종료)은 다음 상태 중 하나: 완료, 실패, 중지 됨, 일시 중지 또는 연결 끊김.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.RemotingJob</source>
          <target state="translated">System.Management.Automation.RemotingJob</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You can pipe a job object to Wait-Job.</source>
          <target state="translated">작업 개체를 Wait-Job으로 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSRemotingJob</source>
          <target state="translated">System.Management.Automation.PSRemotingJob</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Wait-Job returns job objects that represent the completed jobs.</source>
          <target state="translated">Wait-Job은 완료된 작업을 나타내는 작업 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If the wait ends because the value of the Timeout parameter is exceeded, Wait-Job does not return any objects.</source>
          <target state="translated">Timeout 매개 변수 값을 초과하여 대기가 종료될 경우 Wait-Job은 개체를 반환하지 않습니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> returns (terminates the wait) when jobs are in one of the following states: Completed, Failed, Stopped, Suspended, or Disconnected.</source>
          <target state="translated">기본적으로 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 반환 (대기 종료)은 다음 상태 중 하나: 완료, 실패, 중지 됨, 일시 중지 또는 연결 끊김.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>To direct <bpt id="p1">**</bpt>Wait-Job<ept id="p1">**</ept> to continue waiting for <bpt id="p2">**</bpt>Suspended<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Disconnected<ept id="p3">**</ept> jobs, use the <bpt id="p4">**</bpt>Force<ept id="p4">**</ept> parameter.</source>
          <target state="translated">연결할 <bpt id="p1">**</bpt>Wait-job<ept id="p1">**</ept> 를 계속 대기 <bpt id="p2">**</bpt>일시 중단 된<ept id="p2">**</ept> 및 <bpt id="p3">**</bpt>연결 끊김<ept id="p3">**</ept> 작업을 사용 하 여는 <bpt id="p4">**</bpt>Force<ept id="p4">**</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Get-Job</source>
          <target state="translated">Get 작업</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Invoke-Command</source>
          <target state="translated">Invoke-Command</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Receive-Job</source>
          <target state="translated">수신 작업</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Remove-Job</source>
          <target state="translated">제거 작업</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Resume-Job</source>
          <target state="translated">Resume-Job</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Start-Job</source>
          <target state="translated">시작 작업</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Stop-Job</source>
          <target state="translated">중지 작업</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Suspend-Job</source>
          <target state="translated">Suspend-Job</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>about_Jobs</source>
          <target state="translated">about_Jobs</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>about_Remote_Jobs</source>
          <target state="translated">about_Remote_Jobs</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>about_Remote_Variables</source>
          <target state="translated">about_Remote_Variables</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>