<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc1567c1d369d96f39dd70789d92e533dc2f6bb2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Types.ps1xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4eb27ca9709e245602420849e74189afbecff030</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90e5515bb689451a5de53796b1b5711c9215c1fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Types.ps1xml</source>
          <target state="translated">Types.ps1xml에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Types.ps1xml</source>
          <target state="translated">about_Types.ps1xml</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Explains how to use Types.ps1xml files to extend the types of objects that are used in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell에서 사용 되는 개체의 유형을 확장할 Types.ps1xml 파일을 사용 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Extended type data defines additional properties and methods ("members") of object types in Windows PowerShell.</source>
          <target state="translated">확장된 유형 데이터는 Windows PowerShell에서 추가 속성 및 개체 유형 ("멤버") 메서드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are two techniques for adding extended type data to a Windows PowerShell session.</source>
          <target state="translated">두 가지 방법이 확장된 유형 데이터를 Windows PowerShell 세션을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>-- Types.ps1xml file: An XML file that defines extended type data.</source>
          <target state="translated">-Types.ps1xml 파일: 확장된 유형 데이터를 정의 하는 XML 파일입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>-- Update-TypeData: A cmdlet that reloads Types.ps1xml files and defines extended data for types in the current session.</source>
          <target state="translated">-Update-typedata: Types.ps1xml 다시 로드 하는 cmdlet 파일을 현재 세션의 형식에 대 한 확장 된 데이터를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This topic describes Types.ps1xml files.</source>
          <target state="translated">이 항목에서는 Types.ps1xml 파일에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about using the Update-TypeData cmdlet to add dynamic extended type data to the current session see Update-TypeData (http://go.microsoft.com/fwlink/?LinkID=113421).</source>
          <target state="translated">동적 확장된 형식을 추가 하려면 Update-typedata cmdlet을 사용 하는 방법에 대 한 자세한 내용은 현재 세션에 대 한 데이터 Update-typedata (http://go.microsoft.com/fwlink/?LinkID=113421)를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>About Extended Type Data</source>
          <target state="translated">확장된 유형 데이터에 대 한</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Extended type data defines additional properties and methods ("members") of object types in Windows PowerShell.</source>
          <target state="translated">확장된 유형 데이터는 Windows PowerShell에서 추가 속성 및 개체 유형 ("멤버") 메서드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can extend any type that is supported by Windows PowerShell and use the added properties and methods in the same way that you use the properties that are defined on the object types.</source>
          <target state="translated">Windows PowerShell에서 지원 되는 모든 형식을 확장할 수 있으며 개체 형식에 정의 된 속성을 사용 하는 동일한 방식으로 추가 된 속성 및 메서드를 사용.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, Windows PowerShell adds a DateTime property to all System.DateTime objects, such as the ones that the Get-Date cmdlet returns.</source>
          <target state="translated">예를 들어, Windows PowerShell Get-date cmdlet에서 반환 하는 것과 같은 모든 System.DateTime 개체에는 날짜/시간 속성을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>PS C:&gt; (Get-Date).DateTime Sunday, January 29, 2012 9:43:57 AM</source>
          <target state="translated">PS c: &gt; (Get-date). DateTime 2012 년 1 월 29, 일요일 오전 9시 43분: 57</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You won't find the DateTime property in the description of the System.DateTime structure (http://msdn.microsoft.com/library/system.datetime.aspx), because Windows PowerShell adds the property and it is visible only in Windows PowerShell.</source>
          <target state="translated">속성을 추가 하는 Windows PowerShell 및 Windows PowerShell에만 표시 되기 때문에 System.DateTime 구조 (http://msdn.microsoft.com/library/system.datetime.aspx)의 설명에는 날짜/시간 속성을 찾이 없습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To add the DateTime property to all Windows PowerShell sessions, Windows PowerShell defines the DateTime property in the Types.ps1xml file in the Windows PowerShell installation directory ($pshome).</source>
          <target state="translated">모든 Windows PowerShell 세션에 날짜/시간 속성을 추가 하려면 Windows PowerShell ($pshome)의 Windows PowerShell 설치 디렉터리에서 Types.ps1xml 파일의 DateTime 속성을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Adding Extended Type Data to Windows PowerShell.</source>
          <target state="translated">Windows powershell 확장된 유형 데이터를 추가합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There are three sources of extended type data in Windows PowerShell sessions.</source>
          <target state="translated">Windows PowerShell 세션에서 확장된 유형 데이터의 세 가지 소스 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>--  The Types.ps1xml files in the Windows PowerShell installation directory are loaded automatically into every Windows PowerShell session.</source>
          <target state="translated">Windows PowerShell 설치 디렉터리에서 Types.ps1xml 파일--모든 Windows PowerShell 세션에 자동으로 로드 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>--  The Types.ps1xml files that modules export are loaded when the module is imported into the current session.</source>
          <target state="translated">현재 세션으로 모듈을 가져올 때 모듈 내보낸--Types.ps1xml 파일 로드 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>--  Extended type data that is defined by using the Update-TypeData cmdlet is added only to the current session.</source>
          <target state="translated">-Update-typedata cmdlet을 사용 하 여 정의 된 확장된 유형 데이터는 현재 세션에만 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is not saved in a file.</source>
          <target state="translated">파일에 저장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the session, the extended type data from the three sources is applied to objects in the same way and is available on all objects of the specified types.</source>
          <target state="translated">세션에서 다음 세 가지 소스의 확장된 유형 데이터 같은 방식으로 개체에 적용 되 고 지정 된 유형의 모든 개체에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The TypeData Cmdlets</source>
          <target state="translated">TypeData Cmdlet</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following TypeData cmdlets are included in the Microsoft.PowerShell.Utility module in Windows PowerShell 3.0 and later versions of Windows PowerShell.</source>
          <target state="translated">다음 TypeData cmdlet은 Windows PowerShell 3.0 이상 버전의 Windows PowerShell에서 Microsoft.PowerShell.Utility 모듈에 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Get-TypeData:     Gets extended type data in the current session.</source>
          <target state="translated">Get-typedata: 현재 세션의 유형 데이터 확장을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Update-TypeData:  Reloads Types.ps1xml files.</source>
          <target state="translated">Update-typedata: 다시 로드 Types.ps1xml 파일입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Adds extended type data to the current session.</source>
          <target state="translated">현재 세션에 확장된 유형 데이터를 추가합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remove-TypeData:  Removes extended type data from the current session.</source>
          <target state="translated">Remove-typedata: 현재 세션에서 확장 유형 데이터를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about these cmdlets, see the help topic for each cmdlet.</source>
          <target state="translated">이러한 cmdlet에 대 한 자세한 내용은 각 cmdlet에 대 한 도움말 항목을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Built-in Types.ps1xml Files</source>
          <target state="translated">기본 제공 Types.ps1xml 파일</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Types.ps1xml files in the $pshome directory are added automatically to every session.</source>
          <target state="translated">$Pshome 디렉터리에서 Types.ps1xml 파일은 모든 세션에 자동으로 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The Types.ps1xml file in the Windows PowerShell installation directory ($pshome) is an XML-based text file that lets you add properties and methods to the objects that are used in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell 설치 디렉터리 ($pshome)에서 Types.ps1xml 파일은 Windows PowerShell에서 사용 되는 개체에 메서드와 속성을 추가할 수 있는 XML 기반의 텍스트 파일입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has built-in Types.ps1xml files that add several elements to the .NET Framework types, but you can create additional Types.ps1xml files to further extend the types.</source>
          <target state="translated">Windows PowerShell.NET Framework 형식으로 여러 요소를 추가 하는 기본 제공 Types.ps1xml 파일을 갖지만 형식을 확장 추가 Types.ps1xml 파일을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, by default, array objects (System.Array) have a Length property that lists the number of objects in the array.</source>
          <target state="translated">예를 들어 기본적으로 배열 (System.Array) 개체는 배열에 있는 개체 수를 나열 하는 Length 속성을 적용 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, because the name "length" does not clearly describe the property, Windows PowerShell adds an alias property named "Count" that displays the same value.</source>
          <target state="translated">그러나 이름 "길이" 속성을 명확 하 게 설명 하지는 않습니다, 때문에 Windows PowerShell 같은 값을 표시 하는 "Count" 라는 별칭 속성을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following XML adds the Count property to the System.Array type.</source>
          <target state="translated">다음 XML을 System.Array 형식 Count 속성을 추가합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>Count<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph> Length</source>
          <target state="translated">System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>Count<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph> 길이</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To get the new AliasProperty, use a Get-Member command on any array, as shown in the following example.</source>
          <target state="translated">새 AliasProperty를 가져오려면 다음 예제와 같이 모든 배열에 Get-member 명령을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Get-Member -inputobject (1,2,3,4)</source>
          <target state="translated">Get-member-inputobject (1,2,3,4)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The command returns the following results.</source>
          <target state="translated">이 명령은 다음과 같은 결과 반환합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Name           MemberType    Definition</source>
          <target state="translated">MemberType 정의 이름</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Count          AliasProperty Count = Length Address        Method        System.Object&amp; Address(Int32 ) Clone          Method        System.Object Clone() CopyTo         Method        System.Void CopyTo(Array array, Int32 index): Equals         Method        System.Boolean Equals(Object obj) Get            Method        System.Object Get(Int32 )</source>
          <target state="translated">Count AliasProperty 개수 = 길이 주소 메서드 System.Object 및 주소 (Int32) 복제 메서드 System.Object clone () CopyTo 메서드 System.Void CopyTo(Array array, Int32 index): Equals 메서드 System.Boolean Equals(Object obj) Get 메서드에 System.Object를 가져옵니다 (Int32)</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As a result, you can use either the Count property or the Length property of arrays in Windows PowerShell.</source>
          <target state="translated">결과적으로, Windows PowerShell의 Count 속성 또는 배열의 Length 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (1, 2, 3, 4).count</source>
          <target state="translated">C:\PS &gt; (1, 2, 3, 4).count</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (1, 2, 3, 4).length</source>
          <target state="translated">C:\PS &gt; (1, 2, 3, 4).length</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Creating New Types.ps1xml Files</source>
          <target state="translated">새로운 Types.ps1xml 파일 만들기</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The .ps1xml files that are installed with Windows PowerShell are digitally signed to prevent tampering because the formatting can include script blocks.</source>
          <target state="translated">Windows PowerShell과 함께 설치 된.ps1xml 파일 서식을 스크립트 블록을 포함할 수 있으므로 변조를 방지 하기 위해 디지털로 서명 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Therefore, to add a property or method to a .NET Framework type, create your own Types.ps1xml files, and then add them to your Windows PowerShell session.</source>
          <target state="translated">따라서.NET Framework 형식에 속성 또는 메서드를 추가 하려면 사용자 고유의 Types.ps1xml 파일을 만들고 Windows PowerShell 세션에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To create a new file, start by copying an existing Types.ps1xml file.</source>
          <target state="translated">새 파일을 만들려면 기존 Types.ps1xml 파일을 복사 하 여 시작 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The new file can have any name, but it must have a .ps1xml file name extension.</source>
          <target state="translated">새 파일 이름을 가질 수 있지만.ps1xml 파일 이름 확장명이 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can place the new file in any directory that is accessible to Windows PowerShell, but it is useful to place the files in the Windows PowerShell installation directory ($pshome) or in a subdirectory of the installation directory.</source>
          <target state="translated">Windows PowerShell에 액세스할 수 있는 모든 디렉터리에서 새 파일을 배치할 수 있지만 Windows PowerShell 설치 디렉터리 ($pshome) 또는 설치 디렉터리의 하위 디렉터리에 파일을 추가 하는 것이 유용 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When you have saved the new file, use the Update-TypeData cmdlet to add the new file to your Windows PowerShell session.</source>
          <target state="translated">새 파일을 저장 하는 경우 Windows PowerShell 세션에 새 파일을 추가 하려면 Update-typedata cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you want your types to take precedence over the types that are defined in the built-in file, use the PrependData parameter of the Update-TypeData cmdlet.</source>
          <target state="translated">기본 제공 된 파일에 정의 된 형식 보다 우선 하기 위한 형식을 원하는 Update-typedata cmdlet의 PrependData 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Update-TypeData affects only the current session.</source>
          <target state="translated">Update-typedata는 현재 세션을만 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To make the change to all future sessions, export the console, or add the Update-TypeData command to your Windows PowerShell profile.</source>
          <target state="translated">이후의 모든 세션을 변경 하는 콘솔 내보내거나 Update-typedata 명령을 Windows PowerShell 프로필에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Types.ps1xml and Add-Member</source>
          <target state="translated">Types.ps1xml 및 멤버 추가</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The Types.ps1xml files add properties and methods to all the instances of the objects of the specified .NET Framework type in the affected Windows PowerShell session.</source>
          <target state="translated">Types.ps1xml 파일의 영향을 받는 Windows PowerShell 세션에서 지정 된.NET Framework 형식의 개체의 모든 인스턴스에 속성 및 메서드를 추가합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, if you need to add properties or methods only to one instance of an object, use the Add-Member cmdlet.</source>
          <target state="translated">그러나 개체의 인스턴스 하나에 속성 또는 메서드를 추가 해야 할 경우 Add-member cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information,see Add-Member.</source>
          <target state="translated">자세한 내용은 멤버 추가 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example: Adding an Age Member to FileInfo Objects</source>
          <target state="translated">예: FileInfo 개체에는 Age 멤버를 추가합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This example shows how to add an Age property to file objects (System.IO.FileInfo).</source>
          <target state="translated">이 예제에는 파일 개체 (System.IO.FileInfo)에 Age 속성을 추가 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The age of a file is the difference between its creation time and the current time in days.</source>
          <target state="translated">파일의 보존 기간 날짜 만든 시간이 현재 시간 사이의 차이입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It is easiest to use the original Types.ps1xml file as a template for the new file.</source>
          <target state="translated">새 파일에 대 한 원래 Types.ps1xml 파일을 템플릿으로 사용 하는 것이 쉽습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following command copies the original file to a file called MyTypes.ps1xml in the $pshome directory.</source>
          <target state="translated">다음 명령은 MyTypes.ps1xml $pshome 디렉터리에 라는 파일을 원본 파일을 복사 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>copy-item Types.ps1xml MyTypes.ps1xml</source>
          <target state="translated">항목 복사 Types.ps1xml MyTypes.ps1xml</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Next, open the Types.ps1xml file in any XML or text editor, such as Notepad.</source>
          <target state="translated">다음으로 Types.ps1xml 파일을 메모장 등 모든 XML 또는 텍스트 편집기에서 엽니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Because the Age property is calculated by using a script block, find a <ph id="ph1">&lt;ScriptProperty&gt;</ph> tag to use as a model for the new Age property.</source>
          <target state="translated">Age 속성은 스크립트 블록을 사용 하 여 계산 필드 이므로 찾기는 <ph id="ph1">&lt;ScriptProperty&gt;</ph> 모델로 새 Age 속성에 사용할 태그입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Copy the XML between the <ph id="ph1">&lt;Type&gt;</ph> and <ph id="ph2">&lt;/Type&gt;</ph> tags of the code to create the script property.</source>
          <target state="translated">XML 간에 복사 하는 <ph id="ph1">&lt;Type&gt;</ph> 및 <ph id="ph2">&lt;/Type&gt;</ph> 스크립트 속성을 만드는 코드의 태그입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Then, delete the remainder of the file, except for the opening &lt;?xml&gt; and <ph id="ph1">&lt;Types&gt;</ph> tags and the closing <ph id="ph2">&lt;/Types&gt;</ph> tag.</source>
          <target state="translated">그런 다음 파일을 여는 제외 하 고 나머지 삭제 &lt;? xml &gt; 및 <ph id="ph1">&lt;Types&gt;</ph> 태그와 닫는 <ph id="ph2">&lt;/Types&gt;</ph> 태그입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You must also delete the digital signature to prevent errors.</source>
          <target state="translated">오류를 방지 하려면 디지털 서명을 삭제 해야 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Begin with the model script property, such as the following script property, which was copied from the original Types.ps1xml file.</source>
          <target state="translated">원래 Types.ps1xml 파일에서 복사 된 다음 스크립트 속성을 같은 모델 스크립트 속성을로 시작 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>System.Guid<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>Guid<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph>$this.ToString()</source>
          <target state="translated">System.Guid<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>Guid<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph>$가 있습니다. Tostring)</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Then, change the name of the .NET Framework type, the name of the property, and the value of the script block to create an Age property for file objects.</source>
          <target state="translated">그런 다음.NET Framework 형식의 이름을 속성의 이름, 파일 개체에 대 한 나이 속성을 만드는 스크립트 블록의 값을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>Age<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph> ((get-date) - ($this.creationtime)).days</source>
          <target state="translated">System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>시대<ph id="ph2">&lt;/Name&gt;
&lt;GetScriptBlock&gt;</ph> ((get-date)-($this.creationtime)).days</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>After you save the file and close it, run an Update-TypeData command, such as the following command, to add the new Types.ps1xml file to the current session.</source>
          <target state="translated">현재 세션에 새 Types.ps1xml 파일을 추가 하려면 다음 명령 같은 Update-typedata 명령을 실행 하는 파일을 저장 하 고 닫습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The command uses the PrependData parameter to place the new file in a higher precedence order than the original file.</source>
          <target state="translated">이 명령은 원본 파일 보다 더 높은 우선 순위 순서에 새 파일을 배치 PrependData 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>(For more information about Update-TypeData, see Update-TypeData.)</source>
          <target state="translated">(Update-typedata에 대 한 자세한 내용은 Update-typedata 참조).</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>update-typedata -prependpath $pshome\MyTypes.ps1xml</source>
          <target state="translated">업데이트 typedata-prependpath $pshome\MyTypes.ps1xml</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To test the change, run a Get-ChildItem command to get the PowerShell.exe file in the $pshome directory, and then pipe the file to the Format-List cmdlet to list all of the properties of the file.</source>
          <target state="translated">변경을 테스트 하려면 $pshome 디렉터리에 PowerShell.exe 파일을 가져오는 Get-childitem 명령을 실행 한 다음 모든 파일의 속성 목록을 표시 하려면 Format-list cmdlet으로 파일을 파이프 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>As a result of the change, the Age property appears in the list.</source>
          <target state="translated">변경의 결과로 Age 속성 목록에 나타납니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>get-childitem $pshome\PowerShell.exe | format-list -property *</source>
          <target state="translated">get-childitem $pshome\PowerShell.exe | 형식 목록-속성 *</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>PSPath            : Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS... PSParentPath      : Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS... PSChildName       : PowerShell.exe PSDrive           : C PSProvider        : Microsoft.PowerShell.Core\FileSystem PSIsContainer     : False Age               : 16 VersionInfo       : File:             C:\WINDOWS\system32\WindowsPow... InternalName:     POWERSHELL OriginalFilename: PowerShell.EXE</source>
          <target state="translated">PSPath: Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS... PSParentPath: Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS... PSChildName: PowerShell.exe PSDrive: C PSProvider: Microsoft.PowerShell.Core\FileSystem PSIsContainer: False Age: 16 VersionInfo: 파일: C:\WINDOWS\system32\WindowsPow... 내부 이름: POWERSHELL 원본 파일 이름: PowerShell.EXE</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can also display the Age property of the file by using the following command.</source>
          <target state="translated">또한 다음 명령을 사용 하 여 파일의 나이 속성을 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>(get-childitem $pshome\PowerShell.exe).age</source>
          <target state="translated">(get-childitem $pshome\PowerShell.exe).age</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>16</source>
          <target state="translated">16</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The XML in Types.ps1xml Files</source>
          <target state="translated">Types.ps1xml 파일에서 XML</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;Types&gt;</ph> tag encloses all of the types that are defined in the file.</source>
          <target state="translated"> <ph id="ph1">&lt;Types&gt;</ph> 태그 파일에 정의 된 형식을 모두 포함 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>There should be only one pair of <ph id="ph1">&lt;Types&gt;</ph> tags.</source>
          <target state="translated">한 쌍만 있어야 <ph id="ph1">&lt;Types&gt;</ph> 태그입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Each .NET Framework type mentioned in the file should be represented by a pair of <ph id="ph1">&lt;Type&gt;</ph> tags.</source>
          <target state="translated">파일에 언급 된 각.NET Framework 형식 쌍으로 나타나야 <ph id="ph1">&lt;Type&gt;</ph> 태그입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The type tags must contain the following tags:</source>
          <target state="translated">형식 태그는 다음과 같은 태그를 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>: A pair of <ph id="ph1">&lt;Name&gt;</ph> tags that enclose the name of the affected .NET Framework type.</source>
          <target state="translated">: 한 쌍의 <ph id="ph1">&lt;Name&gt;</ph> 영향을 받는.NET Framework 형식의 이름을 포함 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>: A pair of <ph id="ph1">&lt;Members&gt;</ph> tags that enclose the tags for the new properties and methods that are defined for the .NET Framework type.</source>
          <target state="translated">: 한 쌍의 <ph id="ph1">&lt;Members&gt;</ph> 을 새 속성 및.NET Framework 형식에 대해 정의 된 메서드에 대 한 태그를 포함 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Any of the following member tags can be inside the <ph id="ph1">&lt;Members&gt;</ph> tags.</source>
          <target state="translated">다음 멤버 태그 안에 포함할 수 있습니다는 <ph id="ph1">&lt;Members&gt;</ph> 태그입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>: Defines a new name for an existing property.</source>
          <target state="translated">: 기존 속성에 대 한 새 이름을 정의합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;AliasProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;ReferencedMemberName&gt;</ph> tags that specify the existing property.</source>
          <target state="translated"> <ph id="ph1">&lt;AliasProperty&gt;</ph> 태그의 쌍이 있어야 합니다. <ph id="ph2">&lt;Name&gt;</ph> 쌍 및 새 속성의 이름을 지정 하는 태그가 <ph id="ph3">&lt;ReferencedMemberName&gt;</ph> 기존 속성을 지정 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, the Count alias property is an alias for the Length property of array objects.</source>
          <target state="translated">예를 들어, Count 별칭 속성 배열 개체의 Length 속성에 대 한 별칭입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>Count<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph>Length</source>
          <target state="translated">System.Array<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;AliasProperty&gt;
&lt;Name&gt;</ph>Count<ph id="ph2">&lt;/Name&gt;
&lt;ReferencedMemberName&gt;</ph>길이</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>:  References a static method of a .NET Framework class.</source>
          <target state="translated">:.NET Framework 클래스의 정적 메서드를 참조합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;CodeMethod&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new method and a pair of <ph id="ph3">&lt;GetCodeReference&gt;</ph> tags that specify the code in which the method is defined.</source>
          <target state="translated"> <ph id="ph1">&lt;CodeMethod&gt;</ph> 태그의 쌍이 있어야 합니다. <ph id="ph2">&lt;Name&gt;</ph> 새 메서드와 쌍의 이름을 지정 하는 태그가 <ph id="ph3">&lt;GetCodeReference&gt;</ph> 메서드가 정의 된 코드를 지정 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, the Mode property of directories (System.IO.DirectoryInfo objects) is a code property defined in the Windows PowerShell FileSystem provider.</source>
          <target state="translated">예를 들어 디렉터리 (System.IO.DirectoryInfo 개체)의 모드 속성에는 Windows PowerShell FileSystem 공급자에 정의 된 코드 속성이입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>Mode<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>Mode</source>
          <target state="translated">System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>모드<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>모드</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>: References a static method of a .NET Framework class.</source>
          <target state="translated">:.NET Framework 클래스의 정적 메서드를 참조합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;CodeProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;GetCodeReference&gt;</ph> tags that specify the code in which the property is defined.</source>
          <target state="translated"> <ph id="ph1">&lt;CodeProperty&gt;</ph> 태그의 쌍이 있어야 합니다. <ph id="ph2">&lt;Name&gt;</ph> 쌍 및 새 속성의 이름을 지정 하는 태그가 <ph id="ph3">&lt;GetCodeReference&gt;</ph> 속성이 정의 되어 있는 코드를 지정 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, the Mode property of directories (System.IO.DirectoryInfo objects) is a code property defined in the Windows PowerShell FileSystem provider.</source>
          <target state="translated">예를 들어 디렉터리 (System.IO.DirectoryInfo 개체)의 모드 속성에는 Windows PowerShell FileSystem 공급자에 정의 된 코드 속성이입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>Mode<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>Mode</source>
          <target state="translated">System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;CodeProperty&gt;
&lt;Name&gt;</ph>모드<ph id="ph2">&lt;/Name&gt;
&lt;GetCodeReference&gt;
&lt;TypeName&gt;</ph>Microsoft.PowerShell.Commands.FileSystemProvider<ph id="ph3">&lt;/TypeName&gt;
&lt;MethodName&gt;</ph>모드</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>: Defines a collection of members (properties and methods).</source>
          <target state="translated">: 컬렉션 멤버 (속성 및 메서드)을 정의합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;MemberSet&gt;</ph> tags appear within the primary <ph id="ph2">&lt;Members&gt;</ph> tags.</source>
          <target state="translated"> <ph id="ph1">&lt;MemberSet&gt;</ph> 주 내에 태그 표시 <ph id="ph2">&lt;Members&gt;</ph> 태그입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The tags must enclose a pair of <ph id="ph1">&lt;Name&gt;</ph> tags surrounding the name of the member set and a pair of secondary <ph id="ph2">&lt;Members&gt;</ph> tags that surround the members (properties and methods) in the set.</source>
          <target state="translated">태그는 한 쌍의 묶어야 <ph id="ph1">&lt;Name&gt;</ph> 멤버 집합 및 보조 데이터베이스의 한 쌍의 이름을 둘러싼 태그 <ph id="ph2">&lt;Members&gt;</ph> 집합의 멤버 (속성 및 메서드)를 포함 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Any of the tags that create a property (such as <ph id="ph1">&lt;NoteProperty&gt;</ph> or <ph id="ph2">&lt;ScriptProperty&gt;</ph>) or a method (such as <ph id="ph3">&lt;Method&gt;</ph> or <ph id="ph4">&lt;ScriptMethod&gt;</ph>) can be members of the set.</source>
          <target state="translated">속성을 만들 되는 태그 중 하나 (예: <ph id="ph1">&lt;NoteProperty&gt;</ph> 또는 <ph id="ph2">&lt;ScriptProperty&gt;</ph>) 또는 메서드 (와 같은 <ph id="ph3">&lt;Method&gt;</ph> 또는 <ph id="ph4">&lt;ScriptMethod&gt;</ph>) 집합의 구성원이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In Types.ps1xml files, the <ph id="ph1">&lt;MemberSet&gt;</ph> tag is used to define the default views of the .NET Framework objects in Windows PowerShell.</source>
          <target state="translated">Types.ps1xml 파일에는 <ph id="ph1">&lt;MemberSet&gt;</ph> 태그는 Windows PowerShell에서.NET Framework 개체의 기본 보기를 정의 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In this case, the name of the member set (the value within the <ph id="ph1">&lt;Name&gt;</ph> tags) is always "PsStandardMembers", and the names of the properties (the value of the <ph id="ph2">&lt;Name&gt;</ph> tag) are one of the following:</source>
          <target state="translated">이 경우 집합 멤버의 이름 (값 내는 <ph id="ph1">&lt;Name&gt;</ph> 태그)는 항상 속성의 이름과 "PsStandardMembers" (의 값은 <ph id="ph2">&lt;Name&gt;</ph> 태그)는 다음 중 하나:</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>DefaultDisplayProperty: A single property of an object.</source>
          <target state="translated">DefaultDisplayProperty: 개체의 단일 속성입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>DefaultDisplayPropertySet: One or more properties of an object.</source>
          <target state="translated">개체의 DefaultDisplayPropertySet: 하나 이상의 속성입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>DefaultKeyPropertySet: One or more key properties of an object.</source>
          <target state="translated">DefaultKeyPropertySet: 하나 이상의 키 개체의 속성입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A key property identifies instances of property values, such as the ID number of items in a session history.</source>
          <target state="translated">키 속성은 세션 기록에 있는 항목의 ID 번호와 같은 속성 값의 인스턴스를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For example, the following XML defines the default display of services (System.ServiceProcess.ServiceController objects) that are returned by the Get-Service cmdlet.</source>
          <target state="translated">예를 들어, 다음 XML Get-service cmdlet에서 반환 되는 서비스 (System.ServiceProcess.ServiceController 개체)의 기본 표시를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It defines a member set named "PsStandardMembers" that consists of a default property set with the Status, Name, and DisplayName properties.</source>
          <target state="translated">상태, 이름 및 DisplayName 속성으로 설정 된 기본 속성으로 구성 된 "PsStandardMembers" 라는 멤버 집합을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>Status<ph id="ph4">&lt;/Name&gt;
&lt;Name&gt;</ph>Name<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</source>
          <target state="translated">System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>상태<ph id="ph4">&lt;/Name&gt;
&lt;Name&gt;</ph>이름<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>: References a native method of the underlying object.</source>
          <target state="translated">: 기본 개체의 네이티브 메서드를 참조합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>: A collection of the methods of the object.</source>
          <target state="translated">: 메서드는 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>: Defines a property with a static value.</source>
          <target state="translated">: 정적 값을 포함 하는 속성을 정의합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;NoteProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;Value&gt;</ph> tags that specify the value of the property.</source>
          <target state="translated"> <ph id="ph1">&lt;NoteProperty&gt;</ph> 태그의 쌍이 있어야 합니다. <ph id="ph2">&lt;Name&gt;</ph> 쌍 및 새 속성의 이름을 지정 하는 태그가 <ph id="ph3">&lt;Value&gt;</ph> 속성의 값을 지정 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For example, the following XML creates a Status property for directories (System.IO.DirectoryInfo objects).</source>
          <target state="translated">예를 들어, 다음 XML (System.IO.DirectoryInfo 개체) 디렉터리에 대 한 상태 속성을 만듭니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The value of the Status property is always "Success".</source>
          <target state="translated">Status 속성의 값은 항상 "성공"입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;NoteProperty&gt;
&lt;Name&gt;</ph>Status<ph id="ph2">&lt;/Name&gt;
&lt;Value&gt;</ph>Success</source>
          <target state="translated">System.IO.DirectoryInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;NoteProperty&gt;
&lt;Name&gt;</ph>상태<ph id="ph2">&lt;/Name&gt;
&lt;Value&gt;</ph>성공</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>: Properties that take arguments and return a value.</source>
          <target state="translated">: 인수를 사용 하는 값을 반환 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>: A collection of the properties of the object.</source>
          <target state="translated">: 개체의 속성의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>: A property of the base object.</source>
          <target state="translated">: 기본 개체의 속성입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>: Defines a collection of properties of the object.</source>
          <target state="translated">: 컬렉션 개체의 속성을 정의합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;PropertySet&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the property set and a pair of <ph id="ph3">&lt;ReferencedProperty&gt;</ph> tags that specify the properties.</source>
          <target state="translated"> <ph id="ph1">&lt;PropertySet&gt;</ph> 태그의 쌍이 있어야 합니다. <ph id="ph2">&lt;Name&gt;</ph> 한 쌍의 및 속성 집합의 이름을 지정 하는 태그가 <ph id="ph3">&lt;ReferencedProperty&gt;</ph> 속성을 지정 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The names of the properties are enclosed in <ph id="ph1">&lt;Name&gt;</ph> tag pairs.</source>
          <target state="translated">속성의 이름을 괄호로 <ph id="ph1">&lt;Name&gt;</ph> 쌍 태그를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>In Types.ps1xml, <ph id="ph1">&lt;PropertySet&gt;</ph> tags are used to define sets of properties for the default display of an object.</source>
          <target state="translated">Types.ps1xml에서 <ph id="ph1">&lt;PropertySet&gt;</ph> 태그를 사용 하 여 개체의 기본 표시에 대 한 속성을 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You can identify the default displays by the value "PsStandardMembers" in the <ph id="ph1">&lt;Name&gt;</ph> tag of a <ph id="ph2">&lt;MemberSet&gt;</ph> tag.</source>
          <target state="translated">"PsStandardMembers" 값으로 기본 표시를 확인할 수는 <ph id="ph1">&lt;Name&gt;</ph> 의 태그는 <ph id="ph2">&lt;MemberSet&gt;</ph> 태그입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example, the following XML creates a Status property for directories (System.IO.DirectoryInfo objects).</source>
          <target state="translated">예를 들어, 다음 XML (System.IO.DirectoryInfo 개체) 디렉터리에 대 한 상태 속성을 만듭니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The value of the Status property is always "Success".</source>
          <target state="translated">Status 속성의 값은 항상 "성공"입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>Status&lt;/Name <ph id="ph4">&lt;Name&gt;</ph>Name<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</source>
          <target state="translated">System.ServiceProcess.ServiceController<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;MemberSet&gt;
&lt;Name&gt;</ph>PSStandardMembers<ph id="ph2">&lt;/Name&gt;
&lt;Members&gt;
&lt;PropertySet&gt;
&lt;Name&gt;</ph>DefaultDisplayPropertySet<ph id="ph3">&lt;/Name&gt;
&lt;ReferencedProperties&gt;
&lt;Name&gt;</ph>상태 &lt; / 이름 <ph id="ph4">&lt;Name&gt;</ph>이름<ph id="ph5">&lt;/Name&gt;
&lt;Name&gt;</ph>DisplayName</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>: Defines a method whose value is the output of a script.</source>
          <target state="translated">: 값을 가진이 스크립트의 출력 메서드를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;ScriptMethod&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new method and a pair of <ph id="ph3">&lt;Script&gt;</ph> tags that enclose the script block that returns the method result.</source>
          <target state="translated"> <ph id="ph1">&lt;ScriptMethod&gt;</ph> 태그의 쌍이 있어야 합니다. <ph id="ph2">&lt;Name&gt;</ph> 새 메서드와 쌍의 이름을 지정 하는 태그가 <ph id="ph3">&lt;Script&gt;</ph> 메서드 결과 반환 하는 스크립트 블록을 포함 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For example, the ConvertToDateTime and ConvertFromDateTime methods of management objects (System.System.Management.ManagementObject) are script methods that use the ToDateTime and ToDmtfDateTime static methods of the System.Management.ManagementDateTimeConverter class.</source>
          <target state="translated">예를 들어 관리 개체 (System.System.Management.ManagementObject)의 ConvertToDateTime 및 ConvertFromDateTime 메서드가 있는 ToDateTime를 사용 하는 스크립트 메서드와 ToDmtfDateTime System.Management.ManagementDateTimeConverter 클래스의 정적 메서드.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>System.Management.ManagementObject<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptMethod&gt;
&lt;Name&gt;</ph>ConvertToDateTime</source>
          <target state="translated">System.Management.ManagementObject<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptMethod&gt;
&lt;Name&gt;</ph>ConvertToDateTime</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>ConvertFromDateTime<ph id="ph1">&lt;/Name&gt;
&lt;Script&gt;
[System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($args[0])
&lt;/Script&gt;
&lt;/ScriptMethod&gt;
&lt;/Members&gt;
&lt;/Type&gt;

&lt;ScriptProperty&gt;</ph>: Defines a property whose value is the output of a script.</source>
          <target state="translated">ConvertFromDateTime<ph id="ph1">&lt;/Name&gt;
&lt;Script&gt;
[System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($args[0])
&lt;/Script&gt;
&lt;/ScriptMethod&gt;
&lt;/Members&gt;
&lt;/Type&gt;

&lt;ScriptProperty&gt;</ph>: 값을 가진이 스크립트의 출력 속성을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;ScriptProperty&gt;</ph> tag must have a pair of <ph id="ph2">&lt;Name&gt;</ph> tags that specify the name of the new property and a pair of <ph id="ph3">&lt;GetScriptBlock&gt;</ph> tags that enclose the script block that returns the property value.</source>
          <target state="translated"> <ph id="ph1">&lt;ScriptProperty&gt;</ph> 태그의 쌍이 있어야 합니다. <ph id="ph2">&lt;Name&gt;</ph> 쌍 및 새 속성의 이름을 지정 하는 태그가 <ph id="ph3">&lt;GetScriptBlock&gt;</ph> 속성 값을 반환 하는 스크립트 블록을 포함 하는 태그입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For example, the VersionInfo property of files (System.IO.FileInfo objects) is a script property that results from using the FullName property of the GetVersionInfo static method of System.Diagnostics.FileVersionInfo objects.</source>
          <target state="translated">예를 들어 파일 (System.IO.FileInfo 개체)의 VersionInfo 속성은 FullName 속성 System.Diagnostics.FileVersionInfo 개체의 GetVersionInfo 정적 메서드를 사용 하 여 생성 스크립트 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>VersionInfo</source>
          <target state="translated">System.IO.FileInfo<ph id="ph1">&lt;/Name&gt;
&lt;Members&gt;
&lt;ScriptProperty&gt;
&lt;Name&gt;</ph>VersionInfo</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>System.Diagnostics.FileVersionInfo</source>
          <target state="translated">System.Diagnostics.FileVersionInfo</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For more information, see the Windows PowerShell Software Development Kit (SDK) in the MSDN (Microsoft Developer Network )library at http://go.microsoft.com/fwlink/?LinkId=144538.</source>
          <target state="translated">자세한 내용은 Windows PowerShell 소프트웨어 개발 키트 (SDK) http://go.microsoft.com/fwlink/?LinkId=144538 MSDN (Microsoft Developer Network) 라이브러리에 참조 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Update-TypeData</source>
          <target state="translated">Update-TypeData</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To load your Types.ps1xml files into a Windows PowerShell session, run the Update-TypeData cmdlet.</source>
          <target state="translated">Windows PowerShell 세션으로 Types.ps1xml 파일을 로드 하려면 Update-typedata cmdlet을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If you want the types in your file to take precedence over types in the built-in Types.ps1xml file, add the PrependData parameter of Update-TypeData.</source>
          <target state="translated">기본 제공 Types.ps1xml 파일에서 형식을 보다 우선 하도록 파일의 형식을 원하는 경우 Update-typedata의 PrependData 매개 변수를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Update-TypeData affects only the current session.</source>
          <target state="translated">Update-typedata는 현재 세션을만 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>To make the change to all future sessions, export the session, or add the Update-TypeData command to your Windows PowerShell profile.</source>
          <target state="translated">이후의 모든 세션을 변경 하려면 세션을 내보내거나 Update-typedata 명령을 Windows PowerShell 프로필에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Exceptions that occur in properties, or from adding properties to an Update-TypeData command, do not report errors to StdErr.</source>
          <target state="translated">Update-typedata 명령에 대 한 속성을 추가 또는 속성에서 발생 하는 예외는 StdErr에 오류를 보고 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This is to suppress exceptions that would occur in many common types during formatting and outputting.</source>
          <target state="translated">이는 형식 지정 및 출력 중 많은 일반 유형에서 발생하는 예외를 표시하지 않기 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If you are getting .NET Framework properties, you can work around the suppression of exceptions by using method syntax instead, as shown in the following example:</source>
          <target state="translated">.NET Framework 속성을 가져오는 경우 다음 예제와 같이 메서드 구문을 대신 사용하여 예외를 표시하지 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>"hello".get_Length()</source>
          <target state="translated">"hello".get_Length()</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Note that method syntax can only be used with .NET Framework properties.</source>
          <target state="translated">메서드 구문은 .NET Framework 속성에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Properties that are added by running the Update-TypeData cmdlet cannot use method syntax.</source>
          <target state="translated">Update-TypeData cmdlet을 실행하여 추가된 속성은 메서드 구문을 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Signing a Types.ps1xml File</source>
          <target state="translated">Types.ps1xml 파일에 서명</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>To protect users of your Types.ps1xml file, you can sign the file using a digital signature.</source>
          <target state="translated">Types.ps1xml 파일의 사용자를 보호 하려면 디지털 서명을 사용 하 여 파일을 서명할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information, see about_Signing.</source>
          <target state="translated">자세한 내용은 about_Signing을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>about_Signing (http://go.microsoft.com/fwlink/?LinkID=113268) Copy-Item (http://go.microsoft.com/fwlink/?LinkID=113292) Copy-ItemProperty (http://go.microsoft.com/fwlink/?LinkID=113293) Get-Member (http://go.microsoft.com/fwlink/?LinkID=113322) Get-TypeData (http://go.microsoft.com/fwlink/?LinkID=217033) Remove-TypeData (http://go.microsoft.com/fwlink/?LinkID=217038) Update-TypeData (http://go.microsoft.com/fwlink/?LinkID=113421)</source>
          <target state="translated">about_Signing (http://go.microsoft.com/fwlink/?LinkID=113268) 항목 복사 (http://go.microsoft.com/fwlink/?LinkID=113292) Copy-itemproperty (http://go.microsoft.com/fwlink/?LinkID=113293) Get-member (http://go.microsoft.com/fwlink/?LinkID=113322) Get-typedata (http://go.microsoft.com/fwlink/?LinkID=217033) Remove-typedata (http://go.microsoft.com/fwlink/?LinkID=217038) Update-typedata (http://go.microsoft.com/fwlink/?LinkID=113421)</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>