<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb1385aab2ac9122bc947e6548800061d340ae2f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Job_Details.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d27c9094e87462f65188e7a07b1aaba39cbd5a9a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85418af06035ee69bd97af1ce9961a777f09b459</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Job Details</source>
          <target state="translated">작업 세부 정보</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Job_Details</source>
          <target state="translated">about_Job_Details</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Provides details about background jobs on local and remote computers.</source>
          <target state="translated">로컬 및 원격 컴퓨터에서 백그라운드 작업에 대 한 세부 정보를 제공합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>DETAILED DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic explains the concept of a background job and provides technical information about how background jobs work in Windows PowerShell.</source>
          <target state="translated">이 항목을 백그라운드 작업의 개념을 설명 하 고 Windows PowerShell에서 백그라운드 작업을 사용 하는 방법에 대 한 기술 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic is a supplement to the about_Jobs and about_Remote_Jobs topics.</source>
          <target state="translated">이 항목은 about_Jobs 및 about_Remote_Jobs 항목을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ABOUT BACKGROUND JOBS</source>
          <target state="translated">백그라운드 작업에 대 한</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A background job runs a command or expression asynchronously.</source>
          <target state="translated">백그라운드 작업을 비동기로 명령 또는 식을 실행합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It might run a cmdlet, a function, a script, or any other command-based task.</source>
          <target state="translated">Cmdlet, 함수, 스크립트 또는 다른 명령 기반 작업 실행 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is designed to run commands that take an extended period of time, but you can use it to run any command in the background.</source>
          <target state="translated">오랜 시간이 걸리는 명령을 실행 하도록 되어 있지만 백그라운드에서 명령을 실행 하려면 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When a synchronous command runs, the Windows PowerShell command prompt is suppressed until the command is complete.</source>
          <target state="translated">동기 명령 실행 되 면 명령이 완료 될 때까지 Windows PowerShell 명령 프롬프트 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>But a background job does not suppress the Windows PowerShell prompt.</source>
          <target state="translated">하지만 백그라운드 작업을 Windows PowerShell 프롬프트를 억제 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A command to start a background job returns a job object.</source>
          <target state="translated">작업 개체를 반환 하는 명령을 백그라운드 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The prompt returns immediately so you can work on other tasks while the background job runs.</source>
          <target state="translated">프롬프트에 따라서 작업할 수 다른 작업에 백그라운드 작업을 실행 하는 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, when you start a background job, you do not get the results immediately even if the job runs very quickly.</source>
          <target state="translated">그러나 백그라운드 작업을 시작 하면 표시 되지 않도록 결과 즉시 경우에 작업이 매우 신속 하 게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The job object that is returned contains useful information about the job, but it does not contain the job results.</source>
          <target state="translated">반환 되는 작업 개체는 작업에 대 한 유용한 정보를 포함 하지만 작업 결과 포함 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You must run a separate command to get the job results.</source>
          <target state="translated">작업 결과 얻기 위해 별도 명령을 실행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can also run commands to stop the job, to wait for the job to be completed, and to delete the job.</source>
          <target state="translated">또한 작업을 삭제 하 고 완료 될 작업에 대 한 대기 작업을 중지 하는 명령을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To make the timing of a background job independent of other commands, each background job runs in its own Windows PowerShell environment (a "session").</source>
          <target state="translated">백그라운드 작업의 타이밍 상관 없이 사용 하려면 다른 명령, 각 백그라운드 작업 ("세션")의 Windows PowerShell 환경에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, this can be a temporary connection that is created only to run the job and is then destroyed, or it can be a persistent session (a PSSession) that you can use to run several related jobs or commands.</source>
          <target state="translated">그러나이 수는 작업 실행에 만들어지고 소멸 다음 임시 연결 또는 영구 세션 수 (PSSession)와 관련 된 작업 또는 명령을 여러 실행에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>USING THE JOB CMDLETS</source>
          <target state="translated">JOB CMDLET을 사용 하 여</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use a Start-Job command to start a background job on a local computer.</source>
          <target state="translated">Start-job 명령을 사용 하 여 로컬 컴퓨터에서 백그라운드 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Start-Job returns a job object.</source>
          <target state="translated">시작 작업은 작업 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also get objects representing the jobs that were started on the local computer by using the Get-Job cmdlet.</source>
          <target state="translated">Get-job cmdlet을 사용 하 여 로컬 컴퓨터에서 시작 된 작업을 나타내는 개체를 가져올 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To get the job results, use a Receive-Job command.</source>
          <target state="translated">작업 결과 가져오려면 Receive-job 명령을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the job is not complete, Receive-Job returns partial results.</source>
          <target state="translated">작업이 완료 되 면 Receive-job 부분 결과 반환 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can also use the Wait-Job cmdlet to suppress the command prompt until one or all of the jobs that were started in the session are complete.</source>
          <target state="translated">또한 세션에서 시작 된 작업 중 하나 또는 모두 완료 될 때까지 명령 프롬프트를 표시 하지 않으려면 Wait-job cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To stop a background job, use the Stop-Job cmdlet.</source>
          <target state="translated">백그라운드 작업을 중지 하려면 Stop-job cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To delete a job, use the Remove-Job cmdlet.</source>
          <target state="translated">작업을 삭제 하려면 Remove-job cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about how the cmdlets work, see the Help topic for each cmdlet, and see about_Jobs.</source>
          <target state="translated">Cmdlet의 작동 하는 방법에 대 한 자세한 내용은 각 cmdlet에 대 한 도움말 항목을 참조 하 고 about_Jobs를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>STARTING BACKGROUND JOBS ON REMOTE COMPUTERS</source>
          <target state="translated">원격 컴퓨터에서 백그라운드 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can create and manage background jobs on a local or remote computer.</source>
          <target state="translated">수 만들고 로컬 또는 원격 컴퓨터에서 백그라운드 작업을 관리 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To run a background job remotely, use the AsJob parameter of a cmdlet such as Invoke-Command, or use the Invoke-Command cmdlet to run a Start-Job command remotely.</source>
          <target state="translated">백그라운드 작업을 원격으로 실행 하려면 Invoke-command과 같은 cmdlet의 AsJob 매개 변수를 사용 하거나 Invoke-command cmdlet을 사용 하 여 Start-job 명령을 원격으로 실행 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can also start a background job in an interactive session.</source>
          <target state="translated">또한 대화형 세션에서 백그라운드 작업을 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information about remote background jobs, see about_Remote_Jobs.</source>
          <target state="translated">원격 백그라운드 작업에 대한 자세한 내용은 about_Remote_Jobs를 참조하세요.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CHILD JOBS</source>
          <target state="translated">자식 작업</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Each background job consists of a parent job and one or more child jobs.</source>
          <target state="translated">각 백그라운드 작업으로 부모 작업과 자식 작업 하나 이상 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In jobs started by using Start-Job or the AsJob parameter of Invoke-Command, the parent job is an executive.</source>
          <target state="translated">시작 작업 또는 Invoke-command의 AsJob 매개 변수를 사용 하 여 시작 된 작업, 부모 모음이 경영진입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It does not run any commands or return any results.</source>
          <target state="translated">명령을 실행 하거나 아무 결과도 반환 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The commands are actually run by the child jobs.</source>
          <target state="translated">명령은 자식 작업에서 실제로 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(Jobs started by using other cmdlets might work differently.)</source>
          <target state="translated">(다른 cmdlet을 사용 하 여 시작 된 작업 다르게 동작할 수 있습니다.)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The child jobs are stored in the ChildJobs property of the parent job object.</source>
          <target state="translated">자식 작업이 부모 작업 개체의 ChildJobs 속성에 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The ChildJobs property can contain one or many child job objects.</source>
          <target state="translated">ChildJobs 속성 하나 또는 여러 하위 작업 개체가 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The child job objects have a name, ID, and instance ID that differ from the parent job so that you can manage the parent and child jobs individually or as a unit.</source>
          <target state="translated">자식 작업 개체는 이름, ID 및 개별적으로 또는 한 단위로 부모 및 자식 작업을 관리할 수 있도록 부모 작업에서 다른 인스턴스 ID를 가집니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To get the parent and child jobs of a job, use the IncludeChildJobs parameter of the Get-Job cmdlet.</source>
          <target state="translated">작업의 부모 및 자식 작업을 가져오려면 Get-job cmdlet의 IncludeChildJobs 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The IncludeChildJob parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">IncludeChildJob 매개 변수는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Get-Job -IncludeChildJob</source>
          <target state="translated">C:\PS &gt; Get-job IncludeChildJob</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>1     Job1   RemoteJob     Failed     True          localhost   Get-Process 2     Job2                 Completed  True          Server01    Get-Process 3     Job3                 Failed     False         localhost   Get-Process</source>
          <target state="translated">1 Job1 RemoteJob 실패 True localhost Get-process 2 Job2 완료 True Server01 Get-process 3 Job3 실패 False localhost Get-process</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To get the parent job and only the child jobs with a particular State value, use the ChildJobState parameter of the Get-Job cmdlet.</source>
          <target state="translated">부모 작업 및 특정 상태 값을 가진 자식 작업만 가져오려면 Get-job cmdlet의 ChildJobState 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The ChildJobState parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">ChildJobState 매개 변수는 Windows PowerShell 3.0에서 도입 되었습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Get-Job -ChildJobState Failed</source>
          <target state="translated">C:\PS &gt; Get-job ChildJobState 못했습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>1     Job1   RemoteJob     Failed     True          localhost   Get-Process 3     Job3                 Failed     False         localhost   Get-Process</source>
          <target state="translated">1 Job1 RemoteJob 실패 True localhost Get-process 3 Job3 실패 False localhost Get-process</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To get the child jobs of a job on all versions of Windows PowerShell, use the ChildJob property of the parent job.</source>
          <target state="translated">자식 작업의 작업에는 모든 버전의 Windows PowerShell를 가져오려면 부모 작업의 ChildJob 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (Get-Job Job1).ChildJobs</source>
          <target state="translated">C:\PS &gt; (Get-job Job1). ChildJobs</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>2     Job2                 Completed  True          Server01    Get-Process 3     Job3                 Failed     False         localhost   Get-Process</source>
          <target state="translated">2 Job2 완료 True Server01 Get-process 3 Job3 실패 False localhost Get-process</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can also use a Get-Job command on the child job, as shown in the following command:</source>
          <target state="translated">또한 다음 명령에 표시 된 것 처럼 자식 작업에 대해 Get 작업 명령이 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Get-Job Job3</source>
          <target state="translated">C:\PS &gt; Get-job Job3</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>3     Job3                 Failed     False         localhost   Get-Process</source>
          <target state="translated">3 Job3 실패 False localhost Get-process</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The configuration of the child job depends on the command that you use to start the job.</source>
          <target state="translated">자식 작업의 구성을 사용 하 여 작업을 시작 하는 명령에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-- When you use Start-Job to start a job on a local computer, the job consists of an executive parent job and a child job that runs the command.</source>
          <target state="translated">--시작 작업을 사용 하 여 로컬 컴퓨터에서 작업을 시작 하는 경우 작업 executive 부모 작업 및 명령을 실행 하는 자식 작업으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-- When you use the AsJob parameter of Invoke-Command to start a job on one or more computers, the job consists of an executive parent job and a child job for each job run on each computer.</source>
          <target state="translated">--Invoke-command의 AsJob 매개 변수를 사용 하 여 하나 이상의 컴퓨터에서 작업을 시작 하는 경우 작업 executive 부모 작업 및 각 컴퓨터에서 실행 하는 각 작업에 대 한 자식 작업으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-- When you use Invoke-Command to run a Start-Job command on one or more remote computers, the result is the same as a local command run on each remote computer.</source>
          <target state="translated">-하나 이상의 원격 컴퓨터에서 Start-job 명령을 실행 하려면 Invoke-command를 사용 하는 경우 결과가 같습니다 각 원격 컴퓨터에서 실행 되는 로컬 명령입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The command returns a job object for each computer.</source>
          <target state="translated">이 명령은 각 컴퓨터에 대 한 작업 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The job object consists of an executive parent job and one child job that runs the command.</source>
          <target state="translated">작업 개체는 executive 부모 작업에는 명령을 실행 하는 하나의 자식 작업으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The parent job represents all of the child jobs.</source>
          <target state="translated">부모 작업의 모든 자식 작업을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When you manage a parent job, you also manage the associated child jobs.</source>
          <target state="translated">부모 작업을 관리 하는 경우 또한 연결 된 자식 작업을 관리 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, if you stop a parent job, all child jobs are stopped.</source>
          <target state="translated">예를 들어, 부모 작업을 중지 하면 모든 자식 작업이 중지 됩니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you get the results of a parent job, you get the results of all child jobs.</source>
          <target state="translated">부모 작업의 결과 얻게 하는 경우 모든 자식 작업의 결과를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, you can also manage child jobs individually.</source>
          <target state="translated">그러나 자식 작업을 개별적으로 관리할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is most useful when you want to investigate a problem with a job or get the results of only one of a number of child jobs started by using the AsJob parameter of Invoke-Command.</source>
          <target state="translated">작업과 문제를 조사 하거나 Invoke-command의 AsJob 매개 변수를 사용 하 여 시작 하는 자식 작업의 수 중 하나에의 결과 얻을 때 가장 유용 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>(The backtick character [`] is the continuation character.)</source>
          <target state="translated">(['] 억음 문자는 연속 문자입니다.)</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following command uses the AsJob parameter of Invoke-Command to start background jobs on the local computer and two remote computers.</source>
          <target state="translated">다음 명령은 Invoke-command의 AsJob 매개 변수를 사용 하 여 로컬 컴퓨터와 원격 컴퓨터 2 개에서 백그라운드 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The command saves the job in the $j variable.</source>
          <target state="translated">이 명령은 $j 변수 작업을 저장 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $j = Invoke-Command -ComputerName localhost, Server01, Server02 ` -Command {Get-Date} -AsJob</source>
          <target state="translated">PS c: &gt; $j Invoke-command-ComputerName localhost, Server01, Server02 = '-{Get-date} AsJob 명령</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When you display the Name and ChildJob properties of the job in $j, it shows that the command returned a job object with three child jobs, one for each computer.</source>
          <target state="translated">$J에서 작업의 이름 및 ChildJob 속성을 표시 하는 경우에 명령은 각 컴퓨터에 대해 하나씩 세 개의 자식 작업이 포함 된 작업 개체를 반환 하는 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CPS C:&gt; $j | Format-List Name, ChildJobs</source>
          <target state="translated">CPS c: &gt; $j | Format-list Name, ChildJobs</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Name      : Job3 ChildJobs : {Job4, Job5, Job6}</source>
          <target state="translated">이름: Job3 ChildJobs: {Job4, Job5, Job6}</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you display the parent job, it shows that the job failed.</source>
          <target state="translated">부모 작업을 표시 하는 경우 작업이 실패 했음을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $j</source>
          <target state="translated">&gt; $J C:\PS</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>3     Job3   RemotingJob   Failed     False         localhost,Server...</source>
          <target state="translated">Job3 RemotingJob 실패 False localhost 3 개, 서버 중...</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>But when you run a Get-Job command that gets the child jobs, the output shows that only one child job failed.</source>
          <target state="translated">하지만 자식 작업을 가져오는 Get-job 명령을 실행 하면 출력 해당 자식 노드가 한 개만 작업 실패를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Get-Job -IncludeChildJobs</source>
          <target state="translated">PS c: &gt; Get-job IncludeChildJobs</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Id    Name   PSJobTypeName State      HasMoreData   Location    Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>3     Job3   RemotingJob   Failed     False         localhost,Server... 4     Job4                 Completed  True          localhost   Get-Date 5     Job5                 Failed     False         Server01    Get-Date 6     Job6                 Completed  True          Server02    Get-Date</source>
          <target state="translated">Job3 RemotingJob 실패 False localhost 3 개, 서버 중... 4 Job4 완료 True localhost Get-date 5 Job5 실패 False Server01 Get-date 6 Job6 완료 True Server02 Get-date</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To get the results of all child jobs, use the Receive-Job cmdlet to get the results of the parent job.</source>
          <target state="translated">모든 자식 작업의 결과 가져오려면 Receive-job cmdlet를 사용 하 여 부모 작업의 결과를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>But you can also get the results of a particular child job, as shown in the following command.</source>
          <target state="translated">하지만 다음 명령에 표시 된 것 처럼 특정 자식 작업의 결과 가져올 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; Receive-Job -Name Job6 -Keep | Format-Table ComputerName, DateTime -Auto</source>
          <target state="translated">C:\PS &gt; Receive-job-Job6 이름-유지 | Format-table ComputerName, 날짜/시간-자동</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>ComputerName DateTime</source>
          <target state="translated">ComputerName DateTime</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Server02     Thursday, March 13, 2008 4:16:03 PM</source>
          <target state="translated">2008 년 3 월 13 일 목요일 오후 4시 16분: 03 Server02</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The child jobs feature of Windows PowerShell background jobs gives you more control over the jobs that you run.</source>
          <target state="translated">Windows PowerShell 백그라운드 작업의 자식 작업은 실행 하는 작업 보다 더 많은 제어할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>JOB TYPES</source>
          <target state="translated">작업 유형</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports different types of jobs for different tasks.</source>
          <target state="translated">Windows PowerShell 작업 마다 서로 다른 유형의 작업을 지원합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, developers can write "job source adapters" that add new job types to Windows PowerShell and include the job source adapters in modules.</source>
          <target state="translated">개발자는 Windows PowerShell 3.0 부터는 "작업 원본 어댑터" Windows PowerShell에 새 작업 유형을 추가 하 고 모듈의 작업 원본 어댑터를 포함 하는 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When you import the module, you can use the new job type in your session.</source>
          <target state="translated">모듈을 가져올 때 세션에서 새 작업 유형을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, the PSScheduledJob module adds scheduled jobs and the PSWorkflow module adds workflow jobs.</source>
          <target state="translated">예를 들어 PSScheduledJob 모듈 예약 된 작업을 추가 하 고 PSWorkflow 모듈 워크플로 작업을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Custom jobs types might differ significantly from standard Windows PowerShell background jobs.</source>
          <target state="translated">사용자 지정 작업 유형 표준 Windows PowerShell 백그라운드 작업에서 크게 다를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For example, scheduled jobs are saved on disk; they do not exist only in a particular session.</source>
          <target state="translated">예약 된 작업 디스크;에 저장 되는 예를 들어 특정 세션에만 존재 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Workflow jobs can be suspended and resumed.</source>
          <target state="translated">워크플로 작업 일시 중단 했다가 다시 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The cmdlets that you use to manage custom jobs depend on the job type.</source>
          <target state="translated">사용자 지정 작업을 관리 하는 데 사용할 수 있는 cmdlet은 작업 유형에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For some, you use the standard job cmdlets, such as Get-Job and Start-Job.</source>
          <target state="translated">경우에 따라서는 Get-job 및 Start-job와 같은 표준 작업 cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Others come with specialized cmdlets that manage only a particular type of job.</source>
          <target state="translated">다른 사용자는 특정 유형의 작업을 관리 하는 특수 한 cmdlet가 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For detailed information about custom job types, see the help topics about the job type.</source>
          <target state="translated">사용자 지정 작업 유형에 대 한 자세한 내용은 작업 유형에 대 한 도움말 항목을 참조 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To find the job type of a job, use the Get-Job cmdlet.</source>
          <target state="translated">작업의 작업 유형을 찾으려면 Get-job cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Get-Job returns different job objects for different types of jobs.</source>
          <target state="translated">Get-job 다양 한 유형의 작업에 대 한 다른 작업 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The value of the PSJobTypeName property of the job objects that Get-Job returns indicates the job type.</source>
          <target state="translated">Get 작업에서 반환 하는 작업 개체의 PSJobTypeName 속성의 값에는 작업 유형을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following table lists the job types that come with Windows PowerShell.</source>
          <target state="translated">다음 표에서 Windows PowerShell과 함께 제공 되는 작업 유형을 나열 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Job Type         Description</source>
          <target state="translated">작업 유형 설명</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>BackgroundJob    Started by using the Start-Job cmdlet.</source>
          <target state="translated">BackgroundJob Start-job cmdlet을 사용 하 여 시작 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>RemoteJob        Started by using the AsJob parameter of the Invoke-Command cmdlet.</source>
          <target state="translated">RemoteJob Invoke-command cmdlet의 AsJob 매개 변수를 사용 하 여 시작 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>PSWorkflowJob    Started by using the AsJob parameter of a workflow.</source>
          <target state="translated">PSWorkflowJob 워크플로의 AsJob 매개 변수를 사용 하 여 시작 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>PSScheduledJob   An instance of a scheduled job started by a job trigger.</source>
          <target state="translated">PSScheduledJob 예약된 된 작업의 인스턴스 작업 트리거에 의해 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CIMJob           Started by using the AsJob parameter of a cmdlet from a CDXML module.</source>
          <target state="translated">CIMJob CDXML 모듈에서 cmdlet의 AsJob 매개 변수를 사용 하 여 시작 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>WMIJob           Started by using the AsJob parameter of a cmdlet from a WMI module.</source>
          <target state="translated">WMIJob WMI 모듈에서 cmdlet의 AsJob 매개 변수를 사용 하 여 시작 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>PSEventJob       Created by running Register-ObjectEvent and specifying an action with the Action parameter.</source>
          <target state="translated">PSEventJob Register-objectevent를 실행 하 고 Action 매개 변수를 사용 하 여 작업을 지정 하 여 만들어집니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>NOTE: Before using the Get-Job cmdlet to get jobs of a particular type, verify that the module that adds the job type is imported into the current session.</source>
          <target state="translated">참고: 특정 유형의 작업을 가져오려면 Get-job cmdlet를 사용 하기 전에 확인 작업 형식을 추가 하는 모듈이 현재 세션으로 가져왔는지 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Otherwise, Get-Job does not get jobs of that type.</source>
          <target state="translated">그렇지 않은 경우 Get 작업은 해당 형식의 작업 가져오지 않습니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>EXAMPLE</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following commands create a local background job, a remote background job, a workflow job, and a scheduled job.</source>
          <target state="translated">다음 명령은 로컬 백그라운드 작업, 원격 백그라운드 작업, 워크플로 작업 및 예약 된 작업을 만듭니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Then, it uses the Get-Job cmdlet to get the jobs.</source>
          <target state="translated">그런 다음 작업을 가져올 Get-job cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Get-Job does not get the scheduled job, but it gets any started instances of the scheduled job.</source>
          <target state="translated">Get 작업에서 예약된 된 작업을 가져오지 않습니다 하지만 예약된 된 작업의 시작된 인스턴스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Start a background job on the local computer.</source>
          <target state="translated">로컬 컴퓨터에서 백그라운드 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Start-Job -Name LocalData {Get-Process}</source>
          <target state="translated">PS c: &gt; Start-job-LocalData {Get-process} 이름 지정</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Id   Name        PSJobTypeName   State   HasMoreData     Location   Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>2    LocalData   BackgroundJob   Running        True     localhost  Get-Process</source>
          <target state="translated">2 LocalData BackgroundJob 실행 True localhost Get-process</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Start a background job that runs on a remote computer.</source>
          <target state="translated">원격 컴퓨터에서 실행 되는 백그라운드 작업을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Invoke-Command -ComputerName Server01 {Get-Process} -AsJob -JobName RemoteData</source>
          <target state="translated">PS c: &gt; Invoke-command-ComputerName Server01 {Get-process} AsJob-JobName RemoteData</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Id   Name        PSJobTypeName   State   HasMoreData     Location   Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>2    RemoteData  RemoteJob       Running        True     Server01   Get-Process</source>
          <target state="translated">2 RemoteData RemoteJob 실행 True Server01 Get-process</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Create a scheduled job PS C:&gt;  Register-ScheduledJob -Name ScheduledJob -ScriptBlock {Get-Process} ` -Trigger (New-JobTrigger -Once -At "3 PM")</source>
          <target state="translated">PS c: 예약된 된 작업 만들기 &gt; Register-scheduledjob-이름 ScheduledJob-ScriptBlock {Get-process} '-트리거 (New-jobtrigger--한 번 "오후 3 시")</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Id         Name            JobTriggers     Command       Enabled</source>
          <target state="translated">Id 이름 JobTriggers 명령 사용</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>1          ScheduledJob    1               Get-Process   True</source>
          <target state="translated">1 ScheduledJob 1 Get-process True</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Create a workflow.</source>
          <target state="translated">워크플로 만듭니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>PS C:&gt; workflow Test-Workflow {Get-Process}</source>
          <target state="translated">PS c: &gt; {Get-process}를 워크플로-테스트 워크플로</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Run the workflow as a job.</source>
          <target state="translated">작업으로 워크플로 실행 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Test-Workflow -AsJob -JobName TestWFJob</source>
          <target state="translated">PS c: &gt;-AsJob-JobName TestWFJob 테스트 워크플로</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Id   Name        PSJobTypeName   State   HasMoreData     Location   Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>2    TestWFJob   PSWorkflowJob   NotStarted     True     localhost  Get-Process</source>
          <target state="translated">2 TestWFJob PSWorkflowJob NotStarted True localhost Get-process</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Get the jobs.</source>
          <target state="translated">작업을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The Get-Job command does not get scheduled jobs, but it gets instances of the scheduled job that are started.</source>
          <target state="translated">Get 작업 명령이 예약 된 작업을 가져오지 않습니다 하지만 시작 하는 예약된 된 작업의 인스턴스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Get-Job</source>
          <target state="translated">PS c: &gt; Get-job</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Id   Name         PSJobTypeName   State     HasMoreData     Location  Command</source>
          <target state="translated">Id 이름 PSJobTypeName 상태 HasMoreData 위치 명령</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>2    LocalData    BackgroundJob   Completed True            localhost Get-Process 4    RemoteData   RemoteJob       Completed True            Server01  Get-Process 6    TestWFJob    PSWorkflowJob   Completed True            localhost WorkflowJob 8    ScheduledJob PSScheduledJob  Completed True            localhost Get-Process</source>
          <target state="translated">2 LocalData BackgroundJob 완료 True localhost Get-process 4 RemoteData RemoteJob 완료 True Server01 Get-process 6 TestWFJob PSWorkflowJob 완료 True localhost WorkflowJob 8 ScheduledJob PSScheduledJob 완료 True localhost Get-process</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To get scheduled jobs, use the Get-ScheduledJob cmdlet.</source>
          <target state="translated">예약 된 작업 Get-scheduledjob cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>PS C:&gt; Get-ScheduledJob</source>
          <target state="translated">PS c: &gt; Get-scheduledjob</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Id         Name            JobTriggers     Command       Enabled</source>
          <target state="translated">Id 이름 JobTriggers 명령 사용</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>1          ScheduledJob    1               Get-Process   True</source>
          <target state="translated">1 ScheduledJob 1 Get-process True</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>about_Jobs about_Remote_Jobs about_Remote about_Scheduled_Jobs Invoke-Command Start-Job Get-Job Wait-Job Stop-Job Remove-Job Suspend-Job Resume-Job New-PSSession Enter-PSSession Exit-PSSession Register-ScheduledJob Get-ScheduleJob</source>
          <target state="translated">about_Jobs about_Remote_Jobs about_Remote about_Scheduled_Jobs Invoke-command Start-job Get-job Wait-job Stop-job Remove-job Suspend-job Resume-job New-pssession Enter-pssession Exit-pssession Register-scheduledjob Get-schedulejob</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>