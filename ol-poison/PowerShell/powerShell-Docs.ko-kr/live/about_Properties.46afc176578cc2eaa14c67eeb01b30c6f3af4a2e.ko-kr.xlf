<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be3268191a93408923f9e3ab45dedc2a01052128</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Properties.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80b0ac597e17ff9ee7432747318e2d584ec23475</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34b537130310bfa03e816d350ae66d77ffe5d356</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Properties</source>
          <target state="translated">about_Properties</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Properties</source>
          <target state="translated">속성에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Properties</source>
          <target state="translated">about_Properties</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Properties</source>
          <target state="translated">about_Properties</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use object properties in  Windows PowerShell�.</source>
          <target state="translated">Windows PowerShell에서 개체 속성을 사용 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses structured collections of information called objects to represent the items in data stores or the state of the computer.</source>
          <target state="translated">Windows PowerShell 구조화 된 컬렉션의 개체를 호출 하는 정보를 사용 하 여 데이터 저장소 또는 컴퓨터의 상태에 있는 항목을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Typically, you work with object that are part of the Microsoft .NET Framework, but you can also create custom objects in  Windows PowerShell.</source>
          <target state="translated">일반적으로 Microsoft.NET Framework의 일부인 개체를 사용 하지만 Windows PowerShell에서 사용자 지정 개체를 만들 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The association between an item and its object is very close.</source>
          <target state="translated">항목 및 해당 개체 간의 연결은 매우 유사 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you change an object, you usually change the item that it represents.</source>
          <target state="translated">개체를 변경 하면 일반적으로 나타내는 항목을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, when you get a file in  Windows PowerShell, you do not get the actual file.</source>
          <target state="translated">예를 들어, Windows PowerShell에서 파일을 가져오면 실제 파일을 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instead, you get a FileInfo object that represents the file.</source>
          <target state="translated">대신 파일을 나타내는 FileInfo 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When you change the FileInfo object, the file changes too.</source>
          <target state="translated">FileInfo 개체를 변경 하면 파일도 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Most objects have properties.</source>
          <target state="translated">대부분의 개체는 속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Properties are the data that is associated with an object.</source>
          <target state="translated">속성은 개체와 연결 되는 데이터입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Different types of object have different properties.</source>
          <target state="translated">다양 한 유형의 개체에 다른 속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, a FileInfo object, which represents a file, has an IsReadOnly property that contains $True if the file the read-only attribute and $False if it does not.</source>
          <target state="translated">예를 들어 파일을 나타내는 FileInfo 개체를 속성이 IsReadOnly $True를 포함 하는 읽기 전용 파일 특성 및 $False 그렇지 않은 경우.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A DirectoryInfo object, which represents a file system directory, has a Parent property that contains the path to the parent directory.</source>
          <target state="translated">파일 시스템 디렉터리를 나타내는 DirectoryInfo 개체를 부모 디렉터리의 경로를 포함 하는 부모 속성을 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>OBJECT PROPERTIES</source>
          <target state="translated">개체 속성</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To get the properties of an object, use the Get-Member cmdlet.</source>
          <target state="translated">개체의 속성을 가져오려면 Get-member cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, to get the properties of a FileInfo object, use the Get-ChildItem cmdlet to get the FileInfo object that represents a file.</source>
          <target state="translated">예를 들어 FileInfo 개체의 속성을 사용 Get-childitem cmdlet은 파일을 나타내는 FileInfo 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Then, use a pipeline operator (&amp;#124;) to send the FileInfo object to Get-Member.</source>
          <target state="translated">그런 다음 파이프라인 연산자 (&amp;#124;) FileInfo 개체를 Get-member로 보냅니다를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following command gets the PowerShell.exe file and sends it to Get-Member.</source>
          <target state="translated">다음 명령은 PowerShell.exe 파일을 가져옵니다를 Get-member로 보냅니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The $Pshome automatic variable contains the path of the  Windows PowerShell installation directory.</source>
          <target state="translated">$Pshome 자동 변수는 Windows PowerShell 설치 디렉터리의 경로 포함 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The output of the command lists the members of the FileInfo object.</source>
          <target state="translated">명령 출력 FileInfo 개체의 멤버를 나열합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Members include both properties and methods.</source>
          <target state="translated">멤버 속성 및 메서드를 모두 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you work in  Windows PowerShell, you have access to all the members of the objects.</source>
          <target state="translated">Windows PowerShell에서 작업 개체의 모든 멤버에 액세스할을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To get only the properties of an object and not the methods, use the MemberType parameter of the Get-Member cmdlet with a value of "property", as shown in the following example.</source>
          <target state="translated">개체 및 메서드 하지의 속성만 사용 Get-member cmdlet의 MemberType 매개 변수 값이 "property" 인 다음 예와에서 같이 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After you find the properties, you can use them in your  Windows PowerShell commands.</source>
          <target state="translated">속성을 찾은 후에 Windows PowerShell 명령에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>PROPERTY VALUES</source>
          <target state="translated">속성 값</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Although every object of a specific type has the same properties, the values of those properties describe the particular object.</source>
          <target state="translated">특정 유형의 모든 개체에 같은 속성으로 이러한 속성의 값은 특정 개체를 설명 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, every FileInfo object has a CreationTime property, but the value of that property differs for each file.</source>
          <target state="translated">예를 들어 모든 FileInfo 개체 CreationTime 속성에 있으며, 각 파일에 대해 해당 속성의 값은 다릅니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The most common way to get the values of the properties of an object is to use the dot method.</source>
          <target state="translated">개체의 속성 값을 가져오는 가장 일반적인 방법은 점 메서드를 사용 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Type a reference to the object, such as a variable that contains the object, or a command that gets the object.</source>
          <target state="translated">개체를 포함 하는 변수 또는 개체를 가져오는 명령 등의 개체에 대 한 참조를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Then, type a dot (.) followed by the property name.</source>
          <target state="translated">점 (.) 뒤에 속성 이름을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the following command displays the value of the CreationTime property of the PowerShell.exe file.</source>
          <target state="translated">예를 들어 다음 명령은 PowerShell.exe 파일의 CreationTime 속성의 값을 표시합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The Get-ChildItem command returns a FileInfo object that represents the PowerShell.exe file.</source>
          <target state="translated">Get-childitem 명령은 PowerShell.exe 파일을 나타내는 FileInfo 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The command is enclosed in parentheses to make sure that it is executed before any properties are accessed.</source>
          <target state="translated">이 명령은 모든 속성에 액세스 하기 전에 실행 되도록 괄호로 묶여 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The Get-ChildItem command is followed by a dot and the name of the CreationTime property, as follows:</source>
          <target state="translated">Get-childitem 명령은 나옵니다. 점 및 CreationTime 속성의 이름을 다음과 같이 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can also save an object in a variable and then get its properties by using the dot method, as shown in the following example:</source>
          <target state="translated">개체를 변수에 저장할 수도 다음 다음 예제와 같이 점 메서드를 사용 하 여 해당 속성을 가져올 수 있습니다.:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also use the Select-Object and Format-List cmdlets to display the property values of an object.</source>
          <target state="translated">개체의 속성 값을 표시 하려면 Select-object 및 Format-list cmdlet을 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Select-Object and Format-List each have a Property parameter.</source>
          <target state="translated">Select-object 및 Format-list 각는 Property 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can use the Property parameter to specify one or more properties and their values.</source>
          <target state="translated">하나 이상의 속성 및 해당 값을 지정 하려면 Property 매개 변수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Or, you can use the wildcard character (<ph id="ph1">\*</ph>) to represent all the properties.</source>
          <target state="translated">또는 와일드 카드 문자를 사용할 수 있습니다 (<ph id="ph1">\*</ph>)를 나타내는 모든 속성.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, the following command displays the values of all the properties of the PowerShell.exe file.</source>
          <target state="translated">예를 들어 다음 명령은 PowerShell.exe 파일의 모든 속성의 값을 표시합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>STATIC PROPERTIES</source>
          <target state="translated">정적 속성</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can use the static properties of .NET classes in  Windows PowerShell.</source>
          <target state="translated">Windows PowerShell에서.NET 클래스의 정적 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Static properties are properties of class, unlike standard properties, which are properties of an object.</source>
          <target state="translated">정적 속성은 표준 속성과 달리, 개체의 속성 클래스의 속성입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To get the static properties of an class, use the Static parameter of the Get-Member cmdlet.</source>
          <target state="translated">클래스의 정적 속성을 가져오려면 Get-member cmdlet의 정적 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the static properties of the System.DateTime class.</source>
          <target state="translated">예를 들어 다음 명령은 System.DateTime 클래스의 정적 속성을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To get the value of a static property, use the following syntax.</source>
          <target state="translated">정적 속성의 값을 가져오려면 다음 구문을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the value of the UtcNow static property of the System.DateTime class.</source>
          <target state="translated">예를 들어 다음 명령은 System.DateTime 클래스의 UtcNow 정적 속성의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>PROPERTIES OF SCALAR OBJECTS AND COLLECTIONS</source>
          <target state="translated">스칼라 개체 및 컬렉션의 속성</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The properties of one ("scalar") object of a particular type are often different from the properties of a collection of objects of the same type.</source>
          <target state="translated">특정 형식의 하나 ("스칼라") 개체의 속성 형식이 같은 개체의 컬렉션의 속성에서 다른 많습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, every service has as DisplayName property, but a collection of services does not have a DisplayName property.</source>
          <target state="translated">예를 들어 DisplayName 속성으로 모든 서비스에 없는 서비스의 모음 DisplayName 속성입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Similarly, all collections have a Count property that tells how many objects are in the collection, but individual objects do not have a Count property.</source>
          <target state="translated">마찬가지로, 모든 컬렉션 컬렉션에 있는 개체의 수를 알려 주는 Count 속성이 있지만 개별 개체의 Count 속성 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Beginning in  Windows PowerShell 3.0,  Windows PowerShell tries to prevent scripting errors that result from the differing properties of scalar objects and collections.</source>
          <target state="translated">Windows PowerShell Windows PowerShell 3.0부터, 스칼라 개체 및 컬렉션의 서로 다른 속성에서 발생 하는 스크립팅 오류를 방지 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you submit a collection, but request a property that exists only on single ("scalar") objects,  Windows PowerShell returns the value of that property for every object in the collection.</source>
          <target state="translated">제출 하는 컬렉션을 단일 ("스칼라") 개체에 대해서만 존재 하는 속성을 요청할 경우 Windows PowerShell 컬렉션의 모든 개체에 대해 해당 속성의 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you request the Count or Length property of zero objects or of one object,  Windows PowerShell returns the correct value.</source>
          <target state="translated">0 개 또는 한 개체의 개수 또는 길이 속성을 요청 하는 경우 Windows PowerShell에 올바른 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the property exists on the individual objects and on the collection,  Windows PowerShell does not alter the result.</source>
          <target state="translated">개별 개체에 대 한 컬렉션에 속성이 있으면 Windows PowerShell 결과 변경 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This feature also works on methods of scalar objects and collections.</source>
          <target state="translated">이 기능은 스칼라 개체 및 컬렉션의 메서드에 에서도 작동합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see about_Methods.</source>
          <target state="translated">자세한 내용은 about_Methods를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, each service has a DisplayName property.</source>
          <target state="translated">예를 들어, 각 서비스 DisplayName 속성을 가집니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following command gets the value of the DisplayName property of the Audiosrv service.</source>
          <target state="translated">다음 명령은 Audiosrv 서비스의 DisplayName 속성의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, a collection or array of services does not have a DisplayName.</source>
          <target state="translated">그러나 컬렉션 또는 일련의 서비스에 없는 DisplayName 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following command tries to get the DisplayName property of all services in  Windows PowerShell 2.0.</source>
          <target state="translated">다음 명령은 Windows PowerShell 2.0에서 모든 서비스의 DisplayName 속성을 가져오려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Beginning in  Windows PowerShell 3.0, the same command returns the value of the DisplayName property of every service that Get-Service returns.</source>
          <target state="translated">Windows PowerShell 3.0부터 동일한 명령 Get 서비스가 반환 하는 모든 서비스의 DisplayName 속성의 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Conversely, a collection of two or more services has a Count property, which contains the number of objects in the collection.</source>
          <target state="translated">반대로, 두 개 이상의 서비스 컬렉션을 컬렉션의 개체 수를 포함 하는 횟수 속성을 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Individual services do not have a Count or Length property, as shown in this command in  Windows PowerShell 2.0.</source>
          <target state="translated">개별 서비스는 Windows PowerShell 2.0에서이 명령에 표시 된 것 처럼 개수 또는 길이 속성을 갖지 않습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Beginning in  Windows PowerShell 3.0, the command returns the correct Count value.</source>
          <target state="translated">이 명령은 Windows PowerShell 3.0부터, 올바른 개수 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>about_Methods</source>
          <target state="translated">about_methods</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>about_Objects</source>
          <target state="translated">about_Objects</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Get-Member</source>
          <target state="translated">Get-Member</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Select-Object</source>
          <target state="translated">Select-Object</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Format-List</source>
          <target state="translated">Format-List</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>