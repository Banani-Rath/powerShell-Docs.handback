<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">080cbfd63838472d9d5405e4b232cda1cc1d028a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\core-powershell\ise\How-to-Debug-Scripts-in-Windows-PowerShell-ISE.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6eae5c424a0dbf87afba453c233c8272de0d402</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to Debug Scripts in Windows PowerShell ISE</source>
          <target state="translated">Windows PowerShell ISE에서 스크립트를 디버깅하는 방법</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to Debug Scripts in Windows PowerShell ISE</source>
          <target state="translated">Windows PowerShell ISE에서 스크립트를 디버깅하는 방법</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes how to debug scripts on a local computer by using the Windows PowerShellÂ® Integrated Scripting Environment (ISE) visual debugging features.</source>
          <target state="translated">이 항목에서는 Windows PowerShell(R) ISE(통합 스크립팅 환경) 시각적 디버깅 기능을 사용하여 로컬 컴퓨터에서 스크립트를 디버그하는 방법을 설명합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to manage breakpoints<ept id="p1">](#bkmk_1)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>How to manage a debugging session<ept id="p2">](#bkmk_2)</ept><ph id="ph2">
</ph><bpt id="p3">[</bpt>How to step over, step into, and step out while debugging<ept id="p3">](#bkmk_3)</ept><ph id="ph3">
</ph><bpt id="p4">[</bpt>How to display the values of variables while debugging<ept id="p4">](#bkmk_4)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>중단점을 관리하는 방법<ept id="p1">](#bkmk_1)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>디버깅 세션을 관리하는 방법<ept id="p2">](#bkmk_2)</ept><ph id="ph2">
</ph><bpt id="p3">[</bpt>디버그하는 동안 프로시저 단위 실행, 한 단계씩 코드 실행 및 프로시저 나가기를 수행하는 방법<ept id="p3">](#bkmk_3)</ept><ph id="ph3">
</ph><bpt id="p4">[</bpt>디버그하는 동안 변수 값을 표시하는 방법<ept id="p4">](#bkmk_4)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>How to manage breakpoints</source>
          <target state="translated">중단점을 관리하는 방법</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A breakpoint is a designated spot in a script where you would like operation to pause so that you can examine the current state of the variables and the environment in which your script is running.</source>
          <target state="translated">중단점은 변수의 현재 상태와 스크립트를 실행하는 환경을 검사할 수 있도록 작업을 일시 중지하려는 스크립트의 지정된 지점입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Once your script is paused by a breakpoint, you can run commands in the Console Pane to examine the state of your script.</source>
          <target state="translated">스크립트가 중단점에서 일시 중지되면 콘솔 창에서 명령을 실행하여 스크립트 상태를 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can output variables or run other commands.</source>
          <target state="translated">변수를 출력하거나 다른 명령을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can even modify the value of any variables that are visible to the context of the currently running script.</source>
          <target state="translated">현재 실행 중인 스크립트의 컨텍스트에 표시되는 모든 변수의 값을 수정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>After you have examined what you want to see, you can resume operation of the script.</source>
          <target state="translated">보려는 사항을 검사한 후 스크립트 작업을 다시 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can set three types of breakpoints in the Windows PowerShell debugging environment:</source>
          <target state="translated">Windows PowerShell 디버깅 환경에서는 다음 세 가지 유형의 중단점을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Line breakpoint<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>줄 중단점<ept id="p1">**</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The script pauses when the designated line is reached during the operation of the script</source>
          <target state="translated">스크립트 작업 중 지정된 줄에 도달하면 스크립트가 일시 중지됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Variable breakpoint.</source>
          <target state="translated">변수 중단점.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The script pauses whenever the designated variable’s value changes.</source>
          <target state="translated">지정된 변수의 값이 변경될 때마다 스크립트가 일시 중지됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Command breakpoint.</source>
          <target state="translated">명령 중단점.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The script pauses whenever the designated command is about to be run during the operation of the script.</source>
          <target state="translated">스크립트 작업 중 지정된 명령을 실행하려 할 때마다 스크립트가 일시 중지됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It can include parameters to further filter the breakpoint to only the operation you want.</source>
          <target state="translated">매개 변수를 포함하여 중단점을 원하는 작업으로만 추가로 필터링할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The command can also be a function you created.</source>
          <target state="translated">명령은 사용자가 만든 함수일 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Of these, in the Windows PowerShell ISE debugging environment, only line breakpoints can be set by using the menu or the keyboard shortcuts.</source>
          <target state="translated">Windows PowerShell ISE 디버깅 환경에서는 이 중에서 줄 중단점만 메뉴 또는 바로 가기 키를 통해 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The other two types of breakpoints can be set, but they are set from the Console Pane by using the <bpt id="p1">[</bpt>Set-PSBreakpoint [m2]<ept id="p1">](https://technet.microsoft.com/en-us/library/88d2d9ad-17dc-44ae-99aa-f841125b9dc8)</ept> cmdlet.</source>
          <target state="translated">다른 두 유형의 중단점도 설정할 수 있지만 콘솔 창에서 <bpt id="p1">[</bpt>Set-PSBreakpoint [m2]<ept id="p1">](https://technet.microsoft.com/en-us/library/88d2d9ad-17dc-44ae-99aa-f841125b9dc8)</ept> cmdlet을 통해 설정됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This section describes how you can perform debugging tasks in Windows PowerShell ISE by using the menus where available, and perform a wider range of commands from the Console Pane by using scripting.</source>
          <target state="translated">이 섹션에서는 Windows PowerShell ISE에서 메뉴(사용할 수 있을 경우)를 사용하여 디버깅 작업을 수행하는 방법과 콘솔 창에서 스크립팅을 사용하여 보다 다양한 명령을 수행하는 방법을 설명합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To set a breakpoint</source>
          <target state="translated">중단점을 설정하려면</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A breakpoint can be set in a script only after it has been saved.</source>
          <target state="translated">스크립트를 저장한 후에만 스크립트에 중단점을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Right<ph id="ph1">\-</ph>click the line where you want to set a line breakpoint, and then click <bpt id="p1">**</bpt>Toggle Breakpoint<ept id="p1">**</ept>.</source>
          <target state="translated">줄 중단점을 설정할 줄을 마우스 오른쪽 단추로<ph id="ph1">\-</ph>클릭한 다음 <bpt id="p1">**</bpt>중단점 설정/해제<ept id="p1">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Or, click the line where you want to set a line breakpoint, and press <bpt id="p1">**</bpt>F9<ept id="p1">**</ept> or, on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu, click <bpt id="p3">**</bpt>Toggle Breakpoint<ept id="p3">**</ept>.</source>
          <target state="translated">또는 줄 중단점을 설정할 줄을 클릭한 다음 <bpt id="p1">**</bpt>F9<ept id="p1">**</ept> 키를 누르거나 <bpt id="p2">**</bpt>디버그<ept id="p2">**</ept> 메뉴에서 <bpt id="p3">**</bpt>중단점 설정/해제<ept id="p3">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following script is an example of how you can set a variable breakpoint from the Console Pane by using the <bpt id="p1">[</bpt>Set-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/6afd5d2c-a285-4796-8607-3cbf49471420)</ept> cmdlet.</source>
          <target state="translated">다음 스크립트는 <bpt id="p1">[</bpt>Set-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/6afd5d2c-a285-4796-8607-3cbf49471420)</ept> cmdlet을 사용하여 콘솔 창에서 변수 중단점을 설정하는 방법의 예입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>List all breakpoints</source>
          <target state="translated">모든 중단점 표시</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Displays all breakpoints in the current Windows PowerShellÂ® session.</source>
          <target state="translated">현재 Windows PowerShell(R) 세션에 있는 중단점을 모두 표시합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>List Breakpoints<ept id="p2">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>디버그<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>중단점 목록<ept id="p2">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following script is an example of how you can list all breakpoints from the Console Pane by using the <bpt id="p1">[</bpt>Get-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/0bf48936-00ab-411c-b5e0-9b10a812a3c6)</ept> cmdlet.</source>
          <target state="translated">다음 스크립트는 <bpt id="p1">[</bpt>Get-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/0bf48936-00ab-411c-b5e0-9b10a812a3c6)</ept> cmdlet을 사용하여 콘솔 창에서 모든 중단점을 표시하는 방법의 예입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Remove a breakpoint</source>
          <target state="translated">중단점 제거</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Removing a breakpoint deletes it.</source>
          <target state="translated">중단점을 제거하면 삭제됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you think you might want to use it again later, consider <bpt id="p1">[</bpt>disabling<ept id="p1">](#bkmk_disable)</ept> it instead.</source>
          <target state="translated">나중에 다시 사용할 수도 있는 경우 대신 <bpt id="p1">[</bpt>사용하지 않도록 설정<ept id="p1">](#bkmk_disable)</ept>하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Right<ph id="ph1">\-</ph>click the line where you want to remove a breakpoint, and then click <bpt id="p1">**</bpt>Toggle Breakpoint<ept id="p1">**</ept>.</source>
          <target state="translated">중단점을 제거할 줄을 마우스 오른쪽 단추로<ph id="ph1">\-</ph>클릭한 다음 <bpt id="p1">**</bpt>중단점 설정/해제<ept id="p1">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Or, click the line where you want to remove a breakpoint, and on the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Toggle Breakpoint<ept id="p2">**</ept>.</source>
          <target state="translated">또는 중단점을 제거할 줄을 클릭한 다음 <bpt id="p1">**</bpt>디버그<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>중단점 설정/해제<ept id="p2">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following script is an example of how to remove a breakpoint with a specified ID from the Console Pane by using the <bpt id="p1">[</bpt>Remove-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/4c877a80-0ea0-4790-9281-88c08ef0ddd6)</ept> cmdlet.</source>
          <target state="translated">다음 스크립트는 <bpt id="p1">[</bpt>Remove-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/4c877a80-0ea0-4790-9281-88c08ef0ddd6)</ept> cmdlet을 사용하여 콘솔 창에서 지정된 ID의 중단점을 제거하는 방법의 예입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Remove All Breakpoints</source>
          <target state="translated">모든 중단점 제거</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To remove all breakpoints defined in the current session, on the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Remove All Breakpoints<ept id="p2">**</ept>.</source>
          <target state="translated">현재 세션에서 정의된 모든 중단점을 제거하려면 <bpt id="p1">**</bpt>디버그<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>모든 중단점 제거<ept id="p2">**</ept>를 클릭합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following script is an example of how to remove all breakpoints from the Console Pane by using the <bpt id="p1">[</bpt>Remove-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/4c877a80-0ea0-4790-9281-88c08ef0ddd6)</ept> cmdlet.</source>
          <target state="translated">다음 스크립트는 <bpt id="p1">[</bpt>Remove-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/4c877a80-0ea0-4790-9281-88c08ef0ddd6)</ept> cmdlet을 사용하여 콘솔 창에서 모든 중단점을 제거하는 방법의 예입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Disable a Breakpoint</source>
          <target state="translated">중단점 사용 안 함</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Disabling a breakpoint does not remove it; it turns it off until it is enabled.</source>
          <target state="translated">중단점을 사용하지 않도록 설정할 경우 중단점이 제거되지 않고, 사용하도록 설정할 때까지 해제됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To disable a specific line breakpoint, right<ph id="ph1">\-</ph>click the line where you want to disable a breakpoint, and then click <bpt id="p1">**</bpt>Disable Breakpoint<ept id="p1">**</ept>.</source>
          <target state="translated">특정 줄 중단점을 사용하지 않도록 설정하려면 중단점을 사용하지 않도록 설정할 줄을 마우스 오른쪽 단추로<ph id="ph1">\-</ph>클릭한 다음 <bpt id="p1">**</bpt>중단점 사용 안 함<ept id="p1">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Or, click the line where you want to disable a breakpoint, and press <bpt id="p1">**</bpt>F9<ept id="p1">**</ept> or, on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu, click <bpt id="p3">**</bpt>Disable Breakpoint<ept id="p3">**</ept>.</source>
          <target state="translated">또는 중단점을 사용하지 않도록 설정할 줄을 클릭한 다음 <bpt id="p1">**</bpt>F9<ept id="p1">**</ept> 키를 누르거나 <bpt id="p2">**</bpt>디버그<ept id="p2">**</ept> 메뉴에서 <bpt id="p3">**</bpt>중단점 사용 안 함<ept id="p3">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following script is an example of how you can remove a breakpoint with a specified ID from the Console Pane by using the <bpt id="p1">[</bpt>Disable-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/d4974e9b-0aaa-4e20-b87f-f599a413e4e8)</ept> cmdlet.</source>
          <target state="translated">다음 스크립트는 <bpt id="p1">[</bpt>Disable-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/d4974e9b-0aaa-4e20-b87f-f599a413e4e8)</ept> cmdlet을 사용하여 콘솔 창에서 지정된 ID의 중단점을 제거하는 방법의 예입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Disable All Breakpoints</source>
          <target state="translated">모든 중단점 사용 안 함</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Disabling a breakpoint does not remove it; it turns it off until it is enabled.</source>
          <target state="translated">중단점을 사용하지 않도록 설정할 경우 중단점이 제거되지 않고, 사용하도록 설정할 때까지 해제됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To disable all breakpoints in the current session, on the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Disable all Breakpoints<ept id="p2">**</ept>.</source>
          <target state="translated">현재 세션의 모든 중단점을 사용하지 않도록 설정하려면 <bpt id="p1">**</bpt>디버그<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>모든 중단점 사용 안 함<ept id="p2">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following script is an example of how you can disable all breakpoints from the Console Pane by using the <bpt id="p1">[</bpt>Disable-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/d4974e9b-0aaa-4e20-b87f-f599a413e4e8)</ept> cmdlet.</source>
          <target state="translated">다음 스크립트는 <bpt id="p1">[</bpt>Disable-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/d4974e9b-0aaa-4e20-b87f-f599a413e4e8)</ept> cmdlet을 사용하여 콘솔 창에서 모든 중단점을 사용하지 않도록 설정하는 방법의 예입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Enable a Breakpoint</source>
          <target state="translated">중단점 사용</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To enable a specific breakpoint, right<ph id="ph1">\-</ph>click the line where you want to enable a breakpoint, and then click <bpt id="p1">**</bpt>Enable Breakpoint<ept id="p1">**</ept>.</source>
          <target state="translated">특정 중단점을 사용하도록 설정하려면 중단점을 사용하도록 설정할 줄을 마우스 오른쪽 단추로<ph id="ph1">\-</ph>클릭한 다음 <bpt id="p1">**</bpt>중단점 사용<ept id="p1">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Or, click the line where you want to enable a breakpoint, and then press <bpt id="p1">**</bpt>F9<ept id="p1">**</ept> or, on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu, click <bpt id="p3">**</bpt>Enable Breakpoint<ept id="p3">**</ept>.</source>
          <target state="translated">또는 중단점을 사용하도록 설정할 줄을 클릭한 다음 <bpt id="p1">**</bpt>F9<ept id="p1">**</ept> 키를 누르거나 <bpt id="p2">**</bpt>디버그<ept id="p2">**</ept> 메뉴에서 <bpt id="p3">**</bpt>중단점 사용<ept id="p3">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following script is an example of how you can enable specific breakpoints from the Console Pane by using the <bpt id="p1">[</bpt>Enable-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/739e1091-3b3f-405f-a428-bec7543e5df0)</ept> cmdlet.</source>
          <target state="translated">다음 스크립트는 <bpt id="p1">[</bpt>Enable-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/739e1091-3b3f-405f-a428-bec7543e5df0)</ept> cmdlet을 사용하여 콘솔 창에서 특정 중단점을 사용하도록 설정하는 방법의 예입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Enable All Breakpoints</source>
          <target state="translated">모든 중단점 사용</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To enable all breakpoints defined in the current session, on the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Enable all Breakpoints<ept id="p2">**</ept>.</source>
          <target state="translated">현재 세션에서 정의된 모든 중단점을 사용하도록 설정하려면 <bpt id="p1">**</bpt>디버그<ept id="p1">**</ept> 메뉴에서 <bpt id="p2">**</bpt>모든 중단점 사용<ept id="p2">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following script is an example of how you can enable all breakpoints from the Console Pane by using the <bpt id="p1">[</bpt>Enable-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/739e1091-3b3f-405f-a428-bec7543e5df0)</ept> cmdlet.</source>
          <target state="translated">다음 스크립트는 <bpt id="p1">[</bpt>Enable-PSBreakpoint<ept id="p1">](https://technet.microsoft.com/en-us/library/739e1091-3b3f-405f-a428-bec7543e5df0)</ept> cmdlet을 사용하여 콘솔 창에서 모든 중단점을 사용하도록 설정하는 방법의 예입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>How to manage a debugging session</source>
          <target state="translated">디버깅 세션을 관리하는 방법</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Before you start debugging, you must set one or more breakpoints.</source>
          <target state="translated">디버깅을 시작하기 전에 중단점을 하나 이상 설정해야 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You cannot set a breakpoint unless the script that you want to debug is saved.</source>
          <target state="translated">디버그하려는 스크립트를 저장하지 않은 경우 중단점을 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For directions on of how to set a breakpoint, see <bpt id="p1">[</bpt>How to manage breakpoints<ept id="p1">](#bkmk_1)</ept> or <bpt id="p2">[</bpt>Set-PSBreakpoint<ept id="p2">](https://technet.microsoft.com/en-us/library/6afd5d2c-a285-4796-8607-3cbf49471420)</ept>.</source>
          <target state="translated">중단점을 설정하는 방법에 대한 지침은 <bpt id="p1">[</bpt>중단점을 관리하는 방법<ept id="p1">](#bkmk_1)</ept> 또는 <bpt id="p2">[</bpt>Set-PSBreakpoint<ept id="p2">](https://technet.microsoft.com/en-us/library/6afd5d2c-a285-4796-8607-3cbf49471420)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>After you start debugging, you cannot edit a script until you stop debugging.</source>
          <target state="translated">디버깅을 시작한 후에는 디버깅을 중지할 때까지 스크립트를 편집할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A script that has one or more breakpoints set is automatically saved before it is run.</source>
          <target state="translated">중단점이 하나 이상 설정되어 있는 스크립트는 실행되기 전에 자동으로 저장됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To start debugging</source>
          <target state="translated">디버깅을 시작하려면</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> or, on the toolbar, click the <bpt id="p2">**</bpt>Run Script<ept id="p2">**</ept> icon, or on the <bpt id="p3">**</bpt>Debug<ept id="p3">**</ept> menu click <bpt id="p4">**</bpt>Run<ph id="ph1">\/</ph>Continue<ept id="p4">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 키를 누르거나, 도구 모음에서 <bpt id="p2">**</bpt>스크립트 실행<ept id="p2">**</ept> 아이콘을 클릭하거나, <bpt id="p3">**</bpt>디버그<ept id="p3">**</ept> 메뉴에서 <bpt id="p4">**</bpt>실행<ph id="ph1">\/</ph>계속<ept id="p4">**</ept>을 클릭합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The script runs until it encounters the first breakpoint.</source>
          <target state="translated">스크립트가 첫 번째 중단점에 도달할 때까지 실행됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It pauses operation there and highlights the line on which it paused.</source>
          <target state="translated">여기서 작업이 일시 중지되고, 일시 중지된 줄이 강조 표시됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To continue debugging</source>
          <target state="translated">디버깅을 계속하려면</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> or, on the toolbar, click the <bpt id="p2">**</bpt>Run Script<ept id="p2">**</ept> icon, or on the <bpt id="p3">**</bpt>Debug<ept id="p3">**</ept> menu, click <bpt id="p4">**</bpt>Run<ph id="ph1">\/</ph>Continue<ept id="p4">**</ept> or, in the Console Pane, type <bpt id="p5">**</bpt>C<ept id="p5">**</ept> and then press <bpt id="p6">**</bpt>ENTER<ept id="p6">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 키를 누르거나, 도구 모음에서 <bpt id="p2">**</bpt>스크립트 실행<ept id="p2">**</ept> 아이콘을 클릭하거나, <bpt id="p3">**</bpt>디버그<ept id="p3">**</ept> 메뉴에서 <bpt id="p4">**</bpt>실행<ph id="ph1">\/</ph>계속<ept id="p4">**</ept>을 클릭하거나, 콘솔 창에서 <bpt id="p5">**</bpt>C<ept id="p5">**</ept>를 입력하고 <bpt id="p6">**</bpt>Enter<ept id="p6">**</ept> 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This causes the script to continue running to the next breakpoint or to the end of the script if no further breakpoints are encountered.</source>
          <target state="translated">이렇게 하면 스크립트가 다음 중단점이나 더 이상 중단점이 없는 경우 스크립트의 끝까지 계속 실행됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To view the call stack</source>
          <target state="translated">호출 스택을 보려면</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The call stack displays the current run location in the script.</source>
          <target state="translated">호출 스택은 스크립트에서 현재 실행 위치를 표시합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the script is running in a function that was called by a different function, then that is represented in the display by additional rows in the output.</source>
          <target state="translated">다른 함수에 의해 호출된 함수에서 스크립트를 실행하는 경우 출력에서 추가 행으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The bottom<ph id="ph1">\-</ph>most row displays the original script and the line in it in which a function was called.</source>
          <target state="translated">맨<ph id="ph1">\-</ph>아래에 있는 행은 원래 스크립트와 함수가 호출된 스크립트의 줄을 표시합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The next line up shows that function and the line in it in which another function might have been called.</source>
          <target state="translated">위에 있는 다음 줄은 해당 함수와 다른 함수가 호출되었을 수 있는 함수의 줄을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The top<ph id="ph1">\-</ph>most row shows the current context of the current line on which the breakpoint is set.</source>
          <target state="translated">맨<ph id="ph1">\-</ph>위에 있는 행은 중단점이 설정된 현재 줄의 현재 컨텍스트를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>While paused, to see the current call stack, press <bpt id="p1">**</bpt>CTRL<ph id="ph1">\+</ph>SHIFT<ph id="ph2">\+</ph>D<ept id="p1">**</ept> or, on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu, click <bpt id="p3">**</bpt>Display Call Stack<ept id="p3">**</ept> or, in the Console Pane, type <bpt id="p4">**</bpt>K<ept id="p4">**</ept> and then press <bpt id="p5">**</bpt>ENTER<ept id="p5">**</ept>.</source>
          <target state="translated">일시 중지된 동안 현재 호출 스택을 보려면 <bpt id="p1">**</bpt>Ctrl<ph id="ph1">\+</ph>Shift<ph id="ph2">\+</ph>D<ept id="p1">**</ept>를 누르거나, <bpt id="p2">**</bpt>디버그<ept id="p2">**</ept> 메뉴에서 <bpt id="p3">**</bpt>호출 스택 표시<ept id="p3">**</ept>를 클릭하거나, 콘솔 창에서 <bpt id="p4">**</bpt>K<ept id="p4">**</ept>를 입력하고 <bpt id="p5">**</bpt>Enter<ept id="p5">**</ept> 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To stop debugging</source>
          <target state="translated">디버깅을 중지하려면</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>SHIFT<ph id="ph1">\-</ph>F5<ept id="p1">**</ept> or, on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu, click <bpt id="p3">**</bpt>Stop Debugger<ept id="p3">**</ept>, or, in the Console Pane, type <bpt id="p4">**</bpt>Q<ept id="p4">**</ept> and then press <bpt id="p5">**</bpt>ENTER<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Shift<ph id="ph1">\-</ph>F5<ept id="p1">**</ept>를 누르거나, <bpt id="p2">**</bpt>디버그<ept id="p2">**</ept> 메뉴에서 <bpt id="p3">**</bpt>디버거 중지<ept id="p3">**</ept>를 클릭하거나, 콘솔 창에서 <bpt id="p4">**</bpt>Q<ept id="p4">**</ept>를 입력하고 <bpt id="p5">**</bpt>Enter<ept id="p5">**</ept> 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>How to step over, step into, and step out while debugging</source>
          <target state="translated">디버그하는 동안 프로시저 단위 실행, 한 단계씩 코드 실행 및 프로시저 나가기를 수행하는 방법</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Stepping is the process of running one statement at a time.</source>
          <target state="translated">한 단계씩 코드 실행은 한 번에 하나씩 문을 실행하는 프로세스입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can stop on a line of code, and examine the values of variables and the state of the system.</source>
          <target state="translated">코드 줄에서 중지하고 변수 값과 시스템 상태를 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following table describes common debugging tasks such as stepping over, stepping into, and stepping out.</source>
          <target state="translated">다음 표에서는 프로시저 단위 실행, 한 단계씩 코드 실행, 프로시저 나가기 등의 일반적인 디버깅 작업에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Debugging Task</source>
          <target state="translated">디버깅 작업</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>How to accomplish it in PowerShell ISE</source>
          <target state="translated">PowerShell ISE에서 작업을 수행하는 방법</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Step Into</source>
          <target state="translated">한 단계씩 코드 실행</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Executes the current statement and then stops at the next statement.</source>
          <target state="translated">현재 문을 실행하고 다음 문에서 중지합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the current statement is a function or script call, then the debugger steps into that function or script, otherwise it stops at the next statement.</source>
          <target state="translated">현재 문이 함수 또는 스크립트 호출이면 디버거가 해당 함수나 스크립트로 한 단계씩 코드를 실행하고, 그렇지 않으면 다음 문에서 중지합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>F11<ept id="p1">**</ept> or, on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu, click <bpt id="p3">**</bpt>Step Into<ept id="p3">**</ept>, or in the Console Pane, type <bpt id="p4">**</bpt>S<ept id="p4">**</ept> and press <bpt id="p5">**</bpt>ENTER<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>F11<ept id="p1">**</ept> 키를 누르거나, <bpt id="p2">**</bpt>디버그<ept id="p2">**</ept> 메뉴에서 <bpt id="p3">**</bpt>한 단계씩 코드 실행<ept id="p3">**</ept>을 클릭하거나, 콘솔 창에서 <bpt id="p4">**</bpt>S<ept id="p4">**</ept>를 입력하고 <bpt id="p5">**</bpt>Enter<ept id="p5">**</ept> 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Step Over</source>
          <target state="translated">프로시저 단위 실행</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Executes the current statement and then stops at the next statement.</source>
          <target state="translated">현재 문을 실행하고 다음 문에서 중지합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If the current statement is a function or script call then the debugger executes the whole function or script, and it stops at the next statement after the function call.</source>
          <target state="translated">현재 문이 함수 또는 스크립트 호출이면 디버거가 전체 함수나 스크립트를 실행하고, 함수 호출 후 다음 문에서 중지합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>F10<ept id="p1">**</ept> or, on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu, click <bpt id="p3">**</bpt>Step Over<ept id="p3">**</ept>, or in the Console Pane, type <bpt id="p4">**</bpt>V<ept id="p4">**</ept> and press <bpt id="p5">**</bpt>ENTER<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>F10<ept id="p1">**</ept> 키를 누르거나, <bpt id="p2">**</bpt>디버그<ept id="p2">**</ept> 메뉴에서 <bpt id="p3">**</bpt>프로시저 단위 실행<ept id="p3">**</ept>을 클릭하거나, 콘솔 창에서 <bpt id="p4">**</bpt>V<ept id="p4">**</ept>를 입력하고 <bpt id="p5">**</bpt>Enter<ept id="p5">**</ept> 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Step Out</source>
          <target state="translated">프로시저 나가기</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Steps out of the current function and up one level if the function is nested.</source>
          <target state="translated">현재 함수에서 나가고, 함수가 중첩된 경우에는 한 수준 위로 올라갑니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If in the main body, the script is executed to the end, or to the next breakpoint.</source>
          <target state="translated">본문에 있는 경우 스크립트가 끝 또는 다음 중단점까지 실행됩니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The skipped statements are executed, but not stepped through.</source>
          <target state="translated">건너뛴 문은 실행되지만 단계별로 실행되지는 않습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>SHIFT<ph id="ph1">\+</ph>F11<ept id="p1">**</ept>, or on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu, click <bpt id="p3">**</bpt>Step Out<ept id="p3">**</ept>, or in the Console Pane, type <bpt id="p4">**</bpt>O<ept id="p4">**</ept> and press <bpt id="p5">**</bpt>ENTER<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>Shift<ph id="ph1">\+</ph>F11<ept id="p1">**</ept>을 누르거나, <bpt id="p2">**</bpt>디버그<ept id="p2">**</ept> 메뉴에서 <bpt id="p3">**</bpt>프로시저 나가기<ept id="p3">**</ept>를 클릭하거나, 콘솔 창에서 <bpt id="p4">**</bpt>O<ept id="p4">**</ept>를 입력하고 <bpt id="p5">**</bpt>Enter<ept id="p5">**</ept> 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Continue</source>
          <target state="translated">계속</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Continues execution to the end, or to the next breakpoint.</source>
          <target state="translated">끝이나 다음 중단점까지 실행을 계속합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The skipped functions and invocations are executed, but not stepped through.</source>
          <target state="translated">건너뛴 함수 및 호출은 실행되지만 단계별로 실행되지는 않습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> or, on the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu, click <bpt id="p3">**</bpt>Run<ph id="ph1">\/</ph>Continue<ept id="p3">**</ept>, or in the Console Pane, type <bpt id="p4">**</bpt>C<ept id="p4">**</ept> and press <bpt id="p5">**</bpt>ENTER<ept id="p5">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 키를 누르거나, <bpt id="p2">**</bpt>디버그<ept id="p2">**</ept> 메뉴에서 <bpt id="p3">**</bpt>실행<ph id="ph1">\/</ph>계속<ept id="p3">**</ept>을 클릭하거나, 콘솔 창에서 <bpt id="p4">**</bpt>C<ept id="p4">**</ept>를 입력하고 <bpt id="p5">**</bpt>Enter<ept id="p5">**</ept> 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>How to display the values of variables while debugging</source>
          <target state="translated">디버그하는 동안 변수 값을 표시하는 방법</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can display the current values of variables in the script as you step through the code.</source>
          <target state="translated">코드를 단계별로 실행할 때 스크립트에서 변수의 현재 값을 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To display the values of standard variables</source>
          <target state="translated">표준 변수의 값을 표시하려면</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Use one of the following methods:</source>
          <target state="translated">다음 방법 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In the Script Pane, hover over the variable to display its value as a tool tip.</source>
          <target state="translated">스크립트 창에서 변수를 마우스로 가리켜 해당 값을 도구 설명으로 표시합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In the Console Pane, type the variable name and press <bpt id="p1">**</bpt>ENTER<ept id="p1">**</ept>.</source>
          <target state="translated">콘솔 창에서 변수 이름을 입력하고 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>All panes in ISE are always in the same scope.</source>
          <target state="translated">ISE에서 모든 창은 항상 동일한 범위입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Therefore, while you are debugging a script, the commands that you type in the Console Pane run in script scope.</source>
          <target state="translated">따라서 스크립트를 디버그하는 동안 콘솔 창에 입력한 명령은 스크립트 범위에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This allows you to use the Console Pane to find the values of variables and call functions that are defined only in the script.</source>
          <target state="translated">따라서 콘솔 창을 사용하여 변수 값을 찾고 스크립트에만 정의되어 있는 함수를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>To display the values of automatic variables</source>
          <target state="translated">자동 변수의 값을 표시하려면</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can use the preceding method to display the value of almost all variables while you are debugging a script.</source>
          <target state="translated">앞에서 설명한 방법을 사용하면 스크립트를 디버그하는 동안 거의 모든 변수의 값을 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>However, these methods do not work for the following automatic variables.</source>
          <target state="translated">그러나 다음과 같은 자동 변수에는 이러한 방법을 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>$Input</source>
          <target state="translated">$Input</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>$MyInvocation</source>
          <target state="translated">$MyInvocation</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>$PSBoundParameters</source>
          <target state="translated">$PSBoundParameters</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>$Args</source>
          <target state="translated">$Args</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If you try to display the value of any of these variables, you get the value of that variable for in an internal pipeline the debugger uses, not the value of the variable in the script.</source>
          <target state="translated">이러한 변수의 값을 표시하려는 경우 스크립트의 변수 값이 아니라 디버거가 사용하는 내부 파이프라인의 해당 변수 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You can work around this for a few variables ($<ph id="ph1">\_</ph>, $Input, $MyInvocation, $PSBoundParameters, and $Args) by using the following method:</source>
          <target state="translated">몇 가지 변수($<ph id="ph1">\_</ph>, $Input, $MyInvocation, $PSBoundParameters 및 $Args)의 경우 다음과 같은 방법으로 이 문제를 해결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In the script, assign the value of the automatic variable to a new variable.</source>
          <target state="translated">스크립트에서 자동 변수의 값을 새 변수에 할당합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Display the value of the new variable, either by hovering over the new variable in the Script Pane, or by typing the new variable in the Console Pane.</source>
          <target state="translated">스크립트 창에서 새 변수를 마우스로 가리키거나 콘솔 창에서 새 변수를 입력하여 새 변수의 값을 표시합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For example, to display the value of the $MyInvocation variable, in the script, assign the value to a new variable, such as $scriptname, and then hover over or type the $scriptname variable to display its value.</source>
          <target state="translated">예를 들어 $MyInvocation 변수의 값을 표시하려면 스크립트에서 $scriptname 등의 새 변수에 값을 할당한 다음 $scriptname 변수를 마우스로 가리키거나 입력하여 해당 값을 표시합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Using the Windows PowerShell ISE</source>
          <target state="translated">Windows PowerShell ISE 사용</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>