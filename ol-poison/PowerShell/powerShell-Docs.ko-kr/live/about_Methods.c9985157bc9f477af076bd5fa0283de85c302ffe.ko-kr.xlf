<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d59635115104ea0d446e96863147805402a802b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da528ad56c762ad7c9c2abd8777cc6e758400983</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">353d62fac859ec6df86fc2836233a7e9182defea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>about_methods</source>
          <target state="translated">about_methods</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About methods</source>
          <target state="translated">방법에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_methods</source>
          <target state="translated">about_methods</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_methods</source>
          <target state="translated">about_methods</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use methods to perform actions on objects in  Windows PowerShell�.</source>
          <target state="translated">Windows PowerShell의에서 개체에서 작업을 수행할 메서드를 사용 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses objects to represent the items in data stores or the state of the computer.</source>
          <target state="translated">Windows PowerShell 개체를 사용 하 여 데이터 저장소 또는 컴퓨터의 상태에 있는 항목을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, FileInfo objects represent the files in file system drives and ProcessInfo objects represent the processes on the computer.</source>
          <target state="translated">예를 들어 FileInfo 개체 파일 시스템 드라이브에서 파일 나타내고 ProcessInfo 개체는 컴퓨터에서 프로세스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Objects have properties, which store data about the object, and methods that let you change the object.</source>
          <target state="translated">개체를 개체에 대 한 데이터를 저장 하는 속성 및 개체를 변경할 수 있도록 하는 메서드를 가집니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A "method" is a set of instructions that specify an action you can perform on the object.</source>
          <target state="translated">"Method"은 개체에서 수행할 수 있는 하는 동작을 지정 하는 명령 집합입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, the FileInfo object includes the CopyTo method that copies the file that the FileInfo object represents.</source>
          <target state="translated">예를 들어 FileInfo 개체는 FileInfo 개체를 나타내는 파일을 복사 하는 CopyTo 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To get the methods of any object, use the Get-Member cmdlet.</source>
          <target state="translated">모든 개체의 메서드를 가져오려면 Get-member cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use its MemberType property with a value of "Method".</source>
          <target state="translated">해당 MemberType 속성을 사용 하 여 값이 "Method"입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following command gets the methods of process objects.</source>
          <target state="translated">다음 명령은 프로세스 개체의 메서드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To perform or "invoke" a method of an object, type a dot (.), the method name, and a set of parentheses "()".</source>
          <target state="translated">를 수행 하거나 개체의 메서드 "호출" 점 (.), 메서드 이름 및 괄호 "()"를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the method has arguments, place the argument values inside the parentheses.</source>
          <target state="translated">메서드에 인수가 괄호 안에 인수 값을 배치 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The parentheses are required for every method call, even when there are no arguments.</source>
          <target state="translated">괄호는 인수가 없는 경우에 모든 메서드 호출에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the following command invokes the Kill method of processes to end the Notepad process on the computer.</source>
          <target state="translated">예를 들어, 다음 명령을 컴퓨터에서 메모장 프로세스를 종료 하는 프로세스의 Kill 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a result, the instance of Notepad closes.</source>
          <target state="translated">결과적으로, 메모장의 인스턴스를 닫습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>(The Get-Process command is enclosed in parentheses to insure that it runs before the Kill method is invoked.</source>
          <target state="translated">(Get-process 명령은 Kill 메서드를 호출 하기 전에 실행 되도록 괄호로 묶여 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another very useful process is the Split method of strings.</source>
          <target state="translated">매우 유용한 다른 프로세스는 분할 방법 문자열입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The split method takes a delimiter character argument that tells the method where to split the string.</source>
          <target state="translated">Split 메서드는 메서드가 문자열을 분할 하는 위치를 알려 주는 구분 기호 문자 인수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>As shown in the previous examples, you can invoke a method on an object that you get by using a command or an object in a variable.</source>
          <target state="translated">이전 예제에서와 같이 명령을 사용 하 여 얻을 수 있는 개체 또는 변수에 개체에서 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Starting in  Windows PowerShell 4.0, method invocation by using dynamic method names is supported.</source>
          <target state="translated">Windows PowerShell 4.0부터, 동적 메서드 이름을 사용 하 여 메서드 호출 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>LEARNING ABOUT METHODS</source>
          <target state="translated">방법에 대 한 학습</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To find definitions of the methods of an object, go to help topic for the object type in MSDN and look for its methods page.</source>
          <target state="translated">개체의 메서드 정의 찾으려면 도움말 MSDN에 개체 유형에 대 한 항목을 찾아서 해당 방법 페이지를 이동 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, the following page describes the methods of process objects (System.Diagnostics.Process).</source>
          <target state="translated">예를 들어, 다음 페이지는 프로세스 개체 (System.Diagnostics.Process)의 메서드를 설명합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To determine the arguments of a method, review the method definition, which is like the syntax diagram of a  Windows PowerShell cmdlet.</source>
          <target state="translated">메서드의 인수를 확인 하려면 Windows PowerShell cmdlet의 구문 다이어그램 유사한 메서드 정의 검토 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A method definition might have one or more method signatures, which are like the parameter sets of  Windows PowerShell cmdlets.</source>
          <target state="translated">메서드 정의는 Windows PowerShell cmdlet의 매개 변수 집합은 하나 이상의 메서드 서명이 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The signatures show all of the valid formats of commands to invoke the method.</source>
          <target state="translated">서명을 모든 메서드를 호출 하는 명령 하는 유효한 형식을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, the CopyTo method of the FileInfo class contains the following two method signatures:</source>
          <target state="translated">예를 들어 FileInfo 클래스의 CopyTo 메서드는 다음과 같은 두 가지 메서드 서명을 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The first method signature takes the destination file name (and a path).</source>
          <target state="translated">첫 번째 메서드 시그니처는 대상 파일 이름 (및 경로)를 사용합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example use The first CopyTo method to copy the Final.txt file to the C:\Bin directory.</source>
          <target state="translated">다음 예제에서는 C:\Bin 디렉터리에 Final.txt 파일을 복사할 첫 번째 CopyTo 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The second method signature take a destination file name and a Boolean value that determines whether the destination file should be overwritten, if it already exists.</source>
          <target state="translated">두 번째 메서드 시그니처는 대상 파일 이름 및 이미 있는 경우 대상 파일 덮어쓸지 여부를 결정 하는 부울 값을 보십시오.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example use The second CopyTo method to copy the Final.txt file to the C:\Bin directory, and to overwrite existing files.</source>
          <target state="translated">다음 예제에서는 C:\Bin 디렉터리로 Final.txt 파일을 복사 하 고 기존 파일을 덮어쓸지 두 번째 CopyTo 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>METHODS OF SCALAR OBJECTS AND COLLECTIONS</source>
          <target state="translated">스칼라 개체 및 컬렉션 메서드</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The methods of one ("scalar") object of a particular type are often different from the methods of a collection of objects of the same type.</source>
          <target state="translated">특정 형식의 하나 ("스칼라") 개체의 메서드 같은 형식의 개체 컬렉션의 메서드에서 다른 많습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, every process has a Kill method, but a collection of processes does not have a Kill method.</source>
          <target state="translated">예를 들어 모든 프로세스에 Kill 메서드가 없는 프로세스의 컬렉션 Kill 메서드.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Beginning in  Windows PowerShell 3.0,  Windows PowerShell tries to prevent scripting errors that result from the differing methods of scalar objects and collections.</source>
          <target state="translated">Windows PowerShell Windows PowerShell 3.0부터, 스칼라 개체 및 컬렉션의 다른 메서드에서 발생 하는 스크립팅 오류를 방지 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Beginning in  Windows PowerShell 4.0, collection filtering by using a method syntax is supported.</source>
          <target state="translated">Windows PowerShell 4.0부터, 컬렉션 필터링 메서드 구문을 사용 하 여 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you submit a collection, but request a method that exists only on single ("scalar") objects, Windows invokes the method on every object in the collection.</source>
          <target state="translated">제출 하는 컬렉션을 단일 ("스칼라") 개체에만 존재 하는 메서드를 요청할 경우 Windows는 컬렉션의 모든 개체에 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the method exists on the individual objects and on the collection,  Windows PowerShell does not alter the result.</source>
          <target state="translated">개별 개체에 대 한 컬렉션에는 메서드가 있으면 Windows PowerShell 결과 변경 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This feature also works on properties of scalar objects and collections.</source>
          <target state="translated">이 기능은 스칼라 개체 및 컬렉션의 속성에도 작동 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see about_Properties.</source>
          <target state="translated">자세한 내용은 about_Properties를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example runs the Kill method of individual process objects on a collection of process objects.</source>
          <target state="translated">다음 예제에서는 프로세스 개체의 컬렉션에서 개별 프로세스 개체의 Kill 메서드를 실행합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example works only on  Windows PowerShell 3.0 and later versions of  Windows PowerShell.</source>
          <target state="translated">이 예제에서는 Windows PowerShell 3.0 및 이후 버전의 Windows PowerShell에 대해서만 작동 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The first command starts three instances of the Notepad process.</source>
          <target state="translated">첫 번째 명령은 메모장 프로세스의 세 인스턴스를 시작합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The second command uses the Get-Process command to get all three instance of the Notepad process and save them in the $p variable.</source>
          <target state="translated">두 번째 명령은 메모장 프로세스의 모든 세 가지 인스턴스를 가져와 $p 변수에 저장 하는 Get-process 명령을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The third command uses the Count property of all collections to verify that there are three processes in the $p variable.</source>
          <target state="translated">세 번째 명령은 $p 변수에 세 가지 프로세스 있는지 확인 하려면 모든 컬렉션의 Count 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The fourth command runs the Kill method on all three processes in the $p variable.</source>
          <target state="translated">네 번째 명령은 $p 변수에 세 가지 프로세스 모두 Kill 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This command works even though a collection of processes does not have a Kill method.</source>
          <target state="translated">이 명령은 Kill 메서드 프로세스의 컬렉션에 없는 경우에 작동 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The fifth command uses the Get-Process command to confirm that the Kill command worked.</source>
          <target state="translated">다섯 번째 명령은 Get-process 명령을 사용 하 여 Kill 명령을 제대로 수행 되었는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To perform the same task on  Windows PowerShell 2.0, use the Foreach-Object cmdlet to run the method on each object in the collection.</source>
          <target state="translated">Windows PowerShell 2.0에서 동일한 작업을 수행 하려면 Foreach-object cmdlet를 사용 하 여 컬렉션의 각 개체에 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>about_Objects</source>
          <target state="translated">about_Objects</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>about_Properties</source>
          <target state="translated">about_Properties</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Get-Member</source>
          <target state="translated">Get-Member</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>