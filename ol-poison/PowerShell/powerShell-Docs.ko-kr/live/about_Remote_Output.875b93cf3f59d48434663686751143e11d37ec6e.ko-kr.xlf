<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3e6bb8f2069bc911873cd74c321d9f8aa04de47</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Remote_Output.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">081d2ad8d7507ee2da30d2e8e61bd2362a68b90a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b47b67a14bcf01e165206fd160b3e8099bce0fb6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Remote_Output</source>
          <target state="translated">about_Remote_Output</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Remote Output</source>
          <target state="translated">원격 출력에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Remote_Output</source>
          <target state="translated">about_Remote_Output</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">항목</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Remote_Output</source>
          <target state="translated">about_Remote_Output</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes how to interpret and format the output of remote commands.</source>
          <target state="translated">해석 하 고 원격 명령 출력의 서식을 지정 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The output of a command that was run on a remote computer might look like output of the same command run on a local computer, but there are some significant differences.</source>
          <target state="translated">원격 컴퓨터에서 실행 된 명령의 출력은 로컬 컴퓨터에서 실행 같은 명령의 출력 같습니다도 몇 가지 중요 한 차이점이 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic explains how to interpret, format, and display the output of commands that are run on remote computers.</source>
          <target state="translated">이 항목에서는 해석 서식을 지정 하 고 원격 컴퓨터에서 실행 되는 명령 출력을 표시 하는 방법을 설명 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DISPLAYING THE COMPUTER NAME</source>
          <target state="translated">컴퓨터 이름을 표시합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you use the Invoke-Command cmdlet to run a command on a remote computer, the command returns an object that includes the name of the computer that generated the data.</source>
          <target state="translated">Invoke-command cmdlet를 사용 하 여 원격 컴퓨터에서 명령을 실행 하는 명령은 데이터를 생성 하는 컴퓨터의 이름을 포함 하는 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The remote computer name is stored in the PSComputerName property.</source>
          <target state="translated">원격 컴퓨터 이름은 PSComputerName 속성에 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For many commands, the PSComputerName is displayed by default.</source>
          <target state="translated">많은 명령에 대 한 PSComputerName은 기본적으로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the following command runs a Get-Culture command on two remote computers, Server01 and Server02.</source>
          <target state="translated">예를 들어 다음 명령은 Server01 및 Server02 두 원격 컴퓨터에서 Get-culture 명령을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The output, which appears below, includes the names of the remote computers on which the command ran.</source>
          <target state="translated">아래에 표시 하는 출력에는 명령이 실행 된 원격 컴퓨터의 이름이 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -script {get-culture} -comp Server01, Server02</source>
          <target state="translated">C:\PS &gt; 호출 명령-{get 문화권별} 스크립트-comp Server01, Server02</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>LCID  Name    DisplayName                PSComputerName</source>
          <target state="translated">LCID 이름 DisplayName PSComputerName</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>1033  en-US   English (United States)    Server01 1033  es-AR   Spanish (Argentina)        Server02</source>
          <target state="translated">1033 EN-US Server01 1033 es AR 스페인어 (아르헨티나) Server02 영어 (미국)</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use the HideComputerName parameter of Invoke-Command to hide the PSComputerName property.</source>
          <target state="translated">PSComputerName 속성을 숨기려면 Invoke-command의 HideComputerName 매개 변수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This parameter is designed for commands that collect data from only one remote computer.</source>
          <target state="translated">이 매개 변수는 하나의 원격 컴퓨터에서 데이터를 수집 하는 명령을 위해 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following command runs a Get-Culture command on the Server01 remote computer.</source>
          <target state="translated">다음 명령은 Server01 원격 컴퓨터에서 Get-culture 명령을 실행합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It uses the HideComputerName parameter to hide the PSComputerName property and related properties.</source>
          <target state="translated">PSComputerName 속성 및 관련된 속성을 숨기려면 HideComputerName 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scr {get-culture} -comp Server01 -HideComputerName</source>
          <target state="translated">C:\PS &gt; 호출 명령 키를 누른 채 scr {get 문화권별}-Server01 HideComputerName 구성 요소</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>LCID             Name             DisplayName</source>
          <target state="translated">LCID 이름 DisplayName</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>1033             en-US            English (United States)</source>
          <target state="translated">1033 EN-US 영어 (미국)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also display the PSComputerName property if it is not displayed by default.</source>
          <target state="translated">기본적으로 표시 되지 않으면 PSComputerName 속성을 표시할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, the following commands use the Format-Table cmdlet to add the PSComputerName property to the output of a remote Get-Date command.</source>
          <target state="translated">예를 들어 다음 명령은 PSComputerName 속성 원격 Get-date 명령의 출력을 추가 하려면 Format-table cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $dates = invoke-command -script {get-date} -computername Server01, Server02 C:\PS&gt; $dates | format-table DateTime, PSComputerName -auto</source>
          <target state="translated">C:\PS &gt; $dates = 호출 명령-{get-date}-computername Server01, Server02 C:\PS &gt; $dates 스크립트 | 표 서식 날짜/시간, PSComputerName-자동</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>DateTime                            PSComputerName</source>
          <target state="translated">DateTime PSComputerName</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Monday, July 21, 2008 7:16:58 PM    Server01 Monday, July 21, 2008 7:16:58 PM    Server02</source>
          <target state="translated">2008 년 7 월 21 일 월요일 오후 7시 16분: 58 Server01 2008 년 7 월 21 일 월요일 오후 7시 16분: 58 Server02</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>DISPLAYING THE MACHINENAME PROPERTY</source>
          <target state="translated">MACHINENAME 속성을 표시합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Several cmdlets, including Get-Process, Get-Service, and Get-EventLog, have a ComputerName parameter that gets the objects on a remote computer.</source>
          <target state="translated">몇 가지 Get-process, Get-service를 비롯 하 여 cmdlet 및 Get-eventlog에 원격 컴퓨터에서 개체를 가져오는 ComputerName 매개를 변수가 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These cmdlets do not use Windows PowerShell remoting, so you can use them even on computers that are not configured for remoting in Windows PowerShell.</source>
          <target state="translated">이러한 cmdlet을 Windows PowerShell에서 원격 구성 되지 않은 컴퓨터 에서도 사용할 수 있도록 Windows PowerShell 원격을 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The objects that these cmdlets return store the name of the remote computer in the MachineName property.</source>
          <target state="translated">원격 컴퓨터의 이름을 MachineName 속성에 저장 하는 이러한 cmdlet에서 반환 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(These objects do not have a PSComputerName property.)</source>
          <target state="translated">(이러한 개체는 PSComputerName 속성 갖지 않습니다.)</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, this command gets the PowerShell process on the Server01 and Server02 remote computers.</source>
          <target state="translated">예를 들어이 명령은 Server01 및 Server02 원격 컴퓨터에서 PowerShell 프로세스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default display does not include the MachineName property.</source>
          <target state="translated">기본 표시에 MachineName 속성을 포함 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; get-process PowerShell -computername server01, server02</source>
          <target state="translated">C:\PS &gt; 가져오기 프로세스 PowerShell-computername server01, server02</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">NPM(K) PM(K) WS(K) VM(M) CPU(s) Id ProcessName 처리</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>920      38    97524     114504   575     9.66   2648 PowerShell 194       6    24256      32384   142            3020 PowerShell 352      27    63472      63520   577     3.84   4796 PowerShell</source>
          <target state="translated">920 38 97524 114504 575 9.66 2648 PowerShell 194 6 24256 32384 142 3020 PowerShell 352 27 63472 63520 577 3.84 4796 PowerShell</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use the Format-Table cmdlet to display the MachineName property of the process objects.</source>
          <target state="translated">프로세스 개체의 MachineName 속성을 표시 하려면 Format-table cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, the following command saves the processes in the $p variable and then uses a pipeline operator (|) to send the processes in $p to the Format-Table command.</source>
          <target state="translated">예를 들어 다음 명령은 $p 변수에 프로세스를 저장 하 고 파이프라인 연산자 (|)를 사용 하 여 $p를 Format-table 명령으로 프로세스를 보내는 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The command uses the Property parameter of Format-Table to include the MachineName property in the display.</source>
          <target state="translated">명령은 Format-table의 Property 매개 변수를 사용 하 여 표시에 MachineName 속성을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $p = get-process PowerShell -comp Server01, Server02 C:\PS&gt; $P | format-table -property ID, ProcessName, MachineName -auto</source>
          <target state="translated">&gt; $P C:\PS = 가져오기 프로세스 PowerShell-comp Server01, Server02 C:\PS &gt; $P | 표 서식-속성 ID, ProcessName, MachineName-자동</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Id ProcessName MachineName</source>
          <target state="translated">Id ProcessName MachineName</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>2648 PowerShell  Server02 3020 PowerShell  Server01 4796 PowerShell  Server02</source>
          <target state="translated">2648 PowerShell Server02 3020 PowerShell Server01 4796 PowerShell Server02</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following more complex command adds the MachineName property to the default process display.</source>
          <target state="translated">다음 보다 복잡 한 명령은 기본 프로세스 표시에 MachineName 속성을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It uses hash tables to specify calculated properties.</source>
          <target state="translated">해시 테이블을 사용 하 여 계산 된 속성을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Fortunately, you do not have to understand it to use it.</source>
          <target state="translated">다행 스럽게도 사용 하도록 쉽게 이해할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>(Note that the backtick [`] is the continuation character.)</source>
          <target state="translated">(역방향 틱 [']는 연속 문자는 참고).</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $p = get-process PowerShell -comp Server01, Server02</source>
          <target state="translated">&gt; $P C:\PS = 가져오기 프로세스 PowerShell-comp Server01, Server02</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $p | format-table -property Handles, <ph id="ph1">`
@{Label="NPM(K)";Expression={int}}, `</ph> @{Label="PM(K)";Expression={int}}, <ph id="ph2">`
@{Label="WS(K)";Expression={int}}, `</ph> @{Label="VM(M)";Expression={int}}, <ph id="ph3">`
@{Label="CPU(s)";Expression={if ($.CPU -ne $()){ $.CPU.ToString("N")}}}, `</ph> Id, ProcessName, MachineName -auto</source>
          <target state="translated">&gt; $P C:\PS | 표 서식-속성 핸들 <ph id="ph1">`
@{Label="NPM(K)";Expression={int}}, `</ph> @{Label="PM(K)"; 식 = {int}}, <ph id="ph2">`
@{Label="WS(K)";Expression={int}}, `</ph> @{Label="VM(M)"; 식 = {int}}, <ph id="ph3">`
@{Label="CPU(s)";Expression={if ($.CPU -ne $()){ $.CPU.ToString("N")}}}, `</ph> Id, ProcessName MachineName-자동</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Handles NPM(K) PM(K)  WS(K) VM(M) CPU(s)   Id ProcessName MachineName</source>
          <target state="translated">NPM(K) PM(K) WS(K) VM(M) CPU(s) Id ProcessName MachineName 처리</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>920     38 97560 114532   576        2648 PowerShell  Server02 192      6 24132  32028   140        3020 PowerShell  Server01 438     26 48436  59132   565        4796 PowerShell  Server02</source>
          <target state="translated">920 38 97560 114532 576 2648 PowerShell Server02 192 6 24132 32028 140 3020 PowerShell Server01 438 26 48436 59132 565 4796 PowerShell Server02</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>DESERIALIZED OBJECTS</source>
          <target state="translated">DESERIALIZE 된 개체</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you run remote commands that generate output, the command output is transmitted across the network back to the local computer.</source>
          <target state="translated">출력을 생성 하는 원격 명령을 실행 하면 명령 출력은 로컬 컴퓨터에 다시 네트워크를 통해 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because most live Microsoft .NET Framework objects (such as the objects that Windows PowerShell cmdlets return) cannot be transmitted over the network, the live objects are "serialized".</source>
          <target state="translated">있기 때문에 대부분 라이브 Microsoft.NET Framework 개체 (예: Windows PowerShell cmdlet에서 반환 하는 개체)는 네트워크를 통해 전송할 수 없는, 라이브 개체는 "serialize"입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In other words, the live objects are converted into XML representations of the object and its properties.</source>
          <target state="translated">즉, 라이브 개체는 개체와 해당 속성의 XML 표현으로 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Then, the XML-based serialized object is transmitted across the network.</source>
          <target state="translated">그런 다음 XML을 기반으로 직렬화 된 개체는 네트워크를 통해 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>On the local computer, Windows PowerShell receives the XML-based serialized object and "deserializes" it by converting the XML-based object into a standard .NET Framework object.</source>
          <target state="translated">로컬 컴퓨터에서 Windows PowerShell XML 기반 serialize 된 개체를 수신 및 "역직렬화"는 표준.NET Framework 개체를 XML 기반 개체를 변환 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, the deserialized object is not a live object.</source>
          <target state="translated">그러나 deserialize 된 개체는 라이브 개체가 않습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It is a snapshot of the object at the time that it was serialized, and it includes properties but no methods.</source>
          <target state="translated">개체의 스냅숏이 직렬화 된 시간에 선택한 속성 되지만 메서드가 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can use and manage these objects in Windows PowerShell, including passing them in pipelines, displaying selected properties, and formatting them.</source>
          <target state="translated">사용 하 고 파이프라인에서이 전달, 선택한 속성을 표시 및 포맷 비롯 한 Windows PowerShell에서 이러한 개체를 관리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Most deserialized objects are automatically formatted for display by entries in the Types.ps1xml or Format.ps1xml files.</source>
          <target state="translated">Deserialize 된 개체에는 대부분 Types.ps1xml 또는 Format.ps1xml 파일의 항목으로 표시 하기 위해 자동 포맷 됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, the local computer might not have formatting files for all of the deserialized objects that were generated on a remote computer.</source>
          <target state="translated">그러나 로컬 컴퓨터 되지 않았을 모든 원격 컴퓨터에서 생성 된 deserialize 된 개체에 대 한 파일 형식 지정 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When objects are not formatted, all of the properties of each object appear in the console in a streaming list.</source>
          <target state="translated">개체 포맷 되지 않는 각 개체의 속성의 모든 스트리밍 목록에는 콘솔에 나타납니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When objects are not formatted automatically, you can use the formatting cmdlets, such as Format-Table or Format-List, to format and display selected properties.</source>
          <target state="translated">개체가 자동으로 서식이 지정 되지 되어 서식을 지정 하 고 선택한 속성을 표시 하려면 Format-table 또는 Format-list와 같은 형식 지정 cmdlet를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Or, you can use the Out-GridView cmdlet to display the objects in a table.</source>
          <target state="translated">또는 Out GridView cmdlet을 사용 하 여 테이블에서 개체를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Also, if you run a command on a remote computer that uses cmdlets that you do not have on your local computer, the objects that the command returns might not be formatted properly because you do not have the formatting files for those objects on your computer.</source>
          <target state="translated">또한 로컬 컴퓨터에 없는 cmdlet을 사용 하는 원격 컴퓨터에서 명령을 실행 하면 명령이 반환 하는 개체 수 서식이 지정 되지 않았을 제대로 컴퓨터에 해당 개체에 대 한 형식 지정 파일 필요가 없기 때문에.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To get formatting data from another computer, use the Get-FormatData and Export-FormatData cmdlets.</source>
          <target state="translated">다른 컴퓨터에서 데이터를 서식 가져오기, Get-formatdata 및 Export-formatdata cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Some object types, such as DirectoryInfo objects and GUIDs, are converted back into live objects when they are received.</source>
          <target state="translated">DirectoryInfo 개체 Guid와 같은 일부 개체 유형 수신할 때 라이브 개체로 다시 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These objects do not need any special handling or formatting.</source>
          <target state="translated">이러한 개체를 처리 또는 서식을 특수 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>ORDERING THE RESULTS</source>
          <target state="translated">결과 정렬</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The order of the computer names in the ComputerName parameter of cmdlets determines the order in which Windows PowerShell connects to the remote computers.</source>
          <target state="translated">Cmdlet의 ComputerName 매개 변수에서 컴퓨터 이름의 순서를 Windows PowerShell 원격 컴퓨터에 연결 하는 순서를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, the results appear in the order in which the local computer receives them, which might be a different order.</source>
          <target state="translated">그러나 결과는 로컬 컴퓨터를 수신, 다른 순서로 될 수 있는 순서 대로 나타납니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To change the order of the results, use the Sort-Object cmdlet.</source>
          <target state="translated">결과의 순서를 변경 하려면 Sort-object cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can sort on the PSComputerName or MachineName property.</source>
          <target state="translated">PSComputerName 또는 MachineName 속성에 정렬할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can also sort on another property of the object so that the results from different computers are interspersed.</source>
          <target state="translated">서로 다른 컴퓨터에서 결과 섞여 있도록 개체의 다른 속성에 정렬할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>about_Remote about_Remote_Variables Format-Table Get-EventLog Get-Process Get-Service Get-WmiObject Invoke-Command Out-GridView Select-Object</source>
          <target state="translated">about_Remote about_Remote_Variables Format-table Get-eventlog Get-process Get-service Get-wmiobject Invoke-command Out-gridview Select-object</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>