<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0fa388c2ff9cde50cf57fc6481c8133f65d71ca</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\Where-Object.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b6ce0411b94f7888d60548945ff32d78e9a824f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3de833064e40c11733aec10204a39f12d3707fba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Where-Object</source>
          <target state="translated">Where-Object</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Where-Object</source>
          <target state="translated">Where-Object</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Selects objects from a collection based on their property values.</source>
          <target state="translated">속성 값에 따라 컬렉션에서 개체를 선택합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>EqualSet (Default)</source>
          <target state="translated">EqualSet (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ScriptBlockSet</source>
          <target state="translated">ScriptBlockSet</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CaseSensitiveLessThanSet</source>
          <target state="translated">CaseSensitiveLessThanSet</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>LessOrEqualSet</source>
          <target state="translated">LessOrEqualSet</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>NotContainsSet</source>
          <target state="translated">NotContainsSet</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotContainsSet</source>
          <target state="translated">CaseSensitiveNotContainsSet</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CaseSensitiveLessOrEqualSet</source>
          <target state="translated">CaseSensitiveLessOrEqualSet</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>InSet</source>
          <target state="translated">삽입</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CaseSensitiveInSet</source>
          <target state="translated">CaseSensitiveInSet</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>NotInSet</source>
          <target state="translated">NotInSet</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotInSet</source>
          <target state="translated">CaseSensitiveNotInSet</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>IsSet</source>
          <target state="translated">가</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>LikeSet</source>
          <target state="translated">LikeSet</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CaseSensitiveEqualSet</source>
          <target state="translated">CaseSensitiveEqualSet</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>NotEqualSet</source>
          <target state="translated">NotEqualSet</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotEqualSet</source>
          <target state="translated">CaseSensitiveNotEqualSet</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>GreaterThanSet</source>
          <target state="translated">GreaterThanSet</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CaseSensitiveGreaterThanSet</source>
          <target state="translated">CaseSensitiveGreaterThanSet</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>MatchSet</source>
          <target state="translated">MatchSet</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CaseSensitiveLikeSet</source>
          <target state="translated">CaseSensitiveLikeSet</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CaseSensitiveMatchSet</source>
          <target state="translated">CaseSensitiveMatchSet</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>IsNotSet</source>
          <target state="translated">IsNotSet</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>NotLikeSet</source>
          <target state="translated">NotLikeSet</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotMatchSet</source>
          <target state="translated">CaseSensitiveNotMatchSet</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>ContainsSet</source>
          <target state="translated">ContainsSet</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CaseSensitiveContainsSet</source>
          <target state="translated">CaseSensitiveContainsSet</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>LessThanSet</source>
          <target state="translated">LessThanSet</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CaseSensitiveNotLikeSet</source>
          <target state="translated">CaseSensitiveNotLikeSet</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>NotMatchSet</source>
          <target state="translated">NotMatchSet</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>GreaterOrEqualSet</source>
          <target state="translated">GreaterOrEqualSet</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CaseSensitiveGreaterOrEqualSet</source>
          <target state="translated">CaseSensitiveGreaterOrEqualSet</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet selects objects that have particular property values from the collection of objects that are passed to it.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> cmdlet에 전달 되는 개체의 컬렉션에서 특정 속성 값을 가진 개체를 선택 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example you can use the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet to select files that were created after a certain date, events with a particular ID, or computers with a particular version of Windows.</source>
          <target state="translated">예를 들어 사용할 수는 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 생성 된 파일을 특정 날짜 이후에 특정 ID 사용 하 여 이벤트 또는 특정 버전의 Windows 사용 하 여 컴퓨터를 선택 하는 cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, there are two different ways to construct a <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> command.</source>
          <target state="translated">Windows PowerShell 3.0부터, 두 가지가 서로 다른 생성 하는 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 명령입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Script block<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>스크립트 블록<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use a script block to specify the property name, a comparison operator, and a property value.</source>
          <target state="translated">스크립트 블록을 사용하여 속성 이름, 비교 연산자 및 속성 값을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Where-Object returns all objects for which the script block statement is true.</source>
          <target state="translated">Where-Object는 스크립트 블록 문이 true인 모든 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, the following command gets processes in the Normal priority class, that is, processes where the value of the <bpt id="p1">**</bpt>PriorityClass<ept id="p1">**</ept> property equals "Normal".</source>
          <target state="translated">예를 들어 다음 명령은 즉 보통 우선 순위 클래스에서 프로세스를 가져옵니다, 프로세스의 값은 <bpt id="p1">**</bpt>PriorityClass<ept id="p1">**</ept> 속성이 같으면 "정상"입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All Windows PowerShell comparison operators are valid in the script block format.</source>
          <target state="translated">모든 Windows PowerShell 비교 연산자는 스크립트 블록 형식에서 유효합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about comparison operators, see about_Comparison_Operators (http://go.microsoft.com/fwlink/?LinkID=113217).</source>
          <target state="translated">비교 연산자에 대 한 자세한 내용은 about_Comparison_Operators (http://go.microsoft.com/fwlink/?LinkID=113217)를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Comparison statement<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>비교 문은<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also write a comparison statement, which is much more like natural language.</source>
          <target state="translated">또한 자연어와 더욱 유사하게 비교문을 작성할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Comparison statements were introduced in Windows PowerShell 3.0.</source>
          <target state="translated">비교문은 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, the following commands also get processes that have a priority class of "Normal".</source>
          <target state="translated">예를 들어 다음 명령은 "Normal" 우선 순위 클래스를 가진 프로세스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These commands are equivalent and can be used interchangeably.</source>
          <target state="translated">이러한 명령은 동일하므로 서로 바꿔 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> adds comparison operators as parameters in a <bpt id="p2">**</bpt>Where-Object<ept id="p2">**</ept> command.</source>
          <target state="translated">Windows PowerShell 3.0부터 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 매개 변수로 추가 하는 비교 연산자는 <bpt id="p2">**</bpt>Where-object<ept id="p2">**</ept> 명령입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Unless specified, all operators are case-insensitive.</source>
          <target state="translated">지정되지 않은 경우 모든 연산자는 대/소문자를 구분하지 않습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Prior to Windows PowerShell 3.0, the comparison operators in the Windows PowerShell language could be used only in script blocks.</source>
          <target state="translated">Windows PowerShell 3.0 이전 버전에서는 Windows PowerShell 언어의 비교 연산자를 스크립트 블록에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 예제 1 --------------------------</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This command gets a list of all services that are currently stopped.</source>
          <target state="translated">이 명령은 현재 중지된 모든 서비스 목록을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The "$_" symbol represents each object that is passed to the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">"$_" 기호에 전달 되는 각 개체를 나타내는 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first command uses the script block format.</source>
          <target state="translated">첫 번째 명령은 스크립트 블록 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second command uses the comparison statement format.</source>
          <target state="translated">두 번째 명령은 비교문의 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The commands are equivalent and can be used interchangeably.</source>
          <target state="translated">이러한 명령은 동일하므로 서로 바꿔 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This command lists processes that have a working set greater than 25,000 kilobytes (KB).</source>
          <target state="translated">이 명령은 작업 집합이 25,000KB보다 큰 작업 집합을 가진 프로세스를 나열합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Because the value of the WorkingSet property is stored in bytes, the value of 25,000 is multiplied by 1,024.</source>
          <target state="translated">WorkingSet 속성 값은 바이트 단위로 저장되므로 25,000 값에 1,024가 곱해집니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The first command uses the script block format.</source>
          <target state="translated">첫 번째 명령은 스크립트 블록 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The second command uses the comparison statement format.</source>
          <target state="translated">두 번째 명령은 비교문의 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The commands are equivalent and can be used interchangeably.</source>
          <target state="translated">이러한 명령은 동일하므로 서로 바꿔 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This command gets the processes that have a <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> property value that begins with the letter "p".</source>
          <target state="translated">이 명령은 없는 프로세스는 <bpt id="p1">**</bpt>ProcessName<ept id="p1">**</ept> "p" 문자로 시작 하는 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The match operator lets you use regular expression matches.</source>
          <target state="translated">일치 연산자를 사용하면 정규식 일치 항목을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The first command uses the script block format.</source>
          <target state="translated">첫 번째 명령은 스크립트 블록 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The second command uses the comparison statement format.</source>
          <target state="translated">두 번째 명령은 비교문의 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The commands are equivalent and can be used interchangeably.</source>
          <target state="translated">이러한 명령은 동일하므로 서로 바꿔 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 5 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 5 --------------------------</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This example shows how to use the new comparison statement  format of the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated">새 비교 문 형식을 사용 하는 방법을 보여 주는이 예제는 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The first command uses the comparison statement format.</source>
          <target state="translated">첫 번째 명령은 비교문의 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this command, no aliases are used and all parameters include the parameter name.</source>
          <target state="translated">이 명령에서 별칭은 사용되지 않고 모든 매개 변수는 매개 변수 이름을 포함합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The second command is the more natural use of the comparison command format.</source>
          <target state="translated">두 번째 명령은 비교 명령 형식의 더 자연스러운 용례입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The "where" alias is substituted for the "Where-Object" cmdlet name and all optional parameter names are omitted.</source>
          <target state="translated">"where" 별칭이 "Where-Object cmdlet" 이름을 대체하며 모든 선택적 매개 변수 이름이 생략됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 6 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 6 --------------------------</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This example shows how to write commands that return items that are true or false or have any value for a specified property.</source>
          <target state="translated">이 예제에서는 true 또는 false 항목을 반환하거나 지정된 속성 값을 포함하는 명령을 작성하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The example shows both the script block and comparison statement formats for the command.</source>
          <target state="translated">이 예제에서는 명령의 스크립트 블록 및 비교문 형식을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 7 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 7 --------------------------</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This example shows how to create a <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> command with multiple conditions.</source>
          <target state="translated">만드는 방법을 보여 주는이 예제는 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 명령을 여러 조건을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This command gets non-core modules that support the Updatable Help feature.</source>
          <target state="translated">이 명령은 업데이트할 수 있는 도움말 기능을 지원하는 중요하지 않은 모듈을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>ListAvailable<ept id="p1">**</ept> parameter of the Get-Module cmdlet to get all modules on the computer.</source>
          <target state="translated">이 명령은 <bpt id="p1">**</bpt>ListAvailable<ept id="p1">**</ept> 컴퓨터에서 모든 모듈을 가져오려면 Get-module cmdlet의 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A pipeline operator sends the modules to the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet, which gets modules whose names do not begin with "Microsoft" or "PS" and have  a value for the <bpt id="p2">**</bpt>HelpInfoURI<ept id="p2">**</ept> property, which tells Windows PowerShell where to find updated help files for the module.</source>
          <target state="translated">파이프라인 연산자가 모듈을는 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> cmdlet은 이름이 "Microsoft" 또는 "PS"로 시작 하지 않으며 값을 포함 하는 모듈의 <bpt id="p2">**</bpt>HelpInfoURI<ept id="p2">**</ept> Windows PowerShell 모듈에 대 한 업데이트 된 도움말 파일을 찾을 수 있는 위치를 알려 주는 속성입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The comparison statements are connected by the <bpt id="p1">**</bpt>-And<ept id="p1">**</ept> logical operator.</source>
          <target state="translated">비교 문은 통해 연결 되어는 <bpt id="p1">**</bpt>-및<ept id="p1">**</ept> 논리 연산자입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The example uses the script block command format.</source>
          <target state="translated">이 예제에서는 스크립트 블록 명령 형식을 사용합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Logical operators, such as -And and -Or, are valid only in script blocks.</source>
          <target state="translated">논리 연산자(예: -And 및 -Or)는 스크립트 블록에서만 유효합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You cannot use them in the comparison statement format of a Where-Object command.</source>
          <target state="translated">Where-Object 명령의 비교문 형식으로는 논리 연산자를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For more information about Windows PowerShell logical operators, see about_Logical_Operators (http://go.microsoft.com/fwlink/?LinkID=113238).</source>
          <target state="translated">Windows PowerShell 논리 연산자에 대한 자세한 내용은 about_Logical_Operators(http://go.microsoft.com/fwlink/?LinkID=113238)를 참조하세요.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information about the Updatable Help feature, see about_Updatable_Help (http://go.microsoft.com/fwlink/?LinkID=235801).</source>
          <target state="translated">업데이트할 수 있는 도움말 기능에 대한 자세한 내용은 about_Updatable_Help(http://go.microsoft.com/fwlink/?LinkID=235801)를 참조하세요(영문).</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>-CContains</source>
          <target state="translated">-CContains</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Contains operator, which gets objects from a collection when the property value of the object is an exact match for the specified value</source>
          <target state="translated">대/소문자를 구분하는 Contains 연산자를 지정합니다. 이 연산자는 개체의 속성 값이 지정한 값과 정확히 일치하는 경우 컬렉션의 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>"Contains" refers to a collection of values and is true when the collection contains an item that is an exact match for the specified value.</source>
          <target state="translated">"Contains"는 값의 컬렉션이며, 컬렉션에 지정된 값과 정확히 일치하는 항목이 포함된 경우에 true입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If the input is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">입력이 단일 개체인 경우 Windows PowerShell에서 이를 한 개체의 컬렉션으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>-CEQ</source>
          <target state="translated">-CEQ</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Equals operator, which gets objects when the property value is the same as the specified value.</source>
          <target state="translated">대/소문자 Equals 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값과 동일한 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>-CGE</source>
          <target state="translated">-CGE</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Greater-than-or-equal value, which gets objects when the property value is greater than or equal to the specified value.</source>
          <target state="translated">대/소문자를 구분하는 Greater-than-or-equal 값을 지정합니다. 이 값은 속성 값이 지정된 값보다 크거나 같은 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>-CGT</source>
          <target state="translated">-CGT</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Greater-than property, which gets objects when the property value is greater than the specified value.</source>
          <target state="translated">대/소문자를 구분하는 Greater-than 속성을 지정합니다. 이 속성은 속성 값이 지정된 값보다 큰 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>-CIn</source>
          <target state="translated">-CIn</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive In operator, which gets objects when the property value includes the specified value.</source>
          <target state="translated">대/소문자를 구분하는 In 연산자를 지정합니다. 이 연산자는 속성 값에 지정된 값이 포함된 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example: Get-Process | where -Value "svchost" -CIn ProcessName</source>
          <target state="translated">예: Get-process | 여기서-"svchost" 값-CIn ProcessName</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The In operator is much like the Contains operator, except that the property and value positions are reversed.</source>
          <target state="translated">In 연산자는 Contains 연산자와 상당히 유사합니다. 단, 속성 및 값 위치가 반대입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example, the following statements are both true.</source>
          <target state="translated">예를 들어 다음 문은 모두 true입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>"abc", "def" -CContains "abc"</source>
          <target state="translated">"abc", "def" -CContains "abc"</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>"abc" -CIn "abc", "def"</source>
          <target state="translated">"abc" -CIn "abc", "def"</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>-CLE</source>
          <target state="translated">-CLE</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Less-than-or-equal operator, which gets objects when the property value is less-than or equal to the specified value.</source>
          <target state="translated">대/소문자를 구분하는 Less-than-or-equal 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값보다 작거나 같은 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>-CLT</source>
          <target state="translated">-CLT</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Less-than operator, which gets objects when the property value is less-than the specified value.</source>
          <target state="translated">대/소문자를 구분하는 Less-than 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값보다 작은 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>-CLike</source>
          <target state="translated">-CLike</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Like operator, which gets objects when the property value matches a value that includes wildcard characters.</source>
          <target state="translated">대/소문자를 구분하는 Like 연산자를 지정합니다. 이 연산자는 속성 값이 와일드카드 문자가 포함된 값과 일치하는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>-CMatch</source>
          <target state="translated">-CMatch</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Match operator, which gets objects when the property value matches the specified regular expression.</source>
          <target state="translated">대/소문자를 구분하는 Match 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 정규식과 일치하는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When the input is scalar, the matched value is saved in $Matches automatic variable.</source>
          <target state="translated">입력이 스칼라인 경우 일치하는 값이 $Matches 자동 변수가 저장됩니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>-CNE</source>
          <target state="translated">-CNE</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-Equals operator, which gets objects when the property value is different than the specified value.</source>
          <target state="translated">대/소문자를 구분하는 Not-Equals 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값과 다른 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>-CNotContains</source>
          <target state="translated">-CNotContains</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-Contains operator, which gets objects when the property value of the object is not an exact match for the specified value.</source>
          <target state="translated">대/소문자를 구분하는 Not-Contains 연산자를 지정합니다. 이 연산자는 개체의 속성 값이 지정한 값과 정확히 일치하지 않는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>"NotContains" and "CNotContains refer to a collection of values and are true when the collection does not contains any items that are an exact match for the specified value.</source>
          <target state="translated">"NotContains" 및 "CNotContains"는 값의 컬렉션이며, 컬렉션에 지정된 값과 정확히 일치하는 항목이 포함되지 않은 경우에 true입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If the input is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">입력이 단일 개체인 경우 Windows PowerShell에서 이를 한 개체의 컬렉션으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>-CNotIn</source>
          <target state="translated">-CNotIn</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-In operator, which gets objects when the property value is not an exact match for the specified value.</source>
          <target state="translated">대/소문자를 구분하는 Not-In 연산자를 지정합니다. 이 연산자는 속성 값이 지정한 값과 정확히 일치하지 않는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The Not-In  and CNot-In operators are much like the Not-Contains and CNot-Contains operators, except that the property and value positions are reversed.</source>
          <target state="translated">Not-In 및 CNot-In 연산자는 Not-Contains 및 CNot-Contains와 상당히 유사합니다. 단, 속성 및 값 위치가 반대입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For example, the following statements are true.</source>
          <target state="translated">예를 들어 다음 문은 true입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>"abc", "def" -CNotContains "Abc"</source>
          <target state="translated">"abc", "def" -CNotContains "Abc"</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>"abc" -CNotIn "Abc", "def"</source>
          <target state="translated">"abc" -CNotIn "Abc", "def"</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>-CNotLike</source>
          <target state="translated">-CNotLike</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-Like operator, which gets objects when the property value does not match a value that includes wildcard characters.</source>
          <target state="translated">대/소문자를 구분하는 Not-Like 연산자를 지정합니다. 이 연산자는 속성 값이 와일드카드 문자가 포함된 값과 일치하지 않는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>-CNotMatch</source>
          <target state="translated">-CNotMatch</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Specifies the case-sensitive Not-match operator, which gets objects when the property value does not match the specified regular expression.</source>
          <target state="translated">대/소문자를 구분하는 Not-match 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 정규식과 일치하지 않는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>When the input is scalar, the matched value is saved in $Matches automatic variable.</source>
          <target state="translated">입력이 스칼라인 경우 일치하는 값이 $Matches 자동 변수가 저장됩니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>-Contains</source>
          <target state="translated">-포함합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Specifies the Contains operator, which gets objects when any item in the property value of the object is an exact match for the specified value.</source>
          <target state="translated">Contains 연산자를 지정합니다. 이 연산자는 개체의 속성 값에 있는 항목이 지정한 값과 정확히 일치하는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If the property value contains a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">속성 값이 단일 개체에 포함되어 있으면 Windows PowerShell에서 이를 한 개체의 컬렉션으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>-EQ</source>
          <target state="translated">-EQ</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Specifies the equals operator, which gets objects when the property value is the same as the specified value.</source>
          <target state="translated">equals 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값과 동일한 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>-FilterScript</source>
          <target state="translated">-FilterScript</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specifies the script block that is used to filter the objects.</source>
          <target state="translated">개체를 필터링하는 데 사용되는 스크립트 블록을 지정합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Enclose the script block in braces ( {} ).</source>
          <target state="translated">스크립트 블록은 중괄호({})로 묶으세요.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The parameter name (-FilterScript) is optional.</source>
          <target state="translated">매개 변수 이름(-FilterScript)은 선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>-GE</source>
          <target state="translated">-GE</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Specifies the Greater-than-or-equal operator, which gets objects when the property value is greater than or equal to the specified value.</source>
          <target state="translated">Greater-than-or-equal 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값보다 크거나 같은 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>-GT</source>
          <target state="translated">-GT</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Specifies the Greater-than operator, which gets objects when the property value is greater than the specified value.</source>
          <target state="translated">Greater-than 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값보다 큰 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>-In</source>
          <target state="translated">기능</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Specifies the In operator, which gets objects when the property value matches any of the specified values.</source>
          <target state="translated">In 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값과 일치하는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For example: Get-Process | where -Property ProcessName -in -Value "Svchost", "TaskHost", "WsmProvHost"</source>
          <target state="translated">예: Get-process | where-ProcessName 속성--"Svchost", "TaskHost", "WsmProvHost" 값</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>If the value of the <bpt id="p1">**</bpt>Value<ept id="p1">**</ept> parameter is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">하는 경우의 값은 <bpt id="p1">**</bpt>값<ept id="p1">**</ept> 매개 변수는 단일 개체, Windows PowerShell 한 개체의 컬렉션으로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>If the property value of an object is an array, Windows PowerShell uses reference equality to determine a match.</source>
          <target state="translated">개체의 속성 값이 배열인 경우 Windows PowerShell은 참조 같음을 사용하여 일치 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> returns the object only if the value of the <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter and any value of the <bpt id="p3">**</bpt>Value<ept id="p3">**</ept> parameter are the same instance of an object.</source>
          <target state="translated"><bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 경우에만 개체의 값을 반환 된 <bpt id="p2">**</bpt>속성<ept id="p2">**</ept> 매개 변수 및 값에는 <bpt id="p3">**</bpt>값<ept id="p3">**</ept> 매개 변수는 개체의 동일한 인스턴스.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Specifies the objects to be filtered.</source>
          <target state="translated">필터링할 개체를 지정합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>You can also pipe the objects to <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept>.</source>
          <target state="translated">개체를 파이프할 수도 있습니다 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>When you use the InputObject parameter with Where-Object, instead of piping command results to Where-Object, the InputObject value-even if the value is a collection that is the result of a command, such as <bpt id="p1">**</bpt>-InputObject (Get-Process)<ept id="p1">**</ept>-is treated as a single object.</source>
          <target state="translated">파이핑 명령 결과를 Where-object 대신를 Where-object와 InputObject 매개 변수를 사용 하는 경우는 InputObject 값도 값 컬렉션, 명령의 결과 같은 경우 <bpt id="p1">**</bpt>-InputObject (Get-process)<ept id="p1">**</ept>-단일 개체로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Because InputObject cannot return individual properties from an array or collection of objects, it is recommended that if you use Where-Object to filter a collection of objects for those objects that have specific values in defined properties, you use Where-Object in the pipeline, as shown in the examples in this topic.</source>
          <target state="translated">InputObject가 개체의 배열 또는 컬렉션에서 개별 속성을 반환할 수 없으므로, Where-Object를 사용하여 개체 컬렉션을 정의된 속성의 특정 값을 가진 개체로 필터링하는 경우 이 항목의 예제와 같이 파이프라인의 Where-Object를 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>-Is</source>
          <target state="translated">-</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Specifies the Is operator, which gets objects when the property value is an instance of the specified .NET Framework type.</source>
          <target state="translated">Is 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 .NET Framework 유형의 인스턴스인 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Enclose the type name in square brackets.</source>
          <target state="translated">유형 이름은 대괄호로 묶으세요.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>-IsNot</source>
          <target state="translated">-IsNot</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Specifies the Is-Not operator, which gets objects when the property value is not an instance of the specified .NET Framework type.</source>
          <target state="translated">Is-Not 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 .NET Framework 유형의 인스턴스가 아닌 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>-LE</source>
          <target state="translated">-LE</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Specifies the Less-than-or-equals operator.</source>
          <target state="translated">Less-than-or-equals 연산자를 지정합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>-LT</source>
          <target state="translated">-LT</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Specifies the Less-than operator, which gets objects when the property value is less than the specified value.</source>
          <target state="translated">Less-than 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값보다 작은 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>-Like</source>
          <target state="translated">스타일</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Specifies the Like operator, which gets objects when the property value matches a value that includes wildcard characters.</source>
          <target state="translated">Like 연산자를 지정합니다. 이 연산자는 속성 값이 와일드카드 문자가 포함된 값과 일치하는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>-Match</source>
          <target state="translated">일치</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Specifies the Match operator, which gets objects when the property value matches the specified regular expression.</source>
          <target state="translated">Match 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 정규식과 일치하는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>When the input is scalar, the matched value is saved in $Matches automatic variable.</source>
          <target state="translated">입력이 스칼라인 경우 일치하는 값이 $Matches 자동 변수가 저장됩니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>-NE</source>
          <target state="translated">-NE</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Specifies the Not-equals operator, which gets objects when the property value is different than the specified value.</source>
          <target state="translated">Not-equals 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값과 다른 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>-NotContains</source>
          <target state="translated">-NotContains</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Specifies the  Not-Contains operator, which gets objects when none of the items in the  property value is an exact match for the specified value.</source>
          <target state="translated">Not-Contains 연산자를 지정합니다. 이 연산자는 속성 값에 있는 어떤 항목도 지정된 값과 정확히 일치하지 않는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>"NotContains" refers to a collection of values and is true when the collection does not contain any items that are an exact match for the specified value.</source>
          <target state="translated">"NotContains"는 값의 컬렉션이며, 컬렉션에 지정된 값과 정확히 일치하는 항목이 컬렉션에 포함되지 않은 경우에 true입니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If the input is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">입력이 단일 개체인 경우 Windows PowerShell에서 이를 한 개체의 컬렉션으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>-NotIn</source>
          <target state="translated">-NotIn</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Specifies the  Not-In operator, which gets objects when the property value is not an exact match for any of the specified values.</source>
          <target state="translated">Not-In 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 값과 정확히 일치하지 않는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>If the value of the <bpt id="p1">**</bpt>Value<ept id="p1">**</ept> parameter is a single object, Windows PowerShell converts it to a collection of one object.</source>
          <target state="translated">하는 경우의 값은 <bpt id="p1">**</bpt>값<ept id="p1">**</ept> 매개 변수는 단일 개체, Windows PowerShell 한 개체의 컬렉션으로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If the property value of an object is an array, Windows PowerShell uses reference equality to determine a match.</source>
          <target state="translated">개체의 속성 값이 배열인 경우 Windows PowerShell은 참조 같음을 사용하여 일치 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> returns the object only if the value of the <bpt id="p2">**</bpt>Property<ept id="p2">**</ept> parameter and any value of the <bpt id="p3">**</bpt>Value<ept id="p3">**</ept> parameter are not the same instance of an object.</source>
          <target state="translated"><bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> 경우에만 개체의 값을 반환 된 <bpt id="p2">**</bpt>속성<ept id="p2">**</ept> 매개 변수 및 값에는 <bpt id="p3">**</bpt>값<ept id="p3">**</ept> 매개 변수는 개체의 동일한 인스턴스.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>-NotLike</source>
          <target state="translated">-NotLike</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Specifies the Not-Like operator, which gets objects when the property value does not match a value that includes wildcard characters.</source>
          <target state="translated">Not-Like 연산자를 지정합니다. 이 연산자는 속성 값이 와일드카드 문자가 포함된 값과 일치하지 않는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>-NotMatch</source>
          <target state="translated">-NotMatch</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Specifies the not-match operator, which gets objects when the property value does not match the specified regular expression.</source>
          <target state="translated">not-match 연산자를 지정합니다. 이 연산자는 속성 값이 지정된 정규식과 일치하지 않는 경우 해당 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>When the input is scalar, the matched value is saved in $Matches automatic variable.</source>
          <target state="translated">입력이 스칼라인 경우 일치하는 값이 $Matches 자동 변수가 저장됩니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>-Property</source>
          <target state="translated">-속성</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Specifies the name of an object property.</source>
          <target state="translated">object 속성의 이름을 지정합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The parameter name (-Property) is optional.</source>
          <target state="translated">매개 변수 이름(-Property)은 선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>-Value</source>
          <target state="translated">-값</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Specifies a property value.</source>
          <target state="translated">속성 값을 지정합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The parameter name (-Value) is optional.</source>
          <target state="translated">매개 변수 이름(-Value)은 선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This parameter is introduced in Windows PowerShell 3.0.</source>
          <target state="translated">이 매개 변수는 Windows PowerShell 3.0에서 도입되었습니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>You can pipe the objects to be filtered to Where-Object.</source>
          <target state="translated">필터링할 개체를 Where-Object로 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">개체</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Where-Object returns selected items from the input object set.</source>
          <target state="translated">Where-Object는 입력 개체 집합에서 선택한 항목을 반환합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 4.0, Where() operator behavior has changed.</source>
          <target state="translated">Windows PowerShell 4.0부터, Where() 연산자 동작이 변경되었습니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Collection.Where('property -match name') no longer accepts string expressions in the format "Property -CompareOperator Value".</source>
          <target state="translated">Collection.Where (' 속성-일치 하는 이름 ') 더 이상 "속성-CompareOperator Value" 형식의 문자열 식을 허용 합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>However, the Where() operator accepts string expressions in the format of a scriptblock; this is still supported.</source>
          <target state="translated">그러나 Where() 연산자는 scriptblock 형식의 문자열 식을 허용합니다. 이 연산자는 여전히 지원됩니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The following examples show the behavior that has changed.</source>
          <target state="translated">다음 예제에서는 변경된 동작을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The following two examples show Where() object behavior that is no longer supported.</source>
          <target state="translated">다음 두 예제에서는 더 이상 지원되지 않는 Where() 개체 동작을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The following three examples show Where() object behavior that is supported in Windows PowerShell 4.0 and forward.</source>
          <target state="translated">다음 세 가지 예제에서는 Windows PowerShell 4.0 이상에서 지원되는 Where() 개체 동작을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Compare-Object</source>
          <target state="translated">Compare-Object</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>ForEach-Object</source>
          <target state="translated">ForEach-Object</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Group-Object</source>
          <target state="translated">Group-Object</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Measure-Object</source>
          <target state="translated">Measure-Object</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>New-Object</source>
          <target state="translated">새 개체</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Select-Object</source>
          <target state="translated">Select-Object</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Sort-Object</source>
          <target state="translated">Sort-Object</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Tee-Object</source>
          <target state="translated">Tee-object는 개체</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Where-Object</source>
          <target state="translated">Where-Object</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>