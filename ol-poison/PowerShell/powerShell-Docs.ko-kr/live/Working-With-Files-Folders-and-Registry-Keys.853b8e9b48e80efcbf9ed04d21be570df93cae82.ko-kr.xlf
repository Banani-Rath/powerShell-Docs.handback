<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2d203fee4e1595498c666d4060e7a1060b2aa4d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Working-With-Files-Folders-and-Registry-Keys.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a706cbeac67726d441fc0df80c4a0b34c8ae0e77</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working With Files Folders and Registry Keys</source>
          <target state="translated">파일, 폴더 및 레지스트리 키 작업</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Working With Files, Folders and Registry Keys</source>
          <target state="translated">파일, 폴더 및 레지스트리 키 작업</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the noun <bpt id="p1">**</bpt>Item<ept id="p1">**</ept> to refer to items found on a Windows PowerShell drive.</source>
          <target state="translated">Windows PowerShell에서는 명사 <bpt id="p1">**</bpt>Item<ept id="p1">**</ept>을 사용하여 Windows PowerShell 드라이브에 있는 항목을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When dealing with the Windows PowerShell FileSystem provider, an <bpt id="p1">**</bpt>Item<ept id="p1">**</ept> might be a file, a folder, or the Windows PowerShell drive.</source>
          <target state="translated">Windows PowerShell FileSystem 공급자를 처리할 때 <bpt id="p1">**</bpt>Item<ept id="p1">**</ept>은 파일, 폴더 또는 Windows PowerShell 드라이브일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Listing and working with these items is a critical basic task in most administrative settings, so we want to discuss these tasks in detail.</source>
          <target state="translated">이러한 항목을 나열하고 사용하는 것은 대부분의 관리 설정의 기본적인 작업이므로 이러한 작업에 대해 자세히 살펴보겠습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Enumerating Files, Folders, and Registry Keys (Get<ph id="ph1">\-</ph>ChildItem)</source>
          <target state="translated">파일, 폴더 및 레지스트리 키 열거(Get<ph id="ph1">\-</ph>ChildItem)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Since getting a collection of items from a particular location is such a common task, the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet is designed specifically to return all items found within a container such as a folder.</source>
          <target state="translated">특정 위치에서 항목 모음을 가져오는 것은 그런 일반적인 작업이므로 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet은 폴더와 같은 컨테이너 내에 있는 모든 항목을 반환하도록 특별히 설계되었습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you want to return all files and folders that are contained directly within the folder C:<ph id="ph1">\\</ph>Windows, type:</source>
          <target state="translated">C:<ph id="ph1">\\</ph>Windows 폴더에 직접 포함되어 있는 모든 파일과 폴더를 반환하려면 다음과 같이 입력합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The listing looks similar to what you would see when you enter the <bpt id="p1">**</bpt>dir<ept id="p1">**</ept> command in <bpt id="p2">**</bpt>Cmd.exe<ept id="p2">**</ept>, or the <bpt id="p3">**</bpt>ls<ept id="p3">**</ept> command in a UNIX command shell.</source>
          <target state="translated">목록은 <bpt id="p2">**</bpt>Cmd.exe<ept id="p2">**</ept>에서 <bpt id="p1">**</bpt>dir<ept id="p1">**</ept> 명령을 입력하거나 UNIX 명령 셸에서 <bpt id="p3">**</bpt>ls<ept id="p3">**</ept> 명령을 입력할 때 표시되는 것과 비슷합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can perform very complex listings by using parameters of the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet의 매개 변수를 사용하여 매우 복잡한 목록을 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>We will look at a few scenarios next.</source>
          <target state="translated">이제 몇 가지 시나리오를 살펴보겠습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can see the syntax the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet by typing:</source>
          <target state="translated">다음과 같이 입력하여 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet의 구문을 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These parameters can be mixed and matched to get highly customized output.</source>
          <target state="translated">이러한 매개 변수를 조합하거나 일치시켜서 사용자 지정 출력을 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Listing all Contained Items (<ph id="ph1">\-</ph>Recurse)</source>
          <target state="translated">포함된 모든 항목 표시(<ph id="ph1">\-</ph>Recurse)</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To see both the items inside a Windows folder and any items that are contained within the subfolders, use the <bpt id="p1">**</bpt>Recurse<ept id="p1">**</ept> parameter of <bpt id="p2">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p2">**</ept>.</source>
          <target state="translated">Windows 폴더 내에 있는 항목과 하위 폴더에 포함된 모든 항목을 표시하려면 <bpt id="p2">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p2">**</ept>의 <bpt id="p1">**</bpt>Recurse<ept id="p1">**</ept> 매개 변수를 사용합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The listing displays everything within the Windows folder and the items in its subfolders.</source>
          <target state="translated">목록에는 Windows 폴더 내의 모든 항목과 하위 폴더의 항목이 표시됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Filtering Items by Name (<ph id="ph1">\-</ph>Name)</source>
          <target state="translated">이름별로 항목 필터링(<ph id="ph1">\-</ph>Name)</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To display only the names of items, use the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> parameter of <bpt id="p2">**</bpt>Get<ph id="ph1">\-</ph>Childitem<ept id="p2">**</ept>:</source>
          <target state="translated">항목의 이름만 표시하려면 <bpt id="p2">**</bpt>Get<ph id="ph1">\-</ph>Childitem<ept id="p2">**</ept>의 <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> 매개 변수를 사용합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Forcibly Listing Hidden Items (<ph id="ph1">\-</ph>Force)</source>
          <target state="translated">숨겨진 항목을 강제로 나열(<ph id="ph1">\-</ph>Force)</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Items that are normally invisible in File Explorer or Cmd.exe are not displayed in the output of a <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> command.</source>
          <target state="translated">일반적으로 파일 탐색기 또는 Cmd.exe에 표시되지 않는 항목은 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> 명령의 출력에 표시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To display hidden items, use the <bpt id="p1">**</bpt>Force<ept id="p1">**</ept> parameter of <bpt id="p2">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p2">**</ept>.</source>
          <target state="translated">숨겨진 항목을 표시하려면 <bpt id="p2">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p2">**</ept>의 <bpt id="p1">**</bpt>Force<ept id="p1">**</ept> 매개 변수를 사용합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This parameter is named Force because you can forcibly override the normal behavior of the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> command.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> 명령의 일반적인 동작을 강제로 재정의할 수 있으므로 이 매개 변수의 이름은 Force입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Force is a widely used parameter that forces an action that a cmdlet would not normally perform, although it will not perform any action that compromises the security of the system.</source>
          <target state="translated">Force는 cmdlet이 일반적으로 수행하지 않는 작업을 강제로 수행하는 데 널리 사용되는 매개 변수입니다. 단, 시스템 보안을 저해하는 작업은 수행하지 않습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Matching Item Names with Wildcards</source>
          <target state="translated">와일드카드와 항목 이름 일치</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> command accepts wildcards in the path of the items to list.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> 명령에서 나열할 항목의 경로에 와일드카드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because wildcard matching is handled by the Windows PowerShell engine, all cmdlets that accepts wildcards use the same notation and have the same matching behavior.</source>
          <target state="translated">와일드카드 일치는 Windows PowerShell 엔진에서 처리되므로 와일드카드를 허용하는 모든 cmdlet은 동일한 표기법을 사용하고 일치 동작이 동일합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The Windows PowerShell wildcard notation includes:</source>
          <target state="translated">Windows PowerShell 와일드카드 표기법은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Asterisk (<ph id="ph1">\*</ph>)matches zero or more occurrences of any character.</source>
          <target state="translated">별표(<ph id="ph1">\*</ph>)는 0개 이상의 모든 문자를 일치시킵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Question mark (?) matches exactly one character.</source>
          <target state="translated">물음표(?)는 정확히 한 문자를 일치시킵니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Left bracket (<ph id="ph1">\[</ph>) character and right bracket (]) character surround a set of characters to be matched.</source>
          <target state="translated">왼쪽 대괄호(<ph id="ph1">\[</ph>) 문자와 오른쪽 대괄호(]) 문자는 일치시킬 문자를 묶습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Here are some examples of how wildcard specification works.</source>
          <target state="translated">다음 예에서는 와일드카드 지정 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To find all files in the Windows directory with the suffix <bpt id="p1">**</bpt>.log<ept id="p1">**</ept> and exactly five characters in the base name, enter the following command:</source>
          <target state="translated">Windows 디렉터리에서 접미사 <bpt id="p1">**</bpt>.log<ept id="p1">**</ept>를 포함하고 기본 이름이 정확히 5자인 모든 파일을 찾으려면 다음 명령을 입력합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To find all files that begin with the letter <bpt id="p1">**</bpt>x<ept id="p1">**</ept> in the Windows directory, type:</source>
          <target state="translated">Windows 디렉터리에서 문자 <bpt id="p1">**</bpt>x<ept id="p1">**</ept>로 시작하는 모든 파일을 찾으려면 다음과 같이 입력합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To find all files whose names begin with <bpt id="p1">**</bpt>x<ept id="p1">**</ept> or <bpt id="p2">**</bpt>z<ept id="p2">**</ept>, type:</source>
          <target state="translated">이름이 <bpt id="p1">**</bpt>x<ept id="p1">**</ept> 또는 <bpt id="p2">**</bpt>z<ept id="p2">**</ept>로 시작하는 모든 파일을 찾으려면 다음과 같이 입력합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Excluding Items (<ph id="ph1">\-</ph>Exclude)</source>
          <target state="translated">항목 제외(<ph id="ph1">\-</ph>Exclude)</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can exclude specific items by using the <bpt id="p1">**</bpt>Exclude<ept id="p1">**</ept> parameter of Get<ph id="ph1">\-</ph>ChildItem.</source>
          <target state="translated">Get<ph id="ph1">\-</ph>ChildItem의 <bpt id="p1">**</bpt>Exclude<ept id="p1">**</ept> 매개 변수를 사용하여 특정 항목을 제외할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This lets you perform complex filtering in a single statement.</source>
          <target state="translated">그러면 단일 문에서 복잡한 필터링을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, suppose you are trying to find the Windows Time Service DLL in the System32 folder, and all you can remember about the DLL name is that it begins with "W" and has "32" in it.</source>
          <target state="translated">예를 들어 System32 폴더에서 Windows 시간 서비스 DLL을 찾으려고 하지만 DLL 이름이 "W"로 시작하고 "32"가 포함되어 있다는 것만 알고 있다고 가정합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An expression like <bpt id="p1">**</bpt>w<ph id="ph1">\&amp;</ph>#42;32<ph id="ph2">\&amp;</ph>#42;.dll<ept id="p1">**</ept> will find all DLLs that satisfy the conditions, but it may also return the Windows 95 and 16<ph id="ph3">\-</ph>bit Windows compatibility DLLs that include "95" or "16" in their names.</source>
          <target state="translated"><bpt id="p1">**</bpt>w<ph id="ph1">\&amp;</ph>#42;32<ph id="ph2">\&amp;</ph>#42;.dll<ept id="p1">**</ept>과 같은 문은 조건을 만족하는 모든 DLL을 찾지만, 이름에 "95" 또는 "16"을 포함하는 Windows 95 및 16비트 Windows 호환 DLL도 반환합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can omit files that have any of these numbers in their names by using the <bpt id="p1">**</bpt>Exclude<ept id="p1">**</ept> parameter with the pattern <bpt id="p2">**</bpt><ph id="ph1">\&amp;</ph>#42;<ph id="ph2">\[</ph>9516]<ph id="ph3">\&amp;</ph>#42;<ept id="p2">**</ept>:</source>
          <target state="translated"><bpt id="p1">**</bpt>Exclude<ept id="p1">**</ept> 매개 변수를 <bpt id="p2">**</bpt><ph id="ph1">\&amp;</ph>#42;<ph id="ph2">\[</ph>9516]<ph id="ph3">\&amp;</ph>#42;<ept id="p2">**</ept> 패턴과 함께 사용하여 이름에 이러한 숫자가 포함된 파일을 생략할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>PS&gt; Get-ChildItem -Path C:\WINDOWS\System32\w<bpt id="p1">*</bpt>32<ept id="p1">*</ept>.dll -Exclude <bpt id="p2">*</bpt>[9516]<ept id="p2">*</ept> Directory: Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS\System32 Mode                LastWriteTime     Length Name ----                -------------     ------ ---- -a---        2004-08-04   8:00 AM     174592 w32time.dll -a---        2004-08-04   8:00 AM      22016 w32topl.dll -a---        2004-08-04   8:00 AM     101888 win32spl.dll -a---        2004-08-04   8:00 AM     172032 wldap32.dll -a---        2004-08-04   8:00 AM     264192 wow32.dll -a---        2004-08-04   8:00 AM      82944 ws2_32.dll -a---        2004-08-04   8:00 AM      42496 wsnmp32.dll -a---        2004-08-04   8:00 AM      22528 wsock32.dll -a---        2004-08-04   8:00 AM      18432 wtsapi32.dll</source>
          <target state="translated">PS&gt; Get-ChildItem -Path C:\WINDOWS\System32\w<bpt id="p1">*</bpt>32<ept id="p1">*</ept>.dll -Exclude <bpt id="p2">*</bpt>[9516]<ept id="p2">*</ept> Directory: Microsoft.PowerShell.Core\FileSystem::C:\WINDOWS\System32 Mode                LastWriteTime     Length Name ----                -------------     ------ ---- -a---        2004-08-04   8:00 AM     174592 w32time.dll -a---        2004-08-04   8:00 AM      22016 w32topl.dll -a---        2004-08-04   8:00 AM     101888 win32spl.dll -a---        2004-08-04   8:00 AM     172032 wldap32.dll -a---        2004-08-04   8:00 AM     264192 wow32.dll -a---        2004-08-04   8:00 AM      82944 ws2_32.dll -a---        2004-08-04   8:00 AM      42496 wsnmp32.dll -a---        2004-08-04   8:00 AM      22528 wsock32.dll -a---        2004-08-04   8:00 AM      18432 wtsapi32.dll</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Mixing Get<ph id="ph1">\-</ph>ChildItem Parameters</source>
          <target state="translated">Get<ph id="ph1">\-</ph>ChildItem 매개 변수 혼합</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can use several of the parameters of the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet in the same command.</source>
          <target state="translated">동일한 명령에 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet의 여러 매개 변수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Before you mix parameters, be sure that you understand wildcard matching.</source>
          <target state="translated">매개 변수를 혼합하기 전에 와일드카드 일치에 대해 알고 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, the following command returns no results:</source>
          <target state="translated">예를 들어 다음 명령은 결과를 반환하지 않습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>There are no results, even though there are two DLLs that begin with the letter "z" in the Windows folder.</source>
          <target state="translated">Windows 폴더에 문자 "z"로 시작하는 DLL이 두 개 있지만 결과는 반환되지 않습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>No results were returned because we specified the wildcard as part of the path.</source>
          <target state="translated">와일드카드를 경로의 일부로 지정했기 때문에 결과가 반환되지 않습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Even though the command was recursive, the <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet restricted the items to those that are in the Windows folder with names ending with ".dll".</source>
          <target state="translated">재귀적 명령이지만 <bpt id="p1">**</bpt>Get<ph id="ph1">\-</ph>ChildItem<ept id="p1">**</ept> cmdlet은 항목을 Windows 폴더에서 이름이 ".dll"로 끝나는 항목으로 제한합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To specify a recursive search for files whose names match a special pattern, use the <bpt id="p1">**</bpt><ph id="ph1">\-</ph>Include<ept id="p1">**</ept> parameter.</source>
          <target state="translated">이름이 특정 패턴과 일치하는 파일에 대한 재귀 검색을 지정하려면 <bpt id="p1">**</bpt><ph id="ph1">\-</ph>Include<ept id="p1">**</ept> 매개 변수를 사용합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>