<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d313114a8046ac99753ad1ef84fb9ebe0f3796ed</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Arrays.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09c5db60fa9451cda05db30890e3f6fb73c47fa0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebdbf2165af51d00ef07a49e89db2b57b51b773b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_arrays</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Arrays</source>
          <target state="translated">배열에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_arrays</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">항목</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Arrays</source>
          <target state="translated">about_arrays</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Describes arrays, which are data structures designed to store collections of items.</source>
          <target state="translated">항목의 컬렉션을 저장 하도록 설계 된 데이터 구조인 배열에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An array is a data structure that is designed to store a collection of items.</source>
          <target state="translated">배열은 항목의 컬렉션을 저장 하도록 설계 하는 데이터 구조입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The items can be the same type or different types.</source>
          <target state="translated">유형이 같은 또는 다른 종류의 항목 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, a collection of zero or one object has some properties of arrays.</source>
          <target state="translated">Windows PowerShell 3.0부터, 0 개 또는 한 개체의 컬렉션에 배열의 일부 속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CREATING AND INITIALIZING AN ARRAY</source>
          <target state="translated">만들기 및 배열 초기화</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create and initialize an array, assign multiple values to a variable.</source>
          <target state="translated">을 만들고 배열을 초기화 하려면 여러 값을 변수에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The values stored in the array are delimited with a comma and separated from the variable name by the assignment operator (=).</source>
          <target state="translated">배열에 저장 된 값을 쉼표로 구분 되며 변수 이름에서 대입 연산자 (=)로 구분 됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, to create an array named $A that contains the seven numeric (int) values of 22, 5, 10, 8, 12, 9, and 80, type:</source>
          <target state="translated">예를 들어, 22, 5, 10, 8, 12, 9 및 80의 7 개 (int) 숫자 값이 포함 된 $A 라는 배열을 만들려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>$A = 22,5,10,8,12,9,80</source>
          <target state="translated">$A 22,5,10,8,12,9,80 =</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also create and initialize an array by using the range operator (..).</source>
          <target state="translated">또한 만들 하 고 범위 연산자 (.)를 사용 하 여 배열을 초기화할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, to create and initialize an array named "$B" that contains the values 5 through 8, type:</source>
          <target state="translated">예를 들어을 만들고 5-8 값을 포함 하는 "$B" 라는 배열을 초기화 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>$B = 5..8</source>
          <target state="translated">$B 5..8 =</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a result, $B contains four values: 5, 6, 7, and 8.</source>
          <target state="translated">$B 4 개의 값을 포함 하는 결과적으로,: 5, 6, 7 및 8입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When no data type is specified, Windows PowerShell creates each array as an object array (type: System.Object[]).</source>
          <target state="translated">데이터 형식이 지정 되지 않은, Windows PowerShell 각 배열을 개체 배열로 만듭니다 (형식: System.Object[]) 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To determine the data type of an array, use the GetType() method.</source>
          <target state="translated">배열 형식의 데이터를 확인 하려면 gettype () 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, to determine the data type of the $a array, type:</source>
          <target state="translated">예를 들어 $a 배열 형식의 데이터를 확인 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>$a.GetType()</source>
          <target state="translated">$a.GetType()</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To create a strongly typed array, that is, an array that can contain only values of a particular type, cast the variable as an array type, such as string[], long[], or int32[].</source>
          <target state="translated">즉, 특정 유형의 값만 포함할 수 있는 배열, 강력한 형식의 배열을 만들려면 변수 string], [long, 또는 int32]와 같은 배열 형식으로 캐스팅 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To cast an array, precede the variable name with an array type enclosed in brackets.</source>
          <target state="translated">배열 캐스팅, 변수 이름을 앞에 괄호로 묶인 배열 형식의 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, to create a 32-bit integer array named $ia containing four integers (1500, 2230, 3350, and 4000), type:</source>
          <target state="translated">예를 들어 라는 $ia (1, 500, 2230, 3350, 및 4000) 4 개의 정수를 포함 하는 32 비트 정수 배열을 만들려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>[int32[]]$ia = 1500,2230,3350,4000</source>
          <target state="translated">[int32 []] $ia 1500,2230,3350,4000 =</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As a result, the $ia array can contain only integers.</source>
          <target state="translated">결과적으로, $ia 배열에는 정수만 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can create arrays that are cast to any supported type in the Microsoft .NET Framework.</source>
          <target state="translated">Microsoft.NET Framework에서 지원 되는 모든 형식으로 캐스팅 하는 배열을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the objects that Get-Process retrieves to represent processes are of the System.Diagnostics.Process type.</source>
          <target state="translated">예를 들어 개체를 나타내는 프로세스 Get-process를 검색 하는 System.Diagnostics.Process 유형입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create a strongly typed array of process objects, enter the following command:</source>
          <target state="translated">강력한 형식의 배열을 프로세스 개체를 만들려면 다음 명령을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>[Diagnostics.Process[]]$zz = Get-Process</source>
          <target state="translated">[Diagnostics.Process[]]$zz Get-process =</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>THE ARRAY SUB-EXPRESSION OPERATOR</source>
          <target state="translated">배열 하위 식 연산자</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The array sub-expression operator creates an array, even if it contains zero or one object.</source>
          <target state="translated">0 개 또는 한 개체를 포함 하는 경우에 배열 하위 식 연산자를 배열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The syntax of the array operator is as follows:</source>
          <target state="translated">배열 연산자 구문은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>@( ... )</source>
          <target state="translated">@( ... )</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use the array operator to create an array of zero or one object.</source>
          <target state="translated">0 개 또는 한 개체의 배열을 만드는 데 배열 연산자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>PS C:&gt;$a = @("One") PS C:&gt;$a.Count</source>
          <target state="translated">PS c: &gt; $는 PS @("One") c: = &gt; $a.Count</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>PS C:&gt;$b = @() PS C:&gt;$b.Count</source>
          <target state="translated">PS c: &gt; $b = @ (PS) c: &gt; $b.Count</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The array operator is particularly useful in scripts when you are getting objects, but do not know how many objects you will get.</source>
          <target state="translated">배열 연산자는 개체를 가져올 때 스크립트에서 특히 유용 모르는 개체의 수를 받게 됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>PS C:&gt; $p = @(Get-Process Notepad)</source>
          <target state="translated">C: &gt; $p PS = @(Get-process 메모장)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about the array sub-expression operator, see about_Operators.</source>
          <target state="translated">배열 하위 식 연산자에 대 한 자세한 내용은 about_Operators를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>READING AN ARRAY</source>
          <target state="translated">배열 읽기</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can refer to an array by using its variable name.</source>
          <target state="translated">변수 이름을 사용 하 여 배열에 참조할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To display all the elements in the array, type the array name.</source>
          <target state="translated">배열의 모든 요소를 표시 하려면 배열 이름을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$a</source>
          <target state="translated">$는</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can refer to the elements in an array by using an index, beginning at position 0.</source>
          <target state="translated">참조할 수 있습니다 배열에 있는 요소에는 인덱스를 사용 하 여 위치 0부터 시작 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Enclose the index number in brackets.</source>
          <target state="translated">인덱스 번호를 괄호로 묶습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, to display the first element in the $a array, type:</source>
          <target state="translated">예를 들어 $a 배열에서에서 첫 번째 요소를 표시 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>$a[0]</source>
          <target state="translated">$[0]</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To display the third element in the $a array, type:</source>
          <target state="translated">$ 배열 a의 세 번째 요소를 표시 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>$a[2]</source>
          <target state="translated">$a [2]</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Negative numbers count from the end of the array.</source>
          <target state="translated">배열의 끝에서 음수를 계산 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, "-1" refers to the last element of the array.</source>
          <target state="translated">예를 들어, "-1" 마지막 배열 요소를 참조합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To display the last three elements of the array, type:</source>
          <target state="translated">배열의 마지막 세 요소를 표시 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>$a[-3..-1]</source>
          <target state="translated">$는 [-3..-1]</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>However, be cautious when using this notation.</source>
          <target state="translated">그러나 주의 해야이 표기법을 사용 하는 경우.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>$a[0..-2]</source>
          <target state="translated">$는 [0..-2]</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This command does not refer to all the elements of the array, except for the last one.</source>
          <target state="translated">이 명령은 마지막을 제외 하 고 배열의 모든 요소를 참조 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It refers to the first, last, and second-to-last elements in the array.</source>
          <target state="translated">첫 번째, 마지막 참조 및 배열에서 마지막 두 번째 요소입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can use the range operator to display a subset of all the values in an array.</source>
          <target state="translated">배열에 있는 모든 값의 하위 집합을 표시 하는 범위 연산자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to display the data elements at index position 1 through 3, type:</source>
          <target state="translated">예를 들어, 데이터 요소 인덱스 위치 1-3 표시 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>$a[1..3]</source>
          <target state="translated">$[1..3]</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can use the plus operator (+) to combine a range with a list of elements in an array.</source>
          <target state="translated">배열의 요소에에서 목록으로 범위를 결합 하 여 더하기 연산자 (+)를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, to display the elements at index positions 0, 2, and 4 through 6, type:</source>
          <target state="translated">예를 들어 0, 2 및 4-6 인덱스 위치에 있는 요소를 표시 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>$a[0,2+4..6]</source>
          <target state="translated">$는 [0, 2 + 4..6]</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To determine how many items are in an array, use the Length property or its Count alias.</source>
          <target state="translated">배열에 있는 항목 수를 확인 하려면 길이 속성 또는 해당 개수 별칭을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>$a.Count</source>
          <target state="translated">$a.Count</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also use looping constructs, such as ForEach, For, and While loops, to refer to the elements in an array.</source>
          <target state="translated">ForEach, 등의 반복 구조를 사용할 수도 있습니다 및 배열에 요소를 참조할 While 반복 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, to use a ForEach loop to display the elements in the $a array, type:</source>
          <target state="translated">예를 들어 $ a 배열 요소를 표시 하는 ForEach 루프를 사용 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>foreach ($element in $a) {$element}</source>
          <target state="translated">foreach ($에서 $element은) {$element}</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The Foreach loop iterates through the array and returns each value in the array until reaching the end of the array.</source>
          <target state="translated">Foreach 루프는 배열에서 반복 하 고 배열의 끝에 도달할 때까지 배열의 각 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The For loop is useful when you are incrementing counters while examining the elements in an array.</source>
          <target state="translated">For 루프는 배열에 요소를 검사 하는 동안 카운터를 증가 하는 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, to use a For loop to  return every other value in an array, type:</source>
          <target state="translated">예를 들어, 배열에 다른 모든 값을 반환 하는 For 루프를 사용 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>for ($i = 0; $i -le ($a.length - 1); $i += 2) {$a[$i]}</source>
          <target state="translated">에 대 한 ($i = 0; $i-le ($a.length-1); $i + = 2) {$[$i]을 (를)</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can use a While loop to display the elements in an array until a defined condition is no longer true.</source>
          <target state="translated">잠시 사용할 수 없습니다 정의 된 조건이 더 이상 true가 될 때까지 배열에 요소를 표시 하는 루프입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, to display the elements in the $a array while the array index is less than 4, type:</source>
          <target state="translated">예를 들어, 요소를에 표시 하려면 $ 배열 a 배열 인덱스는 4 보다 작아야 하는 동안 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>$i=0 while($i -lt 4) {$a[$i]; $i++}</source>
          <target state="translated">$i (4 $i-lt) 하는 동안 0 = {$[$i]; $i + +}</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>GET THE MEMBERS OF AN ARRAY</source>
          <target state="translated">배열의 멤버를 가져오기</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To get the properties and methods of an array, such as the Length property and the SetValue method, use the InputObject parameter of the Get-Member cmdlet.</source>
          <target state="translated">속성 및 메서드는 배열의 Length 속성 등 SetValue 메서드를 가져오려면 Get-member cmdlet의 InputObject 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you pipe an array to Get-Member, Windows PowerShell sends the items one at a time and Get-Member returns the type of each item in the array (ignoring duplicates).</source>
          <target state="translated">배열을 Get-member로 파이프 하면 Windows PowerShell 항목 한 한 번에 보내고 Get-member (중복 무시) 배열에 있는 각 항목의 형식을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you use the InputObject parameter, Get-Member returns the members of the array.</source>
          <target state="translated">InputObject 매개 변수를 사용 하면 Get-member는 배열의 멤버를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the members of the array in the $a variable.</source>
          <target state="translated">예를 들어 다음 명령은 $ a 변수에 배열의 멤버를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Get-Member -InputObject $a</source>
          <target state="translated">Get-member-InputObject $는</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can also get the members of an array by typing a comma (,) before the value that is piped to the Get-Member cmdlet.</source>
          <target state="translated">Get-member cmdlet으로 파이프 하는 값 하기 전에 쉼표 (,)를 입력 하 여 배열의 멤버를 가져올 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The comma makes the array the second item in an array of arrays.</source>
          <target state="translated">쉼표는 배열로 이루어진 배열에서 배열의 두 번째 항목을으로 만듭니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Windows PowerShell pipes the arrays one at a time and Get-Member returns the members of the array.</source>
          <target state="translated">Windows PowerShell 한 번에 하나씩 배열 파이프 및 Get-member 배열의 멤버를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>,$a | Get-Member</source>
          <target state="translated">,$a | Get-member</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>,(1,2,3) | Get-Member</source>
          <target state="translated">(1,2,3) | Get-member</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>MANIPULATING AN ARRAY</source>
          <target state="translated">배열 조작</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can change the elements in an array, add an element to an array, and combine the values from two arrays into a third array.</source>
          <target state="translated">배열에 요소를 변경, 요소를 배열에 추가 하 고 세 번째 배열로 두 배열에서 값을 결합할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To change the value of a particular element in an array, specify the array name and the index of the element that you want to change, and then use the assignment operator (=) to specify a new value for the element.</source>
          <target state="translated">배열에서 특정 요소의 값을 변경 하려면 배열 이름과 변경 하려면 원하는 요소의 인덱스를 지정 하 고 대입 연산자 (=)를 사용 하 여 요소에 대 한 새 값을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, to change the value of the second item in the $a array (index position 1) to 10, type:</source>
          <target state="translated">예를 들어, $ 배열 a에 두 번째 항목의 값을 변경 하려면 (인덱스 위치 1) 10을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>$a[1] = 10</source>
          <target state="translated">$a [1] = 10</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can also use the SetValue method of an array to change a value.</source>
          <target state="translated">또한 값을 변경 하는 배열의 SetValue 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following example changes the second value (index position 1) of the $a array to 500:</source>
          <target state="translated">다음 예제에서는 두 번째 값을 변경 (인덱스 위치 1)의 $ 500 배열 a:</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>$a.SetValue(500,1)</source>
          <target state="translated">$a.SetValue(500,1)</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can use the += operator to add an element to an array.</source>
          <target state="translated">배열에 요소를 추가 하 고 + = 연산자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When you use it, Windows PowerShell actually creates a new array with the values of the original array and the added value.</source>
          <target state="translated">를 사용 하면 Windows PowerShell는 실제로 새 배열을 원래 배열과 부가 가치의 값으로 만듭니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, to add an element with a value of 200 to the array in the $a variable, type:</source>
          <target state="translated">예를 들어 $ a 변수에 배열에 값이 200 인 요소를 추가 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>$a += 200</source>
          <target state="translated">$ a + = 200</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>It is not easy to delete elements from an array, but you can create a new array that contains only selected elements of an existing array.</source>
          <target state="translated">배열에서 요소를 삭제할 수 있지만 선택한 요소의 기존 배열이 포함 된 새 배열을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, to create the $t array with all the elements in the $a array except for the value at index position 2, type:</source>
          <target state="translated">예를 들어 $t 배열 $a 2의 인덱스 위치에 있는 값을 제외 하 고 배열에에서 있는 모든 요소를 만들려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>$t = $a[0,1 + 3..($a.length - 1)]</source>
          <target state="translated">$t = $는 [0, 1 + 3 … ( $a.length-1)]</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To combine two arrays into a single array, use the plus operator (+).</source>
          <target state="translated">두 배열이를 단일 배열로 결합 하려면 더하기 연산자 (+)를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example creates two arrays, combines them, and then displays the resulting combined array.</source>
          <target state="translated">두 배열 만들고 결합 하 여, 다음 결합된 된 결과 배열을 표시 하는 다음 예제입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>$x = 1,3 $y = 5,9 $z = $x + $y</source>
          <target state="translated">$x 1, 3 = $y 5,9 = $z = $x + $y</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>As a result, the $z array contains 1, 3, 5, and 9.</source>
          <target state="translated">결과적으로, 1, 3, 5 및 9 $z 배열 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To delete an array, assign a value of $null to the array.</source>
          <target state="translated">배열을 삭제 하려면 $null 값 배열에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following command deletes the array in the $a variable.</source>
          <target state="translated">다음 명령은 $ a 변수에 배열을 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>$a = $null</source>
          <target state="translated">$는 $null =</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can also use the Remove-Item cmdlet, but assigning a value of $null is faster, especially for large arrays.</source>
          <target state="translated">Remove-item cmdlet을 사용할 수도 있습니다 이지만 $null 값을 할당 더 빠르게, 특히 큰 배열에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>ARRAYS OF ZERO OR ONE</source>
          <target state="translated">0 또는 1의 배열</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, a collection of zero or one object has the Count and Length property.</source>
          <target state="translated">Windows PowerShell 3.0부터, 0 개 또는 한 개체의 컬렉션에 Count 및 Length 속성을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Also, you can index into an array of one object.</source>
          <target state="translated">또한 한 개체의 배열로 인덱싱할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This feature helps you to avoid scripting errors that occur when a command that expects a collection gets fewer than two items.</source>
          <target state="translated">이 기능을 사용 하면 컬렉션을 예상 하는 명령을 두 개 미만의 항목을 가져올 때 발생 하는 스크립팅 오류를 방지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate this feature.</source>
          <target state="translated">다음 예제에서는이 기능을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Zero objects</source>
          <target state="translated">0 개체</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>$a = $null $a.Count</source>
          <target state="translated">$는 $null $a.Count =</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>$a.Length</source>
          <target state="translated">$a.Length</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>One object</source>
          <target state="translated">한 개체</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>$a = 4 $a.Count</source>
          <target state="translated">$는 4 개의 $a.Count =</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>$a.Length</source>
          <target state="translated">$a.Length</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>$a[0]</source>
          <target state="translated">$[0]</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>$a[-1]</source>
          <target state="translated">$[-1]</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators about_Hash_Tables about_Operators about_For about_Foreach about_While</source>
          <target state="translated">about_Assignment_Operators about_Hash_Tables about_Operators about_For about_Foreach about_While</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>