<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70c1f4752e8a3eb8e062ee58eb5be279f4c67a46</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Transactions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3fabec20051f60b4d3ae663c000345681fef70c0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac846c5c95f4aaa3f33229c0c736b5993735c5dd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Transactions</source>
          <target state="translated">about_Transactions</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Transactions</source>
          <target state="translated">트랜잭션 정보</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Transactions</source>
          <target state="translated">about_Transactions</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Transactions</source>
          <target state="translated">about_Transactions</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to manage transacted operations in Windows PowerShell.</source>
          <target state="translated">Windows PowerShell의 트랜잭션 처리 작업을 관리 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Transactions are supported in Windows PowerShell beginning in Windows PowerShell 2.0.</source>
          <target state="translated">Windows PowerShell 2.0에서 시작 하는 Windows PowerShell의에서 트랜잭션 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This feature enables you to start a transaction, to indicate which commands are part of the transaction, and to commit or roll back a transaction.</source>
          <target state="translated">이 기능을 사용 하면 트랜잭션의 일부인 명령을 나타내는 트랜잭션을 커밋하거나에 트랜잭션을 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ABOUT TRANSACTIONS</source>
          <target state="translated">트랜잭션 정보</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, a transaction is a set of one or more commands that are managed as a logical unit.</source>
          <target state="translated">Windows PowerShell의 트랜잭션은 논리 단위로 관리 되는 하나 이상의 명령의 집합.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A transaction can be completed ("committed"), which changes data affected by the transaction.</source>
          <target state="translated">트랜잭션이 완료 ("커밋") 트랜잭션에 의해 영향을 받는 데이터를 변경 하는 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Or, a transaction can be completely undone ("rolled back") so that the affected data is not changed by the transaction.</source>
          <target state="translated">또는 완전히 취소 ("롤백")는 트랜잭션이 될 수 있는 영향을 받는 데이터는 트랜잭션에 의해 변경 되지 않도록 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Because the commands in a transaction are managed as a unit, either all commands are committed, or all commands are rolled back.</source>
          <target state="translated">트랜잭션의 명령은 하나의 단위로 관리, 되므로 모든 명령이 커밋됩니다 또는 모든 명령은 롤백됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Transactions are widely used in data processing, most notably in database operations and for financial transactions.</source>
          <target state="translated">트랜잭션은은 데이터베이스 작업에서 가장 주목할 만한 한 금융 거래에 대 한 데이터 처리에 널리 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Transactions are most often used when the worst-case scenario for a set of commands is not that they all fail, but that some commands succeed while others fail, leaving the system in a damaged, false, or uninterpretable state that is difficult to repair.</source>
          <target state="translated">트랜잭션은 명령 집합에 대 한 최악의 시나리오는 모두 실패 있지만 일부 명령은 지정 된 나머지는 실패 하는 동안 실행, 으로써 시스템을 손상, false 또는 uninterpretable 상태를 복구 하기 어려운 경우에 가장 자주 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>TRANSACTION CMDLETS</source>
          <target state="translated">트랜잭션 CMDLET</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Windows PowerShell includes several cmdlets designed for managing transactions.</source>
          <target state="translated">Windows PowerShell 트랜잭션 관리에 대 한 여러 cmdlet을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Cmdlet                 Description</source>
          <target state="translated">Cmdlet 설명</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Start-Transaction      Starts a new transaction.</source>
          <target state="translated">Start-transaction 시작 새 트랜잭션이 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use-Transaction        Adds a command or expression to the transaction.</source>
          <target state="translated">Use-transaction 추가 명령 또는 식을 트랜잭션에 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The command must use transaction-enabled objects.</source>
          <target state="translated">이 명령은 트랜잭션 사용이 가능한 개체를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Undo-Transaction       Rolls back the transaction so that no data is changed by the transaction.</source>
          <target state="translated">Undo-transaction 롤업 없는 데이터가 트랜잭션에 의해 변경 될 수 있도록 트랜잭션이 백업 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Complete-Transaction   Commits the transaction.</source>
          <target state="translated">완료 트랜잭션 커밋 트랜잭션.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The data affected by the transaction is changed.</source>
          <target state="translated">트랜잭션에 의해 영향을 받는 데이터가 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Get-Transaction        Gets information about the active transaction.</source>
          <target state="translated">활성 트랜잭션에 대 한 정보 Get-transaction 가져옵니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For a list of transaction cmdlets, type:</source>
          <target state="translated">트랜잭션 cmdlet 목록은 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>get-command *transaction</source>
          <target state="translated">get 명령은 * 트랜잭션</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For detailed information about the cmdlets, type:</source>
          <target state="translated">Cmdlet에 대 한 자세한 내용은 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>get-help &lt;cmdlet-name&gt; -detailed</source>
          <target state="translated">get-help &lt; cmdlet 이름 &gt;-detailed</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>get-help use-transaction -detailed</source>
          <target state="translated">도움말 얻기 사용 하 여 트랜잭션-detailed</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>TRANSACTION-ENABLED ELEMENTS</source>
          <target state="translated">트랜잭션이 사용 가능한 요소</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To participate in a transaction, both the cmdlet and the provider must support transactions.</source>
          <target state="translated">트랜잭션에 참여, cmdlet 및 공급자를 모두 트랜잭션을 지원 해야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This feature is built in to the objects that are affected by the transaction.</source>
          <target state="translated">이 기능에 기본 제공 트랜잭션에 의해 영향을 받는 개체입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Windows PowerShell Registry provider supports transactions in Windows Vista.</source>
          <target state="translated">Windows PowerShell 레지스트리 공급자는 Windows Vista에서 트랜잭션을 지원합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The TransactedString object (Microsoft.PowerShell.Commands.Management.TransactedString) works with any operating system that runs Windows PowerShell.</source>
          <target state="translated">TransactedString 개체 (Microsoft.PowerShell.Commands.Management.TransactedString) Windows PowerShell을 실행 하는 모든 운영 체제에서 작동 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Other Windows PowerShell providers can support transactions.</source>
          <target state="translated">다른 Windows PowerShell 공급자에는 트랜잭션을 지원할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To find the Windows PowerShell providers in your session that support transactions, use the following command to find the "Transactions" value in the Capabilities property of providers:</source>
          <target state="translated">트랜잭션을 지 원하는 세션에서 Windows PowerShell 공급자를 찾으려면 공급자의 기능 속성에서 "트랜잭션" 값을 찾으려면 다음 명령을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>get-psprovider | where {$_.Capabilities -like "transactions"}</source>
          <target state="translated">get psprovider | 여기서 {$_입니다. 기능-같은 "트랜잭션"을 (를)</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about a provider, see the Help for the provider.</source>
          <target state="translated">공급자에 대 한 자세한 내용은 공급자에 대 한 도움말을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To get provider Help, type:</source>
          <target state="translated">공급자 도움말을 가져오려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>get-help &lt;provider-name&gt;</source>
          <target state="translated">도움말 얻기 &lt; 공급자 이름 &gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, to get Help for the Registry provider, type:</source>
          <target state="translated">예를 들어 레지스트리 공급자에 대한 도움말을 보려면 다음과 같이 입력합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>get-help registry</source>
          <target state="translated">도움말 얻기 레지스트리</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>THE USETRANSACTION PARAMETER</source>
          <target state="translated">USETRANSACTION 매개 변수</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Cmdlets that can support transactions have a UseTransaction parameter.</source>
          <target state="translated">트랜잭션을 지원할 수 있는 Cmdlet은 UseTransaction 매개 변수를 한.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This parameter includes the command in the active transaction.</source>
          <target state="translated">활성 트랜잭션에 명령을 포함 하는이 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can use the full parameter name or its alias, "usetx".</source>
          <target state="translated">전체 매개 변수 이름 또는 별칭, "usetx"를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The parameter can be used only when the session contains an active transaction.</source>
          <target state="translated">매개 변수는 세션에 활성 트랜잭션이 있는 경우에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you enter a command with the UseTransaction parameter when there is no active transaction, the command fails.</source>
          <target state="translated">활성 트랜잭션이 없을 때 UseTransaction 매개 변수가 있는 명령을 입력 하면 명령이 실패 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To find cmdlets with the UseTransaction parameter, type:</source>
          <target state="translated">UseTransaction 매개 변수가 있는 cmdlet을 찾으려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>get-help * -parameter UseTransaction</source>
          <target state="translated">도움말 얻기 *-UseTransaction 매개 변수</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell core, all of the cmdlets designed to work with Windows PowerShell providers support transactions.</source>
          <target state="translated">Windows PowerShell 핵심 cmdlet의 모든 게 작동 하도록 설계 Windows PowerShell 공급자와 함께 트랜잭션을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>As a result, you can use the provider cmdlets to manage transactions.</source>
          <target state="translated">결과적으로 트랜잭션을 관리 하는 공급자 cmdlet을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information about Windows PowerShell providers, see about_Providers.</source>
          <target state="translated">Windows PowerShell 공급자에 대 한 자세한 내용은 about_Providers를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>THE TRANSACTION OBJECT</source>
          <target state="translated">트랜잭션 개체</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Transactions are represented in Windows PowerShell by a transaction object, System.Management.Automation.Transaction.</source>
          <target state="translated">Windows PowerShell System.Management.Automation.Transaction 트랜잭션 개체로 트랜잭션은 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The object has the following properties:</source>
          <target state="translated">개체에는 다음과 같은 속성이 있습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>RollbackPreference: Contains the rollback preference set for the current transaction.</source>
          <target state="translated">RollbackPreference: 현재 트랜잭션이 대해 설정 롤백 기본 설정이 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can set the rollback preference when you use Start-Transaction to start the transaction.</source>
          <target state="translated">Start-transaction을 사용 하 여 트랜잭션을 시작 하는 한 롤백 기본 설정을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The rollback preference determines the conditions under which the transaction is rolled back automatically.</source>
          <target state="translated">롤백 기본 설정 되 고 트랜잭션이 롤백됩니다 자동으로 조건을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Valid values are Error, TerminatingError, and Never.</source>
          <target state="translated">유효한 값은 오류, 오류를 TerminatingError, 및 사용 안 함.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The default value is Error.</source>
          <target state="translated">기본값은 오류입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Status: Contains the current status of the transaction.</source>
          <target state="translated">상태: 트랜잭션의 현재 상태를 포함합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Valid values are Active, Committed, and RolledBack.</source>
          <target state="translated">유효한 값은 활성, 커밋됨, 및 RolledBack입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>SubscriberCount: Contains the number of subscribers to the transaction.</source>
          <target state="translated">SubscriberCount: 트랜잭션에 구독자의 수를 포함합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A subscriber is added to a transaction when you start a transaction while another transaction is in progress.</source>
          <target state="translated">구독자는 다른 트랜잭션이 진행 중인 동안 트랜잭션을 시작할 때 트랜잭션에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The subscriber count is decremented when a subscriber commits the transaction.</source>
          <target state="translated">구독자 개수는 구독자 트랜잭션을 커밋할 때 감소 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>ACTIVE TRANSACTIONS</source>
          <target state="translated">활성 트랜잭션</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, only one transaction is active at a time, and you can manage only the active transaction.</source>
          <target state="translated">Windows PowerShell에서 한 번에 하나의 트랜잭션만 활성화 되어 하 고 활성 트랜잭션이 관리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Multiple transactions can be in progress in the same session at the same time, but only the most-recently started transaction is active.</source>
          <target state="translated">이와 동시에 동일한 세션에서 여러 개의 트랜잭션이 진행 될 수 있습니다 있지만 가장 최근에 시작한 트랜잭션이 활성화 됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>As a result, you cannot specify a particular transaction when using the transaction cmdlets.</source>
          <target state="translated">결과적으로 트랜잭션 cmdlet을 사용 하 여 특정 트랜잭션에 지정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Commands always apply to the active transaction.</source>
          <target state="translated">활성 트랜잭션에 명령을 항상 적용합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This is most evident in the behavior of the Get-Transaction cmdlet.</source>
          <target state="translated">이것은 Get-transaction cmdlet의 동작에 가장 분명 하 게 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When you enter a Get-Transaction command, Get-Transaction always gets only one transaction object.</source>
          <target state="translated">Get-transaction 명령은 입력 하면 Get-transaction는 항상 하나의 트랜잭션 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This object is the object that represents the active transaction.</source>
          <target state="translated">이 개체는 활성 트랜잭션을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To manage a different transaction, you must first finish the active transaction, either by committing it or rolling it back.</source>
          <target state="translated">다른 트랜잭션의 관리 하려면 먼저 활성 트랜잭션을 커밋하거나 롤백하 중 하나를 완료 해야 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When you do this, the previous transaction becomes active automatically.</source>
          <target state="translated">이렇게 하면 이전 트랜잭션이 자동으로 활성화 됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Transactions become active in the reverse of order of which they are started, so that the most recently started transaction is always active.</source>
          <target state="translated">트랜잭션이 시작 되는 순서와 역순에서 active, 트랜잭션은 항상 활성화 가장 최근에 시작 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>SUBSCRIBERS AND INDEPENDENT TRANSACTIONS</source>
          <target state="translated">구독자와 독립 트랜잭션을</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If you start a transaction while another transaction is in progress, by default, Windows PowerShell does not start a new transaction.</source>
          <target state="translated">다른 트랜잭션이 기본적으로 진행에서 되는 동안 트랜잭션을 시작 하는 경우 Windows PowerShell에는 새 트랜잭션을 시작 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Instead, it adds a "subscriber" to the current transaction.</source>
          <target state="translated">대신, 현재 트랜잭션이에 "subscriber"를 추가합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>When a transaction has multiple subscribers, a single Undo-Transaction command at any point rolls back the entire transaction for all subscribers.</source>
          <target state="translated">트랜잭션이 여러 구독자에 있는 경우 언제 든 지 단일 Undo-transaction 명령을 모든 구독자에 대 한 전체 트랜잭션을 롤백합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>However, to commit the transaction, you must enter a Complete-Transaction command for every subscriber.</source>
          <target state="translated">그러나 트랜잭션 커밋를 입력 해야 Complete-transaction 명령을 모든 구독자에 대해.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To find the number of subscribers to a transaction, check the SubscriberCount property of the transaction object.</source>
          <target state="translated">트랜잭션에 대 한 구독자의 번호를 찾으려면 트랜잭션 개체의 SubscriberCount 속성을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, the following command uses the Get-Transaction cmdlet to get the value of the SubscriberCount property of the active transaction:</source>
          <target state="translated">예를 들어 다음 명령은 Get-transaction cmdlet를 사용 하 여 활성 트랜잭션 SubscriberCount 속성의 값을 가져오려면:</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>(Get-Transaction).SubscriberCount</source>
          <target state="translated">(Get-transaction)입니다. SubscriberCount</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Adding a subscriber is the default behavior because most transactions that are started while another transaction is in progress are related to the original transaction.</source>
          <target state="translated">구독자를 추가 하는 것은 원본 트랜잭션에 다른 트랜잭션이 진행 중인 동안 시작 된 대부분의 트랜잭션은 서로 관련 되어 있으므로 기본 동작입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In the typical model, a script that contains a transaction calls a helper script that contains its own transaction.</source>
          <target state="translated">일반적인 모델 트랜잭션을 포함 하는 스크립트는 자체 트랜잭션을 포함 하는 도우미 스크립트를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Because the transactions are related, they should be rolled back or committed as a unit.</source>
          <target state="translated">트랜잭션이 서로 관련 되어 있으므로 이러한 해야 수 롤백 또는 커밋될 단위로.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>However, you can start a transaction that is independent of the current transaction by using the Independent parameter of the Start-Transaction cmdlet.</source>
          <target state="translated">그러나 Start-transaction cmdlet의 독립 매개 변수를 사용 하 여 현재 트랜잭션의 독립적인 트랜잭션을 시작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When you start an independent transaction, Start-Transaction creates a new transaction object, and the new transaction becomes the active transaction.</source>
          <target state="translated">독립 트랜잭션을 시작 하면 Start-transaction 새 트랜잭션 개체를 만들고 새 트랜잭션이 활성 트랜잭션이 있습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The independent transaction can be committed or rolled back without affecting the original transaction.</source>
          <target state="translated">독립 트랜잭션은 커밋 또는 원본 트랜잭션에 영향을 주지 않고 롤백할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When the independent transaction is finished (committed or rolled back), the original transaction becomes the active transaction again.</source>
          <target state="translated">독립 트랜잭션을 (커밋 또는 롤백 뒤로) 완료 되 면 원래 트랜잭션이 활성 트랜잭션을 다시 됩니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CHANGING DATA</source>
          <target state="translated">변경 되는 데이터</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When you use transactions to change data, the data that is affected by the transaction is not changed until you commit the transaction.</source>
          <target state="translated">트랜잭션을 변경 데이터를 사용 하 여 트랜잭션을 커밋할 때까지 트랜잭션에 의해 영향 받는 데이터 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>However, the same data can be changed by commands that are not part of the transaction.</source>
          <target state="translated">그러나 트랜잭션이 포함 되지 않은 명령을 사용 하 여 동일한 데이터를 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Keep this in mind when you are using transactions to manage shared data.</source>
          <target state="translated">트랜잭션을 사용 하는 공유 데이터를 관리 하는 경우이 점을 명심 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Typically, databases have mechanisms that lock the data while you are working on it, preventing other users, and other commands, scripts, and functions, from changing it.</source>
          <target state="translated">일반적으로 데이터베이스에서 작업 하는, 다른 사용자가 다른 명령, 스크립트 및 함수를 변경 하는 것을 방지 하는 동안 데이터를 잠금 메커니즘을 보유 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>However, the lock is a feature of the database.</source>
          <target state="translated">그러나 잠금에는 데이터베이스의 기능입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>It is not related to transactions.</source>
          <target state="translated">트랜잭션과 관련 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you are working in a transaction-enabled file system or other data store, the data can be changed while the transaction is in progress.</source>
          <target state="translated">트랜잭션이 사용 가능한 파일 시스템 또는 다른 데이터 저장소에서 작업 하는 트랜잭션이 진행 중인 동안 데이터를 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The examples in this section use the Windows PowerShell Registry provider and assume that you are familiar with it.</source>
          <target state="translated">이 섹션의 예제 Windows PowerShell 레지스트리 공급자를 사용 하 고 친숙 하다 고 가정 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For information about the Registry provider, type "get-help registry".</source>
          <target state="translated">레지스트리 공급자에 대 한 내용은 "get-help 레지스트리"를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>EXAMPLE 1: COMMITTING A TRANSACTION</source>
          <target state="translated">예제 1: 트랜잭션 커밋</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To create a transaction, use the Start-Transaction cmdlet.</source>
          <target state="translated">트랜잭션을 만들 Start-transaction cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following command starts a transaction with the default settings.</source>
          <target state="translated">다음 명령은 기본 설정으로 트랜잭션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>start-transaction</source>
          <target state="translated">트랜잭션 시작</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To include commands in the transaction, use the UseTransaction parameter of the cmdlet.</source>
          <target state="translated">트랜잭션에 명령을 포함 하십시오 cmdlet의 UseTransaction 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>By default, commands are not included in the transaction,</source>
          <target state="translated">기본적으로 명령에에서 없는 트랜잭션</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For example, the following command, which sets the current location in the Software key of the HKCU: drive, is not included in the transaction.</source>
          <target state="translated">HKCU의 소프트웨어 키의 현재 위치를 설정 하는 다음 명령 예를 들어: 드라이브에 설치 되어 트랜잭션이에 포함 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>cd hkcu:\Software</source>
          <target state="translated">cd hkcu: \software</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following command, which creates the MyCompany key, uses the UseTransaction parameter of the New-Item cmdlet to include the command in the active transaction.</source>
          <target state="translated">MyCompany 키를 만드는 다음 명령을 활성 트랜잭션에 명령을 포함 하는 New-item cmdlet의 UseTransaction 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>new-item MyCompany -UseTransaction</source>
          <target state="translated">새 항목 MyCompany UseTransaction</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The command returns an object that represents the new key, but because the command is part of the transaction, the registry is not yet changed.</source>
          <target state="translated">명령은 새 키를 나타내는 개체를 반환 하지만 레지스트리 아직 변경 되지 명령은 트랜잭션의 일부 이므로 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Hive: HKEY_CURRENT_USER\Software</source>
          <target state="translated">Hive: 주의 하십시오</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>SKC  VC Name                           Property</source>
          <target state="translated">SKC VC Name 속성</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>0   0 MyCompany                      {}</source>
          <target state="translated">0 0 MyCompany {}</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To commit the transaction, use the Complete-Transaction cmdlet.</source>
          <target state="translated">트랜잭션 커밋, Complete-transaction cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Because it always affects the active transaction, you cannot specify the transaction.</source>
          <target state="translated">활성 트랜잭션, 항상 영향을 주므로 트랜잭션을 지정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>complete-transaction</source>
          <target state="translated">트랜잭션 완료</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>As a result, the MyCompany key is added to the registry.</source>
          <target state="translated">결과적으로, MyCompany 키를 레지스트리에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>dir m*</source>
          <target state="translated">dir m *</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Hive: HKEY_CURRENT_USER\software</source>
          <target state="translated">Hive: 주의 하십시오</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>SKC  VC Name                           Property</source>
          <target state="translated">SKC VC Name 속성</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>83   1 Microsoft                      {(default)} 0   0 MyCompany                      {}</source>
          <target state="translated">83 1 Microsoft {(기본값)을 (를) 0 0 MyCompany {}</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>EXAMPLE 2: ROLLING BACK A TRANSACTION</source>
          <target state="translated">예제 2: 트랜잭션 롤백</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>To create a transaction, use the Start-Transaction cmdlet.</source>
          <target state="translated">트랜잭션을 만들 Start-transaction cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The following command starts a transaction with the default settings.</source>
          <target state="translated">다음 명령은 기본 설정으로 트랜잭션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>start-transaction</source>
          <target state="translated">트랜잭션 시작</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following command, which creates the MyOtherCompany key, uses the UseTransaction parameter of the New-Item cmdlet to include the command in the active transaction.</source>
          <target state="translated">MyOtherCompany 키를 만드는 다음 명령을 활성 트랜잭션에 명령을 포함 하는 New-item cmdlet의 UseTransaction 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>new-item MyOtherCompany -UseTransaction</source>
          <target state="translated">새 항목 MyOtherCompany UseTransaction</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The command returns an object that represents the new key, but because the command is part of the transaction, the registry is not yet changed.</source>
          <target state="translated">명령은 새 키를 나타내는 개체를 반환 하지만 레지스트리 아직 변경 되지 명령은 트랜잭션의 일부 이므로 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Hive: HKEY_CURRENT_USER\Software</source>
          <target state="translated">Hive: 주의 하십시오</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>SKC  VC Name                           Property</source>
          <target state="translated">SKC VC Name 속성</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>0   0 MyOtherCompany                 {}</source>
          <target state="translated">0 0 MyOtherCompany {}</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>To roll back the transaction, use the Undo-Transaction cmdlet.</source>
          <target state="translated">트랜잭션을 롤백 하십시오 Undo-transaction cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Because it always affects the active transaction, you do not specify the transaction.</source>
          <target state="translated">활성 트랜잭션, 항상 영향을 주므로 트랜잭션을 지정 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Undo-transaction</source>
          <target state="translated">실행 취소 트랜잭션</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The result is that the MyOtherCompany key is not added to the registry.</source>
          <target state="translated">결과 MyOtherCompany 키를 레지스트리에 추가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>dir m*</source>
          <target state="translated">dir m *</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Hive: HKEY_CURRENT_USER\software</source>
          <target state="translated">Hive: 주의 하십시오</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>SKC  VC Name                           Property</source>
          <target state="translated">SKC VC Name 속성</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>83   1 Microsoft                      {(default)} 0   0 MyCompany                      {}</source>
          <target state="translated">83 1 Microsoft {(기본값)을 (를) 0 0 MyCompany {}</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>EXAMPLE 3: PREVIEWING A TRANSACTION</source>
          <target state="translated">예제 3: 미리 보기는 트랜잭션</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Typically, the commands used in a transaction change data.</source>
          <target state="translated">일반적으로 트랜잭션에 사용 되는 명령에는 데이터 변경 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>However, the commands that get data are useful in a transaction, too, because they get data inside of the transaction.</source>
          <target state="translated">그러나 데이터는 트랜잭션 내에서 가져오기 때문에 데이터를 가져오는 명령을 너무, 거래에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This provides a preview of the changes that committing the transaction would cause.</source>
          <target state="translated">이 인해 트랜잭션을 커밋하는 변경 내용 미리 보기를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the Get-ChildItem command (the alias is "dir") to preview the changes in a transaction.</source>
          <target state="translated">다음 예제에는 트랜잭션에서 변경 내용을 미리 보려면 (별칭은 "dir") Get-childitem 명령을 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following command starts a transaction.</source>
          <target state="translated">다음 명령은 트랜잭션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>start-transaction</source>
          <target state="translated">트랜잭션 시작</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The following command uses the New-ItemProperty cmdlet to add the MyKey registry entry to the MyCompany key.</source>
          <target state="translated">다음 명령은 New-itemproperty cmdlet를 사용 하 여 MyKey 레지스트리 항목 MyCompany 키를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The command uses the UseTransaction parameter to include the command in the transaction.</source>
          <target state="translated">명령은 UseTransaction 매개 변수를 사용 하 여 트랜잭션에 명령을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>new-itemproperty -path MyCompany -Name MyKey -value 123 -UseTransaction</source>
          <target state="translated">새 itemproperty-MyCompany 경로-이름 MyKey-123 값-UseTransaction</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The command returns an object representing the new registry entry, but the registry entry is not changed.</source>
          <target state="translated">이 명령은 새 레지스트리 항목을 나타내는 개체를 반환 하지만 레지스트리 항목을 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>MyKey</source>
          <target state="translated">MyKey</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>123</source>
          <target state="translated">123</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>To get the items that are currently in the registry, use a Get-ChildItem command ("dir") without the UseTransaction parameter.</source>
          <target state="translated">현재 레지스트리에 있는 항목을 가져오려면 UseTransaction 매개 변수 없이 Get-childitem 명령을 ("dir")를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The following command gets items that begin with "M."</source>
          <target state="translated">다음 명령은 "M."로 시작 하는 항목을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>dir m*</source>
          <target state="translated">dir m *</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The result shows that no entries have yet been added to the MyCompany key.</source>
          <target state="translated">결과 항목이 없는 아직에 추가한 MyCompany 키를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Hive: HKEY_CURRENT_USER\Software</source>
          <target state="translated">Hive: 주의 하십시오</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>SKC  VC Name                           Property</source>
          <target state="translated">SKC VC Name 속성</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>83   1 Microsoft                      {(default)} 0   0 MyCompany                      {}</source>
          <target state="translated">83 1 Microsoft {(기본값)을 (를) 0 0 MyCompany {}</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>To preview the effect of committing the transaction, enter a Get-ChildItem ("dir") command with the UseTransaction parameter.</source>
          <target state="translated">트랜잭션 커밋 효과 미리 보려면 UseTransaction 매개 변수가 있는 Get-childitem ("dir") 명령을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This command has a view of the data from within the transaction.</source>
          <target state="translated">이 명령은 트랜잭션 내에서 데이터의 보기를 있습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>dir m* -useTransaction</source>
          <target state="translated">dir m *-useTransaction</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The result shows that, if the transaction is committed, the MyKey entry will be added to the MyCompany key.</source>
          <target state="translated">결과 트랜잭션이 커밋된 경우 MyKey 항목에 추가할 MyCompany 키를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Hive: HKEY_CURRENT_USER\Software</source>
          <target state="translated">Hive: 주의 하십시오</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>SKC  VC Name                           Property</source>
          <target state="translated">SKC VC Name 속성</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>83   1 Microsoft                      {(default)} 0   1 MyCompany                      {MyKey}</source>
          <target state="translated">83 1 Microsoft {(기본값)을 (를) 0 1 MyCompany {MyKey}</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>EXAMPLE 4: COMBINING TRANSACTED AND NON-TRANSACTED COMMANDS</source>
          <target state="translated">예 4: 결합 트랜잭션 및 비트랜잭션 명령</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can enter non-transacted commands during a transaction.</source>
          <target state="translated">트랜잭션 중 트랜잭션 되지 않은 명령을 입력할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The non-transacted commands affect the data immediately, but they do not affect the transaction.</source>
          <target state="translated">트랜잭션 되지 않은 명령을 즉시 데이터는 영향을 하지만 트랜잭션을 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The following command starts a transaction in the HKCU:\Software registry key.</source>
          <target state="translated">다음 명령은 hkcu: \software 레지스트리 키에서 트랜잭션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>start-transaction</source>
          <target state="translated">트랜잭션 시작</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The next three commands use the New-Item cmdlet to add keys to the registry.</source>
          <target state="translated">다음의 세 명령은 레지스트리 키를 추가 하려면 New-item cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The first and third commands use the UseTransaction parameter to include the commands in the transaction.</source>
          <target state="translated">첫 번째 및 세 번째 명령은 UseTransaction 매개 변수를 사용 하 여 트랜잭션에 명령을 포함 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The second command omits the parameter.</source>
          <target state="translated">두 번째 명령은 매개 변수를 생략 합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Because the second command is not included in the transaction, it is effective immediately.</source>
          <target state="translated">두 번째 명령은 트랜잭션에 포함 되어 있지 않으므로, 그 즉시 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>new-item MyCompany1 -UseTransaction</source>
          <target state="translated">새 항목 MyCompany1 UseTransaction</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>new-item MyCompany2</source>
          <target state="translated">새 항목 MyCompany2</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>new-item MyCompany3 -UseTransaction</source>
          <target state="translated">새 항목 MyCompany3 UseTransaction</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To view the current state of the registry, use a Get-ChildItem ("dir") command without the UseTransaction parameter.</source>
          <target state="translated">레지스트리의 현재 상태를 보려면 UseTransaction 매개 변수 없이 Get-childitem ("dir") 명령을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>This command gets items that begin with "M."</source>
          <target state="translated">이 명령은 "M."로 시작 하는 항목을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>dir m*</source>
          <target state="translated">dir m *</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The result shows that the MyCompany2 key is added to the registry, but the MyCompany1 and MyCompany3 keys, which are part of the transaction, are not added.</source>
          <target state="translated">결과 나타나지만 MyCompany2 키가 레지스트리를에 추가 트랜잭션의 일부인 MyCompany1 및 MyCompany3 키 추가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Hive: HKEY_CURRENT_USER\Software</source>
          <target state="translated">Hive: 주의 하십시오</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>SKC  VC Name                           Property</source>
          <target state="translated">SKC VC Name 속성</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>83   1 Microsoft                      {(default)} 0    0 MyCompany2                     {}</source>
          <target state="translated">83 1 Microsoft {(기본값)을 (를) 0 0 MyCompany2 {}</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The following command commits the transaction.</source>
          <target state="translated">다음 명령은 트랜잭션을 커밋합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>complete-transaction</source>
          <target state="translated">트랜잭션 완료</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Now, the keys that were added as part of the transaction appear in the registry.</source>
          <target state="translated">이제는 거래의 일환으로 추가 된 키의 레지스트리에 나타납니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>dir m*</source>
          <target state="translated">dir m *</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Hive: HKEY_CURRENT_USER\Software</source>
          <target state="translated">Hive: 주의 하십시오</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>SKC  VC Name                           Property</source>
          <target state="translated">SKC VC Name 속성</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>83   1 Microsoft                      {(default)} 0    0 MyCompany1                     {} 0    0 MyCompany2                     {} 0    0 MyCompany3                     {}</source>
          <target state="translated">83 1 Microsoft {(기본값)을 (를) 0 0 MyCompany1 {} 0 0 MyCompany2 {} 0 0 MyCompany3 {}</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>EXAMPLE 5: USING AUTOMATIC ROLLBACK</source>
          <target state="translated">예제 5:를 사용 하 여 자동 롤백</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>When a command in a transaction generates an error of any kind, the transaction is automatically rolled back.</source>
          <target state="translated">트랜잭션에서 명령을 모든 종류의 오류를 생성할 때 트랜잭션이 자동으로 롤백됩니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This default behavior is designed for scripts that run transactions.</source>
          <target state="translated">이 기본 동작은 트랜잭션을 실행 하는 스크립트를 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Scripts are typically well tested and include error-handling logic, so errors are not expected and should terminate the transaction.</source>
          <target state="translated">스크립트는 일반적으로 충분 한 테스트를 오류 예상 하지 및 트랜잭션을 종료 해야 하므로 오류 처리 논리를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The first command starts a transaction in the HKCU:\Software registry key.</source>
          <target state="translated">첫 번째 명령은 hkcu: \software 레지스트리 키에서 트랜잭션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>start-transaction</source>
          <target state="translated">트랜잭션 시작</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The following command uses the New-Item cmdlet to add the MyCompany key to the registry.</source>
          <target state="translated">다음 명령은 New-item cmdlet를 사용 하 여 MyCompany 키를 레지스트리에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The command uses the UseTransaction parameter (the alias is "usetx") to include the command in the transaction.</source>
          <target state="translated">이 명령은 트랜잭션에 명령을 포함 하는 UseTransaction 매개 변수 (별칭 "usetx")를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>New-Item MyCompany -UseTX</source>
          <target state="translated">새 항목 MyCompany UseTX</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Because the MyCompany key already exists in the registry, the command fails, and the transaction is rolled back.</source>
          <target state="translated">MyCompany 키에에서 이미 있으므로 레지스트리를 명령이 실패 하 고 트랜잭션이 롤백됩니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>New-Item : A key at this path already exists At line:1 char:9</source>
          <target state="translated">새 항목:이 경로에 키 줄: 1 문자: 9에 이미 있습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>new-item &lt;&lt;&lt;&lt;  MyCompany -usetx</source>
          <target state="translated">새 항목 &lt;&lt;&lt;&lt; MyCompany usetx</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A Get-Transaction command confirms that the transaction has been rolled back and that the SubscriberCount is 0.</source>
          <target state="translated">Get-transaction 명령은 트랜잭션이 롤백된 하 고는 SubscriberCount 0 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>RollbackPreference   SubscriberCount   Status</source>
          <target state="translated">RollbackPreference SubscriberCount 상태</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Error                0                 RolledBack</source>
          <target state="translated">오류 0 롤백</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>EXAMPLE 6: CHANGING THE ROLLBACK PREFERENCE</source>
          <target state="translated">예제 6: 롤백 기본 설정 변경</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If you want the transaction to be more error tolerant, you can use the RollbackPreference parameter of Start-Transaction to change the preference.</source>
          <target state="translated">트랜잭션을 허용 하는 자세한 오류 원한다 면 기본 설정을 변경 하려면 Start-transaction의 RollbackPreference 매개 변수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The following command starts a transaction with a rollback preference of "Never".</source>
          <target state="translated">다음 명령은 "never" 롤백 기본 설정으로 트랜잭션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>start-transaction -rollbackpreference Never</source>
          <target state="translated">트랜잭션 시작 rollbackpreference 하지</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>In this case, when the command fails, the transaction is not automatically rolled back.</source>
          <target state="translated">이 경우 명령이 실패 하는 경우 트랜잭션이 자동으로 롤백되지 않습니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>New-Item MyCompany -UseTX</source>
          <target state="translated">새 항목 MyCompany UseTX</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>New-Item : A key at this path already exists At line:1 char:9</source>
          <target state="translated">새 항목:이 경로에 키 줄: 1 문자: 9에 이미 있습니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>new-item &lt;&lt;&lt;&lt;  MyCompany -usetx</source>
          <target state="translated">새 항목 &lt;&lt;&lt;&lt; MyCompany usetx</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Because the transaction is still active, you can resubmit the command as part of the transaction.</source>
          <target state="translated">트랜잭션이 여전히 활성 상태 이기 때문에 거래의 일환으로 명령을 다시 제출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>New-Item MyOtherCompany -UseTX</source>
          <target state="translated">새 항목 MyOtherCompany UseTX</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>EXAMPLE 7: USING THE USE-TRANSACTION CMDLET</source>
          <target state="translated">USE-TRANSACTION CMDLET을 사용 하 여 예 7:</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The Use-Transaction cmdlet enables you to do direct scripting against transaction-enabled Microsoft .NET Framework  objects.</source>
          <target state="translated">Use-transaction cmdlet을 사용 하면 트랜잭션이 사용 가능한 Microsoft.NET Framework 개체에 대 한 스크립트를 직접 수행 수 있습니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Use-Transaction takes a script block that can only contain commands and expressions that use transaction-enabled .NET Framework objects, such as instances of the Microsoft.PowerShell.Commands.Management.TransactedString class.</source>
          <target state="translated">Use-transaction 명령 및 트랜잭션이 사용 가능한.NET Framework 같은 개체는 Microsoft.PowerShell.Commands.Management.TransactedString 클래스의 인스턴스를 사용 하는 식만 포함할 수 있는 스크립트 블록을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The following command starts a transaction.</source>
          <target state="translated">다음 명령은 트랜잭션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>start-transaction</source>
          <target state="translated">트랜잭션 시작</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The following New-Object command creates an instance of the TransactedString class and saves it in the $t variable.</source>
          <target state="translated">다음 New-object 명령을 TransactedString 클래스의 인스턴스를 만들고 $t 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>$t = New-Object Microsoft.PowerShell.Commands.Management.TransactedString</source>
          <target state="translated">$t New-object Microsoft.PowerShell.Commands.Management.TransactedString =</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The following command uses the Append method of the TransactedString object to add text to the string.</source>
          <target state="translated">다음 명령은 TransactedString 개체의 Append 메서드를 사용 하 여 문자열에 텍스트를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Because the command is not part of the transaction, the change is effective immediately.</source>
          <target state="translated">이 명령은 트랜잭션의 일부가 아니므로 변경 내용을 즉시 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>$t.append("Windows")</source>
          <target state="translated">$t.append("Windows")</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The following command uses the same Append method to add text, but it adds the text as part of the transaction.</source>
          <target state="translated">다음 명령은 동일한 Append 메서드를 사용 하 여 텍스트를 추가할 하지만 트랜잭션의 일부로 텍스트를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The command is enclosed in braces, and it is set as the value of the ScriptBlock parameter of Use-Transaction.</source>
          <target state="translated">명령은 중괄호로 하 고 사용 하 여 트랜잭션의 ScriptBlock 매개 변수 값으로 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The UseTransaction parameter (UseTx) is required.</source>
          <target state="translated">UseTransaction 매개 변수 (UseTx)가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>use-transaction {$t.append(" PowerShell")} -usetx</source>
          <target state="translated">{$t.append ("PowerShell")을 (를) 사용 하 여 트랜잭션 usetx</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>To see the current content of the transacted string in $t, use the ToString method of the TransactedString object.</source>
          <target state="translated">$T에 트랜잭션 된 문자열의 현재 콘텐츠를 보려면 TransactedString 개체의 ToString 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>$t.tostring()</source>
          <target state="translated">$t.tostring()</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The output shows that only the non-transacted changes are effective.</source>
          <target state="translated">출력에 표시를는 트랜잭션 되지 않은 변경 내용이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>To see the current content of the transacted string in $t from within the transaction, embed the expression in a Use-Transaction command.</source>
          <target state="translated">트랜잭션 내에서 $t에 트랜잭션 된 문자열의 현재 콘텐츠를 보려면 식을 사용 하 여 트랜잭션 명령에 포함 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>use-transaction {$s.tostring()} -usetx</source>
          <target state="translated">{$s.tostring()}를 사용 하 여 트랜잭션 usetx</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The output shows the transaction view.</source>
          <target state="translated">출력에서는 트랜잭션 보기를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Windows PowerShell</source>
          <target state="translated">Windows PowerShell</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The following command commits the transaction.</source>
          <target state="translated">다음 명령은 트랜잭션을 커밋합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>complete-transaction</source>
          <target state="translated">트랜잭션 완료</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>To see the final string:</source>
          <target state="translated">최종 문자열을 보려면:</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>$t.tostring()</source>
          <target state="translated">$t.tostring()</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Windows PowerShell</source>
          <target state="translated">Windows PowerShell</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>EXAMPLE 7: MANAGING MULTI-SUBSCRIBER TRANSACTIONS</source>
          <target state="translated">예제 7: 다중 구독자 트랜잭션을 관리</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>When you start a transaction while another transaction is in progress, Windows PowerShell does not create a second transaction by default.</source>
          <target state="translated">Windows PowerShell는 다른 트랜잭션이 진행 중인 동안 트랜잭션을 시작 하면 기본적으로 두 번째 트랜잭션을 만들지 않습니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Instead, it adds a subscriber to the current transaction.</source>
          <target state="translated">대신, 현재 트랜잭션이에 구독자를 추가합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>This example shows how to view and manage a multi-subscriber transaction.</source>
          <target state="translated">이 예제에는 보고 다중 가입자 트랜잭션을 관리 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Begin by starting a transaction in the HKCU:\Software key.</source>
          <target state="translated">Hkcu: \software 키에는 트랜잭션을 시작 하 여 시작 합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>start-transaction</source>
          <target state="translated">트랜잭션 시작</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The following command uses the Get-Transaction command to get the active transaction.</source>
          <target state="translated">다음 명령은 Get-transaction 명령은 사용 하 여 활성 트랜잭션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>get-transaction</source>
          <target state="translated">get 트랜잭션</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The result shows the object that represents the active transaction.</source>
          <target state="translated">결과 활성 트랜잭션을 나타내는 개체를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>RollbackPreference   SubscriberCount   Status</source>
          <target state="translated">RollbackPreference SubscriberCount 상태</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Error                1                 Active</source>
          <target state="translated">오류: 1 활성</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The following command adds the MyCompany key to the registry.</source>
          <target state="translated">다음 명령은 MyCompany 키 레지스트리에 추가합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The command  uses the UseTransaction parameter to include the command in the transaction.</source>
          <target state="translated">명령은 UseTransaction 매개 변수를 사용 하 여 트랜잭션에 명령을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>new-item MyCompany -UseTransaction</source>
          <target state="translated">새 항목 MyCompany UseTransaction</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The following command uses the Start-Transaction command to start a transaction.</source>
          <target state="translated">다음 명령은 Start-transaction 명령은 사용 하 여 트랜잭션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Although this command is typed at the command prompt, this scenario is more likely to happen when you run a script that contains a transaction.</source>
          <target state="translated">이 명령은 명령 프롬프트에 입력 하지만이 시나리오는 트랜잭션을 포함 하는 스크립트를 실행 하는 경우 이러한 문제가 발생할 가능성이 높습니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>start-transaction</source>
          <target state="translated">트랜잭션 시작</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>A Get-Transaction command shows that the subscriber count on the transaction object is incremented.</source>
          <target state="translated">Get-transaction 명령은 구독자 개수 트랜잭션 개체에는 증가 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The value is now 2.</source>
          <target state="translated">값은 이제 2입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>RollbackPreference   SubscriberCount   Status</source>
          <target state="translated">RollbackPreference SubscriberCount 상태</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Error                2                 Active</source>
          <target state="translated">오류 2 활성</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The next command uses the New-ItemProperty cmdlet to add the MyKey registry entry to the MyCompany key.</source>
          <target state="translated">다음 명령은 New-itemproperty cmdlet를 사용 하 여 MyKey 레지스트리 항목 MyCompany 키를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>It uses the UseTransaction parameter to include the command in the transaction.</source>
          <target state="translated">UseTransaction 매개 변수를 사용 하 여 트랜잭션에 명령을 포함 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>new-itemproperty -path MyCompany -name MyKey -UseTransaction</source>
          <target state="translated">새 itemproperty-MyCompany 경로-MyKey UseTransaction 이름 지정</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The MyCompany key does not exist in the registry, but this command succeeds because the two commands are part of the same transaction.</source>
          <target state="translated">MyCompany 키를 레지스트리에 없지만 두 명령은 동일한 트랜잭션의 일부 이므로이 명령이 성공 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The following command commits the transaction.</source>
          <target state="translated">다음 명령은 트랜잭션을 커밋합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>If it rolled back the transaction, the transaction would be rolled back for all the subscribers.</source>
          <target state="translated">트랜잭션이 롤백되면이 트랜잭션이 롤백할 수는 모든 구독자에 대 한.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>complete-transaction</source>
          <target state="translated">트랜잭션 완료</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>A Get-Transaction command shows that the subscriber count on the transaction object is 1, but the value of Status is still Active (not Committed).</source>
          <target state="translated">Get-transaction 명령은 나타나지만 트랜잭션 개체에 구독자 개수는 1, 상태 값은 여전히 활성 상태 (커밋되지 않은) 합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>RollbackPreference   SubscriberCount   Status</source>
          <target state="translated">RollbackPreference SubscriberCount 상태</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Error                1                 Active</source>
          <target state="translated">오류: 1 활성</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>To finish committing the transaction, enter a second Complete- Transaction command.</source>
          <target state="translated">트랜잭션을 커밋하기 완료를 위해 두 번째 Complete-transaction 명령을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>To commit a multi-subscriber transaction, you must enter one Complete-Transaction command for each Start-Transaction command.</source>
          <target state="translated">다중 가입자 트랜잭션을 커밋할 Start-transaction 명령에 대해 하나의 Complete-transaction 명령을 입력 해야 합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>complete-transaction</source>
          <target state="translated">트랜잭션 완료</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Another Get-Transaction command shows that the transaction has been committed.</source>
          <target state="translated">다른 Get-transaction 명령은 트랜잭션이 커밋 되었는지 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>RollbackPreference   SubscriberCount   Status</source>
          <target state="translated">RollbackPreference SubscriberCount 상태</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Error                0                 Committed</source>
          <target state="translated">커밋된 오류</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>EXAMPLE 8: MANAGING INDEPENDENT TRANSACTIONS</source>
          <target state="translated">예 8: 독립적인 트랜잭션 관리</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>When you start a transaction while another transaction is in progress, you can use the Independent parameter of Start-Transaction to make the new transaction independent of the original transaction.</source>
          <target state="translated">다른 트랜잭션이 진행 중인 동안 트랜잭션을 시작 하면 새 트랜잭션이 원래 트랜잭션의 상관 없이 사용 하려면 Start-transaction의 Independent 매개 변수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>When you do, Start-Transaction creates a new transaction object and makes the new transaction the active transaction.</source>
          <target state="translated">이렇게 하면 Start-transaction 새 트랜잭션 개체를 만들고 새 트랜잭션을 활성 트랜잭션.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Begin by starting a transaction in the HKCU:\Software key.</source>
          <target state="translated">Hkcu: \software 키에는 트랜잭션을 시작 하 여 시작 합니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>start-transaction</source>
          <target state="translated">트랜잭션 시작</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The following command uses the Get-Transaction command to get the active transaction.</source>
          <target state="translated">다음 명령은 Get-transaction 명령은 사용 하 여 활성 트랜잭션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>get-transaction</source>
          <target state="translated">get 트랜잭션</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The result shows the object that represents the active transaction.</source>
          <target state="translated">결과 활성 트랜잭션을 나타내는 개체를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>RollbackPreference   SubscriberCount   Status</source>
          <target state="translated">RollbackPreference SubscriberCount 상태</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Error                1                 Active</source>
          <target state="translated">오류: 1 활성</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The following command adds the MyCompany registry key as part of the transaction.</source>
          <target state="translated">다음 명령은 트랜잭션의 일부로 MyCompany 레지스트리 키를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>It uses the UseTransaction parameter (UseTx) to include the command in the active transaction.</source>
          <target state="translated">UseTransaction 매개 변수 (UseTx)를 사용 하 여 활성 트랜잭션에 명령을 포함 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>new-item MyCompany -use</source>
          <target state="translated">새 항목 MyCompany-사용</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The following command starts a new transaction.</source>
          <target state="translated">다음 명령은 새 트랜잭션을 시작 합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The command uses the Independent parameter to indicate that this transaction is not a subscriber to the active transaction.</source>
          <target state="translated">이 트랜잭션은 활성 트랜잭션에 대 한 구독자 임을 나타내려면 독립 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>start-transaction -independent</source>
          <target state="translated">트랜잭션 시작-독립적</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>When you create an independent transaction, the new (most-recently created) transaction becomes the active transaction.</source>
          <target state="translated">독립 트랜잭션을 만들면 새 (가장 최근에 생성된) 트랜잭션이 활성 트랜잭션이 됩니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>You can use a Get-Transaction command to get the active transaction.</source>
          <target state="translated">Get-transaction 명령은 활성 트랜잭션을 가져옵니다를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>get-transaction</source>
          <target state="translated">get 트랜잭션</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Note that the SubscriberCount of the transaction is 1, indicating that there are no other subscribers and that the transaction is new.</source>
          <target state="translated">트랜잭션의 SubscriberCount 1 임을 참고를 나타내는 다른 구독자가 고 트랜잭션이 새로운.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>RollbackPreference   SubscriberCount   Status</source>
          <target state="translated">RollbackPreference SubscriberCount 상태</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Error                1                 Active</source>
          <target state="translated">오류: 1 활성</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The new transaction must be finished (either committed or rolled back) before you can manage the original transaction.</source>
          <target state="translated">원래 트랜잭션을 관리할 수 있습니다 (커밋 또는 롤백된 뒤로) 새 트랜잭션을 완료 해야 합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The following command adds the MyOtherCompany key to the registry.</source>
          <target state="translated">다음 명령은 레지스트리에 MyOtherCompany 키를 추가합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>It uses the UseTransaction parameter (UseTx) to include the command in the active transaction.</source>
          <target state="translated">UseTransaction 매개 변수 (UseTx)를 사용 하 여 활성 트랜잭션에 명령을 포함 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>new-item MyOtherCompany -usetx</source>
          <target state="translated">새 항목 MyOtherCompany usetx</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Now, roll back the transaction.</source>
          <target state="translated">이제 트랜잭션을 롤백하십시오.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>If there were a single transaction with two subscribers, rolling back the transaction would roll back the entire transaction for all the subscribers.</source>
          <target state="translated">두 명의 구독자가 포함 된 단일 트랜잭션으로 있는 경우 트랜잭션을 롤백하면 롤백하도록 전체 트랜잭션이 모든 구독자에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>However, because these transactions are independent, rolling back the newest transaction cancels the registry changes and makes the original transaction the active transaction.</source>
          <target state="translated">그러나 이러한 트랜잭션에 독립적 이기 때문에 롤백하는 최신의 트랜잭션을 취소 레지스트리를 변경 하 고 원래 트랜잭션이 활성 트랜잭션을 만듭니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>undo-transaction</source>
          <target state="translated">실행 취소 트랜잭션</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>A Get-Transaction command confirms that the original transaction is still active in the session.</source>
          <target state="translated">Get-transaction 명령은 원래 트랜잭션이 세션에서 아직 활성 상태 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>get-transaction</source>
          <target state="translated">get 트랜잭션</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>RollbackPreference   SubscriberCount   Status</source>
          <target state="translated">RollbackPreference SubscriberCount 상태</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Error                1                 Active</source>
          <target state="translated">오류: 1 활성</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The following command commits the active transaction.</source>
          <target state="translated">다음 명령은 활성 트랜잭션을 커밋합니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>complete-transaction</source>
          <target state="translated">트랜잭션 완료</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>A Get-ChildItem command shows that the registry has been changed.</source>
          <target state="translated">Get-childitem 명령은 레지스트리 변경 되어 있음을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>dir m*</source>
          <target state="translated">dir m *</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Hive: HKEY_CURRENT_USER\Software</source>
          <target state="translated">Hive: 주의 하십시오</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>SKC  VC Name                           Property</source>
          <target state="translated">SKC VC Name 속성</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>83   1 Microsoft                      {(default)} 0   0 MyCompany                      {}</source>
          <target state="translated">83 1 Microsoft {(기본값)을 (를) 0 0 MyCompany {}</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Start-Transaction Get-Transaction Complete-Transaction Undo-Transaction Use-Transaction Registry (provider) about_Providers Get-PSProvider Get-ChildItem</source>
          <target state="translated">Start-transaction Get-transaction Complete-transaction Undo-transaction Use-transaction 레지스트리 (공급자) about_Providers Get-psprovider Get-childitem</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>