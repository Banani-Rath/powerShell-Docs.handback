<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5fff7ee8182776a0c365d4de94149fa049bf149</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Utility\ConvertFrom-StringData.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62626e97fb2a70fe953ff1aecb7cfaa2b36053d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbb5670ba333f856c18f054149facb3411d9fcac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData</source>
          <target state="translated">ConvertFrom-StringData</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData</source>
          <target state="translated">ConvertFrom-StringData</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts a string containing one or more key and value pairs to a hash table.</source>
          <target state="translated">키와 값 쌍이 하나 이상 포함된 문자열을 해시 테이블로 변환합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The ConvertFrom-StringData cmdlet converts a string that contains one or more key and value pairs into a hash table.</source>
          <target state="translated">ConvertFrom-StringData cmdlet은 키와 값 쌍이 하나 이상 포함된 문자열을 해시 테이블로 변환합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because each key/value pair must be on a separate line, here-strings are often used as the input format.</source>
          <target state="translated">각 키/값 쌍이 별도의 줄에 있어야 하므로 입력 형식으로 here-string이 자주 사용됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The ConvertFrom-StringData cmdlet is considered to be a safe cmdlet that can be used in the DATA section of a script or function.</source>
          <target state="translated">ConvertFrom-StringData cmdlet은 스크립트 또는 함수의 DATA 섹션에 사용할 수 있는 안전한 cmdlet으로 간주됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When used in a DATA section, the contents of the string must conform to the rules for a DATA section.</source>
          <target state="translated">DATA 섹션에서 사용하는 경우 문자열의 내용이 DATA 섹션의 규칙을 준수해야 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see about_Data_Sections.</source>
          <target state="translated">자세한 내용은 about_Data_Sections를 참조하세요.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData supports escape character sequences that are allowed by conventional machine translation tools.</source>
          <target state="translated">ConvertFrom-StringData는 기존의 컴퓨터 번역 도구에서 허용되는 이스케이프 문자 시퀀스를 지원합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>That is, the cmdlet can interpret backslashes (<ph id="ph1">\\</ph>) as escape characters in the string data by using the Regex.Unescape Methodhttp://msdn.microsoft.com/library/vstudio/system.text.regularexpressions.regex.unescape(v=vs.100).aspx, instead of the Windows PowerShell backtick character (<ph id="ph2">\`</ph>) that would normally signal the end of a line in a script.</source>
          <target state="translated">즉, cmdlet 백슬래시를 해석할 수 있습니다 (<ph id="ph1">\\</ph>) 스크립트에서 줄의 끝 신호를 보낼 일반적으로 있는 Regex.Unescape Methodhttp://msdn.microsoft.com/library/vstudio/system.text.regularexpressions.regex.unescape(v=vs.100).aspx, instead of the Windows PowerShell backtick character (<ph id="ph2">\`</ph>)를 사용 하 여 문자열 데이터의 문자를 이스케이프 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Inside the here-string, the backtick character does not work.</source>
          <target state="translated">here-string 내에서 억음 문자는 작동하지 않습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also preserve a literal backslash in your results by escaping it with a preceding backslash, like this:  <ph id="ph1">\\\\</ph>.</source>
          <target state="translated">다음과 같이 앞에 백슬래시 이스케이프 하 여 결과에 백슬래시를도 유지할 수 있습니다:  <ph id="ph1">\\\\</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unescaped backslash characters, such as those that are commonly used in file paths, can render as illegal escape sequences in your results.</source>
          <target state="translated">이스케이프되지 않은 백슬래시 문자(예: 일반적으로 파일 경로에 사용되는 문자)는 결과에서 잘못된 이스케이프 시퀀스로 렌더링될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 1 --------------------------</source>
          <target state="translated">-------------------------- 예제 1 --------------------------</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These commands convert a single-quoted here-string of user messages into a hash table.</source>
          <target state="translated">이 명령은 사용자 메시지를 작은따옴표로 묶은 here-string을 해시 테이블로 변환합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In a single-quoted string, values are not substituted for variables and expressions are not evaluated.</source>
          <target state="translated">작은따옴표로 묶인 문자열에서 값은 변수로 대체되지 않으며 식은 평가되지 않습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The first command creates a here-string and saves it in the $here variable.</source>
          <target state="translated">첫 번째 명령은 here-string을 만들어 $here 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second command uses the ConvertFrom-StringData cmdlet to convert the here-string in the $here variable to a hash table.</source>
          <target state="translated">두 번째 명령은 ConvertFrom-StringData cmdlet을 사용하여 $here 변수의 here-string을 해시 테이블로 변환합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 2 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 2 --------------------------</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These commands demonstrate that ConvertFrom-StringData actually converts a here-string to a hash table.</source>
          <target state="translated">이 명령은 ConvertFrom-StringData가 here-string을 해시 테이블로 실제로 변환하는 것을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first command creates a double-quoted here-string that includes one key/value pair and saves it in the $p variable.</source>
          <target state="translated">첫 번째 명령은 하나의 키/값 쌍을 포함하고 큰따옴표로 묶인 here-string을 만들어 $p 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The second command uses a pipeline operator (|) to send the $p variable to the Get-Member cmdlet.</source>
          <target state="translated">두 번째 명령은 파이프라인 연산자(|)를 사용하여 $p 변수를 Get-Member cmdlet으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The result shows that $p is a string (System.String).</source>
          <target state="translated">결과는 $p가 문자열(System.String)임을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The third command uses the ConvertFrom-StringData cmdlet to convert the here-string in $p to a hash table.</source>
          <target state="translated">세 번째 명령은 ConvertFrom-StringData cmdlet을 사용하여 $p의 here-string을 해시 테이블로 변환합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The command stores the result in the $hash variable.</source>
          <target state="translated">이 명령은 결과를 $hash 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The final command uses a pipeline operator (|) to send the $hash variable to the Get-Member cmdlet.</source>
          <target state="translated">마지막 명령은 파이프라인 연산자(|)를 사용하여 $hash 변수를 Get-Member cmdlet으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The result shows that the content of the $hash variable is a hash table (System.Collections.Hashtable).</source>
          <target state="translated">결과는 $hash 변수의 내용이 해시 테이블(System.Collections.Hashtable)임을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 3 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 3 --------------------------</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This command converts a single-quoted here-string that contains multiple key/value pairs into a hash table.</source>
          <target state="translated">이 명령은 여러 키/값 쌍을 포함하고 있는 작은따옴표로 묶인 here-string을 해시 테이블로 변환합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this command, the value of the StringData parameter is a here-string, instead of a variable that contains a here-string.</source>
          <target state="translated">이 명령에서 StringData 매개 변수 값은 here-string이 포함된 변수가 아니라 here-string입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Either format is valid.</source>
          <target state="translated">두 형식은 모두 유효합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The here-string includes a comment about one of the strings.</source>
          <target state="translated">이 here-string에는 문자열 중 하나에 대한 주석이 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Comments are valid in strings, provided that the comment is on a different line than a key/value pair.</source>
          <target state="translated">주석은 키/값 쌍과 다른 줄에 있다는 조건만 충족되면 문자열로 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 4 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 4 --------------------------</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This example converts a regular double-quoted string (not a here-string) into a hash table and saves it in the $a variable.</source>
          <target state="translated">이 예제에서는 일반적인 큰따옴표로 묶인 문자열(here-string 아님)을 해시 테이블로 변환하여 $a 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To satisfy the condition that each key/value pair must be on a separate line, it uses the Windows PowerShell newline character (<ph id="ph1">\`</ph>n) to separate the pairs.</source>
          <target state="translated">별도 줄에 각 키/값 쌍이 있어야 하는 조건을 충족 하기 위해 사용 하 여 Windows PowerShell 줄 바꿈 문자 (<ph id="ph1">\`</ph>n)는 쌍을 구분 하 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The result is a hash table of the input.</source>
          <target state="translated">생성되는 결과는 입력의 해시 테이블입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The remaining commands display the output.</source>
          <target state="translated">나머지 명령은 출력을 표시합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 5 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 5 --------------------------</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This example shows a ConvertFrom-StringData command used in the DATA section of a script.</source>
          <target state="translated">이 예제에서는 스크립트의 DATA 섹션에 사용된 ConvertFrom-StringData 명령을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The statements below the DATA section display the text to the user.</source>
          <target state="translated">DATA 섹션 아래에 있는 문은 사용자에게 텍스트를 표시합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because the text includes variable names, it must be enclosed in a single-quoted string so that the variables are interpreted literally and not expanded.</source>
          <target state="translated">텍스트에 변수 이름이 포함되어 있으므로 변수를 확장하지 않고 문자 그대로 해석하기 위해 텍스트를 작은따옴표로 묶어야 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Variables are not permitted in the DATA section.</source>
          <target state="translated">DATA 섹션에는 변수가 허용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 6 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 6 --------------------------</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This example shows that you can use a pipeline operator (|) to send a string to ConvertFrom-StringData.</source>
          <target state="translated">이 예제에서는 파이프라인 연산자(|)를 사용하여 문자열을 ConvertFrom-StringData로 보낼 수 있음을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The first command saves a here-string in the $here variable.</source>
          <target state="translated">첫 번째 명령은 $here 변수에 here-string을 저장합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The second command uses a pipeline operator (|) to send the $here variable to ConvertFrom-StringData.</source>
          <target state="translated">두 번째 명령은 파이프라인 연산자(|)를 사용하여 $here 변수를 ConvertFrom-StringData로 보내고</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The command saves the result in the $hash variable.</source>
          <target state="translated">결과를 $hash 변수에 저장합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The final command displays the contents of the $hash variable.</source>
          <target state="translated">마지막 명령은 $hash 변수의 내용을 표시합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 7 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 7 --------------------------</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This example shows the use of escape characters to create new lines and return characters in ConvertFrom-StringData.</source>
          <target state="translated">이 예제에서는 이스케이프 문자를 사용하여 ConvertFrom-StringData에 줄 바꿈 문자를 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In this example, the escape sequence <bpt id="p1">**</bpt>\n<ept id="p1">**</ept> is used to create new lines within a block of text (the value, in the resulting hash table) that is associated with a name or item (the name, in the resulting hash table).</source>
          <target state="translated">이 예제에서는 이스케이프 시퀀스 <bpt id="p1">**</bpt>\n<ept id="p1">**</ept> 연결 된 이름 또는 항목 (결과 해시 테이블의 이름) (결과 해시 테이블의 값) 텍스트 블록 내에 새 줄을 만드는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>-------------------------- EXAMPLE 8 --------------------------</source>
          <target state="translated">-------------------------- EXAMPLE 8 --------------------------</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This example shows how to use of the backslash escape character in the string data to allow a file path to render correctly in the resulting ConvertFrom-StringData hash table.</source>
          <target state="translated">이 예제에서는 문자열 데이터에 백슬래시 이스케이프 문자를 사용하여 결과 ConvertFrom-StringData 해시 테이블에서 파일 경로가 제대로 렌더링되게 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The double backslash ensures that the literal backslash characters render correctly in the hash table output.</source>
          <target state="translated">이중 백슬래시는 리터럴 백슬래시가 해시 테이블 출력에 제대로 렌더링되게 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-StringData</source>
          <target state="translated">-StringData</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Specifies the string to be converted.</source>
          <target state="translated">변환할 문자열을 지정합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can use this parameter or pipe a string to ConvertFrom-StringData.</source>
          <target state="translated">이 매개 변수를 사용하거나 문자열을 ConvertFrom-StringData로 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The parameter name is optional.</source>
          <target state="translated">매개 변수 이름은 선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The value of this parameter must be a string that is enclosed in single quotation marks (a single-quoted string) or a string that is enclosed in double quotation marks (a double-quoted string) or a here-string containing one or more key/value pairs.</source>
          <target state="translated">이 매개 변수 값은 작은따옴표 또는 큰따옴표로 묶인 문자열이거나 하나 이상의 키/값 쌍을 포함하는 here-string이어야 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Each key/value pair must be on a separate line, or each pair must be separated by newline characters (<ph id="ph1">\`</ph>n).</source>
          <target state="translated">각 키/값 쌍의 별도 줄에 있어야 합니다. 또는 각 쌍 또는 줄 바꿈 문자로 구분 해야 합니다 (<ph id="ph1">\`</ph>n).</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can include comments in the string, but the comments cannot be on the same line as a key/value pair.</source>
          <target state="translated">문자열에 주석을 포함할 수 있지만 주석은 키/값 쌍과 같은 줄에 있을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The comments are not included in the hash table.</source>
          <target state="translated">주석은 해시 테이블에 포함되지 않습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A here-string is a string consisting of one or more lines within which quotation marks are interpreted literally.</source>
          <target state="translated">here-string은 하나 이상의 줄로 이루어진 문자열로, 이 문자열 내에서 따옴표는 문자 그대로 해석됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see about_Quoting_Rules.</source>
          <target state="translated">자세한 내용은 about_Quoting_Rules를 참조하세요.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can pipe a string containing a key/value pair to ConvertFrom-StringData.</source>
          <target state="translated">키/값 쌍을 포함하는 문자열을 ConvertFrom-StringData로 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>System.Collections.Hashtable</source>
          <target state="translated">System.Collections.Hashtable</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData returns a hash table that it creates from the key/value pairs.</source>
          <target state="translated">ConvertFrom-StringData는 키/값 쌍에서 만들어지는 해시 테이블을 반환합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A here-string is a string consisting of one or more lines within which quotation marks are interpreted literally.</source>
          <target state="translated">here-string은 하나 이상의 줄로 이루어진 문자열로, 이 문자열 내에서 따옴표는 문자 그대로 해석됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see about_Quoting_Rules.</source>
          <target state="translated">자세한 내용은 about_Quoting_Rules를 참조하세요.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData can be useful in scripts that display user messages in multiple spoken languages.</source>
          <target state="translated">ConvertFrom-StringData는 여러 언어로 사용자 메시지를 표시하는 스크립트에서 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can use the dictionary-style hash tables to isolate text strings from code, such as in resource files, and to format the text strings for use in translation tools.</source>
          <target state="translated">사전 스타일의 해시 테이블을 사용하여 리소스 파일에서처럼 코드에서 텍스트 문자열을 분리하고 번역 도구에서 사용하도록 텍스트 문자열의 형식을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>about_Quoting_Rules</source>
          <target state="translated">about_Quoting_Rules</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>about_Script_Internationalization</source>
          <target state="translated">about_Script_Internationalization</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>about_Data_Sections</source>
          <target state="translated">about_Data_Sections</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>