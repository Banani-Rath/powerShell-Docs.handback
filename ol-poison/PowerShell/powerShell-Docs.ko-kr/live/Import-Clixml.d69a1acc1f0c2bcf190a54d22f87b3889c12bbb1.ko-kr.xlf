<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91e7f7f7bf3ec60d09d9c743c5afe6fce86fe446</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Import-Clixml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7e70251a4da3ece2f9832873d0f98f441553e00</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d5f96559c526351b34bbe25195ff490281d6864</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Import-Clixml</source>
          <target state="translated">Import-clixml</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Import-Clixml</source>
          <target state="translated">Import-clixml</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Imports a CLIXML file and creates corresponding objects in Windows PowerShell.</source>
          <target state="translated">CLIXML 파일을 가져오고 Windows PowerShell에서 해당 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ByPath (Default)</source>
          <target state="translated">ByPath (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ByLiteralPath</source>
          <target state="translated">ByLiteralPath</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Import-CliXml<ept id="p1">**</ept> cmdlet imports a CLIXML file with data that represents Microsoft .NET Framework objects and creates the objects in Windows PowerShell.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Import-clixml<ept id="p1">**</ept> cmdlet는 데이터를 Microsoft.NET Framework 개체를 나타내는 Windows PowerShell에서 개체를 만듭니다 CLIXML 파일을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A valuable use of <bpt id="p1">**</bpt>Import-CliXml<ept id="p1">**</ept> is to import credentials and secure strings that have been exported as secure XML by running the Export-CliXml cmdlet.</source>
          <target state="translated">사용 하는 귀중 한 <bpt id="p1">**</bpt>Import-clixml<ept id="p1">**</ept> 자격 증명 및 Export-clixml cmdlet을 실행 하 여 안전한 XML로 내보낸 보안 문자열을 가져오는 것입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For an example of how to do this, see Example 2.</source>
          <target state="translated">이 작업을 수행 하는 방법의 예를 들어 예 2를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example 1: Import a serialized file and recreate an object</source>
          <target state="translated">예제 1: serialize 된 파일을 가져올 개체를 다시 만듭니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This command uses the Export-Clixml cmdlet to save a serialized copy of the process information returned by Get-Process.</source>
          <target state="translated">이 명령은 Export-Clixml cmdlet을 사용하여 Get-Process가 반환한 프로세스 정보의 serialize된 복사본을 저장합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It then uses <bpt id="p1">**</bpt>Import-Clixml<ept id="p1">**</ept> to retrieve the contents of the serialized file and re-create an object that is stored in the $Processes variable.</source>
          <target state="translated">다음 사용 하 여 <bpt id="p1">**</bpt>Import-clixml<ept id="p1">**</ept> 하 serialize 된 파일의 콘텐츠를 검색 하 고 다시 $Processes 변수에 저장 하는 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example 2: Import a secure credential object</source>
          <target state="translated">예제 2: 보안 자격 증명 개체 가져오기</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> cmdlet encrypts credential objects by using the Windows Data Protection APIhttp://msdn.microsoft.com/library/windows/apps/xaml/hh464970.aspx.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> cmdlet는 Windows 데이터 보호 APIhttp://msdn.microsoft.com/library/windows/apps/xaml/hh464970.aspx를 사용 하 여 자격 증명 개체를 암호화 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This ensures that only your user account can decrypt the contents of the credential object.</source>
          <target state="translated">이렇게 하면 현재 사용자 계정 자격 증명 개체의 콘텐츠를 해독할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example, given a credential that you've stored in the $Credential variable by running the Get-Credential cmdlet, you can run the <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept> cmdlet to save the credential to disk.</source>
          <target state="translated">Get-credential cmdlet을 실행 하 여 $Credential 변수에 저장 되어 있는 자격 증명을 제공 하는이 예제에서는 실행할 수는 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept> cmdlet 자격 증명을 디스크에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the example, the file in which the credential is stored is represented by TestScript.ps1.credential.</source>
          <target state="translated">예제에서는 자격 증명 저장 된 파일은 TestScript.ps1.credential으로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Replace TestScript with the name of the script with which you are loading the credential.</source>
          <target state="translated">TestScript을 자격 증명 로드 된 스크립트의 이름을 바꿉니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the second command, you pipe the credential object to <bpt id="p1">**</bpt>Export-CliXml<ept id="p1">**</ept>, and save it to the path, $Credxmlpath, that you specified in the first command.</source>
          <target state="translated">두 번째 명령에서 자격 증명 개체를 파이프할 있습니다 <bpt id="p1">**</bpt>Export-clixml<ept id="p1">**</ept>, $Credxmlpath 첫 번째 명령에서 지정한 경로에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To import the credential automatically into your script, run the final two commands.</source>
          <target state="translated">스크립트에 자동으로 자격 증명을 가져올 마지막 두 명령을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This time, you are running Import-Clixml to import the secured credential object into your script.</source>
          <target state="translated">이 이번에 실행 하는 스크립트에 보안된 자격 증명 개체를 가져오려면 Import-clixml 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This eliminates the risk of exposing plain-text passwords in your script.</source>
          <target state="translated">이렇게 하면 스크립트에 일반 텍스트 암호에 노출 될 위험이 없습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-First</source>
          <target state="translated">우선</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets only the specified number of objects.</source>
          <target state="translated">지정된 수의 개체만 가져옵니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Enter the number of objects to get.</source>
          <target state="translated">가져올 개체 수를 입력합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-IncludeTotalCount</source>
          <target state="translated">-IncludeTotalCount</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Reports the total number of objects in the data set (an integer) followed by the selected objects.</source>
          <target state="translated">선택한 개체 다음에 오는 데이터 집합(정수)의 총 개체 수를 보고합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the cmdlet cannot determine the total count, it displays "Unknown total count."</source>
          <target state="translated">cmdlet이 총 개수를 확인할 수 없으면 "알 수 없는 총 개수"라고 표시됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The integer has an Accuracy property that indicates the reliability of the total count value.</source>
          <target state="translated">정수에는 총 개수 값의 안정성을 나타내는 정확도 속성이 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The value of Accuracy ranges from 0.0 to 1.0 where 0.0 means that the cmdlet could not count the objects, 1.0 means that the count is exact, and a value between 0.0 and 1.0 indicates an increasingly reliable estimate.</source>
          <target state="translated">정확도 값의 범위는 0.0에서 1.0입니다. 여기서 0.0은 cmdlet이 개체를 셀 수 없음을 의미하고, 1.0은 개수가 정확함을 의미합니다. 0.0에서 1.0 사이의 값은 매우 안정적인 추정값을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-LiteralPath</source>
          <target state="translated">-LiteralPath</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Specifies the XML files.</source>
          <target state="translated">XML 파일을 지정합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">*</bpt>Path<ept id="p1">*</ept>, the value of the <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> parameter is used exactly as it is typed.</source>
          <target state="translated">와 달리 <bpt id="p1">*</bpt>경로<ept id="p1">*</ept>, 의 값은 <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> 매개 변수는 입력 된 대로 정확 하 게 사용 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>No characters are interpreted as wildcards.</source>
          <target state="translated">어떠한 문자도 와일드카드로 해석되지 않습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the path includes escape characters, enclose it in single quotation marks.</source>
          <target state="translated">이스케이프 문자가 포함된 경로는 작은따옴표로 묶으세요.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</source>
          <target state="translated">작은따옴표는 Windows PowerShell이 어떤 문자도 이스케이프 시퀀스로 해석하지 않도록 지시합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-Path</source>
          <target state="translated">-Path</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specifies the XML files.</source>
          <target state="translated">XML 파일을 지정합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-Skip</source>
          <target state="translated">-건너뛰기</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Ignores the specified number of objects and then gets the remaining objects.</source>
          <target state="translated">지정된 개체 수를 무시하고 남은 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Enter the number of objects to skip.</source>
          <target state="translated">건너뛸 개체 수를 입력합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can pipe a string that contains a path to <bpt id="p1">**</bpt>Import-Clixml<ept id="p1">**</ept>.</source>
          <target state="translated">에 대 한 경로 포함 하는 문자열을 파이프할 수 <bpt id="p1">**</bpt>Import-clixml<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>PSObject</source>
          <target state="translated">PSObject</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Import-Clixml<ept id="p1">**</ept> returns objects that have been deserialized from the stored XML files.</source>
          <target state="translated"><bpt id="p1">**</bpt>Import-clixml<ept id="p1">**</ept> 저장된 된 XML 파일에서 deserialize 된 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When specifying multiple values for a parameter, use commas to separate the values.</source>
          <target state="translated">매개 변수에 여러 값을 지정할 때는 쉼표를 사용하여 값을 구분하세요.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, "<ph id="ph1">\&lt;</ph>parameter-name<ph id="ph2">\&gt;</ph> <ph id="ph3">\&lt;</ph>value1<ph id="ph4">\&gt;</ph>, <ph id="ph5">\&lt;</ph>value2<ph id="ph6">\&gt;</ph>".</source>
          <target state="translated">예를 들어 "<ph id="ph1">\&lt;</ph>매개 변수 이름<ph id="ph2">\&gt;</ph> <ph id="ph3">\&lt;</ph>value1<ph id="ph4">\&gt;</ph>, <ph id="ph5">\&lt;</ph>value2<ph id="ph6">\&gt;</ph>"입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Use PowerShell to Pass Credentials to Legacy Systems</source>
          <target state="translated">PowerShell을 사용 하 여 레거시 시스템 자격 증명을 전달 하려면</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Securely Store Credentials on Disk</source>
          <target state="translated">디스크에 자격 증명을 안전 하 게 저장</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Export-CliXml</source>
          <target state="translated">Export-clixml</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Join-Path</source>
          <target state="translated">Join-Path</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>