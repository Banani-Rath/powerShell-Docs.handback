<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb0962c0f81d40d7916ff2e6f61f1d2f75493051</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Security\ConvertTo-SecureString.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49785309f4685f15d297602d1c89a87b41469b8c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0698bf15b9fe00b28f40c82b10165bba3eaee610</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertTo-SecureString</source>
          <target state="translated">Convertto-securestring</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertTo-SecureString</source>
          <target state="translated">Convertto-securestring</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Converts encrypted standard strings to secure strings.</source>
          <target state="translated">암호화된 표준 문자열을 보안 문자열로 변환합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It can also convert plain text to secure strings.</source>
          <target state="translated">또한 일반 텍스트를 보안 문자열로 변환할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is used with ConvertFrom-SecureString and Read-Host.</source>
          <target state="translated">ConvertFrom-SecureString 및 Read-Host와 함께 사용됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Secure (Default)</source>
          <target state="translated">보안 (기본값)</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>PlainText</source>
          <target state="translated">일반 텍스트</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Open</source>
          <target state="translated">열기</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ConvertTo-SecureString<ept id="p1">**</ept> cmdlet converts encrypted standard strings into secure strings.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Convertto-securestring<ept id="p1">**</ept> cmdlet은 암호화 된 표준 문자열을 보안 문자열로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It can also convert plain text to secure strings.</source>
          <target state="translated">또한 일반 텍스트를 보안 문자열로 변환할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It is used with ConvertFrom-SecureString and Read-Host.</source>
          <target state="translated">ConvertFrom-SecureString 및 Read-Host와 함께 사용됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The secure string created by the cmdlet can be used with cmdlets or functions that require a parameter of type SecureString.</source>
          <target state="translated">cmdlet에서 생성된 보안 문자열은 SecureString 유형의 매개 변수가 필요한 cmdlet 또는 함수와 함께 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The secure string can be converted back to an encrypted, standard string using the ConvertFrom-SecureString cmdlet.</source>
          <target state="translated">ConvertFrom-SecureString cmdlet을 사용하여 보안 문자열을 암호화된 표준 문자열로 다시 변환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This enables it to be stored in a file for later use.</source>
          <target state="translated">이렇게 하면 나중에 사용할 수 있도록 문자열을 파일에 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the standard string being converted was encrypted with <bpt id="p1">**</bpt>ConvertFrom-SecureString<ept id="p1">**</ept> using a specified key, that same key must be provided as the value of the <bpt id="p2">*</bpt>Key<ept id="p2">*</ept> or <bpt id="p3">*</bpt>SecureKey<ept id="p3">*</ept> parameter of the <bpt id="p4">**</bpt>ConvertTo-SecureString<ept id="p4">**</ept> cmdlet.</source>
          <target state="translated">변환할 표준 문자열이로 암호화 된 경우 <bpt id="p1">**</bpt>Convertfrom-securestring<ept id="p1">**</ept> 지정된 된 키를 사용 하 여 동일한 키가 제공 해야의 값으로는 <bpt id="p2">*</bpt>키<ept id="p2">*</ept> 또는 <bpt id="p3">*</bpt>SecureKey<ept id="p3">*</ept> 의 매개 변수는 <bpt id="p4">**</bpt>Convertto-securestring<ept id="p4">**</ept> cmdlet입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example 1: Convert a secure string to an encrypted string</source>
          <target state="translated">예제 1: 암호화 된 문자열을 보안 문자열로 변환</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This example shows how to create a secure string from user input, convert the secure string to an encrypted standard string, and then convert the encrypted standard string back to a secure string.</source>
          <target state="translated">이 예제에서는 사용자 입력에서 보안 문자열을 만들고 보안 문자열을 암호화된 표준 문자열로 변환한 다음 암호화된 표준 문자열을 보안 문자열로 다시 변환하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">*</bpt>AsSecureString<ept id="p1">*</ept> parameter of the Read-Host cmdlet to create a secure string.</source>
          <target state="translated">첫 번째 명령은 <bpt id="p1">*</bpt>AsSecureString<ept id="p1">*</ept> 보안 문자열을 만들려면 Read-host cmdlet의 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>After you enter the command, any characters that you type are converted into a secure string and then saved in the $Secure variable.</source>
          <target state="translated">명령을 입력 하면, 모든 입력 문자를 보안 문자열로 변환 되 고 $Secure 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second command displays the contents of the $Secure variable.</source>
          <target state="translated">두 번째 명령은 $Secure 변수의 내용을 표시합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because the $Secure variable contains a secure string, Windows PowerShell displays only the System.Security.SecureString type.</source>
          <target state="translated">$Secure 변수의 보안 문자열을 포함 하므로 Windows PowerShell에서 System.Security.SecureString 유형만을 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The third command uses the ConvertFrom-SecureString cmdlet to convert the secure string in the $Secure variable into an encrypted standard string.</source>
          <target state="translated">세 번째 명령은 Convertfrom-securestring cmdlet를 사용 하 여 $Secure 변수의 보안 문자열을 암호화 된 표준 문자열로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It saves the result in the $Encrypted variable.</source>
          <target state="translated">$Encrypted 변수에 결과 저장 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The fourth command displays the encrypted string in the value of the $Encrypted variable.</source>
          <target state="translated">네 번째 명령은 $Encrypted 변수의 값에 암호화 된 문자열을 표시합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The fifth command uses the <bpt id="p1">**</bpt>ConvertTo-SecureString<ept id="p1">**</ept> cmdlet to convert the encrypted standard string in the $Encrypted variable back into a secure string.</source>
          <target state="translated">다섯 번째 명령은 <bpt id="p1">**</bpt>Convertto-securestring<ept id="p1">**</ept> $Encrypted 변수의 암호화 된 표준 문자열을 변환 하는 cmdlet를 다시 보안 문자열에 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It saves the result in the $Secure2 variable.</source>
          <target state="translated">$Secure2 변수에 결과 저장 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The sixth command displays the value of the $Secure2 variable.</source>
          <target state="translated">여섯 번째 명령은 $Secure2 변수의 값을 표시합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The SecureString type indicates that the command was successful.</source>
          <target state="translated">SecureString 유형은 명령이 성공했음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example 2: Create a secure string from an encrypted string in a file</source>
          <target state="translated">예제 2: 파일에 암호화 된 문자열에서 보안 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This example shows how to create a secure string from an encrypted standard string that is saved in a file.</source>
          <target state="translated">이 예제에서는 파일에 저장된 암호화된 표준 문자열에서 보안 문자열을 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">*</bpt>AsSecureString<ept id="p1">*</ept> parameter of the Read-Host cmdlet to create a secure string.</source>
          <target state="translated">첫 번째 명령은 <bpt id="p1">*</bpt>AsSecureString<ept id="p1">*</ept> 보안 문자열을 만들려면 Read-host cmdlet의 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After you enter the command, any characters that you type are converted into a secure string and then saved in the $Secure variable.</source>
          <target state="translated">명령을 입력 하면, 모든 입력 문자를 보안 문자열로 변환 되 고 $Secure 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The second command uses the ConvertFrom-SecureString cmdlet to convert the secure string in the $Secure variable into an encrypted standard string by using the specified key.</source>
          <target state="translated">두 번째 명령은 Convertfrom-securestring cmdlet를 사용 하 여 지정된 된 키를 사용 하 여 $Secure 변수의 보안 문자열을 암호화 된 표준 문자열로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The contents are saved in the $Encrypted variable.</source>
          <target state="translated">내용이는 $Encrypted 변수에 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The third command uses a pipeline operator (|) to send the value of the $Encrypted variable to the Set-Content cmdlet, which saves the value in the Encrypted.txt file.</source>
          <target state="translated">세 번째 명령은 파이프라인 연산자 (|)를 사용 하 여 Encrypted.txt 파일에 값을 저장 하는 Set-content cmdlet에 $Encrypted 변수의 값을 보내려고 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The fourth command uses the Get-Content cmdlet to get the encrypted standard string in the Encrypted.txt file.</source>
          <target state="translated">네 번째 명령은 Get-Content cmdlet을 사용하여 Encrypted.txt 파일에 있는 암호화된 표준 문자열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The command uses a pipeline operator to send the encrypted string to the <bpt id="p1">**</bpt>ConvertTo-SecureString<ept id="p1">**</ept> cmdlet, which converts it to a secure string by using the specified key.</source>
          <target state="translated">이 명령은 파이프라인 연산자를 사용 하 여 암호화 된 문자열을 보내도록는 <bpt id="p1">**</bpt>Convertto-securestring<ept id="p1">**</ept> cmdlet는 지정된 된 키를 사용 하 여 보안 문자열로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The results are saved in the $Secure2 variable.</source>
          <target state="translated">결과 $Secure2 변수에 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example 3: Convert a plain text string to a secure string</source>
          <target state="translated">예제 3: 일반 텍스트 문자열을 보안 문자열로 변환</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This command converts the plain text string P@ssW0rD!</source>
          <target state="translated">이 명령은 일반 텍스트 문자열 P@ssW0rD 변환!</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>into a secure string and stores the result in the $Secure_String_Pwd variable.</source>
          <target state="translated">보안 문자열로 시키고 결과 $Secure_String_Pwd 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To use the <bpt id="p1">*</bpt>AsPlainText<ept id="p1">*</ept> parameter, the <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> parameter must also be included in the command.</source>
          <target state="translated">사용 하는 <bpt id="p1">*</bpt>AsPlainText<ept id="p1">*</ept> 매개 변수는 <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> 매개 변수는 명령에 포함 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>-AsPlainText</source>
          <target state="translated">-AsPlainText</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Specifies a plain text string to convert to a secure string.</source>
          <target state="translated">보안 문자열로 변환할 일반 텍스트 문자열을 지정합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The secure string cmdlets help protect confidential text.</source>
          <target state="translated">보안 문자열 cmdlet을 사용하여 기밀 텍스트를 보호할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The text is encrypted for privacy and is deleted from computer memory after it is used.</source>
          <target state="translated">텍스트는 개인 정보 보호를 위해 암호화되며 사용한 후 컴퓨터 메모리에서 삭제됩니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you use this parameter to provide plain text as input, the system cannot protect that input in this manner.</source>
          <target state="translated">이 매개 변수를 사용하여 일반 텍스트를 입력으로 제공할 경우 시스템에서 이러한 방식으로 해당 입력을 보호할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To use this parameter, you must also specify the <bpt id="p1">*</bpt>Force<ept id="p1">*</ept> parameter.</source>
          <target state="translated">이 매개 변수를 사용 하려면도 지정 해야는 <bpt id="p1">*</bpt>Force<ept id="p1">*</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Confirms that you understand the implications of using the <bpt id="p1">*</bpt>AsPlainText<ept id="p1">*</ept> parameter and still want to use it.</source>
          <target state="translated">사용 하 여의 의미를 이해 하는 확인의 <bpt id="p1">*</bpt>AsPlainText<ept id="p1">*</ept> 매개 변수를 계속 사용 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>-Key</source>
          <target state="translated">키</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Specifies the encryption key to use when converting a secure string into an encrypted standard string.</source>
          <target state="translated">보안 문자열을 암호화된 표준 문자열로 변환할 때 사용할 암호화 키를 지정합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Valid key lengths are 16, 24, and 32 bytes.</source>
          <target state="translated">유효한 키 길이는 16, 24 및 32바이트입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>-SecureKey</source>
          <target state="translated">-SecureKey</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Specifies the encryption key to use when converting a secure string into an encrypted standard string.</source>
          <target state="translated">보안 문자열을 암호화된 표준 문자열로 변환할 때 사용할 암호화 키를 지정합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The key must be provided in the format of a secure string.</source>
          <target state="translated">제공하는 키는 보안 문자열 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The secure string is converted to a byte array before being used as the key.</source>
          <target state="translated">보안 문자열은 키로 사용되기 전에 바이트 배열로 변환됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Valid key lengths are 16, 24, and 32 bytes.</source>
          <target state="translated">유효한 키 길이는 16, 24 및 32바이트입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>-String</source>
          <target state="translated">-문자열</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Specifies the string to convert to a secure string.</source>
          <target state="translated">보안 문자열로 변환할 문자열을 지정합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can pipe a standard encrypted string to <bpt id="p1">**</bpt>ConvertTo-SecureString<ept id="p1">**</ept>.</source>
          <target state="translated">암호화 된 표준 문자열을 파이프할 수 <bpt id="p1">**</bpt>Convertto-securestring<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>System.Security.SecureString</source>
          <target state="translated">System.Security.SecureString</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>ConvertTo-SecureString returns a <bpt id="p1">**</bpt>SecureString<ept id="p1">**</ept> object.</source>
          <target state="translated">Convertto-securestring 반환는 <bpt id="p1">**</bpt>SecureString<ept id="p1">**</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ConvertFrom-SecureString</source>
          <target state="translated">Convertfrom-securestring</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Read-Host</source>
          <target state="translated">Read-Host</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>