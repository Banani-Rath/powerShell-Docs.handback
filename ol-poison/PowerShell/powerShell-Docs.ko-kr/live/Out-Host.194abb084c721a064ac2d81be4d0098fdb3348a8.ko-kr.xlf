<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02e0e9996f5c6c5680cb4a1a99d7cb84c58a36d8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\Out-Host.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd1ba8f818a71bcb97963af05865ae5bf0e6c973</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74eb30e0aafa2b8a85cca8bcafd552cd94435e37</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Out-Host</source>
          <target state="translated">Out-Host</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Out-Host</source>
          <target state="translated">Out-Host</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Sends output to the command line.</source>
          <target state="translated">출력을 명령줄로 보냅니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> cmdlet sends output to the Windows PowerShell host for display.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Out-host<ept id="p1">**</ept> cmdlet은 출력 표시에 대 한 Windows PowerShell 호스트로 보냅니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The host displays the output at the command line.</source>
          <target state="translated">이 호스트는 명령줄에 출력을 표시합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> is the default, you do not have to specify it unless you want to use its parameters to change the display.</source>
          <target state="translated">때문에 <bpt id="p1">**</bpt>Out-host<ept id="p1">**</ept> 기본적으로 표시를 변경 하려면 해당 매개 변수를 사용 하려는 경우가 아니면 지정할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example 1: Display system processes one page at a time</source>
          <target state="translated">예제 1: 한 번에 시스템 프로세스의 한 페이지 표시</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This command displays the processes on the system one page at a time.</source>
          <target state="translated">이 명령은 시스템의 프로세스를 한 번에 한 페이지씩 표시합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It uses the Get-Process cmdlet to get the processes on the system.</source>
          <target state="translated">Get-process cmdlet를 사용 하 여 시스템의 프로세스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The pipeline operator sends the results to <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept>, which displays them at the console.</source>
          <target state="translated">파이프라인 연산자가 결과를 <bpt id="p1">**</bpt>Out-host<ept id="p1">**</ept>, 콘솔에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Paging<ept id="p1">*</ept> parameter displays one page of data at a time.</source>
          <target state="translated"> <bpt id="p1">*</bpt>페이징<ept id="p1">*</ept> 매개 변수는 한 번에 데이터 한 페이지를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The same command format is used for the Help function that is built into Windows PowerShell.</source>
          <target state="translated">Windows PowerShell에 기본 제공되는 Help 함수에도 동일한 명령 형식이 사용됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>That function gets data from the Get-Help cmdlet and then uses the <bpt id="p1">*</bpt>Paging<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>Out-Host<ept id="p2">**</ept> to display the data one page at a time by using this command format: <ph id="ph1">`Get-Help $Args\[0\] | Out-Host -Paging`</ph>.</source>
          <target state="translated">함수는 Get-help cmdlet에서 데이터를 가져오기 하 고 다음 사용 하 여는 <bpt id="p1">*</bpt>페이징<ept id="p1">*</ept> 의 매개 변수 <bpt id="p2">**</bpt>Out-host<ept id="p2">**</ept> 이 명령 형식을 사용 하 여 한 번에 한 페이지씩 데이터를 표시 하려면: <ph id="ph1">`Get-Help $Args\[0\] | Out-Host -Paging`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example 2: Display session history</source>
          <target state="translated">예제 2: 세션 기록 표시</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-History cmdlet to get the session history, and then it stores the history in the $a variable.</source>
          <target state="translated">첫 번째 명령은 세션 기록에 가져오려는 Get-history cmdlet을 사용 하 고 $ a 변수에 기록을 저장 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The second command uses <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> to display the content of the $a variable, and it uses the <bpt id="p2">*</bpt>InputObject<ept id="p2">*</ept> parameter to specify the variable to <bpt id="p3">**</bpt>Out-Host<ept id="p3">**</ept>.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">**</bpt>Out-host<ept id="p1">**</ept> $ 변수를 사용 하 여 콘텐츠를 표시 하는 <bpt id="p2">*</bpt>InputObject<ept id="p2">*</ept> 매개 변수를 지정 하려면 <bpt id="p3">**</bpt>Out-host<ept id="p3">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Specifies the objects that are written to the console.</source>
          <target state="translated">콘솔에 기록할 개체를 지정합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects, or type a command or expression that gets the objects.</source>
          <target state="translated">개체를 포함하는 변수를 입력하거나 개체를 가져오는 명령 또는 식을 입력하세요.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>-Paging</source>
          <target state="translated">-페이징</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet displays one page of output at a time, and waits for user input before it displays the remaining pages, much like the traditional <bpt id="p1">**</bpt>more<ept id="p1">**</ept> command.</source>
          <target state="translated">한 번에 한 페이지씩 출력을 표시 하는이 cmdlet에 있고, 기존의 처럼 나머지를 표시 하기 전에 사용자 입력에 대 한 대기 페이지 나타냅니다 <bpt id="p1">**</bpt>자세한<ept id="p1">**</ept> 명령입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>By default, all of the output is displayed on a single page.</source>
          <target state="translated">기본적으로 모든 출력은 한 페이지에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The page size is determined by the characteristics of the host.</source>
          <target state="translated">호스트의 특성에 따라 페이지 크기가 결정됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.PSObject</source>
          <target state="translated">System.Management.Automation.PSObject</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can pipe any object to this cmdlet.</source>
          <target state="translated">이 cmdlet에 개체를 파이프할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This cmdlet does not generate any output.</source>
          <target state="translated">이 cmdlet은 어떠한 출력도 생성하지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, the host might display the objects that <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> sends to it.</source>
          <target state="translated">그러나 호스트 개체 표시는 <bpt id="p1">**</bpt>Out-host<ept id="p1">**</ept> 를 전송 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The cmdlets that contain the <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> verb (the <bpt id="p2">**</bpt>Out<ept id="p2">**</ept> cmdlets) do not format objects.</source>
          <target state="translated">포함 된 cmdlet는 <bpt id="p1">**</bpt>아웃<ept id="p1">**</ept> 동사 (의 <bpt id="p2">**</bpt>아웃<ept id="p2">**</ept> cmdlet) 개체 서식을 지정 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>They just render objects and send them to the specified display destination.</source>
          <target state="translated">방금 개체를 렌더링 하며 하는 지정 된 표시 대상으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you send an unformatted object to an <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> cmdlet, the cmdlet sends it to a formatting cmdlet before rendering it.</source>
          <target state="translated">서식이 지정 되지 않은 개체를 보낼 경우는 <bpt id="p1">**</bpt>아웃<ept id="p1">**</ept> cmdlet으로 보낸 형식 지정 cmdlet 렌더링 하기 전에 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> cmdlets do not have parameters for names or file paths.</source>
          <target state="translated"> <bpt id="p1">**</bpt>아웃<ept id="p1">**</ept> cmdlet 매개 변수 이름이 나 파일 경로 대 한 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To send data to an <bpt id="p1">**</bpt>Out<ept id="p1">**</ept> cmdlet, use a pipeline operator (|) to send the output of a Windows PowerShell command to the cmdlet.</source>
          <target state="translated">데이터 전송에 <bpt id="p1">**</bpt>아웃<ept id="p1">**</ept> cmdlet을 파이프라인 연산자 (|)를 사용 하 여 Windows PowerShell 명령의 출력은 cmdlet으로 보냅니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can also store data in a variable and use the <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> parameter to pass the data to the cmdlet.</source>
          <target state="translated">변수를 사용 데이터를 저장할 수도 있습니다는 <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> 데이터 cmdlet에 전달할 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For help, see the examples.</source>
          <target state="translated">자세한 내용은 예제를 참조하세요.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> sends data, but it does not emit any output objects.</source>
          <target state="translated"><bpt id="p1">**</bpt>Out-host<ept id="p1">**</ept> 하지만 데이터를 보내지만 출력 개체를 생성 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you pipe the output of <bpt id="p1">**</bpt>Out-Host<ept id="p1">**</ept> to the Get-Member cmdlet, <bpt id="p2">**</bpt>Get-Member<ept id="p2">**</ept> reports that no objects have been specified.</source>
          <target state="translated">출력을 파이프 하면 <bpt id="p1">**</bpt>Out-host<ept id="p1">**</ept> Get-member cmdlet에 <bpt id="p2">**</bpt>Get-member<ept id="p2">**</ept> 개체가 지정 보고 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Clear-Host</source>
          <target state="translated">Clear-Host</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Out-Default</source>
          <target state="translated">Out-Default</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Out-File</source>
          <target state="translated">Out-file</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Out-Null</source>
          <target state="translated">Out-Null</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Out-Printer</source>
          <target state="translated">Out-printer</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Out-String</source>
          <target state="translated">Out-String</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Write-Host</source>
          <target state="translated">Write-Host</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>