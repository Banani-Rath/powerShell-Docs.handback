<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cd8b9cdfbeb77ab2d209c1153091bd8dae5ce4d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Variables.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9e9fdfbaa1739df9e4336a538b6835955c40332</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7622ae399e04da9dadd862070e13e0bf821557b3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Variables</source>
          <target state="translated">about_Variables</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Variables</source>
          <target state="translated">변수에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Variables</source>
          <target state="translated">about_Variables</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Variables</source>
          <target state="translated">about_Variables</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how variables store values that can be used in  Windows PowerShell�.</source>
          <target state="translated">변수 Windows PowerShell에서 사용할 수 있는 값을 저장 하는 방법에 대해 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can store all types of values in  Windows PowerShell variables.</source>
          <target state="translated">Windows PowerShell 변수에서 모든 유형의 값을 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They are typically used to store the results of commands and to store elements that are used in commands and expressions, such as names, paths, settings, and values.</source>
          <target state="translated">명령의 결과 저장 하 고 명령 및 이름, 경로, 설정 및 값 등의 식에 사용 되는 요소를 저장 합니다. 일반적으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A variable is a unit of memory in which values are stored.</source>
          <target state="translated">변수는 단위 값 저장 되는 메모리입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In  Windows PowerShell, variables are represented by text strings that begin with a dollar sign ($), such as $a, $process, or $my_var.</source>
          <target state="translated">Windows PowerShell에서 변수 $ $process, a와 같은 달러 기호 ($)로 시작 하는 텍스트 문자열로 표현 됩니다 또는 $my_var 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Variable names are not case-sensitive.</source>
          <target state="translated">변수 이름은 대/소문자 구분 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Variable names can include spaces and special characters, but these are difficult to use and should be avoided.</source>
          <target state="translated">변수 이름은 공백 및 특수 문자를 포함할 수 있지만 사용 하기 어려운 이러한 피해 야 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are several different types of variables in  Windows PowerShell.</source>
          <target state="translated">Windows PowerShell에서 변수 여러 가지 유형이 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-- User-created variables: User-created variables are created and maintained by the user.</source>
          <target state="translated">-사용자가 만든 변수: 사용자가 만든 변수는 생성 되며 사용자가 유지 관리 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, the variables that you create at the  Windows PowerShell command line exist only while the  Windows PowerShell window is open, and they are lost when you close the window.</source>
          <target state="translated">기본적으로 Windows PowerShell 명령줄에서 만든 변수는 Windows PowerShell 창이 열려 있는 상태이 고 창의 닫을 때 손실 됩니다 하는 동안에 존재 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To save a variable, add it to your  Windows PowerShell profile.</source>
          <target state="translated">변수를 저장 하려면 Windows PowerShell 프로필에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can also create variables in scripts with global, script, or local scope.-- Automatic variables: Automatic variables store the state of  Windows PowerShell.</source>
          <target state="translated">글로벌 스크립트, 스크립트 또는 로컬 범위입니다.--자동 변수에서 변수를 만들 수도 있습니다: 자동 변수는 Windows PowerShell의 상태를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These variables are created by  Windows PowerShell, and  Windows PowerShell changes their values as required to maintain their accuracy.</source>
          <target state="translated">Windows PowerShell의 정확도 유지 하기 위해 필요에 따라 해당 값이 변경 및 이러한 변수는 Windows PowerShell에서 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Users cannot change the value of these variables.</source>
          <target state="translated">사용자가 이러한 변수의 값을 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, the $PSHome variable stores the path to the  Windows PowerShell installation directory.</source>
          <target state="translated">예를 들어 $PSHome 변수는 Windows PowerShell 설치 디렉터리의 경로를 저장합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, a list, and a description of the automatic variables, see about_Automatic_Variables.</source>
          <target state="translated">자세한 내용은 목록과 자동 변수에 대 한 설명을 about_Automatic_Variables를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>-- Preference variables: Preference variables store user preferences for  Windows PowerShell.</source>
          <target state="translated">-기본 설정 변수: 기본 설정 변수 Windows PowerShell에 대 한 사용자 기본 설정을 저장 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These variables are created by  Windows PowerShell and are populated with default values.</source>
          <target state="translated">이러한 변수 Windows PowerShell에서 생성 되 고 기본 값으로 채워집니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Users can change the values of these variables.</source>
          <target state="translated">이러한 변수의 값을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the $MaximumHistoryCount variable determines the maximum number of entries in the session history.</source>
          <target state="translated">예를 들어 $MaximumHistoryCount 변수는 세션 기록에 있는 항목의 최대 수를 결정합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, a list, and a description of the preference variables, see about_Preference_Variables.</source>
          <target state="translated">자세한 내용은 목록과 기본 설정 변수에 대 한 설명을 about_Preference_Variables를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>WORKING WITH VARIABLES</source>
          <target state="translated">변수 작업</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To create a new variable, use an assignment statement to assign a value to the variable.</source>
          <target state="translated">새 변수를 만들려면 할당 문을 사용 하 여 변수에 값을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You do not have to declare the variable  before using it.</source>
          <target state="translated">사용 하기 전에 변수를 선언할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The default value of all variables is $null.</source>
          <target state="translated">모든 변수의 기본값은 $null 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Variables are very useful for storing the results of commands.</source>
          <target state="translated">변수는 명령 결과를 저장 하는 데 매우 유용 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To display the value of a variable, type the variable name, preceded by a dollar sign ($).</source>
          <target state="translated">변수 값을 표시 하려면 변수 이름 앞에 달러 기호 ($)를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To change the value of a variable, assign a new value to the variable.</source>
          <target state="translated">변수 값을 변경 하려면 새 값을 변수에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following examples displays the value of the $MyVariable variable, changes the value of the variable, and then displays the new value.</source>
          <target state="translated">다음 예제에서는 $MyVariable 변수의 값을 표시 하 고 변수 값을 변경 다음 새 값을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To delete the value of a variable, use the Clear-Variable cmdlet or change the value to $null.</source>
          <target state="translated">변수 값을 삭제 하려면 Clear-variable cmdlet을 사용 하거나 값을 $null으로 변경 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To delete the variable, use the Remove-Variable or Remove-Item cmdlets.</source>
          <target state="translated">변수를 삭제 하려면 Remove-variable 또는 Remove-item cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(These cmdlets are discussed later in this topic.)</source>
          <target state="translated">(이러한 cmdlet이이 항목의 뒷부분에 설명 됩니다.)</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To get a list of all of the variables in your  Windows PowerShell session, type:</source>
          <target state="translated">Windows PowerShell 세션에서 모든 변수 목록을 가져오려면를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>TYPES OF VARIABLES</source>
          <target state="translated">유형의 변수</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can store any type of object in a variable, including integers, strings, arrays, hash tables, and objects that represent processes, services, event logs, and computers.</source>
          <target state="translated">변수에 정수, 문자열, 배열, 해시 테이블 및 프로세스, 서비스, 이벤트 로그 및 컴퓨터를 나타내는 개체를 포함 하 여 모든 종류의 개체를 저장할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Windows PowerShell variables are "loosely typed," which means that they are not limited to a particular type of object.</source>
          <target state="translated">Windows PowerShell 변수는 "느슨하게 형식"는 특정 형식의 개체에 제한 되지 않은 것을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A single variable can even contain a collection (an "array") of different types of objects at the same time.</source>
          <target state="translated">단일 변수에 한 번에 여러 종류의 개체의 컬렉션 ("배열") 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The data type of a variable, which is a .NET Framework type, is determined by the .NET types of the values of the variable.</source>
          <target state="translated">.NET Framework 형식에 되는 변수의 데이터 형식은.NET 형식 변수의 값에 따라 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can use a type attribute and cast notation to ensure that a variable can contain only objects of the specified type or objects that can be converted to that type.</source>
          <target state="translated">형식 특성을 사용 하 고 지정 된 형식의 개체에만 나 해당 형식으로 변환 될 수 있는 개체 변수를 포함할 수 있도록 표기법을 캐스팅할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you try to assign a value of another type,  Windows PowerShell tries to convert the value to its type.</source>
          <target state="translated">다른 형식의 값을 할당 하려고 하면 Windows PowerShell의 형식에 값을 변환 하려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If it cannot, the assignment statement fails.</source>
          <target state="translated">그렇지 않을 경우 아래의 할당 문은 실패 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To use cast notation, enter a type name, enclosed in brackets, before the variable name (on the left side of the assignment statement).</source>
          <target state="translated">캐스트 표기법을 사용 하려면 (대입문의 왼쪽)에서 변수 이름 앞의 대괄호로 묶은 형식 이름을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example creates an $number variable that can contain only integers, a $words variable that can contain only strings, and a $dates variable that can contain only DateTime objects.</source>
          <target state="translated">다음 예제에서는 정수, 문자열과 포함할 수 있는 $words 변수 및만 DateTime 개체를 포함할 수 있는 $dates 변수를 포함할 수 있는 한 $number 변수를 만듭니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>USING VARIABLES IN COMMANDS AND EXPRESSIONS</source>
          <target state="translated">명령 및 식에서 변수를 사용 하 여</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To use a variable in a command or expression, type the variable name, preceded by the dollar sign ($).</source>
          <target state="translated">명령 또는 식에 변수를 사용 하려면 변수 이름 앞에 달러 기호 ($)를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the variable name (and dollar sign) are not enclosed in quotation marks, or if they are enclosed in double quotation marks ("), the value of the variable is used in the command or expression.</source>
          <target state="translated">변수 이름 (및 달러 기호) 인용 부호로 묶지 않습니다 또는 큰따옴표 (")로 묶여 있으면 변수의 값은 명령 또는 식에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the variable name (and dollar sign) are enclosed in single quotation marks, ('), the variable name is used in the expression.</source>
          <target state="translated">변수 이름 (및 달러 기호) 묶여 단일 따옴표 ('), 변수 이름 식에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the first command gets the value of the $profile variable, which is the path to the  Windows PowerShell user profile file in the  Windows PowerShell console.</source>
          <target state="translated">예를 들어, 첫 번째 명령은 Windows PowerShell 콘솔에서 Windows PowerShell 사용자 프로필 파일의 경로를 $profile 변수의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The second command opens the file in Notepad, and the  third and fourth commands use the name of the variable in an expression.</source>
          <target state="translated">두 번째 명령은 메모장에서 파일이 열리고 세 번째 및 네 번째 명령은 식에 변수 이름을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information about using quotation marks in  Windows PowerShell, see about_Quoting_Rules.</source>
          <target state="translated">Windows PowerShell의 따옴표를 사용 하는 방법에 대 한 자세한 내용은 about_Quoting_Rules를 참조 하세요.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>VARIABLE NAMES THAT INCLUDE SPECIAL CHARACTERS</source>
          <target state="translated">특수 문자를 포함 하는 변수 이름</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Variable names begin with a dollar sign.</source>
          <target state="translated">변수 이름에 달러 기호로 시작 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>They can include alphanumeric characters and special characters.</source>
          <target state="translated">영숫자 문자 및 특수 문자를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The length of the variable name is limited only by available memory.</source>
          <target state="translated">변수 이름의 길이 사용 가능한 메모리에 의해서만 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Whenever possible, variable names should include only alphanumeric characters and the underscore character (_).Variable names that include spaces and other special characters, are difficult to use and should be avoided.</source>
          <target state="translated">가능한 경우 항상 변수 이름은 영숫자 문자와 밑줄 문자 (_)를 포함 해야 합니다. 공백 및 기타 특수 문자를 포함 하는 변수 이름을 사용 하기 어려운 피해 야 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To create or display a variable name that includes spaces or special characters, enclose the variable name in braces.</source>
          <target state="translated">를 만들거나 공백이 나 특수 문자를 포함 하는 변수 이름을 표시 하려면 변수 이름을 괄호로 묶어야 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This directs  Windows PowerShell to interpret the characters in the variable name literally.</source>
          <target state="translated">그러면 Windows PowerShell 변수 이름에 있는 문자를 문자 그대로 해석 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, the following command creates and then displays a variable named "save-items".</source>
          <target state="translated">예를 들어, 다음 명령을 만들고 후 "save 항목" 라는 변수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following command gets the child items in the directory that is represented by the "ProgramFiles(x86)" environment variable.</source>
          <target state="translated">다음 명령은 "programfiles (x86)" 환경 변수가 표시 되는 디렉터리의 자식 항목을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To refer to a variable name that includes braces, enclose the variable name in braces, and use the backtick (escape) character to escape the braces.</source>
          <target state="translated">중괄호를 포함 하는 변수 이름을 참조 하려면 변수 이름을 중괄호로 묶고 억음 기호 (이스케이프) 문자를 사용 하 여 중괄호를 이스케이프 하 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, to create a variable named "this{value}is" with a value of 1, type:</source>
          <target state="translated">예를 들어 값이 1 인 "이 {value} 은" 라는 변수를 만들려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>VARIABLES AND SCOPE</source>
          <target state="translated">변수 및 범위</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>By default, variables are available only in the scope in which they are created.</source>
          <target state="translated">기본적으로 변수는 생성 된 범위에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, a variable that you create in a function is available only within the function.</source>
          <target state="translated">예를 들어 함수에서 만든 변수는 함수 내 에서만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A variable that you create in a script is available only within the script (unless you dot-source the script, which adds it to the current scope).</source>
          <target state="translated">스크립트에서 만든 변수는 스크립트 내 에서만 사용 가능 (하지 않으면 현재 범위에 추가 되는 스크립트를 점 소스).</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can use a scope modifier to change the default scope of the variable.</source>
          <target state="translated">변수의 기본 범위를 변경 하려면 범위 한정자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following expression creates a variable named "Computers".</source>
          <target state="translated">다음 식은 "컴퓨터" 라는 변수를 만듭니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The variable has a global scope, even when it is created in a script or function.</source>
          <target state="translated">스크립트 또는 함수를 생성 하는 경우에 변수가 전역 범위입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information, see about_Scopes.</source>
          <target state="translated">자세한 내용은 about_Scopes를 참조하세요.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>SAVING VARIABLES</source>
          <target state="translated">변수를 저장합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Variables that you create are available only in the session in which you create them.</source>
          <target state="translated">만든 변수는 해당 만드는 세션에만 사용할 수입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>They are lost when you close your session.</source>
          <target state="translated">세션을 닫을 때 손실 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To create the in every  Windows PowerShell session that you start, add the variable to your  Windows PowerShell profile.</source>
          <target state="translated">만들려는 시작 하는 모든 Windows PowerShell 세션에서 Windows PowerShell 프로필에 변수를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, to change the value of the $VerbosePreference variable in every  Windows PowerShell session, add the following command to your  Windows PowerShell profile.</source>
          <target state="translated">예를 들어 모든 Windows PowerShell 세션에서 $VerbosePreference 변수의 값을 변경 하려면 다음 명령을 Windows PowerShell 프로필에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can add this command to your profile by opening the profile file in a text editor, such as Notepad.</source>
          <target state="translated">메모장과 같은 텍스트 편집기에서 프로필 파일을 열고이 명령을 프로필에 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more information about  Windows PowerShell profiles, see about_profiles.</source>
          <target state="translated">Windows PowerShell 프로필에 대 한 자세한 내용은 about_profiles를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>THE VARIABLE: DRIVE</source>
          <target state="translated">변수: 드라이브</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Windows PowerShell Variable provider creates a Variable: drive that looks and acts like a file system drive, but it contains the variables in your session and their values.</source>
          <target state="translated">Windows PowerShell 변수 공급자는 변수를 만듭니다: 드라이브를 파일 시스템 드라이브에서 만들었지만 처럼 세션 및 해당 값에 변수를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To change to the variable: drive, type:</source>
          <target state="translated">변수를 변경 하려면: 드라이브를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To list the items (variables) in the Variable: drive, use the Get-Item or Get-ChildItem cmdlets.</source>
          <target state="translated">변수에서 항목 (변수)를 나열 하려면: 드라이브에서 Get-item 또는 Get-childitem cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To get the value of a particular variable, use file system notation to specify the name of the drive and the name of the variable.</source>
          <target state="translated">특정 변수 값을 가져오려면 드라이브의 이름 및 변수의 이름을 지정 하려면 파일 시스템 표기법을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, to get the $PSCulture automatic variable, use the following command.</source>
          <target state="translated">예를 들어 $PSCulture 자동 변수를 가져오려면 다음 명령을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information about the Variable: drive and the  Windows PowerShell Variable provider, type "get-help variable".</source>
          <target state="translated">변수에 대 한 자세한 내용은: 드라이브 및 Windows PowerShell 변수 공급자를 "get-help 변수" 입력 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>THE VARIABLE CMDLETS</source>
          <target state="translated">변수는 CMDLET</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Windows PowerShell includes a set of cmdlets that are designed to manage variables.</source>
          <target state="translated">Windows PowerShell 변수를 관리 하도록 설계 된 cmdlet 집합이 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To get help for these cmdlets, type: "Get-Help &lt;cmdlet-hame&gt;".</source>
          <target state="translated">이러한 cmdlet에 대 한 도움말을 보려면 입력: "Get-help &lt; cmdlet 이름 &gt;"입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>about_Automatic_Variables</source>
          <target state="translated">about_Automatic_Variables</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>about_Environment_Variables</source>
          <target state="translated">about_Environment_Variables</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>about_Preference_Variables</source>
          <target state="translated">about_Preference_Variables</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>about_Profiles</source>
          <target state="translated">about_Profiles</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>about_Quoting_Rules</source>
          <target state="translated">about_Quoting_Rules</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>about_Scopes</source>
          <target state="translated">about_Scopes</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>