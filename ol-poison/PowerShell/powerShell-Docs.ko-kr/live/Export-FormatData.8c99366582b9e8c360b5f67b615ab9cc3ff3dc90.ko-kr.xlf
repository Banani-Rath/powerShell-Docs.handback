<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90f692498338544536b5359e9f3e6e9822e043a8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Export-FormatData.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90cf8cee4a0d26e6c28df9123957969707326eb1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">176322c608fc95a9cd995531207174c122cb4caf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Export-FormatData</source>
          <target state="translated">Export-formatdata</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Export-FormatData</source>
          <target state="translated">Export-formatdata</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">요약</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Saves formatting data from the current session in a formatting file.</source>
          <target state="translated">현재 세션의 형식 지정 데이터를 형식 지정 파일에 저장합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ByPath (Default)</source>
          <target state="translated">ByPath (기본값)</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ByLiteralPath</source>
          <target state="translated">ByLiteralPath</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Export-FormatData<ept id="p1">**</ept> cmdlet creates Windows PowerShell formatting files (format.ps1xml) from the formatting objects in the current session.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Export-formatdata<ept id="p1">**</ept> 형식 지정 파일 (format.ps1xml 서식 개체에서 현재 세션에서) Windows PowerShell cmdlet을 만듭니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It takes the <bpt id="p1">**</bpt>ExtendedTypeDefinition<ept id="p1">**</ept> objects that Get-FormatData returns and saves them in a file in XML format.</source>
          <target state="translated">소요 되는 <bpt id="p1">**</bpt>ExtendedTypeDefinition<ept id="p1">**</ept> 개체 Get-formatdata 반환 하 고 XML 형식에서 파일에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Windows PowerShell uses the data in formatting files (format.ps1xml) to generate the default display of Microsoft .NET Framework objects in the session.</source>
          <target state="translated">Windows PowerShell은 형식 지정 파일(format.ps1xml)의 데이터를 사용하여 세션에 있는 Microsoft .NET Framework 개체의 기본 표시를 생성합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can view and edit the formatting files and use the Update-FormatData cmdlet to add the formatting data to a session.</source>
          <target state="translated">사용자는 형식 지정 파일을 보고 편집할 수 있으며 Update-FormatData cmdlet을 사용하여 세션에 형식 지정 데이터를 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about formatting files in Windows PowerShell, see about_Format.ps1xml.</source>
          <target state="translated">Windows PowerShell의 형식 지정 파일에 대한 자세한 내용은 about_Format.ps1xml을 참조하세요.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">예제</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example 1: Export session format data</source>
          <target state="translated">내보내기 세션 데이터의 서식을 예제 1:</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This command exports all of the format data in the session to the AllFormat.ps1xml file.</source>
          <target state="translated">이 명령은 세션의 모든 형식 데이터를 AllFormat.ps1xml 파일로 내보냅니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The command uses the Get-FormatData cmdlet to get the format data in the session.</source>
          <target state="translated">이 명령은 Get-FormatData cmdlet을 사용하여 세션의 형식 데이터를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A value of <bpt id="p1">*</bpt> (all) for the <ept id="p1">*</ept>TypeName* parameter directs the cmdlet to get all of the data in the session.</source>
          <target state="translated">값이 <bpt id="p1">*</bpt> (모두)에 대 한는 <ept id="p1">*</ept>TypeName 매개 세션의 모든 데이터를 가져오려는 cmdlet을 지시 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The command uses a pipeline operator (|) to send the format data from the <bpt id="p1">**</bpt>Get-FormatData<ept id="p1">**</ept> command to the <bpt id="p2">**</bpt>Export-FormatData<ept id="p2">**</ept> cmdlet, which exports the format data to the AllFormat.ps1 file.</source>
          <target state="translated">형식 데이터를 사용 하 파이프라인 연산자 (|)는 여는 <bpt id="p1">**</bpt>Get-formatdata<ept id="p1">**</ept> 명령을 <bpt id="p2">**</bpt>Export-formatdata<ept id="p2">**</ept> cmdlet 형식 데이터를 AllFormat.ps1 파일로 내보냅니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Export-FormatData<ept id="p1">**</ept> command uses the <bpt id="p2">*</bpt>IncludeScriptBlock<ept id="p2">*</ept> parameter to include script blocks in the format data in the file.</source>
          <target state="translated"> <bpt id="p1">**</bpt>Export-formatdata<ept id="p1">**</ept> 명령을 사용 하 여는 <bpt id="p2">*</bpt>IncludeScriptBlock<ept id="p2">*</ept> 형식 데이터 파일에 스크립트를 포함 하려면 매개 변수를 차단 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example 2: Export format data for a type</source>
          <target state="translated">예제 2: 내보내기 형식에 대 한 데이터를 서식 지정</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These commands export the format data for the HelpInfoShort type to the Help.format.ps1xml file.</source>
          <target state="translated">이 명령은 HelpInfoShort 유형의 형식 데이터를 Help.format.ps1xml 파일로 내보냅니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first command uses the <bpt id="p1">**</bpt>Get-FormatData<ept id="p1">**</ept> cmdlet to get the format data for the HelpInfoShort type, and it saves it in the $F variable.</source>
          <target state="translated">첫 번째 명령은 <bpt id="p1">**</bpt>Get-formatdata<ept id="p1">**</ept> 대 HelpInfoShort 유형의 형식 데이터를 가져오려는 cmdlet $F 변수에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> parameter of the <bpt id="p2">**</bpt>Export-FormatData<ept id="p2">**</ept> cmdlet to enter the format data saved in the $F variable.</source>
          <target state="translated">두 번째 명령은 <bpt id="p1">*</bpt>InputObject<ept id="p1">*</ept> 의 매개 변수는 <bpt id="p2">**</bpt>Export-formatdata<ept id="p2">**</ept> cmdlet $F 변수에 저장 된 형식의 데이터를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It also uses the <bpt id="p1">*</bpt>IncludeScriptBlock<ept id="p1">*</ept> parameter to include script blocks in the output.</source>
          <target state="translated">또한 사용 하 여는 <bpt id="p1">*</bpt>IncludeScriptBlock<ept id="p1">*</ept> 스크립트를 포함 하려면 매개 변수는 출력에 차단 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Example 3: Export format data without a script block</source>
          <target state="translated">스크립트 블록 없이 예제 3: 내보내기 형식 데이터</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This example shows the effect of omitting the <bpt id="p1">*</bpt>IncludeScriptBlock<ept id="p1">*</ept> parameter from an <bpt id="p2">**</bpt>Export-FormatData<ept id="p2">**</ept> command.</source>
          <target state="translated">생략 한 결과 보여 주는이 예제는 <bpt id="p1">*</bpt>IncludeScriptBlock<ept id="p1">*</ept> 에서 매개 변수는 <bpt id="p2">**</bpt>Export-formatdata<ept id="p2">**</ept> 명령입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-FormatData cmdlet to get the format data for the <bpt id="p1">**</bpt>System.Diagnostics.Process<ept id="p1">**</ept> object that the Get-Process cmdlet returns.</source>
          <target state="translated">첫 번째 명령은 Get-formatdata cmdlet를 사용 하 여 형식에 대 한 데이터를 가져올 수는 <bpt id="p1">**</bpt>System.Diagnostics.Process<ept id="p1">**</ept> Get-process cmdlet에서 반환 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The command uses a pipeline operator (|) to send the formatting data to the <bpt id="p1">**</bpt>Export-FormatData<ept id="p1">**</ept> cmdlet, which exports it to the Process.format.ps1xml file in the current directory.</source>
          <target state="translated">명령은를 사용 하 여 파이프라인 연산자 (|)를 형식 지정 데이터를 보내는 <bpt id="p1">**</bpt>Export-formatdata<ept id="p1">**</ept> cmdlet을 현재 디렉터리에 있는 Process.format.ps1xml 파일을 내보냅니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this case, the <bpt id="p1">**</bpt>Export-FormatData<ept id="p1">**</ept> command does not use the <bpt id="p2">*</bpt>IncludeScriptBlock<ept id="p2">*</ept> parameter.</source>
          <target state="translated">이 경우에 <bpt id="p1">**</bpt>Export-formatdata<ept id="p1">**</ept> 명령을 사용 하지 않는 <bpt id="p2">*</bpt>IncludeScriptBlock<ept id="p2">*</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The second command uses the Update-FormatData cmdlet to add the Process.format.ps1xml file to the current session.</source>
          <target state="translated">두 번째 명령은 Update-FormatData cmdlet을 사용하여 Process.format.ps1xml 파일을 현재 세션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>PrependPath<ept id="p1">*</ept> parameter to ensure that the formatting data for process objects in the Process.format.ps1xml file is found before the standard formatting data for process objects.</source>
          <target state="translated">이 명령은 사용는 <bpt id="p1">*</bpt>PrependPath<ept id="p1">*</ept> 매개 변수를 표준 프로세스 개체에 대 한 데이터 형식 지정 하기 전에 Process.format.ps1xml 파일에서 개체 처리에 대 한 형식 지정 데이터를 찾을 수 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The third command shows the effects of this change.</source>
          <target state="translated">세 번째 명령은 이 변경 사항의 효과를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> cmdlet to get processes that have names that begin with P. The output shows that property values that are calculated by using script blocks are missing from the display.</source>
          <target state="translated">이 명령은 <bpt id="p1">**</bpt>Get-process<ept id="p1">**</ept> 이름이 P.로 시작 하는 프로세스를 가져오려는 cmdlet 출력은 스크립트 블록을 사용 하 여 계산 된 속성 값은 화면에서 없어질을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">매개 변수</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>-Force</source>
          <target state="translated">-Force</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Forces the command to run without asking for user confirmation.</source>
          <target state="translated">사용자 확인을 요청하지 않고 명령을 강제 실행합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>-IncludeScriptBlock</source>
          <target state="translated">-IncludeScriptBlock</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Indicates whether script blocks in the format data are exported.</source>
          <target state="translated">형식 데이터를 내보낼 스크립트 블록 있는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because script blocks contain code and can be used maliciously, they are not exported by default.</source>
          <target state="translated">스크립트 블록에는 코드가 포함되어 있어 악의적으로 사용될 수 있으므로 기본적으로 내보내지 않습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specifies the format data objects to be exported.</source>
          <target state="translated">내보낼 형식 데이터 개체를 지정합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Enter a variable that contains the objects or a command that gets the objects, such as a <bpt id="p1">**</bpt>Get-FormatData<ept id="p1">**</ept> command.</source>
          <target state="translated">와 같은 개체를 가져오는 명령 또는 개체를 포함 하는 변수를 입력 한 <bpt id="p1">**</bpt>Get-formatdata<ept id="p1">**</ept> 명령입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can also pipe the objects from <bpt id="p1">**</bpt>Get-FormatData<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Export-FormatData<ept id="p2">**</ept>.</source>
          <target state="translated">개체를 파이프할 수도 있습니다 <bpt id="p1">**</bpt>Get-formatdata<ept id="p1">**</ept> 에 <bpt id="p2">**</bpt>Export-formatdata<ept id="p2">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>-LiteralPath</source>
          <target state="translated">-LiteralPath</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Specifies a location for the output file.</source>
          <target state="translated">출력 파일의 위치를 지정합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Unlike the <bpt id="p1">*</bpt>Path<ept id="p1">*</ept> parameter, the value of <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> is used exactly as it is typed.</source>
          <target state="translated">와 달리는 <bpt id="p1">*</bpt>경로<ept id="p1">*</ept> 매개 변수, 값 <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> 은 입력 한 대로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>No characters are interpreted as wildcards.</source>
          <target state="translated">어떠한 문자도 와일드카드로 해석되지 않습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the path includes escape characters, enclose it in single quotation marks.</source>
          <target state="translated">이스케이프 문자가 포함된 경로는 작은따옴표로 묶으세요.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</source>
          <target state="translated">작은따옴표는 Windows PowerShell이 어떤 문자도 이스케이프 시퀀스로 해석하지 않도록 지시합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>-NoClobber</source>
          <target state="translated">-NoClobber</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Inidicatest that the cmdlet does not overwrite existing files.</source>
          <target state="translated">Inidicatest cmdlet은 기존 파일을 덮어쓰지 않습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>By default, <bpt id="p1">**</bpt>Export-FormatData<ept id="p1">**</ept> overwrites files without warning unless the file has the read-only attribute.</source>
          <target state="translated">기본적으로 <bpt id="p1">**</bpt>Export-formatdata<ept id="p1">**</ept> 파일에 읽기 전용 특성이 없는 한 경고 없이 파일을 덮어씁니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To direct <bpt id="p1">**</bpt>Export-FormatData<ept id="p1">**</ept> to overwrite read-only files, use the <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> parameter.</source>
          <target state="translated">연결할 <bpt id="p1">**</bpt>Export-formatdata<ept id="p1">**</ept> 사용 하 여 읽기 전용 파일을 덮어쓰려면는 <bpt id="p2">*</bpt>Force<ept id="p2">*</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>-Path</source>
          <target state="translated">-Path</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Specifies a location for the output file.</source>
          <target state="translated">출력 파일의 위치를 지정합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Enter a path (optional) and file name with a format.ps1xml file name extension.</source>
          <target state="translated">파일 이름 확장명이 format.ps1xml인 파일 이름과 경로(선택 사항)를 입력합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you omit the path, <bpt id="p1">**</bpt>Export-FormatData<ept id="p1">**</ept> creates the file in the current directory.</source>
          <target state="translated">경로 생략 하면 <bpt id="p1">**</bpt>Export-formatdata<ept id="p1">**</ept> 현재 디렉터리에 파일을 만듭니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you use a file name extension other than .ps1xml, the <bpt id="p1">**</bpt>Update-FormatData<ept id="p1">**</ept> cmdlet will not recognize the file.</source>
          <target state="translated">.Ps1xml 이외의 파일 이름 확장명을 사용 하는 경우는 <bpt id="p1">**</bpt>Update-formatdata<ept id="p1">**</ept> cmdlet은 파일을 인식 하지 못합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you specify an existing file, <bpt id="p1">**</bpt>Export-FormatData<ept id="p1">**</ept> overwrites the file without warning, unless the file has the read-only attribute.</source>
          <target state="translated">기존 파일을 지정 하면 <bpt id="p1">**</bpt>Export-formatdata<ept id="p1">**</ept> 파일에 읽기 전용 특성이 없는 한 경고 없이 파일을 덮어씁니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To overwrite a read-only file, use the <bpt id="p1">*</bpt>Force<ept id="p1">*</ept> parameter.</source>
          <target state="translated">사용 하 여 읽기 전용 파일을 덮어쓰려면는 <bpt id="p1">*</bpt>Force<ept id="p1">*</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To prevent files from being overwritten, use the <bpt id="p1">*</bpt>NoClobber<ept id="p1">*</ept> parameter.</source>
          <target state="translated">사용 하 여 파일을 덮어쓰지 않으려면는 <bpt id="p1">*</bpt>NoClobber<ept id="p1">*</ept> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">이 cmdlet은 공통 매개 변수:-디버그,-ErrorAction,-ErrorVariable,-InformationAction,-InformationVariable,-OutVariable,-OutBuffer,-PipelineVariable,-Verbose,-WarningAction 및-warningvariable을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">자세한 내용은 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">입력</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>System.Management.Automation.ExtendedTypeDefinition</source>
          <target state="translated">System.Management.Automation.ExtendedTypeDefinition</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can pipe <bpt id="p1">**</bpt>ExtendedTypeDefinition<ept id="p1">**</ept> objects from <bpt id="p2">**</bpt>Get-FormatData<ept id="p2">**</ept> to <bpt id="p3">**</bpt>Export-FormatData<ept id="p3">**</ept>.</source>
          <target state="translated">사용자 <bpt id="p1">**</bpt>ExtendedTypeDefinition<ept id="p1">**</ept> 에서 개체를 <bpt id="p2">**</bpt>Get-formatdata<ept id="p2">**</ept> 에 <bpt id="p3">**</bpt>Export-formatdata<ept id="p3">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">출력</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">없음</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Export-FormatData<ept id="p1">**</ept> does not return any objects.</source>
          <target state="translated"><bpt id="p1">**</bpt>Export-formatdata<ept id="p1">**</ept> 개체를 반환 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It generates a file and saves it in the specified path.</source>
          <target state="translated">파일을 생성하여 지정된 경로에 저장합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">참고 사항</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To use any formatting file, including an exported formatting file, the execution policy for the session must allow scripts and configuration files to run.</source>
          <target state="translated">내보낸 형식 지정 파일을 포함하여 모든 형식 지정 파일을 사용하려면 세션에 대한 실행 정책에서 스크립트와 구성 파일의 실행을 허용해야 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see about_Execution_Policies.</source>
          <target state="translated">자세한 내용은 about_Execution_Policies를 참조하세요.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">관련된 링크</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Get-FormatData</source>
          <target state="translated">Get-FormatData</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Get-Process</source>
          <target state="translated">Get-Process</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Update-FormatData</source>
          <target state="translated">Update-FormatData</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>