<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c66ac9b0e5d3eaf2ab29827a741bd4d460f748d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Assignment_Operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0408961504538457bd5408cc96202d6a659c44f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c403214c5d4507878e0a7e6bf398e5fc7b9e4c11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_assignment_operators</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Assignment Operators</source>
          <target state="translated">할당 연산자에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_assignment_operators</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_assignment_operators</source>
          <target state="translated">about_assignment_operators</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use operators to assign values to variables.</source>
          <target state="translated">변수에 값을 할당 연산자를 사용 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Assignment operators assign one or more values to a variable.</source>
          <target state="translated">할당 연산자는 하나 이상의 값을 변수에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They can perform numeric operations on the values before the assignment.</source>
          <target state="translated">할당 하기 전에 값에 숫자 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the following assignment operators.</source>
          <target state="translated">Windows PowerShell에서 다음과 같은 할당 연산자를 지원합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Operator  Description</source>
          <target state="translated">연산자 설명</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>=         Sets the value of a variable to the specified value.</source>
          <target state="translated">= 지정된 된 값으로 변수 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>+=        Increases the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">+ = 지정된 된 값으로 변수 값을 늘리거나 지정 된 값의 기존 값을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-=        Decreases the value of a variable by the specified value.</source>
          <target state="translated">-= 지정된 된 값으로 변수 값을 줄입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>*=        Multiplies the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">* = 지정된 된 값을 변수 값을 곱하고 또는 기존 값에 지정 된 값을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>/=        Divides the value of a variable by the specified value.</source>
          <target state="translated">/ = 변수 값을 지정된 된 값으로 나눕니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>%=        Divides the value of a variable by the specified value and then assigns the remainder (modulus) to the variable.</source>
          <target state="translated">% = 변수 값을 지정된 된 값으로 나누고 표시 한 다음 나머지 (계수)를 변수에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>++        Increases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">+ +의 변수, 할당할 수 있는 속성 또는 배열 요소 값을 1 씩 증가 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>--        Decreases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">-변수, 할당할 수 있는 속성 또는 배열 요소 값을 1 씩 감소 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">구문</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The syntax of the assignment operators is as follows:</source>
          <target state="translated">할당 연산자의 구문은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt; &lt;assignment-operator&gt;</source>
          <target state="translated">&lt; 할당할 수 있는 식 &gt;&lt; 할당 연산자 &gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Assignable expressions include variables and properties.</source>
          <target state="translated">할당할 수 있는 식에는 변수 및 속성을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The value can be a single value, an array of values, or a command, expression, or statement.</source>
          <target state="translated">단일 값, 값의 배열 또는 명령, 식 또는 문 값일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The increment and decrement operators are unary operators.</source>
          <target state="translated">증가 및 감소 연산자는 단항 연산자입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each has prefix and postfix versions.</source>
          <target state="translated">각 전위 및 후 위 버전에 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt;assignable-expression&gt;</source>
          <target state="translated">&lt; 할당할 수 있는 식 &gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt; 할당할 수 있는 식 &gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The assignable expression must a number or it must be convertible to a number.</source>
          <target state="translated">할당할 수 있는 식에는 숫자 여야 하거나 숫자 변환할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ASSIGNING VALUES</source>
          <target state="translated">값 할당</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Variables are named memory spaces that store values.</source>
          <target state="translated">변수 값을 저장 하는 메모리 공간 라고 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You store the values in variables by using the assignment operator (=).</source>
          <target state="translated">대입 연산자 (=)를 사용 하 여 변수에 값을 저장 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The new value can replace the existing value of the variable, or you can append a new value to the existing value.</source>
          <target state="translated">새 값은 변수의 기존 값 바꾸거나 기존 값을 새 값을 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The basic assignment operator is the equal sign (=)(ASCII 61).</source>
          <target state="translated">기본 대입 연산자는 등호 (=) (ASCII 61).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following statement assigns the value Windows PowerShell to the $MyShell variable:</source>
          <target state="translated">예를 들어 다음 문은 $MyShell 변수에 Windows PowerShell 값을 할당합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>$MyShell = "Windows PowerShell"</source>
          <target state="translated">$MyShell = "Windows PowerShell"</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you assign a value to a variable in Windows PowerShell, the variable is created if it did not already exist.</source>
          <target state="translated">Windows PowerShell의 변수에 값을 할당할 때 변수에 아직 없는 경우 만들어집니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the first of the following two assignement statements creates the $a variable and assigns a value of 6 to $a.</source>
          <target state="translated">예를 들어, 다음 두 가지 배정 문 중 첫 번째는 $a 변수에 만들고 $ 6의 값을 할당 한 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The second assignment statement assigns a value of 12 to $a.</source>
          <target state="translated">두 번째 할당 문은 $ 12의 값을 할당 한 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The first statement creates a new variable.</source>
          <target state="translated">첫 번째 문은 새 변수를 만듭니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The second statement changes only its value:</source>
          <target state="translated">두 번째 문은 해당 값만 변경합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>$a = 6 $a = 12</source>
          <target state="translated">$는 6 = $는 = 12</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Variables in Windows PowerShell do not have a specific data type unless you cast them.</source>
          <target state="translated">Windows PowerShell에서 변수는 특정 데이터 형식으로 캐스팅 하지 않는 한 갖지 않습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When a variable contains only one object, the variable takes the data type of that object.</source>
          <target state="translated">변수는 개체를 하나만 포함 되어 있으면, 변수 해당 개체의 데이터 형식을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When a variable contains a collection of objects, the variable has the System.Object data type.</source>
          <target state="translated">개체의 컬렉션을 포함 하는 변수 때 변수는 System.Object 데이터 형식이 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, you can assign any type of object to the collection.</source>
          <target state="translated">따라서 모든 형식의 개체를 컬렉션에 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example shows that you can add process objects, service objects, strings, and integers to a variable without generating an error:</source>
          <target state="translated">다음 예제에서는 수 및 추가 하는 프로세스 개체, 서비스 개체, 문자열, 정수 변수에 오류를 생성 하지 않고 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>$a = get-process $a += get-service $a += "string" $a += 12</source>
          <target state="translated">$는 get 서비스 + = $ get 프로세스 $ =는 + = "문자열" $a + = 12</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because the assignment operator (=) has a lower precedence than the pipeline operator (|), parentheses are not required to assign the result of a command pipeline to a variable.</source>
          <target state="translated">대입 연산자 (=)는 파이프라인 연산자 (|) 보다 우선 순위가 낮습니다, 괄호는 필요가 없습니다 명령 파이프라인의 결과 변수에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, the following command sorts the services on the computer and then assigns the sorted services to the $a variable:</source>
          <target state="translated">예를 들어, 다음 명령을 컴퓨터에서 서비스를 정렬 하 고 $a 변수에 정렬된 하는 서비스를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$a = get-service | sort name</source>
          <target state="translated">$는 get 서비스 = | 정렬 이름</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also assign the value created by a statement to a variable, as in the following example:</source>
          <target state="translated">다음 예제와 같이 변수에 문에 의해 생성 되는 값을 할당할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>$a = if ($b -lt 0) { 0 } else { $b }</source>
          <target state="translated">$는 = 경우 (0 $b-lt) {0} else {$b}</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example assigns 0 to the $a variable if the value of $b is less than 0.</source>
          <target state="translated">이 예제에서는 $b의 값이 0 보다 작은 경우 $ a 변수에 0을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It assigns the value of $b to $a if the value of $b is not less than zero.</source>
          <target state="translated">그 $b에 $ if a의 값의 값을 할당 $b 작지는 0 보다 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT OPERATOR (=)</source>
          <target state="translated">대입 연산자 (=)</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The assignment operator (=) assigns values to variables.</source>
          <target state="translated">대입 연산자 (=) 값을 변수에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the variable already has a value, the assignment operator (=) replaces the value without warning.</source>
          <target state="translated">변수 값을 이미 있으면 대입 연산자 (=)는 경고 없이 값을 대체 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following statement assigns the integer value 6 to the $a variable:</source>
          <target state="translated">다음 문은 $a 변수에 6 정수 값을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$는 = 6</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To assign a string value to a variable, enclose the string value in quotation marks, as follows:</source>
          <target state="translated">문자열 값에는 변수를 할당 하려면 인용 부호로 문자열 값을 다음과 같이 묶습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>$a = "baseball"</source>
          <target state="translated">a = "야구" $</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To assign an array (multiple values) to a variable, separate the values with commas, as follows:</source>
          <target state="translated">배열 (다중값)에 변수를 할당 하려면 쉼표로 값을 다음과 같이 구분 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>$a = "apple", "orange", "lemon", "grape"</source>
          <target state="translated">$a = "apple", "주황색", "레몬맛", "포도"</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To assign a hash table to a variable, use the standard hash table notation in Windows PowerShell.</source>
          <target state="translated">해시 테이블에는 변수를 할당 하려면 Windows PowerShell에서 표준 해시 테이블 표기법을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Type an at sign (@) followed by key/value pairs that are separated by semicolons (;) and enclosed in braces ({ }).</source>
          <target state="translated">종류는 at 기호 (@)은 세미콜론 (;)으로 구분 하는 키/값 쌍 및 중괄호 ({}).</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to assign a hash table to the $a variable, type:</source>
          <target state="translated">예를 들어, 해시 테이블에는 $a 변수를 할당 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>$a = @{one=1; two=2; three=3}</source>
          <target state="translated">$는 = @{하나 = 1; 2 = 2; 3 = 3}</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To assign hexadecimal values to a variable, precede the value with "0x".</source>
          <target state="translated">16 진수 값을 변수에 할당할 값을 "0x"로 앞에 야 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Windows PowerShell converts the hexadecimal value (0x10) to a decimal value (in this case, 16) and assigns that value to the $a variable.</source>
          <target state="translated">Windows PowerShell 16 진수 값 (0x10) 10 진수 값 (이 경우 16)을 변환 및 해당 값을 $a 변수에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 0x10 to the $a variable, type:</source>
          <target state="translated">예를 들어 값 0x10 $a 변수를 할당 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>$a = 0x10</source>
          <target state="translated">$는 0x10 =</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To assign an exponential value to a variable, type the root number, the letter "e", and a number that represents a multiple of 10.</source>
          <target state="translated">지 수 값에는 변수를 할당 하려면 루트 번호, "e" 문자 및 10의 배수를 나타내는 숫자를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 3.1415 to the power of 1,000 to the $a variable, type:</source>
          <target state="translated">예를 들어 $a 변수를 1, 000의 거듭제곱으로 3.1415의 값에 할당 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>$a = 3.1415e3</source>
          <target state="translated">$는 3.1415e3 =</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Windows PowerShell can also convert kilobytes (KB), megabytes (MB), and gigabytes (GB) into bytes.</source>
          <target state="translated">Windows PowerShell 바이트에 킬로바이트 (KB), 메가바이트 (MB) 및 기가바이트 (GB)를 변환할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 10 kilobytes to the $a variable, type:</source>
          <target state="translated">예를 들어 10kb의 값에 $a 변수를 할당 하려면 다음을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>$a = 10kb</source>
          <target state="translated">$는 10kb =</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY ADDITION OPERATOR (+=)</source>
          <target state="translated">더하기 연산자 (+ =)가 할당</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The assignment by addition operator (+=) either increments the value of a variable or appends the specified value to the existing value.</source>
          <target state="translated">더하기 연산자 (+ =)가 할당 변수 값이 증가 하거나 기존 값에 지정 된 값을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The action depends on whether the variable has a numeric or string type and whether the variable contains a single value (a scalar) or multiple values (a collection).</source>
          <target state="translated">변수는 숫자 또는 문자열 형식에 있는지 여부 및 변수에 단일 값 (스칼라)을 포함 하는 여부에 따라 동작이 결정 또는 다중 값 (컬렉션).</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The += operator combines two operations.</source>
          <target state="translated">+ = 연산자는 두 개의 작업을 결합합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>First, it adds, and then it assigns.</source>
          <target state="translated">첫째,를 추가 하 고 할당 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">따라서 다음 문은 동일합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>$a += 2 $a = ($a + 2)</source>
          <target state="translated">$a = 2 + = $ ($는 + 2)</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When the variable contains a single numeric value, the += operator increments the existing value by the amount on the right side of the operator.</source>
          <target state="translated">단일 숫자 값을 포함 하는 변수, + = 연산자는 연산자의 오른쪽에 양으로의 한 기존 값을 증가 시킵니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Then, the operator assigns the resulting value to the variable.</source>
          <target state="translated">그런 다음 연산자는 결과 값은 변수에 할당합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the += operator to increase the value of a variable:</source>
          <target state="translated">다음 예제에서는 변수 값을 늘리려면 + = 연산자를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 4 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 4 개의 C:\PS = &gt; $ + = 2 C:\PS &gt; $는</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When the value of the variable is a string, the value on the right side of the operator is appended to the string, as follows:</source>
          <target state="translated">변수의 값은 문자열로, 연산자의 오른쪽에 있는 값을 문자열에 다음과 같이 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "Windows" C:\PS&gt; $a += " PowerShell" C:\PS&gt; $a Windows PowerShell</source>
          <target state="translated">C:\PS &gt; a = "Windows" C:\PS $&gt; $ + = "PowerShell" C:\PS a &gt; $ Windows PowerShell</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When the value of the variable is an array, the += operator appends the values on the right side of the operator to the array.</source>
          <target state="translated">변수의 값이 배열인 경우 + = 연산자는 연산자의 오른쪽에 있는 값 배열에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Unless the array is explicitly typed by casting, you can append any type of value to the array, as follows:</source>
          <target state="translated">배열 명시적으로 캐스팅 하 여 입력 하지 않으면 다음과 같이 모든 유형의 값을 배열에 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 1,2,3 C:\PS = &gt; $ + = 2 C:\PS &gt; $는</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a += "String" C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ + = "String" C:\PS a &gt; $는</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">문자열</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When the value of a variable is a hash table, the += operator appends the value on the right side of the operator to the hash table.</source>
          <target state="translated">해시 테이블 변수의 값을 사용 하는 경우 + = 연산자는 해시 테이블에 연산자의 오른쪽에 있는 값을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, because the only type that you can add to a hash table is another hash table, all other assignments fail.</source>
          <target state="translated">그러나 해시 테이블에 추가할 수 있는 유일한 형식 다른 해시 테이블 이기 때문에 다른 모든 할당 실패 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a hash table to the $a variable.</source>
          <target state="translated">예를 들어 다음 명령은 $a 변수에 해시 테이블을 할당합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Then, it uses the += operator to append another hash table to the existing hash table, effectively adding a new key/value pair to the existing hash table.</source>
          <target state="translated">그런 다음 효과적으로 기존 해시 테이블에 새 키/값 쌍을 추가, 기존 해시 테이블에 다른 해시 테이블을 추가 하려면 + = 연산자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This command succeeds, as shown in the output:</source>
          <target state="translated">출력에 표시 된 것 처럼이 명령은 성공 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += @{mode = "write"} C:\PS&gt; $a Name                           Value</source>
          <target state="translated">C:\PS &gt; $는 = @{는 = 1; b = 2, c = 3} C:\PS &gt; $a + = @{모드 = "쓰기"} C:\PS &gt; $ 이름 값 a</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 mode                           write c                              3</source>
          <target state="translated">a                              1 b                              2 mode                           write c                              3</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following command attempts to append an integer (1) to the hash table in the $a variable.</source>
          <target state="translated">다음 명령을 $ a 변수에 해시 테이블에 추가 하는 정수 (1)을 시도 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This command fails:</source>
          <target state="translated">이 명령은 실패합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += 1 You can add another hash table only to a hash table.</source>
          <target state="translated">C:\PS &gt; $는 = @{는 = 1; b = 2, c = 3을 (를) C:\PS &gt; $a + = 1 해시 테이블에만 다른 해시 테이블을 추가할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>At line:1 char:6</source>
          <target state="translated">줄: 1 문자: 6</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>$a += &lt;&lt;&lt;&lt;  1</source>
          <target state="translated">$a + = &lt;&lt;&lt;&lt; 1</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY SUBTRACTION OPERATOR (-=)</source>
          <target state="translated">빼기 연산자 (-)으로 할당</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The assignment by subtraction operator (-=) decrements the value of a variable by the value that is specified on the right side of the operator.</source>
          <target state="translated">빼기 연산자 (-) 감소 하 여 할당 연산자의 오른쪽에 지정 된 값으로 변수 값입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This operator cannot be used with string variables, and it cannot be used to remove an element from a collection.</source>
          <target state="translated">이 연산자는 문자열 변수를 사용할 수 없습니다 하 고는 요소를 제거 하 여 컬렉션에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The -= operator combines two operations.</source>
          <target state="translated">-= 연산자는 두 개의 작업을 결합합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>First, it subtracts, and then it assigns.</source>
          <target state="translated">먼저 뺄을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">따라서 다음 문은 동일합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>$a -= 2 $a = ($a - 2)</source>
          <target state="translated">$a-= 2 a ($a-2) = $</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following example shows how to use of the -= operator to decrease the value of a variable:</source>
          <target state="translated">다음 예제에서는 변수 값을 줄이려면-= 연산자를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a -= 2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 8 C:\PS = &gt; $a-2 C:\PS = &gt; $는</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You can also use the -= assignment operator to decrease the value of a member of a numeric array.</source>
          <target state="translated">숫자 배열 멤버의 값을 줄이려면-= 할당 연산자를 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To do this, specify the index of the array element that you want to change.</source>
          <target state="translated">이 위해 변경 하려는 배열 요소의 인덱스를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the third element of an array (element 2) is decreased by 1:</source>
          <target state="translated">다음 예제에서는 배열 (요소 2)의 세 번째 요소 값 1 씩 감소:</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a[2] -= 1.</source>
          <target state="translated">C:\PS &gt; $는 1,2,3 C:\PS = &gt; $ ' [2] = 1입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You cannot use the -= operator to delete the values of a variable.</source>
          <target state="translated">변수 값을 삭제 하려면-= 연산자를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To delete all the values that are assigned to a variable, use the Clear-Item or Clear-Variable cmdlets to assign a value of $null or "" to the variable.</source>
          <target state="translated">변수에 할당 된 모든 값을 삭제 하려면 $null의 값을 할당 하려면 Clear-item 또는 Clear-variable cmdlet을 사용 하거나 "" 변수에 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>$a = $null</source>
          <target state="translated">$는 $null =</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To delete a particular value from an array, use array notation to assign a value of $null to the particular item.</source>
          <target state="translated">배열에서 특정 값을 삭제 하려면 특정 항목에 $null의 값을 할당 하려면 배열 표기법을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For example, the following statement deletes the second value (index position 1) from an array:</source>
          <target state="translated">예를 들어 다음 문은 삭제의 두 번째 값 (인덱스 위치 1) 배열에서:</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 1,2,3 C:\PS = &gt; $는</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a[1] = $null C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $a [1] $null C:\PS = &gt; $는</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To delete a variable, use the Remove-Variable cmdlet.</source>
          <target state="translated">변수를 삭제 하려면 Remove-variable cmdlet을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This method is useful when the variable is explicitly cast to a particular data type, and you want an untyped variable.</source>
          <target state="translated">이 메서드는 변수는 특정 데이터 형식으로 명시적으로 캐스팅 하 고 형식화 되지 않은 변수를 원하는 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following command deletes the $a variable:</source>
          <target state="translated">다음 명령은 $a 변수를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>remove-variable a</source>
          <target state="translated">제거 가변성이</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY MULTIPLICATION OPERATOR (*=)</source>
          <target state="translated">곱하기 연산자에 의해 할당 (* =)</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The assignment by multiplication operator (*=) multiplies a numeric value or appends the specified number of copies of the string value of a variable.</source>
          <target state="translated">곱하기 연산자에 의해 할당 (* =)는 지정 된 변수는 문자열 값의 복사본 수를 추가 또는 숫자 값을 곱합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When a variable contains a single numeric value, that value is multiplied by the value on the right side of the operator.</source>
          <target state="translated">단일 숫자 값을 포함 하는 변수, 해당 값 연산자의 오른쪽에 있는 값 곱합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For example, the following example shows how to use the *= operator to multiply the value of a variable:</source>
          <target state="translated">예를 들어, 다음 예제를 사용 하는 방법의 * = 연산자를 사용 하는 변수의 값을 곱합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a *= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 3 C:\PS = &gt; $는 * 4 C:\PS = &gt; $는</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In this case, the *= operator combines two operations.</source>
          <target state="translated">이 경우에 * = 연산자 결합 하 여 두 개의 작업 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>First, it multiplies, and then it assigns.</source>
          <target state="translated">첫째, 것을 곱하고 할당 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">따라서 다음 문은 동일합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</source>
          <target state="translated">$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When a variable contains a string value, Windows PowerShell appends the specified number of strings to the value, as follows:</source>
          <target state="translated">변수는 문자열 값이 포함 된 경우 Windows PowerShell 문자열의 지정된 된 수에 추가 된 값을 다음과 같이 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a *= 4 C:\PS&gt; $a filefilefilefile</source>
          <target state="translated">C:\PS &gt; a = "file" C:\PS $&gt; $는 * 4 C:\PS = &gt; $ filefilefilefile a</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>To multiply an element of an array, use an index to identify the element that you want to multiply.</source>
          <target state="translated">배열의 요소를 곱하고, 곱할 요소를 식별 하 인덱스를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For example, the following command multiplies the first element in the array (index position 0) by 2:</source>
          <target state="translated">예를 들어 다음 명령은 배열의 첫 번째 요소를 곱합니다 (인덱스 0의 위치)을 2:</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>$a[0] *= 2</source>
          <target state="translated">$[0] * = 2</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY DIVISION OPERATOR (/=)</source>
          <target state="translated">나누기 연산자에 의해 할당 (/ =)</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The assignment by division operator (/=) divides a numeric value by the value that is specified on the right side of the operator.</source>
          <target state="translated">나누기 연산자에 의해 할당 (/ =) 연산자의 오른쪽에 지정 된 값으로 숫자 값을 나눕니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The operator cannot be used with string variables.</source>
          <target state="translated">문자열 변수는 연산자를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The /= operator combines two operations.</source>
          <target state="translated">/ = 연산자 결합 하 여 두 개의 작업 합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>First, it divides, and then it assigns.</source>
          <target state="translated">먼저, 분할을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Therefore, the following two statements are equivalent:</source>
          <target state="translated">따라서 다음 두 문은 동일합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>$a /= 2 $a = ($a / 2)</source>
          <target state="translated">$는 / 2 = a = $ ($는 / 2)</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For example, the following command uses the /= operator to divide the value of a variable:</source>
          <target state="translated">예를 들어, 다음 명령을 사용 하는 / = 연산자는 변수의 값을 나눌 수 있습니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a /=2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 8 C:\PS = &gt; $는 / 2 C:\PS = &gt; $는</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To divide an element of an array, use an index to identify the element that you want to change.</source>
          <target state="translated">배열의 요소를 나누기, 변경 하려는 요소를 식별 하 인덱스를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, the following command divides the second element in the array (index position 1) by 2:</source>
          <target state="translated">예를 들어 다음 명령은 나눕니다 배열의 두 번째 요소 (1) 2에 의해 인덱스 위치:</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>$a[1] /= 2</source>
          <target state="translated">$a [1] / 2 =</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>THE  ASSIGNMENT BY MODULUS OPERATOR (%=)</source>
          <target state="translated">모듈러스 연산자에 의해 할당 (% =)</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The assignment by modulus operator (%=) divides the value of a variable by the value on the right side of the operator.</source>
          <target state="translated">모듈러스 연산자에 의해 할당 (% =) 연산자의 오른쪽에 있는 값으로 변수 값을 나눕니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Then, the %= operator assigns the remainder (known as the modulus) to the variable.</source>
          <target state="translated">그런 다음 % = 할당 연산자를 변수에 나머지 (모듈러스 라고도 함).</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You can use this operator only when a variable contains a single numeric value.</source>
          <target state="translated">이 연산자는 변수에 단일 숫자 값을 포함 하는 경우에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You cannot use this operator when a variable contains a string variable or an array.</source>
          <target state="translated">문자열 변수 또는 배열 변수를 포함 하는 경우에이 연산자를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The %= operator combines two operations.</source>
          <target state="translated">% = 연산자 결합 하 여 두 개의 작업 합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>First, it divides and determines the remainder, and then it assigns the remainder to the variable.</source>
          <target state="translated">첫째, 나누고 나머지를 결정 하 고 나머지 변수를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">따라서 다음 문은 동일합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>$a %= 2 $a = ($a % 2)</source>
          <target state="translated">$ %a = 2 a ($ %2 a) = $</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the %= operator to save the modulus of a quotient:</source>
          <target state="translated">다음 예제에서는 %를 사용 하 여 = 연산자를 사용 하는 몫의 나머지를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $a %= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 7 C:\PS = &gt; $ % a 4 C:\PS = &gt; $는</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>THE INCREMENT AND DECREMENT OPERATORS</source>
          <target state="translated">증가 및 감소 연산자</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The increment operator (++) increases the value of a variable by 1.</source>
          <target state="translated">증가 연산자 (+ +)는 변수의 값 1 씩 증가합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When you use the increment operator in a simple statement, no value is returned.</source>
          <target state="translated">증가 연산자를 사용 하 여 간단한 문에서 아무 값도 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To view the result, display the value of the variable, as follows:</source>
          <target state="translated">결과 보려면 해당 변수의 값이 다음과 같이 표시.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 7 C:\PS = &gt; + + $ C:\PS a &gt; $는</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To force a value to be returned, enclose the variable and the operator in parentheses, as follows:</source>
          <target state="translated">반환 될 값을 적용할 변수 및 연산자와 괄호로 묶습니다 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; (++$a)</source>
          <target state="translated">C:\PS &gt; $는 7 C:\PS = &gt; (+ + $는)</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The increment operator can be placed before (prefix) or after (postfix) a variable.</source>
          <target state="translated">증가 연산자 (접두사) 하기 전에 배치 될 수 있습니다 (후 위) 변수 이후에 합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator increments a variable before its value is used in the statement, as follows:</source>
          <target state="translated">연산자의 전위 버전 문에서 다음과 같이 해당 값을 사용 하기 전에 변수를 증가 시킵니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 7 C:\PS &gt; $c = = + + $ C:\PS a &gt; $는</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">&gt; $C C:\PS</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator increments a variable after its value is used in the statement.</source>
          <target state="translated">연산자의 후 위 버전 문에서 그 값은 사용 후 변수를 증가 시킵니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In the following example, the $c and $a variables have different values because the value is assigned to $c before $a changes:</source>
          <target state="translated">다음 예제에서는, $c 및 $ 변수는 변경 전에 $ $c에는 값이 할당 하기 때문에 다른 값을 갖습니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = $a++ C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 7 C:\PS &gt; $c = = $a + + C:\PS &gt; $는</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">&gt; $C C:\PS</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The decrement operator (--) decreases the value of a variable by 1.</source>
          <target state="translated">감소 연산자 (-)는 변수의 값 1 씩 감소 합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>As with the increment operator, no value is returned when you use the operator in a simple statement.</source>
          <target state="translated">로 증가 연산자와 함께 아무 값도 반환 간단한 문을에 연산자를 사용 하는 경우.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Use parentheses to return a value, as follows:</source>
          <target state="translated">괄호를 사용 하 여 다음과 같이 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; --$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 7 C:\PS = &gt;-$ C:\PS a &gt; $는</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (--$a)</source>
          <target state="translated">C:\PS &gt; (-$는)</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator decrements a variable before its value is used in the statement, as follows:</source>
          <target state="translated">변수를 문에서 다음과 같이 해당 값을 사용 하기 전에 연산자 감소의 접두사 버전:</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = --$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 7 C:\PS &gt; $c = =-$ C:\PS a &gt; $는</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">&gt; $C C:\PS</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator decrements a variable after its value is used in the statement.</source>
          <target state="translated">변수를 해당 값이 문에서 사용 된 후 연산자 감소의 후 위 버전입니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>In the following example, the $d and $a variables have different values because the value is assigned to $d before $a changes:</source>
          <target state="translated">다음 예제에서는, $d 및 $ 변수는 변경 전에 $ $d에는 값이 할당 하기 때문에 다른 값을 갖습니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $d = $a-- C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 7 C:\PS &gt; $d = = $a--C:\PS &gt; $는</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $d</source>
          <target state="translated">&gt; $D C:\PS</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>MICROSOFT .NET FRAMEWORK TYPES</source>
          <target state="translated">MICROSOFT.NET FRAMEWORK 형식</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>By default, when a variable has only one value, the value that is assigned to the variable determines the data type of the variable.</source>
          <target state="translated">기본적으로 변수는 하나의 값을 변수에 할당 되는 값 변수의 데이터 형식을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For example, the following command creates a variable that has the Integer (System.Int32) type:</source>
          <target state="translated">예를 들어 다음 명령은 정수 (System.Int32) 형식이 지정 된 변수를 만듭니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$는 = 6</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>To find the .NET Framework type of a variable, use the GetType method and its FullName property, as follows.</source>
          <target state="translated">.NET Framework 형식의 변수를 찾으려면 다음과 같이 GetType 메서드 및 해당 FullName 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Be sure to include the parentheses after the GetType method name, even though the method call has no arguments:</source>
          <target state="translated">해야 GetType 메서드 이름 뒤에 괄호를 포함 하는 메서드 호출에 인수가 없는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a.gettype().fullname System.Int32</source>
          <target state="translated">C:\PS &gt; $는 6 C:\PS = &gt; $a.gettype ().fullname System.Int32</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>To create a variable that contains a string, assign a string value to the variable.</source>
          <target state="translated">문자열이 포함 된 변수를 만들려면 문자열 값을 변수에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>To indicate that the value is a string, enclose it in quotation marks, as follows:</source>
          <target state="translated">값이 문자열 임을 나타내려면 묶습니다 인용 부호로 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "6" C:\PS&gt; $a.gettype().fullname System.String</source>
          <target state="translated">C:\PS &gt; $ = "6" C:\PS &gt; $a.gettype ().fullname System.String</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If the first value that is assigned to the variable is a string, Windows PowerShell treats all operations as string operations and casts new values to strings.</source>
          <target state="translated">변수에 할당 된 첫 번째 값은 문자열로, Windows PowerShell 문자열 작업으로 모든 작업을 처리 하 고 새 값을 문자열로 캐스팅 합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">다음 예제에서 발생합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a += 3 C:\PS&gt; $a file3</source>
          <target state="translated">C:\PS &gt; a = "file" C:\PS $&gt; $ + 3 = a C:\PS &gt; $ file3 a</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If the first value is an integer, Windows PowerShell treats all operations as integer operations and casts new values to integers.</source>
          <target state="translated">첫 번째 값은 정수, Windows PowerShell 정수 연산으로 모든 작업을 처리 하 고 새 값을 정수로 캐스팅 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">다음 예제에서 발생합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a += "3" C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $는 6 C:\PS = &gt; $ + = "3" C:\PS &gt; $는</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>You can cast a new scalar variable as any .NET Framework type by placing the type name in brackets that precede either the variable name or the first assignment value.</source>
          <target state="translated">새 스칼라 변수를 형식 이름을 대괄호를 사용 하 여 첫 번째 할당 값 또는 변수 이름 앞에 배치 하 여 모든.NET Framework 형식으로 캐스팅할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>When you cast a variable, you can determine the types of data that can be stored in the variable.</source>
          <target state="translated">변수를 캐스팅 하면 변수에 저장할 수 있는 데이터 형식을 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>And, you can determine how the variable behaves when you manipulate it.</source>
          <target state="translated">및 변수 것을 조작할 때 동작 하는 방식을 결정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string type:</source>
          <target state="translated">예를 들어 다음 명령은 문자열 형식으로 변수를 캐스팅합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = 27 C:\PS&gt; $a += 3 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; [문자열] $는 27 C:\PS = &gt; $ + 3 = a C:\PS &gt; $는</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>273</source>
          <target state="translated">273</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The following example casts the first value, instead of casting the variable:</source>
          <target state="translated">다음 예제에서는 변수를 캐스팅 하는 대신 첫 번째 값을 캐스팅 합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>$a = [string]27</source>
          <target state="translated">$ a = [string] 27</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>When you cast a variable to a specific type, the common convention is to cast the variable, not the value.</source>
          <target state="translated">변수는 특정 형식으로 캐스팅 하면 일반적인 규칙은 값이 아닌 변수를 캐스팅 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>However, you cannot recast the data type of an existing variable if its value cannot be converted to the new data type.</source>
          <target state="translated">그러나 해당 값을 새 데이터 형식으로 변환할 수 없는 경우 기존 변수의 데이터 형식을 다시 캐스팅 수 없습니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>To change the data type, you must replace its value, as follows:</source>
          <target state="translated">데이터 형식을 변경 하려면 다음과 같이 해당 값을 바꿔야 합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "string" C:\PS&gt; [int]$a Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\PS &gt; a = "string" C:\PS $&gt; [int] $는 값 "문자열" "System.Int32" 형식으로 변환할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">오류: "입력 문자열 되었습니다 올바른 형식에서입니다."</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>At line:1 char:8</source>
          <target state="translated">줄: 1 문자: 8에서</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>[int]$a &lt;&lt;&lt;&lt;</source>
          <target state="translated">[int] $는 &lt;&lt;&lt;&lt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a =3</source>
          <target state="translated">C:\PS &gt; [int] $는 = 3</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In addition, when you precede a variable name with a data type, the type of that variable is locked unless you explicitly override the type by specifying another data type.</source>
          <target state="translated">또한 데이터 형식의 변수 이름 앞에, 해당 변수의 유형은 잠깁니다 형식을 다른 데이터 형식을 지정 하 여 명시적으로 재정의 하지 않으면.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If you try to assign a value that is incompatible with the existing type, and you do not explicitly override the type, Windows PowerShell displays an error, as shown in the following example:</source>
          <target state="translated">기존 형식과 호환 되지 않는 값을 할당 하려고 하면 형식을 명시적으로 재정의 하지 않는 경우 다음 예와에서 같이 Windows PowerShell 오류를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a = "string"</source>
          <target state="translated">C:\PS &gt; $는 = 3 C:\PS &gt; $a = "string"</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a = 3 C:\PS&gt; $a = "string" Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\PS &gt; [int] $는 = 3 C:\PS &gt; $a = "string" 값 "문자열" "System.Int32" 형식으로 변환할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">오류: "입력 문자열 되었습니다 올바른 형식에서입니다."</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>At line:1 char:3</source>
          <target state="translated">줄: 1 문자: 3</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>$a &lt;&lt;&lt;&lt;  = "string"</source>
          <target state="translated">$는 &lt;&lt;&lt;&lt; = "문자열"</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = "string"</source>
          <target state="translated">C:\PS &gt; [문자열] $a = "string"</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, the data types of variables that contain multiple items in an array are handled differently from the data types of variables that contain a single item.</source>
          <target state="translated">Windows PowerShell에서 배열에 여러 항목을 포함 하는 변수의 데이터 형식은 단일 항목을 포함 하는 변수의 데이터 형식에서 다르게 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Unless a data type is specifically assigned to an array variable, the data type is always System.Object [].</source>
          <target state="translated">배열 변수 데이터 형식을 명시적으로 할당 되 면 하지 않는 한 데이터 형식은 항상 System.Object입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This data type is specific to arrays.</source>
          <target state="translated">이 데이터 형식은 배열에 특정 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Sometimes, you can override the default type by specifying another type.</source>
          <target state="translated">경우에 따라 기본 형식은 다른 형식을 지정 하 여 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string [] array type:</source>
          <target state="translated">예를 들어 다음 명령은 string 배열 형식으로 변수를 캐스팅합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>[string []] $a = "one", "two", "three"</source>
          <target state="translated">[a = "1" []] $문자열 "two", "3"</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Windows PowerShell variables can be any .NET Framework data type.</source>
          <target state="translated">Windows PowerShell 변수는.NET Framework 데이터 형식일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>In addition, you can assign any fully qualified .NET Framework data type that is available in the current process.</source>
          <target state="translated">또한 현재 프로세스에서 사용할 수 있는 모든 정규화 된.NET Framework 데이터 형식에 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For example, the following command specifies a System.DateTime data type:</source>
          <target state="translated">예를 들어 다음 명령은 System.DateTime 데이터 형식을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>[system.datetime]$a = "5/31/2005"</source>
          <target state="translated">[system.datetime]$a = "5/31/2005"</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The variable will be assigned a value that conforms to the System.DateTime data type.</source>
          <target state="translated">System.DateTime 데이터 형식으로 변수를 준수 하는 값을 할당 됩니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The value of the $a variable would be the following:</source>
          <target state="translated">$A 변수의 값은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Tuesday, May 31, 2005 12:00:00 AM</source>
          <target state="translated">2005 년 5 월 31 일 화요일 오전 12시: 00</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>ASSIGNING MULTIPLE VARIABLES</source>
          <target state="translated">여러 변수를 할당합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, you can assign values to multiple variables by using a single command.</source>
          <target state="translated">Windows PowerShell에서 단일 명령을 사용 하 여 여러 변수에 값을 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The first element of the assignment value is assigned to the first variable, the second element is assigned to the second variable, the third element to the third variable, and so on.</source>
          <target state="translated">할당 값의 첫 번째 요소는 첫 번째 변수에 할당 됩니다, 그리고 두 번째 요소는 세 번째 요소를 세 번째 변수를 두 번째 변수에 할당 됩니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns the value 1 to the $a variable, the value 2 to the $b variable, and the value 3 to the $c variable:</source>
          <target state="translated">예를 들어 다음 명령은 변수, $b 변수에 값 2 및 $c 변수에 값 3에 값 1 $에 할당합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a, $b, $c = 1, 2, 3</source>
          <target state="translated">C:\PS &gt; $ $b, a $c = 1, 2, 3</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the assignment value contains more elements than variables, all the remaining values are assigned to the last variable.</source>
          <target state="translated">변수 보다 더 많은 요소를 포함 하는 할당 값을 하는 경우 나머지 모든 값이 마지막 변수에 할당 됩니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>For example, the following command contains three variables and five values:</source>
          <target state="translated">예를 들어 다음 명령은 세 개의 변수 및 5 개 값이 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>$a, $b, $c = 1, 2, 3, 4, 5</source>
          <target state="translated">$a $b, $c = 1, 2, 3, 4, 5</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Therefore, Windows PowerShell assigns the value 1 to the $a variable and the value 2 to the $b variable.</source>
          <target state="translated">따라서 Windows PowerShell $a 변수 및 $b 변수에 값 2에 값 1을 할당합니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>It assigns the values 3, 4, and 5 to the $c variable.</source>
          <target state="translated">3, 4 및 5 값 $c 변수에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>To assign the values in the $c variable to three other variables, use the following format:</source>
          <target state="translated">$C 변수의 값에 세 개의 다른 변수를 할당 하려면 다음 형식을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>$d, $e, $f = $c</source>
          <target state="translated">$d, $e, $f $c =</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This command assigns the value 3 to the $d variable, the value 4 to the $e variable, and the value 5 to the $f variable.</source>
          <target state="translated">이 명령은 $d 변수에 값 3, 4, $e 변수에 값 및 $f 변수에 값 5 할당합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>You can also assign a single value to multiple variables by chaining the variables.</source>
          <target state="translated">또한 변수를 연결 하 여 여러 변수를 단일 값을 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a value of "three" to all four variables:</source>
          <target state="translated">다음 명령은 값을 할당 하는 예를 들어 모든 4 개의 변수를 "3".</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>$a = $b = $c = $d = "three"</source>
          <target state="translated">$는 $b = $c = $d = = "3"</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>VARIABLE-RELATED CMDLETS</source>
          <target state="translated">변수 관련 CMDLET</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>In addition to using an assignment operation to set a variable value, you can also use the Set-Variable cmdlet.</source>
          <target state="translated">할당 작업을 사용 하 여 변수 값을 설정를 Set-variable cmdlet를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>For example, the following command uses Set-Variable to assign an array of 1, 2, 3 to the $a variable.</source>
          <target state="translated">예를 들어 다음 명령은 변수 설정을 사용 하 여 $a 변수에 1, 2, 3의 배열을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Set-Variable -name a -value 1, 2, 3</source>
          <target state="translated">Set-variable-a-1, 2, 3 값 이름</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>about_Arrays about_Hash_Tables about_Variables Clear-Variable Remove-Variable Set-Variable</source>
          <target state="translated">about_Arrays about_Hash_Tables about_Variables Clear-variable Remove-variable-변수 설정</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>