<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6bcccd3b6b5da9223b7c5287370f95f3a12614a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Core\About\about_Script_Blocks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ca95e9cf510bd28a3c711ed539641aa59812d6c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b21d52086f85e7a0477b91f4b110953beacc62e1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Script Blocks</source>
          <target state="translated">스크립트 블록에 대 한</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">항목</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Script_Blocks</source>
          <target state="translated">about_Script_Blocks</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">간단한 설명</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Defines what a script block is and explains how to use script blocks in the Windows PowerShell programming language.</source>
          <target state="translated">정의 프로그래밍 언어는 Windows PowerShell에서 차단 하는 스크립트 블록은 및 스크립트를 사용 하는 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">자세한 설명</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the Windows PowerShell programming language, a script block is a collection of statements or expressions that can be used as a single unit.</source>
          <target state="translated">Windows PowerShell 프로그래밍 언어로 스크립트 블록의 컬렉션인 문 또는 단일 단위로 사용할 수 있는 식입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A script block can accept arguments and return values.</source>
          <target state="translated">스크립트 블록은 인수를 받아서 값을 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Syntactically, a script block is a statement list in braces, as shown in the following syntax:</source>
          <target state="translated">구문적으로 스크립트 블록은 다음 구문에서와 같이 중괄호로 문 목록:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>{<ph id="ph1">&lt;statement list&gt;</ph>}</source>
          <target state="translated">{<ph id="ph1">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A script block returns the output of all the commands in the script block, either as a single object or as an array.</source>
          <target state="translated">스크립트 블록 단일 개체 또는 배열 스크립트 블록의 모든 명령이 출력을 반환합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Like functions, a script block can include parameters.</source>
          <target state="translated">함수와 마찬가지로 스크립트 블록 매개 변수를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the Param keyword to assign named parameters, as shown in the following syntax:</source>
          <target state="translated">다음 구문에서 표시 된 것과 같이 명명 된 매개 변수를 할당 하려면 Param 키워드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>{ param ([type]$parameter1 [,[type]$parameter2]) <ph id="ph1">&lt;statement list&gt;</ph> }</source>
          <target state="translated">{param ([유형] $parameter1 [, [유형] 매개 변수 2$]) <ph id="ph1">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a script block, unlike a function, you cannot specify parameters outside the braces.</source>
          <target state="translated">달리 함수를 사용 하는 스크립트 블록을 중괄호 외부 매개 변수를 지정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Like functions, script blocks can include the DynamicParam, Begin, Process, and End keywords.</source>
          <target state="translated">함수와 마찬가지로 스크립트 블록 DynamicParam, 시작, 프로세스 및 최종 키워드를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see about_Functions and about_Functions_Advanced.</source>
          <target state="translated">자세한 내용은 about_Functions 및 about_Functions_Advanced를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Using Script Blocks</source>
          <target state="translated">스크립트 블록을 사용 하 여</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A script block is an instance of a Microsoft .NET Framework type (System.Management.Automation.ScriptBlock).</source>
          <target state="translated">스크립트 블록에는 Microsoft.NET Framework 유형 (System.Management.Automation.ScriptBlock)의 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Commands can have script block parameter values.</source>
          <target state="translated">명령은 스크립트 블록 매개 변수 값을 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the Invoke-Command cmdlet has a ScriptBlock parameter that takes a script block value, as shown in this example:</source>
          <target state="translated">예를 들어이 명령은 Invoke-command cmdlet이 예와에서 같이 스크립트 블록 값을 사용 하는 ScriptBlock 매개 변수를 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock  { get-process } Handles  NPM(K)    PM(K)     WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">C:\PS &gt; 호출 명령-scriptblock {get 프로세스} 처리 NPM(K) PM(K) WS(K) VM(M) CPU(s) Id ProcessName</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>999      28    39100     45020   262    15.88   1844 communicator 721      28    32696     36536   222    20.84   4028 explorer</source>
          <target state="translated">999 28 39100 45020 262 15.88 1844 communicator 721 28 32696 36536 222 20.84 4028 탐색기</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The script block that is used as a value can be more complicated, as shown in the following example:</source>
          <target state="translated">다음 예제와 같이 더 복잡 한 값으로 사용 되는 스크립트 블록 가능 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock { param ($uu = "Parameter"); "$uu assigned."</source>
          <target state="translated">C:\PS &gt; 호출 명령-scriptblock {param ($uu = "매개 변수"); "$uu 할당 합니다."</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>} Parameter assigned.</source>
          <target state="translated">(를) 매개 변수 할당입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The script block in the preceding example uses the Param keyword to create a parameter that has a default value.</source>
          <target state="translated">앞의 예제에 있는 스크립트 블록 Param 키워드를 사용 하 여 기본 값을 갖는 매개 변수를 만듭니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example uses the Args parameter of the Invoke-Command cmdlet to assign a different value to the parameter:</source>
          <target state="translated">다음 예제에서는 Invoke-command cmdlet의 Args 매개 변수를 사용 하 여 매개 변수에 다른 값을 할당 하려면:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock {param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\PS &gt; 호출 명령-scriptblock {param ($uu = "매개 변수"); "$uu 할당 합니다."}</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-args "Other value" Other value assigned.</source>
          <target state="translated">-인수 "기타" 다른 값이 할당 된 값입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can assign a script block to a variable, as shown in the following example:</source>
          <target state="translated">다음 예제와 같이 스크립트 블록을 변수에 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = {param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\PS &gt; a = $ {param ($uu = "매개 변수"); "$uu 할당 합니다."}</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use the variable with a cmdlet such as Invoke-Command, as shown in the following example:</source>
          <target state="translated">다음 예제와 같이 같은 명령은 Invoke-command cmdlet과 변수를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; invoke-command -scriptblock $a -args "Other value" Other value assigned.</source>
          <target state="translated">C:\PS &gt; 호출 명령 scriptblock $a-args "기타" 다른 값이 할당 된 값입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can run a script block that is assigned to a variable by using the call operator (&amp;), as shown in the following example:</source>
          <target state="translated">호출 연산자를 사용 하 여 (&amp;), 다음 예제와 같이 변수에 할당 하는 스크립트 블록을 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; &amp;$a Parameter assigned.</source>
          <target state="translated">C:\PS &gt; &amp;$ 매개 변수를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also provide a parameter to the script block, as shown in the following example:</source>
          <target state="translated">또한 다음 예와에서 같이 스크립트 블록에 대 한 매개 변수를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; &amp;$a "Other value" Other value assigned.</source>
          <target state="translated">C:\PS &gt; &amp;$ "기타" 다른 값이 할당 된 값입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you want to assign the value that is created by a script block to a variable, use the call operator to run the script block directly, as shown in the following example:</source>
          <target state="translated">변수에 스크립트 블록에 의해 생성 된 값을 할당 하려는 경우는 다음 예와에서 같이 스크립트 블록을 직접 실행 하는 호출 연산자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = &amp;{param ($uu = "Parameter"); "$uu assigned."}</source>
          <target state="translated">C:\PS &gt; $a = &amp; {param ($uu = "매개 변수"); "$uu 할당 합니다."}</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a Parameter assigned.</source>
          <target state="translated">C:\PS &gt; $ 매개 변수를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about the call operator, see about_Operators.</source>
          <target state="translated">호출 연산자에 대 한 자세한 내용은 about_Operators를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">참고 항목</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>about_Functions about_Functions_Advanced about_Operators</source>
          <target state="translated">about_Functions about_Functions_Advanced about_Operators</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>