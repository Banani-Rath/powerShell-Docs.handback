<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e52ac7d7a7fcf521b77018c297e44d60ec069b8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Functions_Advanced_Parameters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ce315c8cd9e465979c2573740d88a33ba9caa10</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a6df0f99aece19895c05d69883252558965d64b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Functions_Advanced_Parameters</source>
          <target state="translated">about_Functions_Advanced_Parameters</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">applet de commande PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Functions Advanced Parameters</source>
          <target state="translated">Sur les fonctions des paramètres avancés</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Functions_Advanced_Parameters</source>
          <target state="translated">about_Functions_Advanced_Parameters</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Functions_Advanced_Parameters</source>
          <target state="translated">about_Functions_Advanced_Parameters</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIPTION COURTE</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Explains how to add parameters to advanced functions.</source>
          <target state="translated">Explique comment ajouter des paramètres à des fonctions avancées.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIPTION DÉTAILLÉE</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can add parameters to the advanced functions that you write, and use parameter attributes and arguments to limit the parameter values that function users submit with the parameter.</source>
          <target state="translated">Vous pouvez ajouter des paramètres aux fonctions avancées que vous écrivez et utiliser les attributs de paramètre et les arguments pour limiter les valeurs de paramètre soumis par les utilisateurs de fonction avec le paramètre.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The parameters that you add to your function are available to users in addition to the common parameters that Windows PowerShell adds automatically to all cmdlets and advanced functions.</source>
          <target state="translated">Les paramètres que vous ajoutez à votre fonction sont disponibles pour les utilisateurs en plus des paramètres courants que Windows PowerShell ajoute automatiquement à toutes les applets de commande et des fonctions avancées.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about the Windows PowerShell common parameters, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">Pour plus d’informations sur les paramètres communs de Windows PowerShell, consultez about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, you can use splatting with @Args to represent the parameters in a command.</source>
          <target state="translated">À compter de Windows PowerShell 3.0, vous pouvez utiliser opérateur de splatting avec @Args pour représenter les paramètres dans une commande.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This technique is valid on simple and advanced functions.</source>
          <target state="translated">Cette technique n’est valide que sur des fonctions simples et avancées.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see about_Functions (http://go.microsoft.com/fwlink/?LinkID=113231) and about_Splatting (http://go.microsoft.com/fwlink/?LinkID=262720).</source>
          <target state="translated">Pour plus d’informations, consultez about_Functions (http://go.microsoft.com/fwlink/?LinkID=113231) et about_Splatting (http://go.microsoft.com/fwlink/?LinkID=262720).</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Static Parameters Static parameters are parameters that are always available in the function.</source>
          <target state="translated">Les paramètres statiques des paramètres statiques sont des paramètres qui sont toujours disponibles dans la fonction.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Most parameters in Windows PowerShell cmdlets and scripts are static parameters.</source>
          <target state="translated">La plupart des paramètres dans les scripts et les cmdlets Windows PowerShell sont les paramètres statiques.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows the declaration of a ComputerName parameter that has the following characteristics:</source>
          <target state="translated">L’exemple suivant montre la déclaration d’un paramètre de nom de l’ordinateur qui présente les caractéristiques suivantes :</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is mandatory (required).</source>
          <target state="translated">Il est obligatoire (obligatoire).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It takes input from the pipeline.</source>
          <target state="translated">Il prend en entrée le pipeline.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It takes an array of strings as input.</source>
          <target state="translated">Il accepte un tableau de chaînes en tant qu’entrée.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ValueFromPipeline=$true)] [String[]] $ComputerName</source>
          <target state="translated">[paramètre (obligatoire = $true, ValueFromPipeline = $true)] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Attributes of Parameters</source>
          <target state="translated">Attributs de paramètres</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This section describes the attributes that you can add to function parameters.</source>
          <target state="translated">Cette section décrit les attributs que vous pouvez ajouter aux paramètres de fonction.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>All attributes are optional.</source>
          <target state="translated">Tous les attributs sont facultatifs.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, if you omit the CmdletBinding attribute, then to be recognized as an advanced function, the function must include the Parameter attribute.</source>
          <target state="translated">Toutefois, si vous omettez l’attribut CmdletBinding, puis pour être reconnue comme une fonction avancée, la fonction doit inclure l’attribut de paramètre.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can add one or multiple attributes in each parameter declaration.</source>
          <target state="translated">Vous pouvez ajouter un ou plusieurs attributs dans chaque déclaration de paramètre.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>There is no limit to the number of attributes that you can add to a parameter declaration.</source>
          <target state="translated">Il n’existe aucune limite au nombre d’attributs que vous pouvez ajouter à une déclaration de paramètre.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Parameter Attribute</source>
          <target state="translated">L’attribut de paramètre</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The Parameter attribute is used to declare the attributes of function parameters.</source>
          <target state="translated">L’attribut de paramètre est utilisé pour déclarer les attributs des paramètres de fonction.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The Parameter attribute is optional, and you can omit it if none of the parameters of your functions need attributes, but to be recognized as an advanced function (rather than a simple function), a function must have either the CmdletBinding attribute or the Parameter attribute, or both.</source>
          <target state="translated">L’attribut de paramètre est facultatif et vous pouvez l’omettre si aucun des paramètres de vos attributs besoin de fonctions, mais pour être reconnue comme une fonction avancée (plutôt qu’une fonction simple), une fonction doit avoir l’attribut CmdletBinding ou l’attribut de paramètre ou les deux.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Parameter attribute has arguments that define the characteristics of the parameter, such as whether the parameter is mandatory or optional.</source>
          <target state="translated">L’attribut de paramètre a des arguments qui définissent les caractéristiques du paramètre, par exemple si le paramètre est obligatoire ou facultative.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Use the following syntax to declare the Parameter attribute, an argument, and an argument value.</source>
          <target state="translated">Utilisez la syntaxe suivante pour déclarer l’attribut de paramètre, un argument et une valeur d’argument.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The parentheses that enclose the argument and its value must follow "Parameter" with no intervening space.</source>
          <target state="translated">Les parenthèses qui entourent l’argument et sa valeur doivent suivre « Paramètre » sans espace intermédiaire.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>[parameter(Argument=value)] $ParameterName</source>
          <target state="translated">[parameter(Argument=value)] $ParameterName</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use commas to separate arguments within the parentheses.</source>
          <target state="translated">Utilisez des virgules pour séparer les arguments entre parenthèses.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use the following syntax to declare two arguments of the Parameter attribute.</source>
          <target state="translated">Utilisez la syntaxe suivante pour déclarer deux arguments de l’attribut de paramètre.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>[parameter(Argument1=value1, Argument2=value2)]</source>
          <target state="translated">[paramètre (Argument1 = valeur1, Argument2 = valeur2)]</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you use the Parameter attribute without arguments (as an alternative to using the CmdletBinding attribute), the parentheses that follow the attribute name are still required.</source>
          <target state="translated">Si vous utilisez l’attribut de paramètre sans arguments (comme alternative à l’utilisation de l’attribut CmdletBinding), les parenthèses qui suivent le nom d’attribut sont toujours nécessaires.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>[parameter()] $ParameterName</source>
          <target state="translated">[parameter()] $ParameterName</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Mandatory Argument</source>
          <target state="translated">Argument obligatoire</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The Mandatory argument indicates that the parameter is required.</source>
          <target state="translated">L’argument obligatoire indique que le paramètre est obligatoire.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If this argument is not specified, the parameter is an optional parameter.</source>
          <target state="translated">Si cet argument n’est pas spécifié, le paramètre est un paramètre facultatif.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example declares the ComputerName parameter.</source>
          <target state="translated">L’exemple suivant déclare le paramètre ComputerName.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It uses the Mandatory argument to make the parameter mandatory.</source>
          <target state="translated">Elle utilise l’argument obligatoire pour rendre le paramètre obligatoire.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Position Argument</source>
          <target state="translated">Argument de position</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The Position argument determines whether the parameter name is required when the parameter is used in a command.</source>
          <target state="translated">L’argument de Position détermine si le nom du paramètre est requis lorsque le paramètre est utilisé dans une commande.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When a parameter declaration includes the Position argument, the parameter name can be omitted and Windows PowerShell identifies the unnamed parameter value by its position (or order) in the list of unnamed parameter values in the command.</source>
          <target state="translated">Lorsqu’une déclaration de paramètre inclut l’argument de Position, le nom du paramètre peut être omis et Windows PowerShell identifie la valeur du paramètre sans nom par sa position (ou ordre) dans la liste des valeurs de paramètre sans nom de la commande.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the Position argument is not specified, the parameter name (or a parameter name alias or abbreviation) must precede the parameter value whenever the parameter is used in a command.</source>
          <target state="translated">Si l’argument Position n’est pas spécifié, le nom du paramètre (ou un alias de nom de paramètre ou une abréviation) doit précéder la valeur de paramètre chaque fois que le paramètre est utilisé dans une commande.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>By default, all function parameters are positional.</source>
          <target state="translated">Par défaut, tous les paramètres de fonction sont positionnels.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Windows PowerShell assigns position numbers to parameters in the order in which the parameters are declared in the function.</source>
          <target state="translated">Windows PowerShell assigne la numérotation des positions à des paramètres dans l’ordre dans lequel les paramètres sont déclarés dans la fonction.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To disable this feature, set the value of the PositionalBinding argument of the CmdletBinding attribute to $False.</source>
          <target state="translated">Pour désactiver cette fonctionnalité, définissez la valeur de l’argument PositionalBinding de l’attribut CmdletBinding $false.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The Position argument takes precedence over the value of the PositionalBinding argument for the parameters on which it is declared.</source>
          <target state="translated">L’argument de Position est prioritaire sur la valeur de l’argument PositionalBinding pour les paramètres sur lesquels elle est déclarée.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information, see PositionalBinding in about_Functions_CmdletBindingAttribute.</source>
          <target state="translated">Pour plus d’informations, consultez PositionalBinding dans about_Functions_CmdletBindingAttribute.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The value of the Position argument is specified as an integer.</source>
          <target state="translated">La valeur de l’argument de Position est spécifiée sous forme d’entier.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A position value of 0 represents the first position in the command, a position value of 1 represents the second position in the command, and so on.</source>
          <target state="translated">Une valeur de la position 0 représente la première position dans la commande, une valeur de la position 1 deuxième position dans la commande et ainsi de suite.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If a function has no positional parameters, Windows PowerShell assigns positions to each parameter based on the order in which the parameters are declared.</source>
          <target state="translated">Si une fonction n’a aucun paramètre positionnel, Windows PowerShell assigne des positions pour chaque paramètre en fonction de l’ordre dans lequel les paramètres sont déclarés.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>However, as a best practice, do not rely on this assignment.</source>
          <target state="translated">Toutefois, comme une meilleure pratique, ne comptez pas sur cette affectation.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When you want parameters to be positional, use the Position argument.</source>
          <target state="translated">Lorsque vous souhaitez que les paramètres positionnels, utilisez l’argument de Position.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example declares the ComputerName parameter.</source>
          <target state="translated">L’exemple suivant déclare le paramètre ComputerName.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>It uses the Position argument with a value of 0.</source>
          <target state="translated">Elle utilise l’argument de Position avec une valeur égale à 0.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>As a result, when "-ComputerName" is omitted from command, its value must be the first or only unnamed parameter value in the command.</source>
          <target state="translated">Par conséquent, lorsque «-ComputerName » est omis à partir de la commande, sa valeur doit être la première ou de la seule valeur de paramètre dans la commande sans nom.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>[parameter(Position=0)] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Position=0)] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>NOTE: When the Get-Help cmdlet displays the corresponding "Position?"</source>
          <target state="translated">REMARQUE : Lorsque l’applet de commande Get-Help affiche la correspondante « Position ? »</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>parameter attribute, the position value is incremented by 1.</source>
          <target state="translated">attribut de paramètre, la valeur est incrémenté de 1.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, a parameter with a Position argument value of 0 has a parameter attribute of "Position?</source>
          <target state="translated">Par exemple, un paramètre avec une valeur d’argument de Position 0 a un attribut de paramètre de « Position ?</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>1."</source>
          <target state="translated">1."</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>ParameterSetName Argument</source>
          <target state="translated">ParameterSetName Argument</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The ParameterSetName argument specifies the parameter set to which a parameter belongs.</source>
          <target state="translated">L’argument ParameterSetName Spécifie le paramètre défini à laquelle appartient un paramètre.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If no parameter set is specified, the parameter belongs to all the parameter sets defined by the function.</source>
          <target state="translated">Si aucun jeu de paramètres n’est spécifié, le paramètre appartient à tous les jeux de paramètres définis par la fonction.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Therefore, to be unique, each parameter set must have at least one parameter that is not a member of any other parameter set.</source>
          <target state="translated">Par conséquent, pour être unique, chaque jeu de paramètres doit avoir au moins un paramètre qui n’est pas un membre d’un autre ensemble de paramètres.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter in the Computer parameter set, a UserName parameter in the User parameter set, and a Summary parameter in both parameter sets.</source>
          <target state="translated">L’exemple suivant déclare un paramètre ComputerName dans le jeu de paramètres d’ordinateur, un paramètre de nom d’utilisateur dans le jeu de paramètres utilisateur et un paramètre de résumé dans les deux jeux de paramètres.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ParameterSetName="Computer")] [String[]] $ComputerName,</source>
          <target state="translated">[paramètre (obligatoire = $true, ParameterSetName = « Ordinateur »)] [String []] $ComputerName,</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ParameterSetName="User")] [String[]] $UserName,</source>
          <target state="translated">[paramètre (obligatoire = $true, ParameterSetName = "Utilisateur")] [String []] $UserName,</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$false)] [Switch] $Summary</source>
          <target state="translated">[parameter(Mandatory=$false)] [Commutateur] $Summary</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can specify only one ParameterSetName value in each argument and only one ParameterSetName argument in each Parameter attribute.</source>
          <target state="translated">Vous pouvez spécifier qu’une seule valeur ParameterSetName dans chaque argument et qu’un seul argument ParameterSetName dans chaque attribut de paramètre.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To indicate that a parameter appears in more than one parameter set, add additional Parameter attributes.</source>
          <target state="translated">Pour indiquer qu’un paramètre figure dans plus d’un jeu de paramètres, ajouter des attributs de paramètre.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following example explicitly adds the Summary parameter to the Computer and User parameter sets.</source>
          <target state="translated">L’exemple suivant ajoute explicitement le paramètre de synthèse dans les jeux de paramètres utilisateur et ordinateur.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The Summary parameter is mandatory in one parameter set and optional in the other.</source>
          <target state="translated">Le paramètre résumé est obligatoire dans un paramètre défini et est facultatif dans l’autre.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ParameterSetName="Computer")] [String[]] $ComputerName,</source>
          <target state="translated">[paramètre (obligatoire = $true, ParameterSetName = « Ordinateur »)] [String []] $ComputerName,</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ParameterSetName="User")] [String[]] $UserName,</source>
          <target state="translated">[paramètre (obligatoire = $true, ParameterSetName = "Utilisateur")] [String []] $UserName,</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$false, ParameterSetName="Computer")] [parameter(Mandatory=$true, ParameterSetName="User")] [Switch] $Summary</source>
          <target state="translated">[paramètre (obligatoire = $false, ParameterSetName = « Ordinateur »)] [paramètre (obligatoire = $true, ParameterSetName = "Utilisateur")] [Commutateur] $Summary</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For more information about parameter sets, see "Cmdlet Parameter Sets" in the MSDN library at http://go.microsoft.com/fwlink/?LinkId=142183.</source>
          <target state="translated">Pour plus d’informations sur les jeux de paramètres, consultez « Applet de commande paramètre définit » dans MSDN library à http://go.microsoft.com/fwlink/?LinkId=142183.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>ValueFromPipeline Argument</source>
          <target state="translated">ValueFromPipeline Argument</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The ValueFromPipeline argument indicates that the parameter accepts input from a pipeline object.</source>
          <target state="translated">L’argument ValueFromPipeline indique que le paramètre accepte l’entrée d’un objet de pipeline.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Specify this argument if the function accepts the entire object, not just a property of the object.</source>
          <target state="translated">Spécifier cet argument si la fonction accepte l’intégralité de l’objet, pas seulement une propriété de l’objet.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that is mandatory and accepts an object that is passed to the function from the pipeline.</source>
          <target state="translated">L’exemple suivant déclare un paramètre ComputerName est obligatoire et qui accepte un objet qui est passé à la fonction du pipeline.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ValueFromPipeline=$true)] [String[]] $ComputerName</source>
          <target state="translated">[paramètre (obligatoire = $true, ValueFromPipeline = $true)] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>ValueFromPipelineByPropertyName Argument</source>
          <target state="translated">ValueFromPipelineByPropertyName Argument</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The valueFromPipelineByPropertyName argument indicates that the parameter accepts input from a property of a pipeline object.</source>
          <target state="translated">L’argument valueFromPipelineByPropertyName indique que le paramètre accepte les entrées d’une propriété d’un objet de pipeline.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The object property must have the same name or alias as the parameter.</source>
          <target state="translated">La propriété de l’objet doit avoir le même nom ou alias comme paramètre.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For example, if the function has a ComputerName parameter, and the piped object has a ComputerName property, the value of the ComputerName property is assigned to the ComputerName parameter of the function.</source>
          <target state="translated">Par exemple, si la fonction a un paramètre ComputerName, et l’objet de canal a une propriété ComputerName, la valeur de la propriété ComputerName est affectée au paramètre ComputerName de la fonction.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that is mandatory and accepts input from the ComputerName property of the object that is passed to the function through the pipeline.</source>
          <target state="translated">L’exemple suivant déclare un paramètre ComputerName est obligatoire et accepte l’entrée de la propriété ComputerName de l’objet qui est passé à la fonction via le pipeline.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)] [String[]] $ComputerName</source>
          <target state="translated">[paramètre (obligatoire = $true, ValueFromPipelineByPropertyName = $true)] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>ValueFromRemainingArguments Argument</source>
          <target state="translated">ValueFromRemainingArguments Argument</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The ValueFromRemainingArguments argument indicates that the parameter accepts all of the parameters values in the command that are not assigned to other parameters of the function.</source>
          <target state="translated">L’argument ValueFromRemainingArguments indique que le paramètre accepte toutes les valeurs de paramètres dans la commande qui ne sont pas affectées à d’autres paramètres de la fonction.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that is mandatory and accepts all the remaining parameter values that were submitted to the function.</source>
          <target state="translated">L’exemple suivant déclare un paramètre ComputerName est obligatoire et accepte toutes les autres valeurs de paramètre qui ont été soumis à la fonction.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true, ValueFromRemainingArguments=$true)] [String[]] $ComputerName</source>
          <target state="translated">[paramètre (obligatoire = $true, ValueFromRemainingArguments = $true)] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>HelpMessage Argument</source>
          <target state="translated">HelpMessage Argument</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The HelpMessage argument specifies a string that contains a brief description of the parameter or its value.</source>
          <target state="translated">L’argument HelpMessage spécifie une chaîne qui contient une brève description du paramètre ou sa valeur.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Windows PowerShell displays this message in the prompt that appears when a mandatory parameter value is missing from a command.</source>
          <target state="translated">Windows PowerShell affiche ce message dans l’invite qui s’affiche lorsqu’une valeur de paramètre obligatoire est manquante dans une commande.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This argument has no effect on optional parameters.</source>
          <target state="translated">Cet argument n’a aucun effet sur les paramètres optionnels.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The following example declares a mandatory ComputerName parameter and a help message that explains the expected parameter value.</source>
          <target state="translated">L’exemple suivant déclare un paramètre ComputerName obligatoire et un message d’aide qui explique la valeur du paramètre attendu.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>[parameter(mandatory=$true, HelpMessage="Enter one or more computer names separated by commas.")] [String[]] $ComputerName</source>
          <target state="translated">[paramètre (obligatoire = $true, HelpMessage = "Entrez un ou plusieurs noms d’ordinateurs séparés par des virgules.")] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Alias Attribute</source>
          <target state="translated">Alias d’attribut</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The Alias attribute establishes an alternate name for the parameter.</source>
          <target state="translated">L’attribut Alias établit un autre nom pour le paramètre.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>There is no limit to the number of aliases that you can assign to a parameter.</source>
          <target state="translated">Il n’existe aucune limite au nombre d’alias que vous pouvez attribuer à un paramètre.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following example shows a parameter declaration that adds the "CN" and "MachineName" aliases to the mandatory ComputerName parameter.</source>
          <target state="translated">L’exemple suivant montre une déclaration de paramètre qui ajoute les alias « CN » et « MachineName » pour le paramètre ComputerName obligatoire.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [alias("CN","MachineName")] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [alias("CN","MachineName")] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Parameter and Variable Validation Attributes</source>
          <target state="translated">Paramètre et les attributs de Validation de Variable</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Validation attributes direct Windows PowerShell to test the parameter values that users submit when they call the advanced function.</source>
          <target state="translated">Attributs de validation indiquent à Windows PowerShell pour tester les valeurs de paramètre soumis par les utilisateurs lorsqu’ils appellent la fonction avancée.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If the parameter values fail the test, an error is generated and the function is not called.</source>
          <target state="translated">Si les valeurs de paramètre faire échouer le test, une erreur est générée et la fonction n’est pas appelée.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You can also use some of the validation attributes to restrict the values that users can specify for variables.</source>
          <target state="translated">Vous pouvez également utiliser certains des attributs de validation pour limiter les valeurs que les utilisateurs peuvent spécifier des variables.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>AllowNull Validation Attribute</source>
          <target state="translated">Attribut de Validation AllowNull</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The AllowNull attribute allows the value of a mandatory parameter to be null ($null).</source>
          <target state="translated">L’attribut AllowNull permet à la valeur d’un paramètre obligatoire pour avoir la valeur null ($null).</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that can have a Null value.</source>
          <target state="translated">L’exemple suivant déclare un paramètre ComputerName qui peut avoir une valeur Null.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [AllowNull()] [String] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [AllowNull()] [String] $ComputerName</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>AllowEmptyString Validation Attribute</source>
          <target state="translated">Attribut de Validation AllowEmptyString</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The AllowEmptyString attribute allows the value of a mandatory parameter to be an empty string ("").</source>
          <target state="translated">L’attribut AllowEmptyString permet à la valeur d’un paramètre obligatoire pour être une chaîne vide (« »).</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that can have an empty string value.</source>
          <target state="translated">L’exemple suivant déclare un paramètre ComputerName qui peut avoir une valeur de chaîne vide.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [AllowEmptyString()] [String] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [AllowEmptyString()] [String] $ComputerName</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>AllowEmptyCollection Validation Attribute</source>
          <target state="translated">Attribut de Validation AllowEmptyCollection</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The AllowEmptyCollection attribute allows the value of a mandatory parameter to be an empty collection (@()).</source>
          <target state="translated">L’attribut AllowEmptyCollection permet à la valeur d’un paramètre obligatoire doit être une collection vide (@()).</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The following example declares a ComputerName parameter that can have a empty collection value.</source>
          <target state="translated">L’exemple suivant déclare un paramètre ComputerName qui peut avoir une valeur de collection vide.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [AllowEmptyCollection()] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [AllowEmptyCollection()] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>ValidateCount Validation Attribute</source>
          <target state="translated">Attribut de Validation ValidateCount</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The ValidateCount attribute specifies the minimum and maximum number of parameter values that a parameter accepts.</source>
          <target state="translated">L’attribut ValidateCount Spécifie le nombre minimal et maximal des valeurs de paramètre qui accepte un paramètre.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the number of parameter values in the command that calls the function is outside that range.</source>
          <target state="translated">Windows PowerShell génère une erreur si le nombre de valeurs de paramètre dans la commande qui appelle la fonction est en dehors de cette plage.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The following parameter declaration creates a ComputerName parameter that takes 1 to 5 parameter values.</source>
          <target state="translated">La déclaration du paramètre suivant crée un paramètre ComputerName qui prend des valeurs de paramètre de 1 à 5.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateCount(1,5)] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateCount(1,5)] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>ValidateLength Validation Attribute</source>
          <target state="translated">Attribut de Validation ValidateLength</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The ValidateLength attribute specifies the minimum and maximum number of characters in a parameter or variable value.</source>
          <target state="translated">L’attribut ValidateLength Spécifie le nombre minimal et maximal de caractères dans un paramètre ou une valeur de la variable.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the length of a value specified for a parameter or a variable is outside of the range.</source>
          <target state="translated">Windows PowerShell génère une erreur si la longueur d’une valeur spécifiée pour un paramètre ou une variable en dehors de la plage.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>In the following example, each computer name must have one to 10 characters.</source>
          <target state="translated">Dans l’exemple suivant, chaque nom d’ordinateur doit avoir un à 10 caractères.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateLength(1,10)] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateLength(1,10)] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $number must be a minimum of one character in length, and a maximum of ten characters.</source>
          <target state="translated">Dans l’exemple suivant, la valeur de la variable $number doit être un caractère au minimum et un maximum de dix caractères.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>[Int32][ValidateLength(1,10)]$number = 01</source>
          <target state="translated">[Int32] [ValidateLength(1,10)] $number = 01</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>ValidatePattern Validation Attribute</source>
          <target state="translated">Attribut de Validation ValidatePattern</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The ValidatePattern attribute specifies a regular expression that is compared to the parameter or variable value.</source>
          <target state="translated">L’attribut ValidatePattern spécifie une expression régulière qui est comparée au paramètre ou valeur de la variable.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the value does not match the regular expression pattern.</source>
          <target state="translated">Windows PowerShell génère une erreur si la valeur ne correspond pas au modèle d’expression régulière.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>In the following example, the parameter value must be a four-digit number, and each digit must be a number 0 to 9.</source>
          <target state="translated">Dans l’exemple suivant, la valeur du paramètre doit être un nombre à quatre chiffres, et chaque chiffre doit être un nombre de 0 à 9.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidatePattern("[0-9][0-9][0-9][0-9]")] [String[]] $ComputerName</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidatePattern("[0-9][0-9][0-9][0-9]")] [String []] $ComputerName</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $number must be a four-digit number, and each digit must be a number 0 to 9.</source>
          <target state="translated">Dans l’exemple suivant, la valeur de la variable $number doit être un nombre à quatre chiffres, et chaque chiffre doit être un nombre de 0 à 9.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>[Int32][ValidatePattern("[0-9][0-9][0-9][0-9]")]$number = 1111</source>
          <target state="translated">[Int32] [ValidatePattern("[0-9][0-9][0-9][0-9]")] $number = 1111</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>ValidateRange Validation Attribute</source>
          <target state="translated">Attribut de Validation ValidateRange</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The ValidateRange attribute specifies a numeric range for each parameter or variable value.</source>
          <target state="translated">L’attribut ValidateRange spécifie une plage numérique pour chaque paramètre ou la valeur de la variable.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if any value is outside that range.</source>
          <target state="translated">Windows PowerShell génère une erreur si une valeur est en dehors de cette plage.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the Attempts parameter must be between 0 and 10.</source>
          <target state="translated">Dans l’exemple suivant, la valeur du paramètre tentatives doit être compris entre 0 et 10.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateRange(0,10)] [Int] $Attempts</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateRange(0,10)] [Int] $Attempts</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $number must be between 0 and 10.</source>
          <target state="translated">Dans l’exemple suivant, la valeur de la variable $number doit être comprise entre 0 et 10.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>[Int32][ValidateRange(0,10)]$number = 5</source>
          <target state="translated">[Int32] [ValidateRange(0,10)] $number = 5</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>ValidateScript Validation Attribute</source>
          <target state="translated">Attribut de Validation ValidateScript</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The ValidateScript attribute specifies a script that is used to validate a parameter or variable value.</source>
          <target state="translated">L’attribut ValidateScript spécifie un script qui est utilisé pour valider un paramètre ou une valeur de la variable.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Windows PowerShell pipes the value to the script, and generates an error if the script returns "false" or if the script throws an exception.</source>
          <target state="translated">Dirige la valeur pour le script Windows PowerShell et génère une erreur si le script renvoie « false » ou si le script lève une exception.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>When you use the ValidateScript attribute, the value that is being validated is mapped to the $<bpt id="p1">_</bpt> variable. You can use the $<ept id="p1">_</ept> variable to refer to the value in the script.</source>
          <target state="translated">Lorsque vous utilisez l’attribut ValidateScript, la valeur en cours de validation est mappée à la $<bpt id="p1">_</bpt> variable. Vous pouvez utiliser la<ept id="p1">_</ept> variable pour faire référence à la valeur dans le script.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the EventDate parameter must be greater than or equal to the current date.</source>
          <target state="translated">Dans l’exemple suivant, la valeur du paramètre EventDate doit être supérieure ou égale à la date actuelle.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>[parameter()] [ValidateScript({$_ -ge (get-date)})] [DateTime] $EventDate</source>
          <target state="translated">[parameter()] [ValidateScript ({$_ -ge (get-date)})] [Horodatage] $EventDate</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $date must be greater than or equal to the current date and time.</source>
          <target state="translated">Dans l’exemple suivant, la valeur de la variable $date doit être supérieure ou égale à la date et heure actuelles.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>[DateTime][ValidateScript({$_ -ge (get-date)})]$date = (get-date)</source>
          <target state="translated">[Horodatage] [ValidateScript ({$_ -ge (get-date)})] $date = (get-date)</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>ValidateSet Attribute</source>
          <target state="translated">Attribut de ValidateSet</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The ValidateSet attribute specifies a set of valid values for a parameter or variable.</source>
          <target state="translated">L’attribut ValidateSet spécifie un jeu de valeurs valides pour un paramètre ou une variable.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if a parameter or variable value does not match a value in the set.</source>
          <target state="translated">Windows PowerShell génère une erreur si un paramètre ou une valeur de la variable ne correspond pas à une valeur dans le jeu.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the Detail parameter can only be "Low," "Average," or "High."</source>
          <target state="translated">Dans l’exemple suivant, la valeur du paramètre de détail peut uniquement être « Bas », « Moyen » ou « Élevé ».</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateSet("Low", "Average", "High")] [String[]] $Detail</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateSet (« bas », « Moyenne », « Élevé »)] [String []] $Detail</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the variable $flavor must be either Chocolate, Strawberry, or Vanilla.</source>
          <target state="translated">Dans l’exemple suivant, la valeur de la variable $flavor doit être soit chocolat, fraise ou vanille.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>[String][ValidateSet("Chocolate", "Strawberry", "Vanilla")]$flavor = Strawberry</source>
          <target state="translated">[String] [ValidateSet (« Chocolat », « Fraise », « Vanille »)] $flavor = fraise</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>ValidateNotNull Validation Attribute</source>
          <target state="translated">Attribut de Validation ValidateNotNull</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The ValidateNotNull attribute specifies that the parameter value cannot be null ($null).</source>
          <target state="translated">L’attribut ValidateNotNull indique que la valeur du paramètre ne peut pas être null ($null).</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the parameter value is null.</source>
          <target state="translated">Windows PowerShell génère une erreur si la valeur du paramètre est null.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The ValidateNotNull attribute is designed to be used when the type of the parameter value is not specified or when the specified type will accept a value of Null.</source>
          <target state="translated">L’attribut ValidateNotNull est conçu pour être utilisé lorsque le type de la valeur du paramètre n’est pas spécifié ou lorsque le type spécifié accepte les valeurs NULL.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>(If you specify a type that will not accept a null value, such as a string, the null value will be rejected without the ValidateNotNull attribute, because it does not match the specified type.)</source>
          <target state="translated">(Si vous spécifiez un type qui n’accepte pas de valeur null, telle qu’une chaîne, la valeur null est rejetée sans l’attribut ValidateNotNull, car il ne correspond pas au type spécifié.)</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the ID parameter cannot be null.</source>
          <target state="translated">Dans l’exemple suivant, la valeur du paramètre ID ne peut pas être null.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateNotNull()]</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateNotNull()]</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>$ID</source>
          <target state="translated">$ID</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>ValidateNotNullOrEmpty Validation Attribute</source>
          <target state="translated">Attribut de Validation ValidateNotNullOrEmpty</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The ValidateNotNullOrEmpty attribute specifies that the parameter value cannot be null ($null) and cannot be an empty string ("").</source>
          <target state="translated">Le ValidateNotNullOrEmpty attribut spécifie que la valeur du paramètre ne peut pas être null ($null) et ne peut pas être une chaîne vide (« »).</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Windows PowerShell generates an error if the parameter is used in a function call, but its value is null, an empty string, or an empty array.</source>
          <target state="translated">Windows PowerShell génère une erreur si le paramètre est utilisé dans un appel de fonction, mais sa valeur est null, une chaîne vide ou un tableau vide.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$true)] [ValidateNotNullOrEmpty()] [String[]] $UserName</source>
          <target state="translated">[parameter(Mandatory=$true)] [ValidateNotNullOrEmpty()] [String []] $UserName</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Dynamic Parameters</source>
          <target state="translated">Paramètres dynamiques</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Dynamic parameters are parameters of a cmdlet, function, or script that are available only under certain conditions.</source>
          <target state="translated">Les paramètres dynamiques sont des paramètres d’une applet de commande, une fonction ou un script qui sont disponibles uniquement sous certaines conditions.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>For example, several provider cmdlets have parameters that are available only when the cmdlet is used in the provider drive, or in a particular path of the provider drive.</source>
          <target state="translated">Par exemple, plusieurs applets de commande fournisseur ont des paramètres qui sont disponibles uniquement lorsque l’applet de commande est utilisée dans le lecteur du fournisseur, ou dans un chemin d’accès spécifique du lecteur du fournisseur.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>For example, the Encoding parameter is available on the Add-Content, Get-Content, and Set-Content cmdlets only when it is used in a file system drive.</source>
          <target state="translated">Par exemple, le paramètre Encoding est disponible sur Add-Content, Get-Content et applets de commande Set-Content uniquement lorsqu’elle est utilisée dans un lecteur de système de fichiers.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>You can also create a parameter that appears only when another parameter is used in the function command or when another parameter has a certain value.</source>
          <target state="translated">Vous pouvez également créer un paramètre qui s’affiche uniquement lorsqu’un autre paramètre est utilisé dans la commande de fonction ou un autre paramètre a une certaine valeur.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Dynamic parameters can be very useful, but use them only when necessary, because they can be difficult for users to discover.</source>
          <target state="translated">Les paramètres dynamiques peuvent être très utile, mais les utiliser uniquement lorsque cela est nécessaire, car ils peuvent être difficiles à détecter.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>To find a dynamic parameter, the user must be in the provider path, use the ArgumentList parameter of the Get-Command cmdlet, or use the Path parameter of Get-Help.</source>
          <target state="translated">Pour trouver un paramètre dynamique, l’utilisateur doit se trouver dans le chemin d’accès du fournisseur, utilisez le paramètre ArgumentList de l’applet de commande Get-Command ou utiliser le paramètre Path de Get-Help.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>To create a dynamic parameter for a function or script, use the DynamicParam keyword.</source>
          <target state="translated">Pour créer un paramètre dynamique pour une fonction ou un script, utilisez le mot clé DynamicParam.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The syntax is as follows:</source>
          <target state="translated">La syntaxe est la suivante :</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>DynamicParam {&lt;statement-list&gt;}</source>
          <target state="translated">DynamicParam {&lt; instruction-list &gt;}</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>In the statement list, use an If statement to specify the conditions under which the parameter is available in the function.</source>
          <target state="translated">Dans la liste, utilisez une instruction If pour spécifier les conditions dans lesquelles le paramètre est disponible dans la fonction.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Use the New-Object cmdlet to create a System.Management.Automation.RuntimeDefinedParameter object to represent the parameter and specify its name.</source>
          <target state="translated">Utilisez l’applet de commande New-Object pour créer un objet System.Management.Automation.RuntimeDefinedParameter pour représenter le paramètre et spécifiez son nom.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>You can also use a New-Object command to create a System.Management.Automation.ParameterAttribute object to represent attributes of the parameter, such as Mandatory, Position, or ValueFromPipeline or its parameter set.</source>
          <target state="translated">Vous pouvez également utiliser une commande New-Object pour créer un objet System.Management.Automation.ParameterAttribute pour représenter les attributs du paramètre, comme obligatoire, Position, ou ValueFromPipeline ou ensemble de ses paramètres.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The following example shows a sample function with standard parameters named Name and Path, and an optional dynamic parameter named DP1.The DP1 parameter is in the PSet1 parameter set and has a type of Int32.</source>
          <target state="translated">L’exemple suivant montre un exemple de fonction avec des paramètres standard nommés nom et chemin d’accès et d’un paramètre dynamique facultatif nommé DP1. Le paramètre DP1 se trouve dans le jeu de paramètres PSet1 et a un type de Int32.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The DP1 parameter is available in the Sample function only when the value of the Path parameter contains "HKLM:", indicating that it is being used in the HKEY_LOCAL_MACHINE registry drive.</source>
          <target state="translated">Le paramètre DP1 est disponible dans l’exemple de fonction uniquement lorsque la valeur du paramètre Path contient « HKLM : », indiquant qu’il est utilisé dans le lecteur de Registre HKEY_LOCAL_MACHINE.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>function Get-Sample { [CmdletBinding()] Param ([String]$Name, [String]$Path)</source>
          <target state="translated">fonction Get-Sample {Param [CmdletBinding()] ([String] $Name, [String] $Path)</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>DynamicParam { if ($path -match ".HKLM.:") { $attributes = new-object System.Management.Automation.ParameterAttribute $attributes.ParameterSetName = "__AllParameterSets" $attributes.Mandatory = $false $attributeCollection = new-object ` -Type System.Collections.ObjectModel.Collection[System.Attribute] $attributeCollection.Add($attributes)</source>
          <target state="translated">DynamicParam {si ($path-correspondent ». HKLM. : ») {$attributes = nouvel objet System.Management.Automation.ParameterAttribute $attributes. ParameterSetName = « __AllParameterSets » $attributes. Obligatoire = $false $attributeCollection = nouvel objet '-Type System.Collections.ObjectModel.Collection[System.Attribute] $attributeCollection.Add($attributes)</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>$dynParam1 = new-object ` -Type System.Management.Automation.RuntimeDefinedParameter("dp1", [Int32], $attributeCollection)</source>
          <target state="translated">$dynParam1 = nouvel objet '-Type System.Management.Automation.RuntimeDefinedParameter("dp1", [Int32], $attributeCollection)</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>$paramDictionary = new-object ` -Type System.Management.Automation.RuntimeDefinedParameterDictionary $paramDictionary.Add("dp1", $dynParam1) return $paramDictionary } } }</source>
          <target state="translated">$paramDictionary = nouvel objet '-$paramDictionary de retour de Type System.Management.Automation.RuntimeDefinedParameterDictionary $paramDictionary.Add (« dp1 », $dynParam1)}}}</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For more information, see "RuntimeDefinedParameter Class" in the MSDN (Microsoft Developer Network) library at http://go.microsoft.com/fwlink/?LinkID=145130.</source>
          <target state="translated">Pour plus d’informations, consultez « Classe RuntimeDefinedParameter » dans la bibliothèque MSDN (Microsoft Developer Network) à l’http://go.microsoft.com/fwlink/?LinkID=145130.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Switch Parameters Switch parameters are parameters with no parameter value.</source>
          <target state="translated">Paramètres de commutateur de paramètres du commutateur sont des paramètres avec aucune valeur de paramètre.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>They are effective only when they are used and have only one effect.</source>
          <target state="translated">Elles sont effectives uniquement lorsqu’ils sont utilisés et ont qu’un seul effet.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For example, the -NoProfile parameter of PowerShell.exe is a switch parameter.</source>
          <target state="translated">Par exemple, le paramètre - NoProfile de PowerShell.exe est un paramètre booléen.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>To create a switch parameter in a function, specify the Switch type in the parameter definition.</source>
          <target state="translated">Pour créer un paramètre booléen dans une fonction, spécifiez le type de commutateur dans la définition de paramètre.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For example: Param ([Switch]<ph id="ph1">&lt;ParameterName&gt;</ph>) -or- Param</source>
          <target state="translated">Par exemple : Param ([commutateur]<ph id="ph1">&lt;ParameterName&gt;</ph>) - ou - Param</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>[parameter(Mandatory=$false)] [Switch]</source>
          <target state="translated">[parameter(Mandatory=$false)] [Commutateur]</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Switch parameters are easy to use and are preferred over Boolean parameters, which have a more difficult syntax.</source>
          <target state="translated">Paramètres de commutateur sont faciles à utiliser et sont préférés aux paramètres booléens, qui ont une syntaxe plus difficile.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For example, to use a switch parameter, the user types the parameter in the command.</source>
          <target state="translated">Par exemple, pour utiliser un paramètre booléen, l’utilisateur tape le paramètre dans la commande.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>-IncludeAll</source>
          <target state="translated">-Inclure_tout</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>To use a Boolean parameter, the user types the parameter and a Boolean value.</source>
          <target state="translated">Pour utiliser un paramètre booléen, l’utilisateur tape le paramètre et une valeur booléenne.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>-IncludeAll:$true</source>
          <target state="translated">-Inclure_tout : $true</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>When creating switch parameters, choose the parameter name carefully.</source>
          <target state="translated">Lorsque vous créez des paramètres de commutateur, choisissez avec soin le nom du paramètre.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Be sure that the parameter name communicates the effect of the parameter to the user, and avoid ambiguous terms, such as Filter or Maximum, that might imply that a value is required.</source>
          <target state="translated">Assurez-vous que le nom du paramètre communique l’effet du paramètre à l’utilisateur et éviter les termes ambigus, telles que le filtre ou Maximum, ce qui implique qu’une valeur est requise.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VOIR AUSSI</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>about_Functions about_Functions_Advanced about_Functions_Advanced_Methods about_Functions_CmdletBindingAttribute about_Functions_OutputTypeAttribute</source>
          <target state="translated">about_Functions about_Functions_Advanced about_Functions_Advanced_Methods about_Functions_CmdletBindingAttribute about_Functions_OutputTypeAttribute</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>