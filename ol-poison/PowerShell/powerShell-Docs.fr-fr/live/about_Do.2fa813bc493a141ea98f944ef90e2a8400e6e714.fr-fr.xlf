<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fde2e30d6eb50028444b5855207c2f720652cb0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Do.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f99307b2d509104e81f9971231ffa77a4722630</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e51fedd9bb3d053e606597427984b25d12cc7b6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Do</source>
          <target state="translated">about_Do</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">applet de commande PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Do</source>
          <target state="translated">À propos de</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Do</source>
          <target state="translated">about_Do</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">RUBRIQUE</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Do</source>
          <target state="translated">about_Do</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIPTION COURTE</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Runs a statement list one or more times, subject to a While or Until condition.</source>
          <target state="translated">Exécute une liste d’instructions une ou plusieurs fois, soumis à un certain temps, ou jusqu'à ce que la condition.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIPTION DÉTAILLÉE</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Do keyword works with the While keyword or the Until keyword to run the statements in a script block, subject to a condition.</source>
          <target state="translated">Le mot clé Do fonctionne avec le mot clé ou le mot clé Until pour exécuter les instructions dans un bloc de script, soumis à une condition.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Unlike the related While loop, the script block in a Do loop always runs at least once.</source>
          <target state="translated">Contrairement aux connexes pendant l’exécution de boucle, le bloc de script dans une boucle Do toujours au moins une fois.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A Do-While loop is a variety of the While loop.</source>
          <target state="translated">Un-boucle While est une variété de la boucle.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In a Do-While loop, the condition is evaluated after the script block has run.</source>
          <target state="translated">Dans un ne-lors de la boucle, la condition est évaluée après l’exécution du bloc de script.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As in a While loop, the script block is repeated as long as the condition evaluates to true.</source>
          <target state="translated">Comme dans un certain temps de boucle, le bloc de script est répété tant que la condition a la valeur true.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Like a Do-While loop, a Do-Until loop always runs at least once before the condition is evaluated.</source>
          <target state="translated">Comme un-tout, une boucle Do-jusqu'à ce que la boucle s’exécute toujours au moins une fois avant que la condition est évaluée.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, the script block runs only while the condition is false.</source>
          <target state="translated">Toutefois, le bloc de script s’exécute uniquement lorsque la condition est false.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Continue and Break flow control keywords can be used in a Do-While loop or in a Do-Until loop.</source>
          <target state="translated">Les mots-clés de contrôle de flux Continue et Break peuvent être utilisés dans un-lors de la boucle ou dans un ne-tant que boucle.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Syntax The following shows the syntax of the Do-While statement:</source>
          <target state="translated">Ce qui suit indique la syntaxe du faire-While (instruction) :</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} while (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">faire {<ph id="ph1">&lt;statement list&gt;</ph>} tandis que (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following shows the syntax of the Do-Until statement:</source>
          <target state="translated">L’exemple suivant montre la syntaxe du faire-jusqu'à l’instruction :</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} until (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">faire {<ph id="ph1">&lt;statement list&gt;</ph>} jusqu'à ce que (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The statment list contains one or more statements that run each time the loop is entered or repeated.</source>
          <target state="translated">La liste contient une ou plusieurs instructions qui s’exécutent à chaque fois que la boucle est entré ou répétées.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The condition portion of the statement resolves to true or false.</source>
          <target state="translated">La partie de la condition de l’instruction correspond à true ou false.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example The following example of a Do statement counts the items in an array until it reaches an item with a value of 0.</source>
          <target state="translated">Exemple de l’exemple suivant d’une instruction Do compte les éléments dans le tableau jusqu'à ce qu’il atteigne un élément avec la valeur 0.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $x = 1,2,78,0 C:\PS&gt; do { $count++; $a++; } while ($x[$a] -ne 0) C:\PS&gt; $count</source>
          <target state="translated">C:\PS &gt; $x = 1,2,78,0 C:\PS &gt; faire {$count ++ ; $a ++ ;} tandis que ($x [$un] - ne 0) C:\PS &gt; $count</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example uses the Until keyword.</source>
          <target state="translated">L’exemple suivant utilise le mot clé Until.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Notice that the not equal to operator (-ne) is replaced by the equal to operator (-eq).</source>
          <target state="translated">Notez que le n’est pas égal à (opérateur) (-ne) est remplacé par l’opérateur d’égalité (-eq).</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $x = 1,2,78,0 C:\PS&gt; do { $count++; $a++; } until ($x[$a] -eq 0) C:\PS&gt; $count</source>
          <target state="translated">C:\PS &gt; $x = 1,2,78,0 C:\PS &gt; faire {$count ++ ; $a ++ ;} jusqu'à ce que ($x [$un] - eq 0) C:\PS &gt; $count</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example writes all the values of an array, skipping any value that is less than zero.</source>
          <target state="translated">L’exemple suivant écrit toutes les valeurs d’un tableau, en ignorant toute valeur qui est inférieure à zéro.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>do { if ($x[$a] -lt 0) { continue } Write-Host $x[$a] } while (++$a -lt 10)</source>
          <target state="translated">faire {si ($x [$un] lt - 0) Write-Host $x {continuer} [$un]} tandis que (++ $a lt - 10)</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VOIR AUSSI</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>about_While about_Operators about_Assignment_Operators about_Comparison_Operators about_Break about_Continue</source>
          <target state="translated">about_While about_Operators about_Assignment_Operators about_Comparison_Operators about_Break about_Continue</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>