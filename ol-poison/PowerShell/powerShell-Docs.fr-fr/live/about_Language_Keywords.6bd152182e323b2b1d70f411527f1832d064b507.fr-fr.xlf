<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51051bd4fb93e2dc28db4564389e05f3cb8366f0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Language_Keywords.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7c03d257db904823945f5059142a97c4c441163</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9c66dcc5d0efd2efb6c88bbf5c0cdc2bcee9cda</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">applet de commande PowerShell</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Language Keywords</source>
          <target state="translated">À propos des mots clés de langage</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Language_Keywords</source>
          <target state="translated">about_Language_Keywords</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">DESCRIPTION COURTE</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the keywords in the Windows PowerShell scripting language.</source>
          <target state="translated">Décrit les mots clés dans le langage de script Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">DESCRIPTION DÉTAILLÉE</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows PowerShell has the following language keywords.</source>
          <target state="translated">Windows PowerShell possède les mots clés de langage suivants.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see the about topic for the keyword and the information that follows the table.</source>
          <target state="translated">Pour plus d’informations, consultez le sujet pour le mot clé et les informations suivantes de la table.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Keyword            Reference</source>
          <target state="translated">Référence des mots clés</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Begin              about_Functions, about_Functions_Advanced Break              about_Break, about_Trap Catch              about_Try_Catch_Finally Continue           about_Continue, about_Trap Data               about_Data_Sections Do                 about_Do, about_While DynamicParam       about_Functions_Advanced_Parameters Else               about_If Elseif             about_If End                about_Functions, about_Functions_Advanced_Methods Exit               Described in this topic.</source>
          <target state="translated">Commencer about_Functions, about_Functions_Advanced saut about_Break, about_Trap Catch about_Try_Catch_Finally continuer about_Continue, about_Trap données about_automatic_variables about_Do, about_While DynamicParam about_Functions_Advanced_Parameters Else about_If Elseif about_If fin about_Functions, about_Functions_Advanced_Methods sortie décrites dans cette rubrique.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Filter             about_Functions Finally            about_Try_Catch_Finally For                about_For ForEach            about_ForEach From               Reserved for future use.</source>
          <target state="translated">Filtre about_Functions enfin about_Try_Catch_Finally pour about_For ForEach about_ForEach de réservé à un usage ultérieur.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Function           about_Functions, about_Functions_Advanced If                 about_If In                 about_ForEach InlineScript       about_InlineScript Hidden             about_Hidden Parallel           about_Parallel, about_ForEach-Parallel Param              about_Functions Process            about_Functions, about_Functions_Advanced Return             about_Return Sequence           about_Sequence Switch             about_Switch Throw              about_Throw, about_Functions_Advanced_Methods Trap               about_Trap, about_Break, about_Try_Catch_Finally Try                about_Try_Catch_Finally Until              about_Do While              about_While, about_Do Workflow           about_Workflows</source>
          <target state="translated">Fonction about_Functions, about_Functions_Advanced, si vous essayez d’about_If en about_ForEach InlineScript about_InlineScript masqué about_Hidden parallèle about_Parallel about_ForEach parallèles Param about_Functions processus about_Functions, about_Functions_Advanced about_Return retour séquence about_Sequence commutateur about_Switch Throw about_Throw, about_Functions_Advanced_Methods interruption about_Trap, about_Break, about_Try_Catch_Finally about_Try_Catch_Finally jusqu'à about_Do lors de l’about_While , about_Do about_Workflows du flux de travail</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Language Keywords</source>
          <target state="translated">Mots clés de langage</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Begin</source>
          <target state="translated">Commencer</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifies one part of the body of a function, along with the DynamicParam, Process, and End keywords.</source>
          <target state="translated">Spécifie une partie du corps d’une fonction, ainsi que les mots clés DynamicParam, Process et End.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Begin statement list runs one time before any objects are received from the pipeline.</source>
          <target state="translated">La liste d’instructions Begin s’exécute une seule fois avant la réception de tous les objets du pipeline.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">fonction <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} commencer {<ph id="ph3">&lt;statement list&gt;</ph>} processus {<ph id="ph4">&lt;statement list&gt;</ph>} fin {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Break</source>
          <target state="translated">Arrêter</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Causes a script to exit a loop.</source>
          <target state="translated">Génère un script quitter une boucle.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>while (<ph id="ph1">&lt;condition&gt;</ph>) {</source>
          <target state="translated">Bien que (<ph id="ph1">&lt;condition&gt;</ph>) {}</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>break</source>
          <target state="translated">arrêt</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="translated">}</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Catch</source>
          <target state="translated">Catch</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specifies a statement list to run if an error occurs in the accompanying Try statement list.</source>
          <target state="translated">Spécifie une liste d’instructions à exécuter si une erreur se produit dans la liste d’instruction Try correspondante.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">Un type d’erreur requiert des crochets.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The second pair of brackets indicates that the error type is optional.</source>
          <target state="translated">La deuxième paire de crochets indique que le type d’erreur est facultatif.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>try {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[<ph id="ph2">&lt;error type&gt;</ph>]] {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">Essayez de {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[<ph id="ph2">&lt;error type&gt;</ph>]] {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Continue</source>
          <target state="translated">Continuer</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Causes a script to stop running a loop and to go back to the condition.</source>
          <target state="translated">Génère un script pour interrompre l’exécution d’une boucle et revenir à la condition.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the condition is met, the script begins the loop again.</source>
          <target state="translated">Si la condition est remplie, le script commence à nouveau la boucle.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>while (<ph id="ph1">&lt;condition&gt;</ph>) {</source>
          <target state="translated">Bien que (<ph id="ph1">&lt;condition&gt;</ph>) {}</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="translated">continuer</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="translated">}</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Data</source>
          <target state="translated">Données</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In a script, defines a section that isolates data from the script logic.</source>
          <target state="translated">Dans un script, définit une section qui isole les données à partir de la logique de script.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Can also include If statements and some limited commands.</source>
          <target state="translated">Peut également inclure si les instructions et certains limitées des commandes.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>data <ph id="ph1">&lt;variable&gt;</ph> [-supportedCommand &lt;cmdlet-name&gt;] {<ph id="ph2">&lt;permitted content&gt;</ph>}</source>
          <target state="translated">données <ph id="ph1">&lt;variable&gt;</ph> [-supportedCommand &lt; nom_cmdlet &gt;] {<ph id="ph2">&lt;permitted content&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Do</source>
          <target state="translated">Do</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Used with the While or Until keyword as a looping construct.</source>
          <target state="translated">Utilisé avec While ou jusqu'à ce que le mot clé comme une construction en boucle.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Windows PowerShell runs the statement list at least one time, unlike a loop that uses While.</source>
          <target state="translated">Windows PowerShell exécute la liste d’instructions au moins une fois, contrairement à une boucle qui utilise alors que.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} while (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">faire {<ph id="ph1">&lt;statement list&gt;</ph>} tandis que (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} until (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">faire {<ph id="ph1">&lt;statement list&gt;</ph>} jusqu'à ce que (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>DynamicParam</source>
          <target state="translated">DynamicParam</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Specifies one part of the body of a function, along with the Begin, Process, and End keywords.</source>
          <target state="translated">Spécifie une partie du corps d’une fonction, ainsi que les mots clés Begin, Process et End.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Dynamic parameters are added at run time.</source>
          <target state="translated">Les paramètres dynamiques sont ajoutés au moment de l’exécution.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">fonction <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} commencer {<ph id="ph3">&lt;statement list&gt;</ph>} processus {<ph id="ph4">&lt;statement list&gt;</ph>} fin {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Else</source>
          <target state="translated">Else</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Used with the If keyword to specify the default statement list.</source>
          <target state="translated">Utilisé avec If (mot clé) pour spécifier la liste d’instructions par défaut.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} else {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} else {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Elseif</source>
          <target state="translated">ElseIf</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Used with the If and Else keywords to specify additional conditionals.</source>
          <target state="translated">Utilisé avec If et Else mots clés pour spécifier des conditions supplémentaires.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The Else keyword is optional.</source>
          <target state="translated">Le mot clé Else est facultatif.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} elseif (<ph id="ph3">&lt;condition&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>} else {<ph id="ph5">&lt;statement list&gt;</ph>}</source>
          <target state="translated">Si (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>} elseif (<ph id="ph3">&lt;condition&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>} else {<ph id="ph5">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">Fin</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Specifies one part of the body of a function, along with the DynamicParam, Begin, and End keywords.</source>
          <target state="translated">Spécifie une partie du corps d’une fonction, ainsi que les mots clés DynamicParam, Begin et End.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The End statement list runs one time after all the objects have been received from the pipeline.</source>
          <target state="translated">La liste d’instructions s’exécute une fois une fois tous les objets de fin a été reçu du pipeline.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">fonction <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} commencer {<ph id="ph3">&lt;statement list&gt;</ph>} processus {<ph id="ph4">&lt;statement list&gt;</ph>} fin {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Exit</source>
          <target state="translated">Quitter</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Causes Windows PowerShell to exit a script or a Windows PowerShell instance.</source>
          <target state="translated">Causes Windows PowerShell pour quitter un script ou une instance de Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When you run 'powershell.exe –File <ph id="ph1">&lt;path to a script&gt;</ph>', you can only set the %ERRORLEVEL% variable to a value other than zero by using the exit statement.</source>
          <target state="translated">Lorsque vous exécutez ' powershell.exe – fichier <ph id="ph1">&lt;path to a script&gt;</ph>», vous pouvez uniquement définir la variable ERRORLEVEL une valeur différente de zéro à l’aide de l’instruction exit.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the following example, the user sets the error level variable value to 4 by typing 'exit 4'.</source>
          <target state="translated">Dans l’exemple suivant, l’utilisateur définit la valeur de variable de niveau erreur 4 en tapant 'exit 4'.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>C:\Users\bruce\documents\test&gt;type test.ps1</source>
          <target state="translated">C:\Users\bruce\documents\test &gt; tapez test.ps1</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>exit 4</source>
          <target state="translated">quitter 4</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>C:\Users\bruce\documents\test&gt;powershell -file ./test.ps1</source>
          <target state="translated">C:\Users\bruce\documents\test &gt; powershell-./test.ps1 de fichiers</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>C:\Users\bruce\documents\test&gt;echo %ERRORLEVEL%</source>
          <target state="translated">C:\Users\bruce\documents\test &gt; echo %errorlevel%</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>When you use powershell.exe with the File parameter, the .ps1 (script) file itself should include instructions for handling any errors or exceptions that occur while the script is running.</source>
          <target state="translated">Lorsque vous utilisez powershell.exe avec le paramètre de fichier, le fichier .ps1 (script) doit inclure des instructions permettant de gérer les erreurs ou les exceptions qui se produisent pendant l’exécution du script.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You should only use the exit statement to indicate the post-execution status of the script.</source>
          <target state="translated">Vous devez uniquement utiliser l’instruction exit pour indiquer l’état après l’exécution du script.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>exit exit</source>
          <target state="translated">Quitter Quitter</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">Filtre</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Specifies a function in which the statement list runs one time for each input object.</source>
          <target state="translated">Spécifie une fonction dans laquelle la liste d’instructions s’exécute une fois pour chaque objet d’entrée.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>It has the same effect as a function that contains only a Process block.</source>
          <target state="translated">Il a le même effet qu’une fonction qui contient uniquement un bloc de processus.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>filter <ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">filtre <ph id="ph1">&lt;name&gt;</ph> {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Finally</source>
          <target state="translated">Enfin</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Defines a statement list that runs after statements that are associated with Try and Catch.</source>
          <target state="translated">Définit une liste d’instructions qui s’exécute après que les instructions qui sont associées avec Try et Catch.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A Finally statement list runs even if you press CTRL+C to leave a script or if you use the Exit keyword in the script.</source>
          <target state="translated">A enfin la liste d’instructions s’exécute même si vous appuyez sur CTRL + C pour laisser un script ou si vous utilisez le mot clé Exit dans le script.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>try {<ph id="ph1">&lt;statement list&gt;</ph>} catch [&lt;error type] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">Essayez de {<ph id="ph1">&lt;statement list&gt;</ph>} catch [&lt; type d’erreur] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For</source>
          <target state="translated">Pour</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Defines a loop by using a condition.</source>
          <target state="translated">Définit une boucle à l’aide d’une condition.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>for (<ph id="ph1">&lt;initialize&gt;</ph>; <ph id="ph2">&lt;condition&gt;</ph>; <ph id="ph3">&lt;iterate&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>}</source>
          <target state="translated">for (<ph id="ph1">&lt;initialize&gt;</ph>; <ph id="ph2">&lt;condition&gt;</ph>; <ph id="ph3">&lt;iterate&gt;</ph>) {<ph id="ph4">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>ForEach</source>
          <target state="translated">ForEach</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Defines a loop by using each member of a collection.</source>
          <target state="translated">Définit une boucle à l’aide de chaque membre d’une collection.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>ForEach (<ph id="ph1">&lt;item&gt;</ph> in <ph id="ph2">&lt;collection&gt;</ph>){<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">ForEach (<ph id="ph1">&lt;item&gt;</ph> dans <ph id="ph2">&lt;collection&gt;</ph>) {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">De</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
          <target state="translated">réservé à une utilisation future.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Creates a named statement list of reusable code.</source>
          <target state="translated">Crée une liste d’instructions nommées de code réutilisable.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can name the scope a function belongs to.</source>
          <target state="translated">Vous pouvez nommer la portée à que laquelle appartient une fonction.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>And, you can specify one or more named parameters by using the Param keyword.</source>
          <target state="translated">Et bien, vous pouvez spécifier un ou plusieurs paramètres nommés à l’aide du mot clé Param.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Within the function statement list, you can include DynamicParam, Begin, Process, and End statement lists.</source>
          <target state="translated">Dans la liste de déclaration de fonction, vous pouvez incluent DynamicParam, début, processus et terminer des listes d’instructions.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> { param ([type]&lt;$pname1&gt; [, [type]&lt;$pname2&gt;]) DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">fonction [&lt; étendue : &gt;]<ph id="ph1">&lt;name&gt;</ph> {param ([type] &lt; pname1$ &gt; [, [type] &lt; pname2$ &gt;]) DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} commencer {<ph id="ph3">&lt;statement list&gt;</ph>} processus {<ph id="ph4">&lt;statement list&gt;</ph>} fin {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You also have the option of defining one or more parameters outside the statement list after the function name.</source>
          <target state="translated">Vous avez également la possibilité de définir un ou plusieurs paramètres en dehors de la liste d’instructions après le nom de fonction.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> [([type]&lt;$pname1&gt;, [[type]&lt;$pname2&gt;])] { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">fonction [&lt; étendue : &gt;]<ph id="ph1">&lt;name&gt;</ph> [([type] &lt; pname1$ &gt;, [[type] &lt; pname2$ &gt;])] {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} commencer {<ph id="ph3">&lt;statement list&gt;</ph>} processus {<ph id="ph4">&lt;statement list&gt;</ph>} fin {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">Si</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Defines a conditional.</source>
          <target state="translated">Définit un conditionnel.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">if (<ph id="ph1">&lt;condition&gt;</ph>) {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Hidden</source>
          <target state="translated">Hidden</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Hides class members from the default results of the Get-Member cmdlet, and from IntelliSense and tab completion results.</source>
          <target state="translated">Masque les membres à partir des résultats par défaut de l’applet de commande Get-Member et à partir des résultats de saisie semi-automatique IntelliSense et l’onglet de classe.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Hidden [data type] $member_name</source>
          <target state="translated">Masqué member_name de $ [type de données]</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In</source>
          <target state="translated">Dans</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Used in a ForEach statement to create a loop that uses each member of a collection.</source>
          <target state="translated">Utilisé dans une instruction ForEach pour créer une boucle par chaque membre d’une collection.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>ForEach (<ph id="ph1">&lt;item&gt;</ph> in <ph id="ph2">&lt;collection&gt;</ph>){<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">ForEach (<ph id="ph1">&lt;item&gt;</ph> dans <ph id="ph2">&lt;collection&gt;</ph>) {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>InlineScript</source>
          <target state="translated">InlineScript</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Runs workflow commands in a shared Windows PowerShell session.</source>
          <target state="translated">Exécute des commandes de flux de travail dans une session partagée de Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This keyword is valid only in a Windows PowerShell Workflow.</source>
          <target state="translated">Ce mot clé est valide uniquement dans un Workflow Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { InlineScript { &lt;Command/Expression&gt;</source>
          <target state="translated">flux de travail <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {InlineScript {&lt; commande/Expression &gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>} }</source>
          <target state="translated">} }</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The InlineScript keyword indicates an InlineScript activity, which runs commands in a shared standard (non-workflow) session.</source>
          <target state="translated">Le mot clé InlineScript indique une activité InlineScript qui exécute des commandes dans une session (non workflow) standard partagée.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You can use the InlineScript keyword to run commands that are not otherwise valid in a workflow, and to run commands that share data.</source>
          <target state="translated">Vous pouvez utiliser le mot clé InlineScript pour exécuter des commandes qui ne sont pas valides dans un flux de travail et pour exécuter des commandes qui partagent des données.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>By default, the commands in an InlineScript script block run in a separate process.</source>
          <target state="translated">Par défaut, les commandes dans un bloc de script InlineScript s’exécutent dans un processus séparé.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For more information, see about_InlineScript and Running Windows PowerShell Commands in a Workflow (http://technet.microsoft.com/library/jj574197.aspx).</source>
          <target state="translated">Pour plus d’informations, consultez about_InlineScript et exécution de commandes Windows PowerShell dans un flux de travail (http://technet.microsoft.com/library/jj574197.aspx).</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Defines the parameters in a function.</source>
          <target state="translated">Définit les paramètres dans une fonction.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>function [&lt;scope:&gt;]<ph id="ph1">&lt;name&gt;</ph> { param ([type]&lt;$pname1&gt;[, [[type]&lt;$pname2&gt;]]) <ph id="ph2">&lt;statement list&gt;</ph> }</source>
          <target state="translated">fonction [&lt; étendue : &gt;]<ph id="ph1">&lt;name&gt;</ph> {param ([type] &lt; pname1$ &gt; [, [[type] &lt; pname2$ &gt;]]) <ph id="ph2">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Parallel</source>
          <target state="translated">Parallel</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Runs workflow commands concurrently and in an undefined order.</source>
          <target state="translated">Exécute des commandes de flux de travail simultanément et dans un ordre non défini.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This keyword is valid only in a Windows PowerShell Workflow.</source>
          <target state="translated">Ce mot clé est valide uniquement dans un Workflow Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The Parallel keyword indicates a Parallel script block.</source>
          <target state="translated">Le mot clé Parallel indique un bloc de script parallèles.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The commands in a Parallel script block can run at the same time and in any order.</source>
          <target state="translated">Les commandes dans un bloc de script parallèles peuvent s’exécutent en même temps et dans n’importe quel ordre.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This feature significantly improves the performance of a workflow.</source>
          <target state="translated">Cette fonctionnalité améliore considérablement les performances d’un workflow.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { Parallel {</source>
          <target state="translated">flux de travail <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {{en parallèle</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>…</source>
          <target state="translated">…</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>} }</source>
          <target state="translated">} }</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The Parallel parameter of the ForEach keyword processes the items in a collection in parallel.</source>
          <target state="translated">Le paramètre parallèle du mot-clé ForEach traite les éléments dans une collection en parallèle.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The activities in the script block run sequentially on each item, but the script block can run on multiple items at the same time and the items are processed in an undefined order.</source>
          <target state="translated">Les activités dans le bloc de script exécutent de manière séquentielle sur chaque élément, mais le bloc de script peut s’exécuter sur plusieurs éléments en même temps et les éléments sont traités dans un ordre non défini.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { ForEach -Parallel (<ph id="ph2">&lt;item&gt;</ph> in <ph id="ph3">&lt;collection&gt;</ph>) {</source>
          <target state="translated">flux de travail <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {ForEach-Parallel (<ph id="ph2">&lt;item&gt;</ph> dans <ph id="ph3">&lt;collection&gt;</ph>) {}</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>} }</source>
          <target state="translated">} }</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For more information, see about_Parallel, about_ForEach-Parallel</source>
          <target state="translated">Pour plus d’informations, consultez about_Parallel, about_ForEach parallèle</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Process</source>
          <target state="translated">Procédure</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Specifies a part of the body of a function, along with the DynamicParam, Begin, and End keywords.</source>
          <target state="translated">Spécifie une partie du corps d’une fonction, ainsi que les mots clés DynamicParam, Begin et End.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>When a Process statement list receives input from the pipeline, the Process statement list runs one time for each element from the pipeline.</source>
          <target state="translated">Lorsqu’une liste d’instructions processus reçoit l’entrée du pipeline, la liste processus s’exécute une fois pour chaque élément du pipeline.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If the pipeline provides no objects, the Process statement list does not run.</source>
          <target state="translated">Si le pipeline ne fournit pas d’objets, la liste processus ne s’exécute pas.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If the command is the first command in the pipeline, the Process statement list runs one time.</source>
          <target state="translated">Si la commande est la première commande dans le pipeline, la liste processus exécute une seule fois.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>function <ph id="ph1">&lt;name&gt;</ph> { DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} begin {<ph id="ph3">&lt;statement list&gt;</ph>} process {<ph id="ph4">&lt;statement list&gt;</ph>} end {<ph id="ph5">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">fonction <ph id="ph1">&lt;name&gt;</ph> {DynamicParam {<ph id="ph2">&lt;statement list&gt;</ph>} commencer {<ph id="ph3">&lt;statement list&gt;</ph>} processus {<ph id="ph4">&lt;statement list&gt;</ph>} fin {<ph id="ph5">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">De retour</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Causes Windows PowerShell to leave the current scope, such as a script or function, and writes the optional expression to the output.</source>
          <target state="translated">Provoque de Windows PowerShell quitter l’étendue actuelle, tel qu’un script ou une fonction et écrit l’expression facultative à la sortie.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>return [<ph id="ph1">&lt;expression&gt;</ph>]</source>
          <target state="translated">de retour [<ph id="ph1">&lt;expression&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Sequence</source>
          <target state="translated">Sequence</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Runs workflow commands sequentially in a Parallel script block.</source>
          <target state="translated">Exécute séquentiellement des commandes de flux de travail dans un bloc de script parallèles.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This keyword is valid only in a Windows PowerShell Workflow.</source>
          <target state="translated">Ce mot clé est valide uniquement dans un Workflow Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>workflow <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> { Parallel { Sequence { <ph id="ph2">&lt;Activity&gt;</ph> } } }</source>
          <target state="translated">flux de travail <ph id="ph1">&lt;verb&gt;-&lt;noun&gt;</ph> {parallèle {séquence { <ph id="ph2">&lt;Activity&gt;</ph> }}}</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The Sequence keyword creates a sequence block within a Parallel script block.</source>
          <target state="translated">Le mot clé séquence crée un bloc de séquence au sein d’un bloc de script parallèles.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The commands in the Sequence script block run sequentially and in the order defined.</source>
          <target state="translated">Les commandes dans le bloc de script Sequence s’exécutent de façon séquentielle et dans l’ordre défini.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For more information, see about_Sequence</source>
          <target state="translated">Pour plus d’informations, consultez about_Sequence</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Switch</source>
          <target state="translated">Commutateur</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Specifies a variety of actions to be performed on items from the pipeline or from a file.</source>
          <target state="translated">Spécifie un large éventail d’actions à effectuer sur les éléments à partir du pipeline ou d’un fichier.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You can use either of the following syntax models.</source>
          <target state="translated">Vous pouvez utiliser les modèles suivants de la syntaxe.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Syntax 1:</source>
          <target state="translated">Syntaxe 1 :</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>switch [-regex|-wildcard|-exact][-casesensitive] ( pipeline )</source>
          <target state="translated">commutateur [-regex |-génériques |-exact] [-casesensitive] (pipeline)</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>{ <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</source>
          <target state="translated">{ <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>default {<ph id="ph1">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">par défaut {<ph id="ph1">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Syntax 2:</source>
          <target state="translated">Syntaxe 2 :</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>switch [-regex|-wildcard|-exact][-casesensitive] -file filename { <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</source>
          <target state="translated">commutateur [-regex |-génériques |-exact] [-casesensitive]-nom_fichier { <ph id="ph1">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>| { <ph id="ph2">&lt;expression&gt;</ph> } {<ph id="ph3">&lt;statement list&gt;</ph>} <ph id="ph4">&lt;string&gt;|&lt;number&gt;|&lt;variable&gt;</ph>|{ <ph id="ph5">&lt;expression&gt;</ph> } {<ph id="ph6">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>...</source>
          <target state="translated">...</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>default {<ph id="ph1">&lt;statement list&gt;</ph>} }</source>
          <target state="translated">par défaut {<ph id="ph1">&lt;statement list&gt;</ph>}}</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Throw</source>
          <target state="translated">Throw</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Throws an object as an error.</source>
          <target state="translated">Lève un objet en tant qu’erreur.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>throw [<ph id="ph1">&lt;object&gt;</ph>]</source>
          <target state="translated">lever [<ph id="ph1">&lt;object&gt;</ph>]</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Trap</source>
          <target state="translated">Interruption</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Defines a statement list to be run if an error is encountered.</source>
          <target state="translated">Définit une liste d’instructions à exécuter si une erreur s’est produite.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">Un type d’erreur requiert des crochets.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The second pair of brackets indicates that the error type is optional.</source>
          <target state="translated">La deuxième paire de crochets indique que le type d’erreur est facultatif.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>trap [[<ph id="ph1">&lt;error type&gt;</ph>]] {<ph id="ph2">&lt;statement list&gt;</ph>}</source>
          <target state="translated">trap [[<ph id="ph1">&lt;error type&gt;</ph>]] {<ph id="ph2">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Try</source>
          <target state="translated">Essayez</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Defines a statement list to be checked for errors while the statements run.</source>
          <target state="translated">Définit une liste d’instructions permettant la vérification des erreurs tandis que les instructions sont exécutées.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If an error occurs, Windows PowerShell continues running in a Catch or Finally statement.</source>
          <target state="translated">Si une erreur se produit, Windows PowerShell continuera de s’exécuter dans une instruction Catch ou Finally.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>An error type requires brackets.</source>
          <target state="translated">Un type d’erreur requiert des crochets.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The second pair of brackets indicates that the error type is optional.</source>
          <target state="translated">La deuxième paire de crochets indique que le type d’erreur est facultatif.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>try {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[&lt;error type]] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</source>
          <target state="translated">Essayez de {<ph id="ph1">&lt;statement list&gt;</ph>} catch [[&lt; type d’erreur]] {<ph id="ph2">&lt;statement list&gt;</ph>} finally {<ph id="ph3">&lt;statement list&gt;</ph>}</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Until</source>
          <target state="translated">Jusqu'à ce que</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Used in a Do statement as a looping construct where the statement list is executed at least one time.</source>
          <target state="translated">Utilisé dans une instruction Do comme une construction en boucle dans laquelle la liste d’instructions est exécutée au moins une fois.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} until (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">faire {<ph id="ph1">&lt;statement list&gt;</ph>} jusqu'à ce que (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>While</source>
          <target state="translated">While</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Used in a Do statement as a looping construct where the statement list is executed at least one time.</source>
          <target state="translated">Utilisé dans une instruction Do comme une construction en boucle dans laquelle la liste d’instructions est exécutée au moins une fois.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntaxe :</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>do {<ph id="ph1">&lt;statement list&gt;</ph>} while (<ph id="ph2">&lt;condition&gt;</ph>)</source>
          <target state="translated">faire {<ph id="ph1">&lt;statement list&gt;</ph>} tandis que (<ph id="ph2">&lt;condition&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Workflow</source>
          <target state="translated">Flux de travail</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Creates a script-based Windows PowerShell workflow, that is, a workflow written in the Windows PowerShell language.</source>
          <target state="translated">Crée un workflow basé sur le script de Windows PowerShell, autrement dit, un workflow écrit dans le langage Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A Windows PowerShell workflow is a Windows PowerShell command type that is supported by Windows PowerShell and Windows Workflow Foundation.</source>
          <target state="translated">Un flux de travail Windows PowerShell est un type de commande de Windows PowerShell qui est pris en charge par Windows PowerShell et Windows Workflow Foundation.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Workflows are designed for complex, long-running tasks that affect multiple computers.</source>
          <target state="translated">Les workflows sont conçus pour les tâches complexes et longues qui affectent plusieurs ordinateurs.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Workflows can be recovered if interrupted, such as by a network outage, and you can suspend and resume them  without losing state or data.</source>
          <target state="translated">Les workflows peuvent être récupérées si interruption, comme par un réseau panne et vous pouvez suspendre et reprendre sans perte de données ou état.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Workflows can be written in XAML, the native language of Windows Workflow Foundation, or in the Windows PowerShell language.</source>
          <target state="translated">Les workflows peuvent être écrites en XAML, le langage natif de Windows Workflow Foundation, ou dans la langue de Windows PowerShell.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The syntax of a script-based workflow is similar to the syntax of a function.</source>
          <target state="translated">La syntaxe d’un workflow basé sur script est similaire à la syntaxe d’une fonction.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>However, the unit of execution in a workflow is an activity, instead of a command.</source>
          <target state="translated">Toutefois, l’unité d’exécution dans un flux de travail est une activité, au lieu d’une commande.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Cmdlets (and other commands) that are used in script-based workflows are implicitly converted to activities.</source>
          <target state="translated">Applets de commande (et d’autres commandes) qui sont utilisés dans les flux de travail basé sur le script est implicitement convertis en activités.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Some language elements that are permitted in scripts and functions are not permitted in workflows.</source>
          <target state="translated">Certains éléments de langage qui sont autorisés dans les scripts et les fonctions ne sont pas autorisés dans les flux de travail.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Similarly, workflows can include elements that are not found in scripts and functions, such as "persistence points" (checkpoints), self-suspension, and parallel processing.</source>
          <target state="translated">De même, les workflows peuvent inclure des éléments qui ne figurent pas dans les scripts et fonctions, telles que « points de persistance » le traitement self-suspension et parallèle (points de contrôle).</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>In addition, all workflows have a set of common parameters that are added by Windows PowerShell when you use the Workflow keyword.</source>
          <target state="translated">En outre, tous les workflows ont un ensemble de paramètres communs qui sont ajoutés à Windows PowerShell lorsque vous utilisez le mot clé de flux de travail.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Syntax: workflow &lt;Verb-Noun&gt; { param ([type]&lt;$pname1&gt; [, [type]&lt;$pname2&gt;]) <ph id="ph1">&lt;statement list&gt;</ph> }</source>
          <target state="translated">Syntaxe : flux de travail &lt; verbe-substantif &gt; {param ([type] &lt; pname1$ &gt; [, [type] &lt; pname2$ &gt;]) <ph id="ph1">&lt;statement list&gt;</ph> }</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>workflow &lt;verb-noun&gt; { [CmdletBinding(<ph id="ph1">&lt;Attributes&gt;</ph>)] Param</source>
          <target state="translated">flux de travail &lt; verbe-substantif &gt; {[CmdletBinding (<ph id="ph1">&lt;Attributes&gt;</ph>)] Param</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>[Parameter(<ph id="ph1">&lt;Arguments&gt;</ph>)] $Param1</source>
          <target state="translated">[Paramètre (<ph id="ph1">&lt;Arguments&gt;</ph>)] $Param1</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="translated">)</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="translated">}</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>For more information about workflows, see about_Workflows and "Getting Started with Windows PowerShell Workflow" (http://go.microsoft.com/fwlink/?LinkID=252592) in the TechNet Library.</source>
          <target state="translated">Pour plus d’informations sur les flux de travail, consultez about_Workflows et « Mise en route démarré avec Windows PowerShell Workflow » (http://go.microsoft.com/fwlink/?LinkID=252592) dans la bibliothèque TechNet.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">VOIR AUSSI</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>about_Escape_Characters about_Special_Characters about_Wildcards</source>
          <target state="translated">about_Escape_Characters about_Special_Characters about_Wildcards</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>