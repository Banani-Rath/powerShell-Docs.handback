<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6dfa74f41991fe66ee1ad2faae9c4292d32ef3b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Arithmetic_Operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">490018f99a7cd72101d91c035f3189b288ccbfd2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cbfbd03e4b80aa8fe33af4f7940f868d8a8705a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Arithmetic_Operators</source>
          <target state="translated">about_Arithmetic_Operators</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Arithmetic Operators</source>
          <target state="translated">关于算术运算符</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Arithmetic_Operators</source>
          <target state="translated">about_Arithmetic_Operators</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_Arithmetic_Operators</source>
          <target state="translated">about_Arithmetic_Operators</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes the operators that perform arithmetic in Windows PowerShell.</source>
          <target state="translated">介绍在 Windows PowerShell 中执行算术的运算符。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Arithmetic operators calculate numeric values.</source>
          <target state="translated">算术运算符计算数值。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use one or more arithmetic operators to add, subtract, multiply, and divide values, and to calculate the remainder (modulus) of a division operation.</source>
          <target state="translated">若要添加、 减、 乘和除值，并计算除法运算的余数 （取模），您可以使用一个或多个算术运算符。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In addition, the addition operator (+) and multiplication operator (*) also operate on strings, arrays, and hash tables.</source>
          <target state="translated">此外，加法运算符 （+） 和乘法运算符 （*） 还处理字符串、 数组和哈希表。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The addition operator concatenates the input.</source>
          <target state="translated">加法运算符将输入连接在一起。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The multiplication operator returns multiple copies of the input.</source>
          <target state="translated">乘法运算符返回输入的多个副本。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can even mix object types in an arithmetic statement.</source>
          <target state="translated">您可以甚至组合算术语句中的对象类型。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The method that is used to evaluate the statement is determined by the type of the leftmost object in the expression.</source>
          <target state="translated">用于评估该语句的方法取决于表达式中最左边的对象类型。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 2.0, all arithmetic operators work on 64-bit numbers.</source>
          <target state="translated">从 Windows PowerShell 2.0 开始，在 64 位数字上工作的所有算术运算符。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, the -shr (shift-right) and -shl (shift-left) are added to support bitwise arithmetic in Windows PowerShell.</source>
          <target state="translated">从 Windows PowerShell 3.0 开始，将-shr （向右） 和-shl （shift 左） 添加以支持 Windows PowerShell 中的按位算术运算。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the following arithmetic operators:</source>
          <target state="translated">Windows PowerShell 支持下列算术运算符︰</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Operator  Description                             Example</source>
          <target state="translated">运算符说明示例</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Adds integers; concatenates strings,    6+2 arrays, and hash tables.</source>
          <target state="translated">添加整数;连接字符串、 6 + 2 数组和哈希表。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>"file" + "name"</source>
          <target state="translated">"文件"+"name"</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Subtracts one value from another        6-2 value.</source>
          <target state="translated">用一个值减去另一个 6-2 值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>(get-date).date - 1</source>
          <target state="translated">（get 日期）.date-1</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Makes a number a negative number.</source>
          <target state="translated">使一个数字为负数。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>-6+2</source>
          <target state="translated">-6+2</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>-4</source>
          <target state="translated">-4</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Multiplies integers; copies strings     62 and arrays the specified number of      "w" * 3 times.</source>
          <target state="translated">乘以整数;复制字符串 62 和数组"w"的指定的数 * 3 次。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>/         Divides two values.</source>
          <target state="translated">/ 两个值相除。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>6/2</source>
          <target state="translated">6/2</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>%         Returns the remainder of a division     7%2 operation.</source>
          <target state="translated">%返回除法 7 %2 运算的余数。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-shl      Shift-left                              100 -shl 2</source>
          <target state="translated">-shl Shift 向左 100-shl 2</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-shr      Shift-right                             100 -shr 1</source>
          <target state="translated">-shr 右移 100-shr 1</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>OPERATOR PRECEDENCE</source>
          <target state="translated">运算符优先级</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Windows PowerShell processes arithmetic operators in the following order:</source>
          <target state="translated">Windows PowerShell 处理算术运算符按以下顺序︰</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Parentheses ()</source>
          <target state="translated">括号 （)</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(for a negative number)</source>
          <target state="translated">（对于负的数字）</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>*, /, %</source>
          <target state="translated">*, /, %</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>+, - (for subtraction)</source>
          <target state="translated">+、-（适用于减法）</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Windows PowerShell processes the expressions from left to right according to the precedence rules.</source>
          <target state="translated">Windows PowerShell 处理从左到右根据优先顺序规则的表达式。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following examples show the effect of the precedence rules:</source>
          <target state="translated">下面的示例演示的优先规则的效果︰</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 3+6/3*4</source>
          <target state="translated">C:\PS &gt; 3 + 6/3 * 4</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>11</source>
          <target state="translated">11</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 10+4/2</source>
          <target state="translated">C:\PS &gt; 10 + 4/2</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (10+4)/2</source>
          <target state="translated">C:\PS &gt; (10 + 4) / 2</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (3+3)/ (1+1)</source>
          <target state="translated">C:\PS &gt; (3 + 3) / (1 + 1)</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The order in which Windows PowerShell evaluates expressions might differ from other programming and scripting languages that you have used.</source>
          <target state="translated">Windows PowerShell 计算表达式的顺序可能与您已经使用其他编程和脚本语言不同。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example shows a complicated assignment statement.</source>
          <target state="translated">下面的示例演示复杂的赋值语句。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 0 C:\PS&gt; $b = 1,2 C:\PS&gt; $c = -1,-2</source>
          <target state="translated">C:\PS &gt; $ = 0 C:\PS &gt; $b = 1，2 C:\PS &gt; $c =-1，-2</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $b[$a] = $c[$a++]</source>
          <target state="translated">C:\PS &gt; $b [$] = $c [$ + +]</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $b</source>
          <target state="translated">C:\PS &gt; $b</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>-1</source>
          <target state="translated">-1</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In this example, the expression $a++ is evaluated before $c[$a++].</source>
          <target state="translated">在此示例中，表达式 $ + + 之前 $c 计算 [$ + +]。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Evaluating $a++ changes the value of $a.</source>
          <target state="translated">评估 + + 中的更改的 $ $ 的值。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The variable $a in $b[$a] equals 1, not 0, so the statement assigns a value to $b[1], not $b[0].</source>
          <target state="translated">变量 $ 在 $b [$] 等于 1，而不是 0，因此该语句将值赋给 $b [1]，不 $b [0]。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>DIVISION AND ROUNDING</source>
          <target state="translated">部门和舍入</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When the quotient of a division operation is an integer, Windows PowerShell rounds the value to the nearest integer.</source>
          <target state="translated">一个整数除法运算的商时，Windows PowerShell 将舍入为最接近整数的值。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When the value is .5, it rounds to the nearest even integer.</source>
          <target state="translated">.5 的值时，它将舍入为接近的偶数整数。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example shows the effect of rounding to the nearest even integer.</source>
          <target state="translated">下面的示例显示效果则舍入为接近的偶数整数。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>C:\PS&gt;int</source>
          <target state="translated">C:\PS &gt; int</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>C:\PS&gt;int</source>
          <target state="translated">C:\PS &gt; int</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>ADDING AND MULTIPLYING NON-NUMERIC TYPES</source>
          <target state="translated">添加和相乘非数字类型</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can add numbers, strings, arrays, and hash tables.</source>
          <target state="translated">您可以添加数字、 字符串、 数组和哈希表。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>And, you can multiply numbers, strings, and arrays.</source>
          <target state="translated">而且，则可以将相乘的数字、 字符串和数组。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, you cannot multiply hash tables.</source>
          <target state="translated">但是，不能乘哈希表。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When you add strings, arrays, or hash tables, the elements are concatenated.</source>
          <target state="translated">当您添加字符串、 数组或哈希表时，则串联元素。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When you concatenate collections, such as arrays or hash tables, a new object is created that contains the objects from both collections.</source>
          <target state="translated">串联集合，如数组或哈希表，将创建一个新对象，包含来自这两个集合的对象。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you try to concatenate hash tables that have the same key, the operation fails.</source>
          <target state="translated">如果您尝试连接具有相同键的哈希表，则操作将失败。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, the following commands create two arrays and then add them:</source>
          <target state="translated">例如，以下命令创建两个数组，并将它们添加︰</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $b = "A","B","C" C:\PS&gt; $a + $b</source>
          <target state="translated">C:\PS &gt; $ = 1,2,3 C:\PS &gt; $b ="A"、"B"、"C"C:\PS &gt; $ + $b</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can also perform arithmetic operations on objects of different types.</source>
          <target state="translated">此外可以执行不同类型的对象的算术运算。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The operation that Windows PowerShell performs is determined by the Microsoft .NET Framework type of the leftmost object in the operation.</source>
          <target state="translated">Windows PowerShell 执行的操作由在操作中最左边的对象的 Microsoft.NET Framework 类型确定。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Windows PowerShell tries to convert all the objects in the operation to the .NET Framework type of the first object.</source>
          <target state="translated">Windows PowerShell 尝试将在操作中的所有对象都转换为第一个对象的.NET Framework 类型。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If it succeeds in converting the objects, it performs the operation appropriate to the .NET Framework type of the first object.</source>
          <target state="translated">如果在将对象转换成功，它执行的操作适用于.NET Framework 类型的第一个对象。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If it fails to convert any of the objects, the operation fails.</source>
          <target state="translated">如果它无法转换的任何对象，则操作将失败。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the addition and multiplication operators in operations that include different object types:</source>
          <target state="translated">下面的示例演示如何将包含不同的对象类型的操作中的加法和乘法运算符︰</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; "file" + 16 file16</source>
          <target state="translated">C:\PS &gt;"文件"+ 16 file16</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $array = 1,2,3 C:\PS&gt; $array + 16</source>
          <target state="translated">C:\PS &gt; $array = 1 2、 3 C:\PS &gt; $array + 16</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>16</source>
          <target state="translated">16</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $array + "file"</source>
          <target state="translated">C:\PS &gt; $array +"文件"</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>file</source>
          <target state="translated">文件</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; "file" * 3 filefilefile</source>
          <target state="translated">C:\PS &gt;"文件"* 3 filefilefile</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Because the method that is used to evaluate statements is determined by the leftmost object, addition and multiplication in Windows PowerShell are not strictly commutative.</source>
          <target state="translated">由于用于计算语句的方法由最左边的对象，加法和乘法 Windows PowerShell 中的不是严格可交换性。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For example, (a + b) does not always equal (b + a), and (ab) does not always equal (ba).</source>
          <target state="translated">例如，(b） 不始终等于 + (b + a)，(ab) 始终不等于 (ba)。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate this principle:</source>
          <target state="translated">下面的示例演示此原则︰</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; "file" + 2 file2</source>
          <target state="translated">C:\PS &gt;"文件"+ 2 file2</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 2 + "file" Cannot convert value "file" to type "System.Int32".</source>
          <target state="translated">C:\PS &gt; 2 +"文件"，则无法将值"文件"，键入"System.Int32"的转换。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">错误:"输入字符串未采用正确的格式。"</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>At line:1 char:4</source>
          <target state="translated">在行︰ 1 char: 4</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>2 + &lt;&lt;&lt;&lt;  "file"</source>
          <target state="translated">2 + &lt;&lt;&lt;&lt;"文件"</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; "file" * 3 filefilefile</source>
          <target state="translated">C:\PS &gt;"文件"* 3 filefilefile</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 3 * "file" Cannot convert value "file" to type "System.Int32".</source>
          <target state="translated">C:\PS &gt; 3 *"文件"无法将值"文件"，键入"System.Int32"转换。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">错误:"输入字符串未采用正确的格式。"</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>At line:1 char:4</source>
          <target state="translated">在行︰ 1 char: 4</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>3 * &lt;&lt;&lt;&lt;  "file"</source>
          <target state="translated">3 * &lt;&lt;&lt;&lt;"文件"</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Hash tables are a slightly different case.</source>
          <target state="translated">哈希表是略有不同的大小写形式。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can add hash tables.</source>
          <target state="translated">您可以添加哈希表。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>And, you can add a hash table to an array.</source>
          <target state="translated">并可以将哈希表添加到一个数组。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>However, you cannot add any other type to a hash table.</source>
          <target state="translated">但是，不能为哈希表中添加任何其他类型。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following examples show how to add hash tables to each other and to other objects:</source>
          <target state="translated">下面的示例演示如何添加对方，并对其他对象的哈希表︰</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $hash1 = @{a=1; b=2; c=3} C:\PS&gt; $hash2 = @{c1="Server01"; c2="Server02"} C:\PS&gt; $hash1 + $hash2</source>
          <target state="translated">C:\PS &gt; $hash1 = @{= 1，b = 2; c = 3} C:\PS &gt; hash2 = @{c1 ="Server01"; c2 ="Server02"} C:\PS &gt; hash1 + $hash2</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Name                           Value</source>
          <target state="translated">名称值</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>c2                             Server02 a                              1 b                              2 c1                             Server01 c                              3</source>
          <target state="translated">c2                             Server02 a                              1 b                              2 c1                             Server01 c                              3</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $hash1 + 2 You can add another hash table only to a hash table.</source>
          <target state="translated">C:\PS &gt; $hash1 + 2 您只能向一个哈希表添加另一个哈希表。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>At line:1 char:9</source>
          <target state="translated">第 9 行︰ 1 char:</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>$hash1 + &lt;&lt;&lt;&lt;  2</source>
          <target state="translated">$hash1 + &lt;&lt;&lt;&lt; 2</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 2 + $hash1 Cannot convert "System.Collections.Hashtable" to "System.Int32".</source>
          <target state="translated">C:\PS &gt; 2 + $hash1 不能将转换为"System.Int32"的"System.Collections.Hashtable"。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>At line:1 char:4</source>
          <target state="translated">在行︰ 1 char: 4</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>2 + &lt;&lt;&lt;&lt;  $hash1</source>
          <target state="translated">2 + &lt;&lt;&lt;&lt; $hash1</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate that you can add a hash table to an array.</source>
          <target state="translated">下面的示例演示可以将哈希表添加到一个数组。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The entire hash table is added to the array as a single object.</source>
          <target state="translated">为单个对象情况下，整个哈希表将添加到数组。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $array = 1,2,3 C:\PS&gt; $array + $hash1</source>
          <target state="translated">C:\PS &gt; $array = 1,2,3 C:\PS &gt; $array + $hash1</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Name                           Value</source>
          <target state="translated">名称值</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 c                              3</source>
          <target state="translated">a                              1 b                              2 c                              3</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $sum = $array + $hash1 C:\PS&gt; $sum.count</source>
          <target state="translated">C:\PS &gt; $sum = $array + $hash1 C:\PS &gt; $sum.count</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $sum[3] Name                           Value</source>
          <target state="translated">C:\PS &gt; $sum [3] 名称值</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 c                              3</source>
          <target state="translated">a                              1 b                              2 c                              3</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>PS C:\ps-test&gt; $sum + $hash2</source>
          <target state="translated">PS C:\ps-test &gt; $sum + $hash2</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Name                           Value</source>
          <target state="translated">名称值</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 c                              3 c2                             Server02</source>
          <target state="translated">a                              1 b                              2 c                              3 c2                             Server02</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The following example shows that you cannot add hash tables that contain the same key:</source>
          <target state="translated">下面的示例演示，不能添加包含相同键的哈希表︰</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $hash1 = @{a=1; b=2; c=3} C:\PS&gt; $hash2 = @{c="red"} C:\PS&gt; $hash1 + $hash2 Bad argument to operator '+': Item has already been added.</source>
          <target state="translated">C:\PS &gt; $hash1 = @{= 1; b = 2; c = 3} C:\PS &gt; hash2 = @{c ="red"} C:\PS &gt; hash1 + $hash2 错误参数向操作员 +︰ 已添加项。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Key in dictionary: 'c'    Key being added: 'c'.</source>
          <target state="translated">字典中的键︰ 正在添加的 c 键: c。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>At line:1 char:9</source>
          <target state="translated">第 9 行︰ 1 char:</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>$hash1 + &lt;&lt;&lt;&lt;  $hash2</source>
          <target state="translated">$hash1 + &lt;&lt;&lt;&lt; $hash2</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Although the addition operators are very useful, use the assignment operators to add elements to hash tables and arrays.</source>
          <target state="translated">尽管非常有用的加法运算符，但使用赋值运算符将元素添加到哈希表和数组。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For more information see about_assignment_operators.</source>
          <target state="translated">有关详细信息请参阅 about_assignment_operators。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The following examples use the += assignment operator to add items to an array:</source>
          <target state="translated">以下示例使用 + = 赋值运算符将项添加到一个数组︰</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>C:\PS&gt;  $array</source>
          <target state="translated">C:\PS &gt; $array</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>C:\PS&gt;  $array + "file"</source>
          <target state="translated">C:\PS &gt; $array +"文件"</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>file</source>
          <target state="translated">文件</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>C:\PS&gt;  $array</source>
          <target state="translated">C:\PS &gt; $array</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>C:\PS&gt;  $array += "file" C:\PS&gt;  $array</source>
          <target state="translated">C:\PS &gt; $array + ="文件"C:\PS &gt; $array</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>file</source>
          <target state="translated">文件</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $hash1</source>
          <target state="translated">C:\PS &gt; $hash1</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Name                           Value</source>
          <target state="translated">名称值</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 c                              3</source>
          <target state="translated">a                              1 b                              2 c                              3</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $hash1 += @{e = 5} C:\PS&gt; $hash1</source>
          <target state="translated">C:\PS &gt; $hash1 + = @{e = 5} C:\PS &gt; hash1</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Name                           Value</source>
          <target state="translated">名称值</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 e                              5 c                              3</source>
          <target state="translated">a                              1 b                              2 e                              5 c                              3</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Windows PowerShell automatically selects the .NET Framework numeric type that best expresses the result without losing  precision.</source>
          <target state="translated">Windows PowerShell 会自动选择最能表达结果而不会丢失精度的.NET Framework 数字类型。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例如：</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 2 + 3.1</source>
          <target state="translated">C:\PS &gt; 2 + 3.1</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>5.1</source>
          <target state="translated">5.1</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (2).</source>
          <target state="translated">C:\PS &gt; （2)。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>GetType().FullName System.Int32 C:\PS&gt; (2 + 3.1).GetType().FullName System.Double</source>
          <target state="translated">GetType()。FullName System.Int32 C:\PS &gt; (2 + 3.1)。GetType()。FullName System.Double</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If the result of an operation is too large for the type, the type of the result is widened to accommodate the result, as in the following example:</source>
          <target state="translated">如果操作的结果太大的类型，结果的类型扩展以容纳结果，如以下示例所示︰</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (512MB).GetType().FullName System.Int32 C:\PS&gt; (512MB * 512MB).GetType().FullName System.Double</source>
          <target state="translated">C:\PS &gt; (512 MB)。GetType()。FullName System.Int32 C:\PS &gt; (512 MB * 512 MB)。GetType()。FullName System.Double</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The type of the result will not necessarily be the same as one of the operands.</source>
          <target state="translated">结果的类型不一定会与其中一个操作数相同。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In the following example, the negative value cannot be cast to an unsigned integer, and the unsigned integer is too large to be cast to Int32:</source>
          <target state="translated">在下面的示例中，无法将负的值转换为无符号整数和无符号的整数太大，无法强制转换为 Int32:</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; ([int32]::minvalue + [uint32]::maxvalue).gettype().fullname System.Int64</source>
          <target state="translated">C:\PS &gt; ([int32]:: minvalue + [uint32]:: maxvalue).gettype （).fullname System.Int64</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>In this example, Int64 can accommodate both types.</source>
          <target state="translated">在此示例中，Int64 可以容纳这两种类型。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The System.Decimal type is an exception.</source>
          <target state="translated">System.Decimal 类型是个例外。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If either operand has the Decimal type, the result will be of the Decimal type.</source>
          <target state="translated">如果其中一个操作数具有十进制类型，结果将是十进制类型。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If the result is too large for the Decimal type, it will not be cast to Double.</source>
          <target state="translated">如果结果为 Decimal 类型太大，它将不转换为 Double。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Instead, an error results.</source>
          <target state="translated">相反，会发生错误。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; <bpt id="p1">[</bpt>Decimal<ept id="p1">]</ept>::maxvalue</source>
          <target state="translated">C:\PS &gt; <bpt id="p1">[</bpt>十进制<ept id="p1">]</ept>:: maxvalue</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>79228162514264337593543950335</source>
          <target state="translated">79228162514264337593543950335</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; <bpt id="p1">[</bpt>Decimal<ept id="p1">]</ept>::maxvalue + 1 Value was either too large or too small for a Decimal.</source>
          <target state="translated">C:\PS &gt; <bpt id="p1">[</bpt>十进制<ept id="p1">]</ept>:: maxvalue + 1 个值是太大或太小，十进制数字。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>At line:1 char:22</source>
          <target state="translated">在行︰ 1 char: 22</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">小数</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>ARITHMETIC OPERATORS AND VARIABLES</source>
          <target state="translated">算术运算符和变量</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>You can also use arithmetic operators with variables.</source>
          <target state="translated">此外可以使用变量使用算术运算符。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The operators act on the values of the variables.</source>
          <target state="translated">运算符作用于变量的值。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate the use of arithmetic operators with variables:</source>
          <target state="translated">下面的示例演示使用算术运算符和变量︰</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $intA = 6 C:\PS&gt; $intB = 4 C:\PS&gt; $intA + $intB</source>
          <target state="translated">C:\PS &gt; $intA = 6 C:\PS &gt; $intB = 4 C:\PS &gt; $intA + $intB</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="translated">10</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "Windows " C:\PS&gt; $b = "PowerShell " C:\PS&gt; $c = 2 C:\PS&gt; $a + $b + $c</source>
          <target state="translated">C:\PS &gt; $a ="Windows"C:\PS &gt; $b ="PowerShell"C:\PS &gt; $c = 2 C:\PS &gt; $ + $b + $c</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Windows PowerShell 2</source>
          <target state="translated">Windows PowerShell 2</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>ARITHMETIC OPERATORS AND COMMANDS</source>
          <target state="translated">算术运算符和命令</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Typically, you use the arithmetic operators in expressions with numbers, strings, and arrays.</source>
          <target state="translated">通常，在使用数字、 字符串和数组的表达式中使用算术运算符。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>However, you can also use arithmetic operators with the objects that commands return and with the properties of those objects.</source>
          <target state="translated">但是，与命令将返回的对象以及这些对象的属性，还可以使用算术运算符。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The following examples show how to use the arithmetic operators in expressions with Windows PowerShell commands:</source>
          <target state="translated">下面的示例演示如何在使用 Windows PowerShell 命令的表达式中使用算术运算符︰</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; get-date Wednesday, January 02, 2008 1:28:42 PM</source>
          <target state="translated">C:\PS &gt; 获取日期 2008 年年 1 月 2 日，星期三，下午 1:28:42</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $day = new-timespan -day 1 C:\PS&gt; get-date + $day Thursday, January 03, 2008 1:34:52 PM</source>
          <target state="translated">C:\PS &gt; $day = 新时间跨度的第 1 天 C:\PS &gt; 获取日期 + $day 2008 年 1 月 3 日，星期四，1:34:52 PM</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; get-process | where {($_.ws * 2) -gt 50mb} Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</source>
          <target state="translated">C:\PS &gt; 获取进程 |其中 {($_.ws * 2)-gt 50mb} 处理 npm （k) pm （k) ws （k) vm （m) CPU(s) Id ProcessName</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>1896      39    50968      30620   264 1,572.55   1104 explorer</source>
          <target state="translated">为 1896年 39 50968 30620 264 1,572.55 1104年资源管理器</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>12802      78   188468      81032   753 3,676.39   5676 OUTLOOK</source>
          <target state="translated">12802 78 188468 81032 753 3,676.39 5676 OUTLOOK</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>660       9    36168      26956   143    12.20    988 PowerShell 561      14     6592      28144   110 1,010.09    496 services 3476      80    34664      26092   234 ...45.69    876 svchost</source>
          <target state="translated">660 9 36168 26956 143 12.20 988 PowerShell 561 14 6592 28144 110 1,010.09 496 services 3476 80 34664 26092 234...45.69 876 svchost</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>967      30    58804      59496   416   930.97   2508 WINWORD</source>
          <target state="translated">967 30 58804 59496 416 930.97 2508 WINWORD</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The following examples show how to use the arithmetic operators in Windows PowerShell:</source>
          <target state="translated">下面的示例演示如何在 Windows PowerShell 中使用算术运算符︰</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1 + 1</source>
          <target state="translated">C:\PS &gt; 1 + 1</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 1 - 1</source>
          <target state="translated">C:\PS &gt; 1-1</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; -(6 + 3)</source>
          <target state="translated">C:\PS &gt;-(6 + 3)</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>-9</source>
          <target state="translated">-9</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 6 * 2</source>
          <target state="translated">C:\PS &gt; 6 * 2</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 7 / 2</source>
          <target state="translated">C:\PS &gt; 7 / 2</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>3.5</source>
          <target state="translated">3.5</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 7 % 2</source>
          <target state="translated">C:\PS &gt; 7 %2</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; w * 3 www</source>
          <target state="translated">C:\PS &gt; w * 3 www</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 3 * "w" Cannot convert value "w" to type "System.Int32".</source>
          <target state="translated">C:\PS &gt; 3 *"w"无法将值"w"，键入"System.Int32"转换。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">错误:"输入字符串未采用正确的格式。"</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>At line:1 char:4</source>
          <target state="translated">在行︰ 1 char: 4</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>3 * &lt;&lt;&lt;&lt; "w"</source>
          <target state="translated">3 * &lt;&lt;&lt;&lt;"w"</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>PS C:\ps-test&gt; "Windows" + " " + "PowerShell" Windows PowerShell</source>
          <target state="translated">PS C:\ps-test &gt;"Windows"+""+"PowerShell"Windows PowerShell</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>PS C:\ps-test&gt; $a = "Windows" + " " + "PowerShell" PS C:\ps-test&gt; $a Windows PowerShell</source>
          <target state="translated">PS C:\ps-test &gt; $a ="Windows"+""+"PowerShell"PS C:\ps-test &gt; $ Windows PowerShell</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a[0]</source>
          <target state="translated">C:\PS &gt; $a [0]</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "TestFiles.txt" C:\PS&gt; $b = "C:\Logs<ph id="ph1">\"
</ph>C:\PS&gt; $b + $a C:\Logs\TestFiles.txt</source>
          <target state="translated">C:\PS &gt; $a ="TestFiles.txt"C:\PS &gt; $b ="C:\Logs<ph id="ph1">\"
</ph>C:\PS &gt; $b + $a C:\Logs\TestFiles.txt</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a + 4</source>
          <target state="translated">C:\PS &gt; $ = 1,2,3 C:\PS &gt; $ + 4</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $servers = @{0 = "LocalHost"; 1 = "Server01"; 2 = "Server02"} C:\PS&gt; $servers + @{3 = "Server03"} Name Value</source>
          <target state="translated">C:\PS &gt; $servers = @{0 ="LocalHost"; 1 ="Server01"; 2 ="Server02"} C:\PS &gt; $servers + @{3 ="Server03"} 名称值</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>3 Server03 2 Server02 1 Server01 0 LocalHost</source>
          <target state="translated">3 Server03 2 Server02 1 Server01 0 LocalHost</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $servers Name Value</source>
          <target state="translated">C:\PS &gt; $servers 名称值</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>2 Server02 1 Server01 0 LocalHost</source>
          <target state="translated">2 Server02 1 Server01 0 LocalHost</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $servers += @{3 = "Server03"} #Use assignment operator C:\PS&gt; $servers Name Value</source>
          <target state="translated">C:\PS &gt; $servers + = @{3 ="Server03"} #Use 赋值运算符 C:\PS &gt; $servers 名称值</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>3 Server03 2 Server02 1 Server01 0 LocalHost</source>
          <target state="translated">3 Server03 2 Server02 1 Server01 0 LocalHost</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>BITWISE ARITHMETIC IN WINDOWS POWERSHELL</source>
          <target state="translated">WINDOWS POWERSHELL 中的按位算术运算</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the -shl (shift-left) and -shr (shift-right) operators for bitwise arithmetic.</source>
          <target state="translated">Windows PowerShell 支持-shl （shift 左） 和-shr （向右） 运算符的按位算术运算。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>These operators are introduced in Windows PowerShell 3.0.</source>
          <target state="translated">在 Windows PowerShell 3.0 中引入了这些运算符。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>In a bitwise shift-left operation, all bits are moved "n" places to the left, where "n" is the value of the right operand.</source>
          <target state="translated">在按位左移操作中，所有的位将移动"n"将放左侧，其中"n"是右操作数的值。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>A zero is inserted in the ones place.</source>
          <target state="translated">在的中插入零放置。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>When the left operand is an Integer (32-bit) value, the lower 5 bits of the right operand determine how many bits of the left operand are shifted.</source>
          <target state="translated">当左的操作数为整数 （32 位） 值时，较低的右操作数的 5 位确定向左操作数的多少位。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>When the left operand is a Long (64-bit) value, the lower 6 bits of the right operand determine how many bits of the left operand are shifted.</source>
          <target state="translated">当左的操作数是一个长时间 （64 位） 值时，较低的右操作数的 6 位确定向左操作数的多少位。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 21 -shl 1</source>
          <target state="translated">C: &gt; 21-shl 1 的 PS</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>42</source>
          <target state="translated">42</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>00010101  (21)</source>
          <target state="translated">00010101  (21)</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>00101010  (42)</source>
          <target state="translated">00101010  (42)</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 21 -shl 2</source>
          <target state="translated">C: &gt; 21-shl 2 的 PS</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>84</source>
          <target state="translated">84</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>00010101  (21)</source>
          <target state="translated">00010101  (21)</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>00101010  (42)</source>
          <target state="translated">00101010  (42)</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>01010100  (84)</source>
          <target state="translated">01010100  (84)</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>In a bitwise shift-right operation, all bits are moved "n" places to the right, where "n" is specified by the right operand.</source>
          <target state="translated">按位右移运算中所有的位将移动"n"将放置到右边，其中"n"指定右操作数。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The shift-right operator (-shr) inserts a zero in the left-most place when shifting a positive or unsigned value to the right.</source>
          <target state="translated">右移运算符 (-shr) 向右移位正或无符号值时插入零放在最左边的位置。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>When the left operand is an Integer (32-bit) value, the lower 5 bits of the right operand determine how many bits of the left operand are shifted.</source>
          <target state="translated">当左的操作数为整数 （32 位） 值时，较低的右操作数的 5 位确定向左操作数的多少位。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>When the left operand is a Long (64-bit) value, the lower 6 bits of the right operand determine how many bits of the left operand are shifted.</source>
          <target state="translated">当左的操作数是一个长时间 （64 位） 值时，较低的右操作数的 6 位确定向左操作数的多少位。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 21 -shr 1</source>
          <target state="translated">C: &gt; 21-shr 1 的 PS</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="translated">10</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>00010101  (21)</source>
          <target state="translated">00010101  (21)</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>00001010  (10)</source>
          <target state="translated">00001010  (10)</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>PS C:&gt; 21 -shr 2</source>
          <target state="translated">C: &gt; 21-shr 2 的 PS</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>00010101  (21)</source>
          <target state="translated">00010101  (21)</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>00001010  (10)</source>
          <target state="translated">00001010  (10)</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>00000101  ( 5)</source>
          <target state="translated">00000101  ( 5)</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>about_arrays about_assignment_operators about_comparison_operators about_hash_tables about_operators about_variables Get-Date New-TimeSpan</source>
          <target state="translated">about_arrays about_assignment_operators about_comparison_operators about_hash_tables about_operators about_variables Get-date New-timespan</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>