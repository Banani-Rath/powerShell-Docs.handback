<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b887b04a42e3ed4a34c3149eb926434b2812073</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\ConvertFrom-String.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc139ae602e803d12e36303954502ffa7ba98dd3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12eb81c1f67bac207762a69fe821c7b8403f44b5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ConvertFrom-String</source>
          <target state="translated">ConvertFrom 字符串</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ConvertFrom-String</source>
          <target state="translated">ConvertFrom 字符串</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">简述</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Extracts and parses structured objects from string content.</source>
          <target state="translated">提取并将其从字符串内容的结构化的对象。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ByDelimiter (Default)</source>
          <target state="translated">ByDelimiter （默认值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>TemplateParsing</source>
          <target state="translated">TemplateParsing</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ConvertFrom-String<ept id="p1">**</ept> cmdlet extracts and parses structured objects from string content.</source>
          <target state="translated"> <bpt id="p1">**</bpt>ConvertFrom 字符串<ept id="p1">**</ept> cmdlet 将提取和分析中字符串内容的结构化的对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This cmdlet generates an object by parsing text from a traditional text stream.</source>
          <target state="translated">此 cmdlet 生成的传统文本流中解析文本的对象。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For each string in the pipeline, the cmdlet splits the input by either a delimiter or a parse expression, and then assigns property names to each of the resulting split elements.</source>
          <target state="translated">管道中的每个字符串，该 cmdlet 将拆分输入的是分隔符或一个分析表达式，并会将属性名称分配给每个生成的拆分元素。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can provide these property names; if you do not, they are automatically generated for you.</source>
          <target state="translated">您可以提供这些属性名称;如果不这样做，它们会自动为您生成。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The cmdlet's default parameter set, <bpt id="p1">*</bpt>ByDelimiter<ept id="p1">*</ept>, splits exactly on the regular expression delimiter.</source>
          <target state="translated">该 cmdlet 的默认参数设置， <bpt id="p1">*</bpt>ByDelimiter<ept id="p1">*</ept>, ，完全基于正则表达式分隔符拆分。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It does not perform quote matching or delimiter escaping as the Import-Csv cmdlet does.</source>
          <target state="translated">它不执行匹配的引号或分隔符转义 Import-csv cmdlet 一样。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The cmdlet's alternate parameter set, <bpt id="p1">*</bpt>TemplateParsing<ept id="p1">*</ept>, generates elements from the groups that are captured by a regular expression.</source>
          <target state="translated">设置该 cmdlet 的可选参数， <bpt id="p1">*</bpt>TemplateParsing<ept id="p1">*</ept>, ，从由正则表达式捕获组生成元素。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This cmdlet supports two modes: basic delimited parsing, and automatically-generated, example-driven parsing.</source>
          <target state="translated">此 cmdlet 支持以下两种模式︰ basic 分隔分析过程中，并自动生成、 示例驱动分析。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Delimited parsing, by default, splits the input at white space, and assigns property names to the resulting groups.</source>
          <target state="translated">默认情况下，分隔分析会在空格处将输入拆分，并为得到的组分配属性名称。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can customize the delimiter by piping the <bpt id="p1">**</bpt>ConvertFrom-String<ept id="p1">**</ept> results into one of the Format-<bpt id="p2">*</bpt> cmdlets, or you can use the <ept id="p2">*</ept>Delimiter* parameter.</source>
          <target state="translated">可以通过管道自定义分隔符 <bpt id="p1">**</bpt>ConvertFrom 字符串<ept id="p1">**</ept> 结果转换为一种格式-<bpt id="p2">*</bpt> cmdlet，也可以使用 <ept id="p2">*</ept>分隔符 * 参数。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The cmdlet also supports automatically-generated, example-driven parsing based on the <bpt id="p1">**</bpt>FlashExtract<ept id="p1">**</ept> research work by Microsoft Researchhttp://research.microsoft.com/.</source>
          <target state="translated">该 cmdlet 还支持自动生成的、 示例驱动分析基于 <bpt id="p1">**</bpt>FlashExtract<ept id="p1">**</ept> 研究通过 Microsoft Researchhttp://research.microsoft.com/ 发挥作用。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example 1: Generate an object with default property names</source>
          <target state="translated">示例 1︰ 生成具有默认属性名称的对象</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This command generates an object with default property names, P1 and P2.</source>
          <target state="translated">此命令将生成具有默认属性的名称，P1 和 P2 的对象。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The results are P1=Hello and P2=World.</source>
          <target state="translated">结果是 P1 = Hello 和 P2 = 世界。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example 2: Generate an object with default property names using a delimiter</source>
          <target state="translated">示例 2︰ 具有默认属性名使用分隔符生成的对象</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This command generates an object with P1=He and P2=o World, by specifying the ll in Hello  as the delimiter.</source>
          <target state="translated">此命令生成的对象与 P1 = 他和 P2 = o 世界中，通过在 Hello 作为分隔符指定 ll。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Example 3: Use an expression as the value of the TemplateContent parameter</source>
          <target state="translated">示例 3︰ 使用表达式作为 TemplateContent 参数的值</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This command uses an expression as the value of the <bpt id="p1">*</bpt>TemplateContent<ept id="p1">*</ept> parameter to instruct Windows PowerShell that the string that is used on the pipeline to <bpt id="p2">**</bpt>ConvertFrom-String<ept id="p2">**</ept> has a property of <bpt id="p3">**</bpt>Name<ept id="p3">**</ept>.</source>
          <target state="translated">此命令使用表达式的值作为 <bpt id="p1">*</bpt>TemplateContent<ept id="p1">*</ept> 参数指示 Windows PowerShell，在该管道使用的字符串 <bpt id="p2">**</bpt>ConvertFrom 字符串<ept id="p2">**</ept> 具有的属性 <bpt id="p3">**</bpt>名称<ept id="p3">**</ept>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can also save the expression in a variable, then use the variable as the value of the <bpt id="p1">*</bpt>TemplateContent<ept id="p1">*</ept> parameter, as shown here.</source>
          <target state="translated">您也可以将该表达式保存在变量中，然后将该变量的值用作 <bpt id="p1">*</bpt>TemplateContent<ept id="p1">*</ept> 参数，如下所示。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example 4: Generate an object that contains two properties</source>
          <target state="translated">示例 4︰ 生成包含两个属性的对象</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This command generates an object that contains two properties, FirstWord and SecondWord.</source>
          <target state="translated">此命令将生成一个包含两个属性，FirstWord 和 SecondWord 对象。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The results are FirstWord=Hello and SecondWord=World.</source>
          <target state="translated">结果是 FirstWord = Hello 和 SecondWord = 世界。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 5: Generate two objects of different object types</source>
          <target state="translated">示例 5︰ 生成不同的对象类型的两个对象</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This command generates an object with default property names P1 and P2, but property types String and Integer are identified.</source>
          <target state="translated">此命令生成具有 P1 和 P2，默认属性名称的对象，但字符串和整数属性类型进行标识。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The results are P1=123 and P2=456.</source>
          <target state="translated">结果是 P1 = 123 和 P2 = 456。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The second property is an integer, not a string.</source>
          <target state="translated">第二个属性是一个整数，不是字符串。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>-Delimiter</source>
          <target state="translated">分隔符</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Specifies a regular expression that identifies the boundary between elements.</source>
          <target state="translated">指定一个正则表达式，标识元素之间的边界。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Elements that are created by the split become properties in the resulting object.</source>
          <target state="translated">通过拆分创建元素，成为生成的对象中的属性。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The delimiter is ultimately used in a call to <bpt id="p1">**</bpt>System.Text.RegularExpressions.RegularExpression.Split()<ept id="p1">**</ept>.</source>
          <target state="translated">最终的调用中使用分隔符 <bpt id="p1">**</bpt>System.Text.RegularExpressions.RegularExpression.Split()<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-IncludeExtent</source>
          <target state="translated">-IncludeExtent</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet includes an extent text property that is removed by default.</source>
          <target state="translated">指示此 cmdlet，包括默认情况下删除扩展盘区 text 属性。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-InputObject</source>
          <target state="translated">-InputObject</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Specifies strings received from the pipeline, or a variable that contains a string object.</source>
          <target state="translated">指定从管道中或包含一个字符串对象的变量接收到的字符串。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>-PropertyNames</source>
          <target state="translated">-PropertyNames</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Specifies and array of property names to which to assign split values in the resulting object.</source>
          <target state="translated">指定和要向其分配生成的对象中的拆分值的属性名称的数组。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Every line of text that you split or parse generates elements that represent property values.</source>
          <target state="translated">拆分或分析的文本的每一行生成表示属性值的元素。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the element is the result of a capture group, and that capture group is named (for example, (?<ph id="ph1">\&lt;</ph>name<ph id="ph2">\&gt;</ph>) or (?'name') ), then the name of that capture group is assigned to the property.</source>
          <target state="translated">如果元素是捕获组的结果，并且名为该捕获组 (例如，(？<ph id="ph1">\&lt;</ph>名称<ph id="ph2">\&gt;</ph>) 或 (？名称 '))，则该捕获组的名称分配给该属性。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you provide any elements in the <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> array, those names are assigned to properties that have not yet been named.</source>
          <target state="translated">如果提供的所有元素 <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> 数组，这些名称分配给尚未命名的属性。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you provide more property names than there are fields, Windows PowerShell ignores the extra property names.</source>
          <target state="translated">如果提供多个属性名称不是字段时，Windows PowerShell 将忽略额外的属性名称。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you do not specify enough property names to name all fields, Windows PowerShellautomatically assigns numerical property names to any properties that are not named: P1, P2, etc.</source>
          <target state="translated">如果未指定足够的属性名称来命名所有字段，Windows PowerShellautomatically 将数值属性名称分配给任何未命名的属性︰ P1、 P2，等等。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>-TemplateContent</source>
          <target state="translated">-TemplateContent</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Specifies an expression, or an expression saved as a variable, that describes the properties to which this cmdlet assigns strings.</source>
          <target state="translated">指定一个表达式或另存为一个变量，用于描述此 cmdlet 将字符串分配的属性的表达式。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The syntax of a template field specification is the following: {<ph id="ph1">\[</ph>optional-typecast<ph id="ph2">\]</ph>name(sequence-spec, for example <bpt id="p1">*</bpt>):example-value}. An example is {PersonInfo<ept id="p1">*</ept>:{Name:Patti Fuller}.</source>
          <target state="translated">指定模板字段的语法是以下: {<ph id="ph1">\[</ph>可选类型转换<ph id="ph2">\]</ph>name(sequence-spec, for example <bpt id="p1">*</bpt>):example-值}。一个示例是 {PersonInfo<ept id="p1">*</ept>: {名称︰ Patti Fuller}。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>-TemplateFile</source>
          <target state="translated">-TemplateFile</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Specifies a file, as an array, that contains a template for the desired parsing of the string.</source>
          <target state="translated">指定一个文件中，为一个数组，包含字符串的所需的分析的模板。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the template file, properties and their values are enclosed in brackets, as shown in the following example.</source>
          <target state="translated">在模板文件中，属性和它们的值括在方括号内，如下面的示例中所示。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If a property, such as the Name property and its associated other properties, appears multiple times, you can add an asterisk (*) to indicate that this results in multiple records.</source>
          <target state="translated">如果一个属性，如名称属性和及其关联其他属性，将出现多次，您可以添加一个星号 （*） 以指示，这会导致多个记录。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This avoids extracting multiple properties into a single record.</source>
          <target state="translated">这样可以避免提取到单个记录的多个属性。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>{Name*:David Chew}</source>
          <target state="translated">{Name*:David 要}</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>{City:Redmond}, {State:WA}</source>
          <target state="translated">{City: Redmond} {状态︰ WA}</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>{Name*:Evan Narvaez}</source>
          <target state="translated">{Name*:Evan Narvaez}</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>{City:Issaquah}, {State:WA}</source>
          <target state="translated">{City︰ 依萨跨}，{状态︰ WA}</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>-UpdateTemplate</source>
          <target state="translated">-UpdateTemplate</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet saves the results of a learning algorithm into a comment in the template file.</source>
          <target state="translated">指示此 cmdlet 将学习算法的结果保存到模板文件中的注释。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This makes the algorithm learning process faster.</source>
          <target state="translated">这使得更快地学习过程的算法。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To use this parameter, you must also specify a template file with the <bpt id="p1">*</bpt>TemplateFile<ept id="p1">*</ept> parameter.</source>
          <target state="translated">若要使用此参数，还必须指定模板文件与 <bpt id="p1">*</bpt>TemplateFile<ept id="p1">*</ept> 参数。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">此 cmdlet 支持以下常见参数:-调试-ErrorAction、-ErrorVariable、-InformationAction、-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 和-WarningVariable。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">有关详细信息，请参阅 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">输入</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">输出</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相关的链接</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>ConvertFrom-String: Example-based text parsing</source>
          <target state="translated">ConvertFrom 字符串︰ 基于示例的文本分析</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ConvertFrom-StringData</source>
          <target state="translated">ConvertFrom-StringData</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>ConvertTo-Xml</source>
          <target state="translated">ConvertTo-Xml</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>