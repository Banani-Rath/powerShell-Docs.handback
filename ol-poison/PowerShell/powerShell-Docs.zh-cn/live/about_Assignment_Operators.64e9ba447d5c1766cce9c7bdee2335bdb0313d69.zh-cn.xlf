<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c66ac9b0e5d3eaf2ab29827a741bd4d460f748d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\3.0\Microsoft.PowerShell.Core\About\about_Assignment_Operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0408961504538457bd5408cc96202d6a659c44f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c403214c5d4507878e0a7e6bf398e5fc7b9e4c11</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Assignment Operators</source>
          <target state="translated">有关赋值运算符</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators</source>
          <target state="translated">about_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>about_assignment_operators</source>
          <target state="translated">about_assignment_operators</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">简短说明</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describes how to use operators to assign values to variables.</source>
          <target state="translated">描述如何使用运算符将值分配给变量。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">详细说明</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Assignment operators assign one or more values to a variable.</source>
          <target state="translated">赋值运算符将一个或多个值分配给一个变量。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They can perform numeric operations on the values before the assignment.</source>
          <target state="translated">他们可以执行在赋值之前的值的数字运算。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell supports the following assignment operators.</source>
          <target state="translated">Windows PowerShell 支持以下赋值运算符。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Operator  Description</source>
          <target state="translated">运算符说明</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>=         Sets the value of a variable to the specified value.</source>
          <target state="translated">= 将一个变量的值设置为指定的值。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>+=        Increases the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">+ = 增加变量的值按指定的值，或将指定的值追加到现有的值。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>-=        Decreases the value of a variable by the specified value.</source>
          <target state="translated">-= 减少通过指定的值的变量的值。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>*=        Multiplies the value of a variable by the specified value, or appends the specified value to the existing value.</source>
          <target state="translated">* = 相乘变量的值按指定的值，或将指定的值追加到现有的值。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>/=        Divides the value of a variable by the specified value.</source>
          <target state="translated">/ = 指定的值的变量值除以。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>%=        Divides the value of a variable by the specified value and then assigns the remainder (modulus) to the variable.</source>
          <target state="translated">%= 指定的值的变量值除以，然后将余数 （取模） 赋给变量。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>++        Increases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">+ + 中按 1 递增的变量，可分配的属性或数组元素的值。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>--        Decreases the value of a variable, assignable property, or array element by 1.</source>
          <target state="translated">-按 1 递减的变量，可分配的属性或数组元素的值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The syntax of the assignment operators is as follows:</source>
          <target state="translated">赋值运算符的语法是，如下所示︰</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt; &lt;assignment-operator&gt;</source>
          <target state="translated">&lt; 可赋值的表达式 &gt;&lt; 赋值运算符 &gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Assignable expressions include variables and properties.</source>
          <target state="translated">赋值表达式包含变量和属性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The value can be a single value, an array of values, or a command, expression, or statement.</source>
          <target state="translated">值可以是单个值、 数组值，或命令、 表达式或语句。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The increment and decrement operators are unary operators.</source>
          <target state="translated">递增和递减运算符都是一元运算符。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each has prefix and postfix versions.</source>
          <target state="translated">每个具有前缀和后缀的版本。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&lt;assignable-expression&gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt;assignable-expression&gt;</source>
          <target state="translated">&lt; 可赋值表达式 &gt;<ph id="ph1">&lt;operator&gt;
&lt;operator&gt;</ph>&lt; 赋值表达式 &gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The assignable expression must a number or it must be convertible to a number.</source>
          <target state="translated">赋值表达式必须是数字或它必须能够转换为一个数字。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ASSIGNING VALUES</source>
          <target state="translated">将值分配</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Variables are named memory spaces that store values.</source>
          <target state="translated">变量命名为存储值的内存空间。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You store the values in variables by using the assignment operator (=).</source>
          <target state="translated">通过使用赋值运算符 （=），可以在变量中存储的值。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The new value can replace the existing value of the variable, or you can append a new value to the existing value.</source>
          <target state="translated">新的值可以替换现有变量的值，或者可以将新值追加到现有的值。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The basic assignment operator is the equal sign (=)(ASCII 61).</source>
          <target state="translated">基本的赋值运算符是等号 （=） (ASCII 61)。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, the following statement assigns the value Windows PowerShell to the $MyShell variable:</source>
          <target state="translated">例如，下面的语句会将 Windows PowerShell 的值分配给 $MyShell 变量中︰</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>$MyShell = "Windows PowerShell"</source>
          <target state="translated">$MyShell ="Windows PowerShell"</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you assign a value to a variable in Windows PowerShell, the variable is created if it did not already exist.</source>
          <target state="translated">当给 Windows PowerShell 中的变量赋值的变量被创建如果尚不存在。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the first of the following two assignement statements creates the $a variable and assigns a value of 6 to $a.</source>
          <target state="translated">例如，下面的两个 assignement 语句的第一个创建 $a 变量并为 $ 分配的值为 6。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The second assignment statement assigns a value of 12 to $a.</source>
          <target state="translated">第二个赋值语句将其值为 12 分配给 $。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The first statement creates a new variable.</source>
          <target state="translated">第一条语句创建一个新变量。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The second statement changes only its value:</source>
          <target state="translated">第二个语句更改它的值︰</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>$a = 6 $a = 12</source>
          <target state="translated">$ = 6 $ = 12</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Variables in Windows PowerShell do not have a specific data type unless you cast them.</source>
          <target state="translated">Windows PowerShell 中的变量没有特定的数据类型，除非将其强制转换。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When a variable contains only one object, the variable takes the data type of that object.</source>
          <target state="translated">当变量包含只有一个对象时，则变量采用该对象的数据类型。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When a variable contains a collection of objects, the variable has the System.Object data type.</source>
          <target state="translated">当某个变量包含的对象的集合时，该变量将具有 System.Object 数据类型。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Therefore, you can assign any type of object to the collection.</source>
          <target state="translated">因此，您可以将任何类型的对象分配给集合。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example shows that you can add process objects, service objects, strings, and integers to a variable without generating an error:</source>
          <target state="translated">下面的示例演示，您可以添加进程对象、 服务对象、 字符串和整数变量而不会生成一个错误︰</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>$a = get-process $a += get-service $a += "string" $a += 12</source>
          <target state="translated">$ = 获取进程 $ + = get 服务 $ + ="string"$a + = 12</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because the assignment operator (=) has a lower precedence than the pipeline operator (|), parentheses are not required to assign the result of a command pipeline to a variable.</source>
          <target state="translated">由于赋值运算符 （=） 具有优先级低于管道运算符 (|)，不需要使用圆括号命令管道的结果赋给变量。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, the following command sorts the services on the computer and then assigns the sorted services to the $a variable:</source>
          <target state="translated">例如，以下命令进行排序的计算机上的服务，并会将已排序的服务分配给 $a 变量︰</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$a = get-service | sort name</source>
          <target state="translated">$ = get service |名称排序</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also assign the value created by a statement to a variable, as in the following example:</source>
          <target state="translated">你还可以分配给一个变量，如以下示例所示的语句创建的值︰</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>$a = if ($b -lt 0) { 0 } else { $b }</source>
          <target state="translated">$ = if ($b lt 0) {0} else {$b}</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example assigns 0 to the $a variable if the value of $b is less than 0.</source>
          <target state="translated">如果 $b 的值小于 0，此示例将 0 分配给 $a 变量中。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It assigns the value of $b to $a if the value of $b is not less than zero.</source>
          <target state="translated">它将 $b 到 $a if 的值的值的 $b 不小于零。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT OPERATOR (=)</source>
          <target state="translated">赋值运算符 （=）</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The assignment operator (=) assigns values to variables.</source>
          <target state="translated">赋值运算符 （=） 将值赋给变量。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the variable already has a value, the assignment operator (=) replaces the value without warning.</source>
          <target state="translated">如果该变量已经具有值，赋值运算符 （=） 将替换的值而不发出警告。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following statement assigns the integer value 6 to the $a variable:</source>
          <target state="translated">下面的语句将 6 的整数值分配给 $a 变量中︰</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$ = 6</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To assign a string value to a variable, enclose the string value in quotation marks, as follows:</source>
          <target state="translated">若要将一个字符串值分配给一个变量，请将包含的字符串值中引号引起来，如下所示︰</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>$a = "baseball"</source>
          <target state="translated">a ="棒球"$</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To assign an array (multiple values) to a variable, separate the values with commas, as follows:</source>
          <target state="translated">若要分配给一个变量数组 （多个值），用逗号分隔值，，如下所示︰</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>$a = "apple", "orange", "lemon", "grape"</source>
          <target state="translated">$a ="apple"、"橙色"、"柠檬"、"grape"</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To assign a hash table to a variable, use the standard hash table notation in Windows PowerShell.</source>
          <target state="translated">若要将哈希表分配给一个变量，请使用 Windows PowerShell 中使用标准的哈希表表示法。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Type an at sign (@) followed by key/value pairs that are separated by semicolons (;) and enclosed in braces ({ }).</source>
          <target state="translated">类型 at 符号 (@) 后跟分号 （;） 分隔的键/值对，并且括在大括号 （{}）。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, to assign a hash table to the $a variable, type:</source>
          <target state="translated">例如，若要将哈希表分配给 $a 变量中，键入︰</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>$a = @{one=1; two=2; three=3}</source>
          <target state="translated">$ = @{一个 = 1; 两个 = 2; 三个 = 3}</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To assign hexadecimal values to a variable, precede the value with "0x".</source>
          <target state="translated">若要将十六进制值分配给一个变量，请在之前的值与"0x"。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Windows PowerShell converts the hexadecimal value (0x10) to a decimal value (in this case, 16) and assigns that value to the $a variable.</source>
          <target state="translated">Windows PowerShell 的十六进制值 (0x10) 转换为十进制值 （在本例中为 16），并将该值分配给 $a 变量。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 0x10 to the $a variable, type:</source>
          <target state="translated">例如，若要将 0x10 值分配给 $a 变量中，键入︰</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>$a = 0x10</source>
          <target state="translated">$ = 0x10</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To assign an exponential value to a variable, type the root number, the letter "e", and a number that represents a multiple of 10.</source>
          <target state="translated">若要将指数值分配给一个变量，请键入根数字、 字母"e"和一个数字来表示 10 的倍数。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 3.1415 to the power of 1,000 to the $a variable, type:</source>
          <target state="translated">例如，若要将 3.1415 值分配到一个变量 $ 1000 的次幂，请键入︰</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>$a = 3.1415e3</source>
          <target state="translated">$ = 3.1415e3</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Windows PowerShell can also convert kilobytes (KB), megabytes (MB), and gigabytes (GB) into bytes.</source>
          <target state="translated">Windows PowerShell 还可以将转换千字节 (KB)、 兆字节 (MB) 和千兆字节 (GB) 转换为字节。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, to assign a value of 10 kilobytes to the $a variable, type:</source>
          <target state="translated">例如，若要将 10 千字节为单位的值分配给 $a 变量中，键入︰</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>$a = 10kb</source>
          <target state="translated">$ = 10 kb</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY ADDITION OPERATOR (+=)</source>
          <target state="translated">加法运算符 （+ =） 的赋值</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The assignment by addition operator (+=) either increments the value of a variable or appends the specified value to the existing value.</source>
          <target state="translated">加法运算符 （+ =） 的赋值变量的值递增，或将指定的值追加到现有的值。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The action depends on whether the variable has a numeric or string type and whether the variable contains a single value (a scalar) or multiple values (a collection).</source>
          <target state="translated">操作取决于是否变量具有数值或字符串类型，并且此变量是否包含单个值 （标量） 或使用多个值 （集合）。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The += operator combines two operations.</source>
          <target state="translated">+ = 运算符组合了两个操作。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>First, it adds, and then it assigns.</source>
          <target state="translated">首先，它添加，然后将分配。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">因此，以下语句是等效的︰</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>$a += 2 $a = ($a + 2)</source>
          <target state="translated">$a = 2 + = $ ($ + 2)</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When the variable contains a single numeric value, the += operator increments the existing value by the amount on the right side of the operator.</source>
          <target state="translated">当变量包含一个单一的数值时，+ = 运算符会将现有的值递增运算符的右侧量。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Then, the operator assigns the resulting value to the variable.</source>
          <target state="translated">然后，该运算符将所得到的值分配给该变量。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the += operator to increase the value of a variable:</source>
          <target state="translated">下面的示例演示如何使用 + = 运算符来增加变量的值︰</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 4 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 4 C:\PS &gt; $ + = 2 C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When the value of the variable is a string, the value on the right side of the operator is appended to the string, as follows:</source>
          <target state="translated">一个字符串，该变量的值时，运算符右侧的值追加到该字符串，如下所示︰</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "Windows" C:\PS&gt; $a += " PowerShell" C:\PS&gt; $a Windows PowerShell</source>
          <target state="translated">C:\PS &gt; $a ="Windows"C:\PS &gt; $a + ="PowerShell"C:\PS &gt; $ Windows PowerShell</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When the value of the variable is an array, the += operator appends the values on the right side of the operator to the array.</source>
          <target state="translated">当变量的值是一个数组时，+ = 运算符将该运算符右侧的值追加到数组。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Unless the array is explicitly typed by casting, you can append any type of value to the array, as follows:</source>
          <target state="translated">除非通过强制转换，显式类型化数组，可以如下所示将任何类型的值附加到该数组︰</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a += 2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 1,2,3 C:\PS &gt; $ + = 2 C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a += "String" C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $a + ="String"C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">字符串</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When the value of a variable is a hash table, the += operator appends the value on the right side of the operator to the hash table.</source>
          <target state="translated">哈希表变量的值时，+ = 运算符将该运算符右侧的值追加到哈希表。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, because the only type that you can add to a hash table is another hash table, all other assignments fail.</source>
          <target state="translated">但是，由于您可以将其添加到哈希表的唯一类型是另一个哈希表，所有其他分配将失败。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a hash table to the $a variable.</source>
          <target state="translated">例如，以下命令将哈希表分配给 $a 变量中。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Then, it uses the += operator to append another hash table to the existing hash table, effectively adding a new key/value pair to the existing hash table.</source>
          <target state="translated">然后，它使用 + = 运算符以将另一个哈希表追加到现有的哈希表中，有效地将新的键/值对添加到现有的哈希表。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This command succeeds, as shown in the output:</source>
          <target state="translated">此命令成功执行，如输出所示︰</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += @{mode = "write"} C:\PS&gt; $a Name                           Value</source>
          <target state="translated">C:\PS &gt; $ = @{= 1，b = 2; c = 3} C:\PS &gt; $a + = @{模式 ="写入"} C:\PS &gt; $a 名称值</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>a                              1 b                              2 mode                           write c                              3</source>
          <target state="translated">a                              1 b                              2 mode                           write c                              3</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following command attempts to append an integer (1) to the hash table in the $a variable.</source>
          <target state="translated">下面的命令尝试将追加一个整数 (1) 到 $a 变量中的哈希表。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This command fails:</source>
          <target state="translated">此命令将失败︰</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = @{a = 1; b = 2; c = 3} C:\PS&gt; $a += 1 You can add another hash table only to a hash table.</source>
          <target state="translated">C:\PS &gt; $ = @{= 1，b = 2; c = 3} C:\PS &gt; $a + = 1 只能向一个哈希表中添加另一个哈希表。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>At line:1 char:6</source>
          <target state="translated">在行︰ 1 char: 6</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>$a += &lt;&lt;&lt;&lt;  1</source>
          <target state="translated">$a + = &lt;&lt;&lt;&lt; 1</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY SUBTRACTION OPERATOR (-=)</source>
          <target state="translated">减法运算符 （-） 的赋值</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The assignment by subtraction operator (-=) decrements the value of a variable by the value that is specified on the right side of the operator.</source>
          <target state="translated">减法运算符 （-） 递减的赋值运算符右侧指定的值的变量的值。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This operator cannot be used with string variables, and it cannot be used to remove an element from a collection.</source>
          <target state="translated">此运算符不能使用字符串变量，它不能用于从集合中移除一个元素。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The -= operator combines two operations.</source>
          <target state="translated">-= 运算符组合了两个操作。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>First, it subtracts, and then it assigns.</source>
          <target state="translated">首先，相减，，然后将分配。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">因此，以下语句是等效的︰</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>$a -= 2 $a = ($a - 2)</source>
          <target state="translated">$a-= 2 $a = （$a-2）</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following example shows how to use of the -= operator to decrease the value of a variable:</source>
          <target state="translated">下面的示例演示如何使用-= 运算符的以减小变量的值︰</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a -= 2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 8 C:\PS &gt; $a-= 2 C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You can also use the -= assignment operator to decrease the value of a member of a numeric array.</source>
          <target state="translated">-= 赋值运算符还可以用于减小的数值数组成员的值。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To do this, specify the index of the array element that you want to change.</source>
          <target state="translated">若要执行此操作，指定你想要更改的数组元素的索引。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the third element of an array (element 2) is decreased by 1:</source>
          <target state="translated">在下面的示例中，第三个元素数组 （元素 2） 的值减少 1:</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a[2] -= 1.</source>
          <target state="translated">C:\PS &gt; $ = 1,2,3 C:\PS &gt; $[2]-= 1。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You cannot use the -= operator to delete the values of a variable.</source>
          <target state="translated">-= 运算符不能用于删除对变量的值。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To delete all the values that are assigned to a variable, use the Clear-Item or Clear-Variable cmdlets to assign a value of $null or "" to the variable.</source>
          <target state="translated">若要删除所有分配给变量的值，使用 Clear-item 或 Clear-variable cmdlet 赋值 $null 或""给该变量。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>$a = $null</source>
          <target state="translated">$ = $null</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To delete a particular value from an array, use array notation to assign a value of $null to the particular item.</source>
          <target state="translated">若要从数组中删除特定值，使用数组表示法将 $null 值分配给特定的项。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For example, the following statement deletes the second value (index position 1) from an array:</source>
          <target state="translated">例如，下面的语句删除第二个值 （索引位置 1） 从一个数组︰</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 1,2,3 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 1,2,3 C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a[1] = $null C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $[1] = $null C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To delete a variable, use the Remove-Variable cmdlet.</source>
          <target state="translated">若要删除某个变量，使用删除 Remove-variable cmdlet。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This method is useful when the variable is explicitly cast to a particular data type, and you want an untyped variable.</source>
          <target state="translated">该变量被显式强制转换为特定的数据类型，并希望非类型化的变量时，此方法很有用。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following command deletes the $a variable:</source>
          <target state="translated">下面的命令删除 $a 变量︰</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>remove-variable a</source>
          <target state="translated">删除变量</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY MULTIPLICATION OPERATOR (*=)</source>
          <target state="translated">乘法运算符的赋值 (* =)</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The assignment by multiplication operator (*=) multiplies a numeric value or appends the specified number of copies of the string value of a variable.</source>
          <target state="translated">乘法运算符的赋值 (* =) 相乘的数字值或将追加指定的变量的字符串值的副本数。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When a variable contains a single numeric value, that value is multiplied by the value on the right side of the operator.</source>
          <target state="translated">当变量包含一个数字值时，该值乘以运算符右侧的值。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For example, the following example shows how to use the *= operator to multiply the value of a variable:</source>
          <target state="translated">例如，下面的示例演示如何使用 * = 运算符将相乘变量的值︰</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a *= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 3 C:\PS &gt; $ * = 4 C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In this case, the *= operator combines two operations.</source>
          <target state="translated">在这种情况下，* = 运算符组合两个操作。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>First, it multiplies, and then it assigns.</source>
          <target state="translated">首先，它执行乘法运算，，然后将分配。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">因此，以下语句是等效的︰</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</source>
          <target state="translated">$a <bpt id="p1">*</bpt>= 2 $a = ($a <ept id="p1">*</ept> 2)</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When a variable contains a string value, Windows PowerShell appends the specified number of strings to the value, as follows:</source>
          <target state="translated">当变量包含一个字符串值时，Windows PowerShell 将追加字符串的指定的数量的值，如下所示︰</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a *= 4 C:\PS&gt; $a filefilefilefile</source>
          <target state="translated">C:\PS &gt; $a ="文件"C:\PS &gt; $ * = 4 C:\PS &gt; $a filefilefilefile</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>To multiply an element of an array, use an index to identify the element that you want to multiply.</source>
          <target state="translated">要相乘的数组元素，使用索引来标识要进行乘法运算的元素。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For example, the following command multiplies the first element in the array (index position 0) by 2:</source>
          <target state="translated">例如，以下命令将相乘数组中的第一个元素 （索引位置 0） 2:</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>$a[0] *= 2</source>
          <target state="translated">$a [0] * = 2</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>THE ASSIGNMENT BY DIVISION OPERATOR (/=)</source>
          <target state="translated">除法运算符的赋值 （/ =）</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The assignment by division operator (/=) divides a numeric value by the value that is specified on the right side of the operator.</source>
          <target state="translated">除法运算符的赋值 （/ =） 将划分运算符右侧指定的值的数字值。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The operator cannot be used with string variables.</source>
          <target state="translated">运算符不能用于字符串变量。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The /= operator combines two operations.</source>
          <target state="translated">/ = 运算符组合两个操作。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>First, it divides, and then it assigns.</source>
          <target state="translated">首先，它会将划分，，然后将分配。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Therefore, the following two statements are equivalent:</source>
          <target state="translated">因此，以下两个语句是等效的︰</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>$a /= 2 $a = ($a / 2)</source>
          <target state="translated">$ / = 2 a = $ ($ / 2)</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For example, the following command uses the /= operator to divide the value of a variable:</source>
          <target state="translated">例如，以下命令使用 / = 运算符将变量的值︰</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 8 C:\PS&gt; $a /=2 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 8 C:\PS &gt; $ / = 2 C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To divide an element of an array, use an index to identify the element that you want to change.</source>
          <target state="translated">若要将一个数组中的元素，使用索引来标识您想要更改的元素。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, the following command divides the second element in the array (index position 1) by 2:</source>
          <target state="translated">例如，以下命令将划分数组中的第二个元素 (1） 的 2 的索引位置︰</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>$a[1] /= 2</source>
          <target state="translated">$a [1] / = 2</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>THE  ASSIGNMENT BY MODULUS OPERATOR (%=)</source>
          <target state="translated">取模运算符的赋值 (%=)</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The assignment by modulus operator (%=) divides the value of a variable by the value on the right side of the operator.</source>
          <target state="translated">取模运算符的赋值 (%=) 运算符右侧的值的变量值除以。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Then, the %= operator assigns the remainder (known as the modulus) to the variable.</source>
          <target state="translated">然后，%= 运算符分配给该变量 （称为取模） 的其余部分。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You can use this operator only when a variable contains a single numeric value.</source>
          <target state="translated">只有当变量包含一个单一的数值时，可以使用此运算符。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You cannot use this operator when a variable contains a string variable or an array.</source>
          <target state="translated">当变量包含一个字符串变量或数组时，不能使用此运算符。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The %= operator combines two operations.</source>
          <target state="translated">%= 运算符组合两个操作。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>First, it divides and determines the remainder, and then it assigns the remainder to the variable.</source>
          <target state="translated">首先，它将拆分，确定其余部分中，，然后将余数赋给变量。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Therefore, the following statements are equivalent:</source>
          <target state="translated">因此，以下语句是等效的︰</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>$a %= 2 $a = ($a % 2)</source>
          <target state="translated">$ %a = 2 $a = （$a %2）</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the %= operator to save the modulus of a quotient:</source>
          <target state="translated">下面的示例演示如何使用 %= 运算符以保存其模数的商︰</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $a %= 4 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 7 C:\PS &gt; $ %a = 4 C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>THE INCREMENT AND DECREMENT OPERATORS</source>
          <target state="translated">递增和递减运算符</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The increment operator (++) increases the value of a variable by 1.</source>
          <target state="translated">递增运算符 （+ +） 按 1 递增变量的值。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When you use the increment operator in a simple statement, no value is returned.</source>
          <target state="translated">当在一个简单的语句中使用递增运算符时，则不返回任何值。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>To view the result, display the value of the variable, as follows:</source>
          <target state="translated">若要查看结果，显示该变量的值，如下所示︰</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 7 C:\PS &gt; + + $a C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To force a value to be returned, enclose the variable and the operator in parentheses, as follows:</source>
          <target state="translated">若要强制返回一个值，该变量和运算符用括号括起来，，如下所示︰</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; (++$a)</source>
          <target state="translated">C:\PS &gt; $ = 7 C:\PS &gt; (+ + $)</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The increment operator can be placed before (prefix) or after (postfix) a variable.</source>
          <target state="translated">递增运算符可以放置在 （前缀） 之前或之后 （后缀） 变量。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator increments a variable before its value is used in the statement, as follows:</source>
          <target state="translated">运算符的前缀版本递增变量，其使用的值之前的语句中，如下所示︰</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = ++$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 7 C:\PS &gt; $c = + + $a C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\PS &gt; $c</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator increments a variable after its value is used in the statement.</source>
          <target state="translated">运算符的后缀版本之后的语句中使用它的值递增一个变量。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In the following example, the $c and $a variables have different values because the value is assigned to $c before $a changes:</source>
          <target state="translated">在下面的示例中，$c 和 $ 变量具有不同的值，因为该值分配给 $ 之前 $c 更改︰</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = $a++ C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 7 C:\PS &gt; $c = C:\PS + + 中的 $&gt; $</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\PS &gt; $c</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The decrement operator (--) decreases the value of a variable by 1.</source>
          <target state="translated">减量运算符 （-） 按 1 递减的变量的值。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>As with the increment operator, no value is returned when you use the operator in a simple statement.</source>
          <target state="translated">作为与递增运算符，不返回任何值时在一个简单的语句中使用运算符。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Use parentheses to return a value, as follows:</source>
          <target state="translated">使用括号来返回一个值，如下所示︰</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; --$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 7 C:\PS &gt;-$a C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (--$a)</source>
          <target state="translated">C:\PS &gt; (-$)</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The prefix version of the operator decrements a variable before its value is used in the statement, as follows:</source>
          <target state="translated">将变量之前其值，如下所示使用在语句中，运算符减前缀版本︰</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $c = --$a C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 7 C:\PS &gt; $c =-$a C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $c</source>
          <target state="translated">C:\PS &gt; $c</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The postfix version of the operator decrements a variable after its value is used in the statement.</source>
          <target state="translated">将变量后其值在语句中使用运算符减后缀版本。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>In the following example, the $d and $a variables have different values because the value is assigned to $d before $a changes:</source>
          <target state="translated">在下面的示例中，$d 和 $ 变量具有不同的值，因为该值分配给 $ 之前 $d 更改︰</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 7 C:\PS&gt; $d = $a-- C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 7 C:\PS &gt; $d-C:\PS = $&gt; $</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $d</source>
          <target state="translated">C:\PS &gt; $d</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>MICROSOFT .NET FRAMEWORK TYPES</source>
          <target state="translated">MICROSOFT.NET FRAMEWORK 类型</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>By default, when a variable has only one value, the value that is assigned to the variable determines the data type of the variable.</source>
          <target state="translated">默认情况下，当变量具有只有一个值，赋给变量的值将确定该变量的数据类型。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For example, the following command creates a variable that has the Integer (System.Int32) type:</source>
          <target state="translated">例如，以下命令将创建具有整数 (System.Int32) 类型的变量︰</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>$a = 6</source>
          <target state="translated">$ = 6</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>To find the .NET Framework type of a variable, use the GetType method and its FullName property, as follows.</source>
          <target state="translated">若要查找的.NET Framework 类型的变量，使用 GetType 方法和其 FullName 属性，如下所示。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Be sure to include the parentheses after the GetType method name, even though the method call has no arguments:</source>
          <target state="translated">即使该方法调用不具有任何参数，则请务必包含 GetType 方法名称，后面的括号︰</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a.gettype().fullname System.Int32</source>
          <target state="translated">C:\PS &gt; $ = 6 C:\PS &gt; $a.gettype （).fullname System.Int32</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>To create a variable that contains a string, assign a string value to the variable.</source>
          <target state="translated">若要创建包含一个字符串的变量，分配给该变量的字符串值。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>To indicate that the value is a string, enclose it in quotation marks, as follows:</source>
          <target state="translated">若要指示该值是一个字符串，将其括在引号内，如下所示︰</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "6" C:\PS&gt; $a.gettype().fullname System.String</source>
          <target state="translated">C:\PS &gt; $ ="6"C:\PS &gt; $a.gettype （).fullname System.String</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>If the first value that is assigned to the variable is a string, Windows PowerShell treats all operations as string operations and casts new values to strings.</source>
          <target state="translated">如果第一个分配给变量的值是字符串，Windows PowerShell 将视为字符串的操作的所有操作，并将强制转换为字符串的新值。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">此错误出现在下面的示例︰</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "file" C:\PS&gt; $a += 3 C:\PS&gt; $a file3</source>
          <target state="translated">C:\PS &gt; $a ="文件"C:\PS &gt; $a + 3 = C:\PS &gt; $a 文件 3</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If the first value is an integer, Windows PowerShell treats all operations as integer operations and casts new values to integers.</source>
          <target state="translated">如果第一个值是一个整数，Windows PowerShell 将所有操作视为整数运算，并将强制转换为整数的新值。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This occurs in the following example:</source>
          <target state="translated">此错误出现在下面的示例︰</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 6 C:\PS&gt; $a += "3" C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; $ = 6 C:\PS &gt; $ + ="3"C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>You can cast a new scalar variable as any .NET Framework type by placing the type name in brackets that precede either the variable name or the first assignment value.</source>
          <target state="translated">通过将类型名称放在方括号内的变量名称或第一个分配值之前，可将新的标量变量转换为任何.NET Framework 类型。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>When you cast a variable, you can determine the types of data that can be stored in the variable.</source>
          <target state="translated">当强制转换一个变量时，您可以确定可以在变量中存储的数据类型。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>And, you can determine how the variable behaves when you manipulate it.</source>
          <target state="translated">而且，您可以确定该变量时对其进行操作的行为。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string type:</source>
          <target state="translated">例如，以下命令将该变量转换为字符串类型︰</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = 27 C:\PS&gt; $a += 3 C:\PS&gt; $a</source>
          <target state="translated">C:\PS &gt; [string] $ = 27 C:\PS &gt; $a + 3 = C:\PS &gt; $</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>273</source>
          <target state="translated">273</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The following example casts the first value, instead of casting the variable:</source>
          <target state="translated">下面的示例将转换的第一个值，而不是强制转换该变量︰</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>$a = [string]27</source>
          <target state="translated">a = [string] 27 $</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>When you cast a variable to a specific type, the common convention is to cast the variable, not the value.</source>
          <target state="translated">当强制转换为特定类型的变量时，常见的约定是转换该变量，而不是值。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>However, you cannot recast the data type of an existing variable if its value cannot be converted to the new data type.</source>
          <target state="translated">但是，如果其值无法转换为新的数据类型不能强制转换现有变量的数据类型。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>To change the data type, you must replace its value, as follows:</source>
          <target state="translated">若要更改的数据类型，必须如下所示替换其值︰</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = "string" C:\PS&gt; [int]$a Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\PS &gt; $a ="string"C:\PS &gt; [int] $ 无法将值"string"类型"System.Int32"转换。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">错误:"输入字符串未采用正确的格式。"</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>At line:1 char:8</source>
          <target state="translated">在行︰ 1 char: 8</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>[int]$a &lt;&lt;&lt;&lt;</source>
          <target state="translated">[int] $ &lt;&lt;&lt;&lt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a =3</source>
          <target state="translated">C:\PS &gt; [int] $ = 3</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In addition, when you precede a variable name with a data type, the type of that variable is locked unless you explicitly override the type by specifying another data type.</source>
          <target state="translated">此外，当您的变量名在前面加上一种数据类型，该变量的类型将锁定，除非显式指定另一种数据类型替代的类型。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If you try to assign a value that is incompatible with the existing type, and you do not explicitly override the type, Windows PowerShell displays an error, as shown in the following example:</source>
          <target state="translated">如果您尝试将分配一个值，与现有类型不兼容，并且您不显式重写类型，Windows PowerShell 会显示错误，如下面的示例中所示︰</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a = 3 C:\PS&gt; $a = "string"</source>
          <target state="translated">C:\PS &gt; $ = 3 C:\PS &gt; $a ="string"</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [int]$a = 3 C:\PS&gt; $a = "string" Cannot convert value "string" to type "System.Int32".</source>
          <target state="translated">C:\PS &gt; [int] $ = 3 C:\PS &gt; $a ="string"无法将值"string"类型"System.Int32"转换。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Error: "Input string was not in a correct format."</source>
          <target state="translated">错误:"输入字符串未采用正确的格式。"</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>At line:1 char:3</source>
          <target state="translated">在第 3 行︰ 1 char:</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>$a &lt;&lt;&lt;&lt;  = "string"</source>
          <target state="translated">$ &lt;&lt;&lt;&lt; ="string"</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]$a = "string"</source>
          <target state="translated">C:\PS &gt; [string] $a ="string"</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, the data types of variables that contain multiple items in an array are handled differently from the data types of variables that contain a single item.</source>
          <target state="translated">在 Windows PowerShell 变量，其中包含数组中的多个项目的数据类型的处理以不同的方式从包含单个项的变量的数据类型。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Unless a data type is specifically assigned to an array variable, the data type is always System.Object [].</source>
          <target state="translated">除非专门分配到一个数组变量数据类型，数据类型始终是 System.Object []。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This data type is specific to arrays.</source>
          <target state="translated">此数据类型是特定于数组。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Sometimes, you can override the default type by specifying another type.</source>
          <target state="translated">有时，您可以通过指定另一种类型覆盖默认类型。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For example, the following command casts the variable as a string [] array type:</source>
          <target state="translated">例如，以下命令将该变量转换为 string [] 数组类型︰</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>[string []] $a = "one", "two", "three"</source>
          <target state="translated">[string []] $a"一"="2"、"3"</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Windows PowerShell variables can be any .NET Framework data type.</source>
          <target state="translated">Windows PowerShell 变量可以是任何.NET Framework 数据类型。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>In addition, you can assign any fully qualified .NET Framework data type that is available in the current process.</source>
          <target state="translated">此外，您可以分配任何完全限定的.NET Framework 数据类型在当前进程中可用。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For example, the following command specifies a System.DateTime data type:</source>
          <target state="translated">例如，以下命令指定 System.DateTime 数据类型︰</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>[system.datetime]$a = "5/31/2005"</source>
          <target state="translated">[system.datetime]$a ="2005 年 5 月 31 日"</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The variable will be assigned a value that conforms to the System.DateTime data type.</source>
          <target state="translated">该变量将分配一个值，符合为 System.DateTime 的数据类型。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The value of the $a variable would be the following:</source>
          <target state="translated">$A 变量的值应如下所示︰</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Tuesday, May 31, 2005 12:00:00 AM</source>
          <target state="translated">2005 年 5 月 31日日，星期二，12:00:00 AM</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>ASSIGNING MULTIPLE VARIABLES</source>
          <target state="translated">为多个变量赋值</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, you can assign values to multiple variables by using a single command.</source>
          <target state="translated">Windows PowerShell 中，可以使用单个命令将值分配给多个变量。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The first element of the assignment value is assigned to the first variable, the second element is assigned to the second variable, the third element to the third variable, and so on.</source>
          <target state="translated">分配值的第一个元素分配给第一个变量，第二个元素被分配给第二个变量，第三个元素到第三个变量，依此类推。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns the value 1 to the $a variable, the value 2 to the $b variable, and the value 3 to the $c variable:</source>
          <target state="translated">例如，以下命令将值分配 1 到 $ 变量、 $b 变量中，将值 2 和 $c 变量的值 3:</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; $a, $b, $c = 1, 2, 3</source>
          <target state="translated">C:\PS &gt; $a $b $c = 1、 2、 3</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>If the assignment value contains more elements than variables, all the remaining values are assigned to the last variable.</source>
          <target state="translated">如果分配值包含多个元素多于变量，所有剩余的值分配到最后一个变量。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>For example, the following command contains three variables and five values:</source>
          <target state="translated">例如，下面的命令包含三个变量和五个值︰</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>$a, $b, $c = 1, 2, 3, 4, 5</source>
          <target state="translated">$a $b $c = 1、 2、 3、 4、 5</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Therefore, Windows PowerShell assigns the value 1 to the $a variable and the value 2 to the $b variable.</source>
          <target state="translated">因此，Windows PowerShell 将分配给 $a 变量和值 2 的 $b 变量的值 1。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>It assigns the values 3, 4, and 5 to the $c variable.</source>
          <target state="translated">它将值 3、 4 和 5 分配给 $c 变量。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>To assign the values in the $c variable to three other variables, use the following format:</source>
          <target state="translated">若要将在 $c 变量的值分配给其他三个变量，请使用以下格式︰</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>$d, $e, $f = $c</source>
          <target state="translated">$d、 $e、 $f = $c</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This command assigns the value 3 to the $d variable, the value 4 to the $e variable, and the value 5 to the $f variable.</source>
          <target state="translated">此命令将分配到 $d 变量的值 3，值 4 转换为 $e 变量，并给 $f 变量的值 5。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>You can also assign a single value to multiple variables by chaining the variables.</source>
          <target state="translated">通过链接这些变量，还可以将单个值分配给多个变量。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>For example, the following command assigns a value of "three" to all four variables:</source>
          <target state="translated">例如，以下命令为指定值"三个"对所有四个变量︰</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>$a = $b = $c = $d = "three"</source>
          <target state="translated">$ = $b = $c = $d ="3"</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>VARIABLE-RELATED CMDLETS</source>
          <target state="translated">与变量相关的 CMDLET</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>In addition to using an assignment operation to set a variable value, you can also use the Set-Variable cmdlet.</source>
          <target state="translated">除了使用赋值操作来设置变量值，还可以使用 Set-variable cmdlet。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>For example, the following command uses Set-Variable to assign an array of 1, 2, 3 to the $a variable.</source>
          <target state="translated">例如，以下命令使用 Set-variable 将 1、 2、 3 数组分配给 $a 变量。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Set-Variable -name a -value 1, 2, 3</source>
          <target state="translated">设置变量的名称 a-值为 1，2，3</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>about_Arrays about_Hash_Tables about_Variables Clear-Variable Remove-Variable Set-Variable</source>
          <target state="translated">about_Arrays about_Hash_Tables about_Variables Clear-variable Remove-variable 设置变量</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>