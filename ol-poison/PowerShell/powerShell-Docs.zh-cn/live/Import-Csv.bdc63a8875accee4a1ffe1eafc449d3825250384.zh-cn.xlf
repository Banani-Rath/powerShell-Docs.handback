<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">548dca15dd70dfebe9727df1c119ab7ffc2adea6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\5.0\Microsoft.PowerShell.Utility\Import-Csv.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5f932097c81d7ca9e3483f238217e799f1e4d12</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ce7ab7313c2149b119b9e73db55cd3e63dc250a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">powershell cmdlet</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Import-Csv</source>
          <target state="translated">Import-Csv</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SYNOPSIS</source>
          <target state="translated">简述</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creates table-like custom objects from the items in a CSV file.</source>
          <target state="translated">从 CSV 文件中的项创建类似表的自定义对象。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>SYNTAX</source>
          <target state="translated">语法</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Delimiter (Default)</source>
          <target state="translated">分隔符 （默认值）</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>UseCulture</source>
          <target state="translated">UseCulture</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet creates table-like custom objects from the items in CSV files.</source>
          <target state="translated"> <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> cmdlet 从 CSV 文件中的项创建类似表的自定义对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each column in the CSV file becomes a property of the custom object and the items in rows become the property values.</source>
          <target state="translated">CSV 文件中的每一列将成为自定义对象的属性，并且行中的项将成为属性值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> works on any CSV file, including files that are generated by the Export-Csv cmdlet.</source>
          <target state="translated"><bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 适用于任何 CSV 文件，包括由 Export-csv cmdlet 生成的文件。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use the parameters of the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to specify the column header row and the item delimiter, or direct <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> to use the list separator for the current culture as the item delimiter.</source>
          <target state="translated">您可以使用的参数 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> cmdlet 指定的列标题行和项分隔符，或直接 <bpt id="p2">**</bpt>导入 Csv<ept id="p2">**</ept> 要为当前区域性的列表分隔符用作项分隔符。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also use the ConvertTo-Csv and ConvertFrom-Csv cmdlets to convert objects to CSV strings (and back).</source>
          <target state="translated">您还可用于 ConvertTo Csv 和 ConvertFrom Csv cmdlet 将对象转换为 CSV 字符串 （和备份）。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These cmdlets are the same as the <bpt id="p1">**</bpt>Export-CSV<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> cmdlets, except that they do not deal with files.</source>
          <target state="translated">这些 cmdlet 将与相同 <bpt id="p1">**</bpt>EXPORT-CSV<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>导入 Csv<ept id="p2">**</ept> cmdlet，只不过它们并不处理的文件。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Beginning in Windows PowerShell 3.0, if a header row entry in a CSV file contains an empty or null value, Windows PowerShell inserts a default header row name and displays a warning message.</source>
          <target state="translated">从 Windows PowerShell 3.0 开始，如果 CSV 文件中的标题行条目包含空值或 null 值，则 Windows PowerShell 将插入默认标题行名称并显示一条警告消息。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In previous versions of Windows PowerShell, if a header row entry in a CSV file contains an empty or null value, the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> command fails.</source>
          <target state="translated">在以前版本的 Windows PowerShell 中，如果 CSV 文件中的标题行条目包含空或 null 值， <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 命令失败。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">示例</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example 1: Import process objects</source>
          <target state="translated">示例 1︰ 导入处理对象</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example shows how to export and then import a CSV file of process objects.</source>
          <target state="translated">此示例显示如何导出，然后将进程对象的 CSV 文件导入。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Process cmdlet to get the processes on the local computer.</source>
          <target state="translated">第一个命令使用 Get-Process cmdlet 来获取本地计算机上的进程。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It uses a pipeline operator (|) to send the process objects to the Export-Csv cmdlet, which exports the process objects to the Processes.csv file in the current directory.</source>
          <target state="translated">它使用管道运算符 (|) 将进程对象发送给 Export-csv cmdlet，后者将进程对象导出到当前目录中的 Processes.csv 文件。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to import the processes in the <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> file.</source>
          <target state="translated">第二个命令使用 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> cmdlet 导入的进程， <bpt id="p2">**</bpt>导入 Csv<ept id="p2">**</ept> 文件。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Then it saves the resulting process objects in the $P variable.</source>
          <target state="translated">然后它将生成的进程对象保存在 $P 变量中。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The third command uses a pipeline operator to pipe the imported objects to the Get-Member cmdlet.</source>
          <target state="translated">第三个命令使用管道运算符通过管道传递给 Get-member cmdlet 导入的对象。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The result shows that they are <bpt id="p1">**</bpt>CSV:System.Diagnostic.Process<ept id="p1">**</ept> objects, not the <bpt id="p2">**</bpt>System.Diagnostic.Process<ept id="p2">**</ept> objects that <bpt id="p3">**</bpt>Get-Process<ept id="p3">**</ept> returns.</source>
          <target state="translated">结果显示它们是 <bpt id="p1">**</bpt>csv: system.diagnostic.process<ept id="p1">**</ept> 对象，而不 <bpt id="p2">**</bpt>System.Diagnostic.Process<ept id="p2">**</ept> 对象 <bpt id="p3">**</bpt>Get-process<ept id="p3">**</ept> 返回。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Also, because there is no entry type in the formatting files for the CSV version of the process objects, these objects are not formatted in the same way that standard process objects are formatted.</source>
          <target state="translated">此外，由于 CSV 版本的进程对象的格式设置文件中没有任何条目类型，因此将不会采用与设置标准进程对象格式相同的方式设置这些对象的格式。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To display the objects, use the formatting cmdlets, such as Format-Table and Format-List, or pipe the objects to Out-GridView.</source>
          <target state="translated">若要显示对象，请使用格式化 cmdlet（例如 Format-Table 和 Format-List），或通过管道将对象传递给 Out-GridView。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example 2: Specify the delimiter</source>
          <target state="translated">示例 2︰ 指定的分隔符</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>Delimiter<ept id="p1">*</ept> parameter of the <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">此示例演示如何使用 <bpt id="p1">*</bpt>分隔符<ept id="p1">*</ept> 参数 <bpt id="p2">**</bpt>导入 Csv<ept id="p2">**</ept> cmdlet。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this example, the processes are exported to a file that uses a colon (:) as a delimiter.</source>
          <target state="translated">在此示例中，进程将导出到使用冒号 (:) 作为分隔符的文件中。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When importing, the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> file uses the <bpt id="p2">*</bpt>Delimiter<ept id="p2">*</ept> parameter to indicate the delimiter that is used in the file.</source>
          <target state="translated">在导入， <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 文件使用 <bpt id="p2">*</bpt>分隔符<ept id="p2">*</ept> 参数以指示文件中使用的分隔符。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Example 3: Specify the current culture for the delimiter</source>
          <target state="translated">示例 3︰ 指定分隔符的当前区域性</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter of the <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> cmdlet.</source>
          <target state="translated">此示例演示如何使用 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> 参数 <bpt id="p2">**</bpt>导入 Csv<ept id="p2">**</ept> cmdlet。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The first command imports the objects in the Processes.csv file into the $P variable.</source>
          <target state="translated">第一个命令将 Processes.csv 文件中的对象导入到 $P 变量中。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It uses the <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> parameter to direct <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> to use the list separator defined for the current culture.</source>
          <target state="translated">它使用 <bpt id="p1">*</bpt>UseCulture<ept id="p1">*</ept> 参数来指示 <bpt id="p2">**</bpt>导入 Csv<ept id="p2">**</ept> 使用为当前区域性定义的列表分隔符。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The second command displays the list separator for the current culture.</source>
          <target state="translated">第二个命令显示当前区域性的列表分隔符。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It uses the Get-Culture cmdlet to get the current culture.</source>
          <target state="translated">它使用 Get-culture cmdlet 获取当前区域性。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It uses the dot (.) method to get the TextInfo property of the current culture and the ListSeparator property of the object in TextInfo.</source>
          <target state="translated">它使用点法 (.) 获取当前区域性的 TextInfo 属性和 TextInfo 中的对象的 ListSeparator 属性。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this example, the command returns a comma.</source>
          <target state="translated">在此示例中，该命令返回一个逗号。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example 4: Change property names in an imported object</source>
          <target state="translated">示例 4︰ 将导入对象中的属性名更改</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This example shows how to use the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter of <bpt id="p2">**</bpt>Import-Csv<ept id="p2">**</ept> to change the names of properties in the resulting imported object.</source>
          <target state="translated">此示例演示如何使用 <bpt id="p1">*</bpt>标头<ept id="p1">*</ept> 参数 <bpt id="p2">**</bpt>导入 Csv<ept id="p2">**</ept> 更改生成的导入对象中的属性的名称。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The first command uses the Start-Job cmdlet to start a background job that runs a Get-Process command on the local computer.</source>
          <target state="translated">第一个命令使用 Start-Job cmdlet 来启动在本地计算机上运行 Get-Process 命令的后台作业。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A pipeline operator (|) sends the resulting job object to the Export-Csv cmdlet, which converts the job object to CSV format.</source>
          <target state="translated">管道运算符 (|) 将生成的作业对象发送给 Export-csv cmdlet，后者将作业对象转换为 CSV 格式。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The second command saves a header in the $Header variable.</source>
          <target state="translated">第二个命令将标题保存在 $Header 变量。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Unlike the default header, this header uses MoreData instead of HasMoreData and State instead of JobStateInfo.</source>
          <target state="translated">与不同的是默认标头，此标头而不是 HasMoreData 和状态而不是 JobStateInfo 使用 MoreData。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The next three commands delete the original header (the second line) from the Jobs.csv file.</source>
          <target state="translated">接下来的三个命令将从 Jobs.csv 文件中删除原始标头（第二行）。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The sixth command uses the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to import the Jobs.csv file and convert the CSV strings into a CSV version of the job object.</source>
          <target state="translated">第六个命令使用 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> cmdlet 导入 Jobs.csv 文件并将 CSV 转换为作业对象的 CSV 版本字符串。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter to submit the alternate header.</source>
          <target state="translated">该命令使用 <bpt id="p1">*</bpt>标头<ept id="p1">*</ept> 参数来提交替换标头。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The results are stored in the $J variable.</source>
          <target state="translated">结果存储在 $J 变量中。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The seventh command displays the object in the $J variable.</source>
          <target state="translated">第七个命令显示 $J 变量中的对象。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The resulting object has MoreData and State properties, as shown in the command output.</source>
          <target state="translated">生成的对象具有 MoreData 和状态属性，如命令输出中所示。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example 5: Create a custom object using a CSV file</source>
          <target state="translated">示例 5︰ 创建自定义对象使用的 CSV 文件</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example shows how to create a custom object in Windows PowerShell by using a CSV file.</source>
          <target state="translated">此示例演示如何通过使用 CSV 文件在 Windows PowerShell 中创建自定义对象。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Content cmdlet to get the Links.csv file.</source>
          <target state="translated">第一个命令使用 Get-Content cmdlet 获取 Links.csv 文件。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to import the Links.csv file.</source>
          <target state="translated">第二个命令使用 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> cmdlet 导入 Links.csv 文件。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The command uses the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter to specify LinkId and TopicTitle as property names for the new custom objects.</source>
          <target state="translated">该命令使用 <bpt id="p1">*</bpt>标头<ept id="p1">*</ept> LinkId 和 TopicTitle 指定为新的自定义对象的属性名称的参数。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The command saves the imported objects in the $A variable.</source>
          <target state="translated">该命令将导入的对象保存在 $A 变量中。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The third command uses the Get-Member cmdlet to get the type and members of the custom objects in the $A variable.</source>
          <target state="translated">第三个命令使用 Get-member cmdlet 来获取 $A 变量中的类型和成员的自定义对象。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The output shows that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> returns a collection of custom objects (<bpt id="p2">**</bpt>PSCustomObject<ept id="p2">**</ept>).</source>
          <target state="translated">该输出显示 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 返回自定义对象的集合 (<bpt id="p2">**</bpt>PSCustomObject<ept id="p2">**</ept>)。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In addition to some default properties, the custom objects have LinkID and TopicTitle note properties.</source>
          <target state="translated">除了一些默认属性，自定义对象有 LinkID 和 TopicTitle 附注属性。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This command shows that you can use the custom object like you would any object in Windows PowerShell.</source>
          <target state="translated">此命令显示你可以像使用 Windows PowerShell 中的任何对象一样使用自定义对象。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The command pipes the custom objects in the $A variable to the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet, which gets only objects with a <bpt id="p2">**</bpt>TopicTitle<ept id="p2">**</ept> property that includes alias.</source>
          <target state="translated">此命令通过管道向 $A 变量中的自定义对象 <bpt id="p1">**</bpt>Where-object<ept id="p1">**</ept> cmdlet，后者将获取仅具有对象 <bpt id="p2">**</bpt>TopicTitle<ept id="p2">**</ept> 包括别名的属性。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The Where-Object command uses the new simplified command format that does not require symbols, script blocks, or curly braces.</source>
          <target state="translated">Where-object 命令使用新的简化的命令格式不需要符号、 脚本块或大括号。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Example 6: Import a CSV that is missing a value</source>
          <target state="translated">示例 6︰ 导入缺少的值的 CSV</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This example shows how the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet in Windows PowerShell 3.0 responds when the header row in a CSV file includes a null or empty value.</source>
          <target state="translated">此示例演示如何 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> CSV 文件中的标头行包含 null 或空值时在 Windows PowerShell 3.0 中的 cmdlet 的响应。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> substitutes a default name for the header row.</source>
          <target state="translated"><bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 替换标题行的默认名称。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default name becomes the name of the property of the object that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> returns.</source>
          <target state="translated">默认名称将成为对象的属性的名称， <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 返回。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The first command uses the Get-Content cmdlet to get the Projects.csv file on the Server02 remote computer.</source>
          <target state="translated">第一个命令使用 Get-content cmdlet 来获取 Server02 远程计算机上的 Projects.csv 文件。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The output shows that the header row of the file is missing a value between ProjectName and Completed.</source>
          <target state="translated">该输出显示，该文件的标题行缺少 p o j 和已完成之间的值。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The second command uses the <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cmdlet to import the Projects.csv file.</source>
          <target state="translated">第二个命令使用 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> cmdlet 导入 Projects.csv 文件。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The output shows that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> generates a warning and substitutes a default name, H1, for the missing header row value.</source>
          <target state="translated">该输出显示 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 生成一个警告，并且会替换缺少的标头行值为默认名称 H1。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>H1 is also used for the name of the object property.</source>
          <target state="translated">H1 还可用于对象属性的名称。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The third command uses the dot method to get the value of the H1 property of the object that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> creates.</source>
          <target state="translated">第三个命令使用点法来获取该对象的 H1 属性的值 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 创建。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>PARAMETERS</source>
          <target state="translated">参数</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>-Delimiter</source>
          <target state="translated">分隔符</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Specifies the delimiter that separates the property values in the CSV file.</source>
          <target state="translated">指定用于分隔 CSV 文件中的属性值的分隔符。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">默认值为逗号 (,)。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Enter a character, such as a colon (:).</source>
          <target state="translated">输入一个字符，例如冒号 (:)。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To specify a semicolon (;), enclose it in quotation marks.</source>
          <target state="translated">若要指定分号 (;)，请将其括在引号中。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the actual string delimiter in the file, <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> cannot create objects from the CSV strings.</source>
          <target state="translated">如果在文件中，指定的字符不实际字符串分隔符 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 无法从 CSV 字符串创建对象。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">相反，它将返回这些字符串。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>-Encoding</source>
          <target state="translated">编码</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Specifies the type of character encoding that was used in the CSV file.</source>
          <target state="translated">指定 CSV 文件中使用的字符编码类型。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The acceptable values for this parameter are:</source>
          <target state="translated">此参数的可接受的值是：</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>UTF7</source>
          <target state="translated">UTF7</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>UTF8</source>
          <target state="translated">UTF8</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>ASCII</source>
          <target state="translated">ASCII</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>UTF32</source>
          <target state="translated">UTF32</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>BigEndianUnicode</source>
          <target state="translated">BigEndianUnicode</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">默认值</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>OEM</source>
          <target state="translated">OEM</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The default is ASCII.</source>
          <target state="translated">默认值为 ASCII。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This parameter was introduced in Windows PowerShell 3.0.</source>
          <target state="translated">已在 Windows PowerShell 3.0 中引入了此参数。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>-Header</source>
          <target state="translated">标头</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Specifies an alternate column header row for the imported file.</source>
          <target state="translated">为导入的文件指定备用列标题行。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The column header determines the names of the properties of the object that <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> creates.</source>
          <target state="translated">列标题用于确定该对象的属性的名称， <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 创建。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Enter a comma-separated list of the column headers.</source>
          <target state="translated">输入以逗号分隔的列标题的列表。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Enclose each item in quotation marks (single or double).</source>
          <target state="translated">将每项括在引号中（单引号或双引号）。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Do not enclose the header string in quotation marks.</source>
          <target state="translated">不要将标头字符串括在引号内。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If you enter fewer column headers than there are columns, the remaining columns will have no header.</source>
          <target state="translated">如果输入的列标题少于现有列，则剩下的列将没有标题。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you enter more headers than there are columns, the extra headers are ignored.</source>
          <target state="translated">如果输入的标题多于现有列，则忽略额外的标题。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When using the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter, delete the original header row from the CSV file.</source>
          <target state="translated">当使用 <bpt id="p1">*</bpt>标头<ept id="p1">*</ept> 参数，从 CSV 文件中删除原始标题行。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> creates an extra object from the items in the header row.</source>
          <target state="translated">否则为 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 从标题行中的项创建额外的对象。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>-LiteralPath</source>
          <target state="translated">-LiteralPath</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Specifies the path to the CSV file to import.</source>
          <target state="translated">指定要导入的 CSV 文件的路径。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Unlike <bpt id="p1">*</bpt>Path<ept id="p1">*</ept>, the value of the <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> parameter is used exactly as it is typed.</source>
          <target state="translated">与不同 <bpt id="p1">*</bpt>路径<ept id="p1">*</ept>, ，值 <bpt id="p2">*</bpt>LiteralPath<ept id="p2">*</ept> 完全按照其键入使用参数。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>No characters are interpreted as wildcards.</source>
          <target state="translated">不会将任何字符解释为通配符。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If the path includes escape characters, enclose it in single quotation marks.</source>
          <target state="translated">如果路径包括转义符，请将其括在单引号中。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</source>
          <target state="translated">单引号会告知 Windows PowerShell 不要将所有字符都解释为转义序列。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>-Path</source>
          <target state="translated">-Path</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Specifies the path to the CSV file to import.</source>
          <target state="translated">指定要导入的 CSV 文件的路径。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can also pipe a path to <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept>.</source>
          <target state="translated">您还可以通过管道的路径 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-UseCulture</source>
          <target state="translated">-UseCulture</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Indicates that this cmdlet uses the list separator for the current culture as the item delimiter.</source>
          <target state="translated">指示此 cmdlet 使用当前区域性的列表分隔符用作项分隔符。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The default is a comma (,).</source>
          <target state="translated">默认值为逗号 (,)。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>To find the list separator for a culture, use the following command: <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>.</source>
          <target state="translated">若要查找某个区域性的列表分隔符，请使用以下命令︰ <ph id="ph1">`(Get-Culture).TextInfo.ListSeparator`</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If you specify a character other than the delimiter used in the CSV strings, ConvertFrom-Csv cannot create objects from the CSV strings.</source>
          <target state="translated">如果指定的字符不是 CSV 字符串中使用的分隔符，则 Convertfrom-csv 无法从 CSV 字符串创建对象。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Instead, it returns the strings.</source>
          <target state="translated">相反，它将返回这些字符串。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CommonParameters</source>
          <target state="translated">CommonParameters</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable.</source>
          <target state="translated">此 cmdlet 支持以下常见参数:-调试-ErrorAction、-ErrorVariable、-InformationAction、-InformationVariable、-OutVariable、-OutBuffer、-PipelineVariable、-Verbose、-WarningAction 和-WarningVariable。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</source>
          <target state="translated">有关详细信息，请参阅 about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216)。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>INPUTS</source>
          <target state="translated">输入</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>System.String</source>
          <target state="translated">System.String</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can pipe a string that contains a path to <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept>.</source>
          <target state="translated">您可以通过管道传递一个字符串，包含的路径 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>OUTPUTS</source>
          <target state="translated">输出</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">对象</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This cmdlet returns the objects described by the content in the CSV file.</source>
          <target state="translated">此 cmdlet 将返回 CSV 文件中的内容所描述的对象。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">说明</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Because the imported objects are CSV versions of the object type, they are not recognized and formatted by the Windows PowerShell type formatting entries that format the non-CSV versions of the object type.</source>
          <target state="translated">由于导入的对象是 CSV 版本的对象类型，因此用于设置非 CSV 版本的对象类型格式的 Windows PowerShell 类型格式化条目将不会识别导入对象并设置其格式。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The result of an <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> command is a collection of strings that form a table-like custom object.</source>
          <target state="translated">结果 <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 命令是一个窗体中类似表的自定义对象的字符串集合。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Each row is a separate string, so you can use the <bpt id="p1">**</bpt>Count<ept id="p1">**</ept> property of the object to count the table rows.</source>
          <target state="translated">每个行是单独的字符串，因此可以使用 <bpt id="p1">**</bpt>计数<ept id="p1">**</ept> 表行进行计数的对象属性。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The columns are the properties of the object and items in the rows are the property values.</source>
          <target state="translated">这些列是对象的属性，行中的项是属性值。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The column header row determines the number of columns and the column names.</source>
          <target state="translated">列标题行确定了列数和列名称。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The column names are also the names of the properties of the objects.</source>
          <target state="translated">列名称也是对象的属性的名称。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The first row is interpreted to be the column headers, unless you use the <bpt id="p1">*</bpt>Header<ept id="p1">*</ept> parameter to specify column headers.</source>
          <target state="translated">第一行将被解释为列标题，除非您使用 <bpt id="p1">*</bpt>标头<ept id="p1">*</ept> 参数来指定列标题。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If any row has more values than the header row, the additional values are ignored.</source>
          <target state="translated">如果任何行具有的值多于标题行，则忽略额外的值。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If the column header row is missing a value or contains a null or empty value, <bpt id="p1">**</bpt>Import-Csv<ept id="p1">**</ept> uses H followed by a number for the missing column header and property name.</source>
          <target state="translated">如果列标题行缺少值或包含 null 或为空值， <bpt id="p1">**</bpt>导入 Csv<ept id="p1">**</ept> 使用 H 跟一个数字为缺少的列标题和属性名称。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In the CSV file, each object is represented by a comma-separated list of the property values of the object.</source>
          <target state="translated">在 CSV 文件中，通过以逗号分隔的对象属性值列表来表示每个对象。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The property values are converted to strings (by using the ToString() method of the object), so they are generally represented by the name of the property value.</source>
          <target state="translated">属性值会转换为字符串（通过使用对象的 ToString() 方法），因此它们通常由属性值的名称来表示。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Export-Csv does not export the methods of the object.</source>
          <target state="translated">Export-csv 不会导出对象的方法。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>RELATED LINKS</source>
          <target state="translated">相关的链接</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>ConvertFrom-Csv</source>
          <target state="translated">ConvertFrom-Csv</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>ConvertTo-Csv</source>
          <target state="translated">ConvertTo-Csv</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Export-Csv</source>
          <target state="translated">Export-Csv</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>