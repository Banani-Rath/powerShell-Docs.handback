<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a0800de22bb8f9beacceefada71fca137c2b960</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">reference\4.0\Microsoft.PowerShell.Core\About\about_Operator_Precedence.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e626cd6ab1d0ee46986ca80785e3c93301f2b8a5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38499558304974aacfe4a41d2a64e8c60090a4b1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>about_Operator_Precedence</source>
          <target state="translated">about_Operator_Precedence</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell, cmdlet</source>
          <target state="translated">PowerShell-Cmdlets</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>About Operator Precedence</source>
          <target state="translated">Zur Operatorrangfolge</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>about_Operator_Precedence</source>
          <target state="translated">about_Operator_Precedence</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>TOPIC</source>
          <target state="translated">THEMA</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>about_Operator_Precedence</source>
          <target state="translated">about_Operator_Precedence</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>SHORT DESCRIPTION</source>
          <target state="translated">KURZE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Lists the Windows PowerShell operators in precedence order.</source>
          <target state="translated">Listet die Windows PowerShell-Operatoren in ihrer Rangfolge auf.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[This topic was contributed by Kirk Munro, a Windows PowerShell MVP from Ottawa, Ontario]</source>
          <target state="translated">[Dieses Thema wurde durch Kirk Munro, Windows PowerShell MVP aus Ottawa, Ontario bereitgestellt.]</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>LONG DESCRIPTION</source>
          <target state="translated">LANGE BESCHREIBUNG</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windows PowerShell operators let you construct simple, but powerful expressions.</source>
          <target state="translated">Windows PowerShell-Operatoren können Sie einfache, aber leistungsstarke Ausdrücke zu erstellen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This topic lists the operators in precedence order.</source>
          <target state="translated">In diesem Thema werden die Operatoren in ihrer Rangfolge aufgeführt.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Precedence order is the order in which Windows PowerShell evaluates the operators when multiple operators appear in the same expression.</source>
          <target state="translated">Rangfolge ist die Reihenfolge, in der Windows PowerShell die Operatoren auswertet, wenn mehrere Operatoren im gleichen Ausdruck angezeigt werden.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When operators have equal precedence, Windows PowerShell evaluates them from left to right.</source>
          <target state="translated">Wenn Operatoren denselben Rang haben, wertet Windows PowerShell sie von links nach rechts.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The exceptions are the assignment operators, the cast operators, and the negation operators (!, -not, -bnot), which are evaluated from right to left.</source>
          <target state="translated">Ausnahmen sind die Zuweisungsoperatoren, die Umwandlungsoperatoren und die Negationsoperatoren (!, -, - bnicht), werden von rechts nach links ausgewertet.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use enclosures, such as parentheses, to override the standard precedence order and force Windows PowerShell to evaluate the enclosed part of an expression before an unenclosed part.</source>
          <target state="translated">Anlagen, z. B. Klammern können Sie überschreiben die standardmäßigen Rangfolge und Windows PowerShell zwingen, die eingeschlossenen Teil eines Ausdrucks vor einem Dokumentelemente Teil zu bewerten.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the following list, operators are listed in the order that they are evaluated.</source>
          <target state="translated">In der folgenden Liste sind Operatoren in der Reihenfolge aufgeführt, sie ausgewertet werden.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Operators on the same line, or in the same group, have equal precedence.</source>
          <target state="translated">In der gleichen Zeile oder in der gleichen Gruppe haben denselben Rang.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Operator column lists the operators.</source>
          <target state="translated">Die Spalte Operator die Operatoren aufgeführt.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Reference column lists the Windows PowerShell Help topic in which the operator is described.</source>
          <target state="translated">Die Referenz-Spalte enthält das Windows PowerShell-Hilfe-Thema in dem der Operator beschrieben wird.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To display the topic, type "get-help &lt;topic-name&gt;".</source>
          <target state="translated">Um das Thema anzuzeigen, geben Sie "Get-&lt; Thema-Name &gt; Help" ein.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>OPERATOR                         REFERENCE</source>
          <target state="translated">OPERATOR (REFERENZ)</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>$()  @()                         about_Operators</source>
          <target state="translated">$ () @ About_Operators)</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(dereference) :: (static)      about_Operators</source>
          <target state="translated">(Dereferenzierungsoperator):: About_Operators (statisch)</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>[0] (index operator)             about_Operators</source>
          <target state="translated">[0] (Indexoperator) about_Operators</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>[int] (cast operators)           about_Operators</source>
          <target state="translated">[Int] About_Operators (Umwandlungsoperatoren)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-split (unary) -join (unary)     about_Split, about_Join</source>
          <target state="translated">-Teilen (Unär) - Join (Unär) About_Split, About_Join</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>, (comma operator)               about_Operators</source>
          <target state="translated">, (Komma-Operators) About_Operators</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>++ --                            about_Assignment_Operators</source>
          <target state="translated">++--About_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-not !</source>
          <target state="translated">-nicht!</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-bNot                     about_Logical_Operators, about_Comparison_Operators</source>
          <target state="translated">-bnicht "about_logical_operators" about_Comparison_Operators</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>..</source>
          <target state="translated">..</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>(range operator)              about_Operators</source>
          <target state="translated">About_Operators (Bereichsoperator)</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-f (format operator)             about_Operators</source>
          <target state="translated">About_Operators -f (Format-Operator)</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>/ %                            about_Arithmetic_Operators</source>
          <target state="translated">/ % About_Arithmetic_Operators</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>about_Arithmetic_Operators</source>
          <target state="translated">about_Arithmetic_Operators</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following group of operators have equal precedence.</source>
          <target state="translated">Die folgende Gruppe von Operatoren haben denselben Rang.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Their case-sensitive and explicitly case-insensitive variants have the same precedence.</source>
          <target state="translated">Ihre Groß- und Kleinschreibung explizit Kleinschreibung Varianten haben den gleichen Rang.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>-split (binary)                  about_Split -join (binary)                   about_Join -is  -isnot  -as                 about_Type_Operators -eq  -ne  -gt  -gt  -lt  -le     about_Comparison_Operators -like  -notlike                  about_comparison_operators -match  -notmatch                about_comparison_operators -in -notIn                       about_comparison_operators -contains -notContains           about_comparison_operators -replace                         about_comparison_operators</source>
          <target state="translated">-Teilen (binär) About_Split-join (binär) About_Join-ist Isnot--About_Type_Operators - Eq - Ne - Gt - Gt - lt-le About_Comparison_Operators-wie - notlike About_comparison_operators-entsprechen - Notmatch About_comparison_operators-in - NotIn About_comparison_operators-- NotContains About_comparison_operators enthält-About_comparison_operators ersetzen</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The list resumes here with the following operators in precedence order:</source>
          <target state="translated">Hier werden die Liste mit den folgenden Operatoren in Rangfolge fortgesetzt:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>-band -bor -bxor                 about_Comparison_Operators</source>
          <target state="translated">-band - bim - Bxor About_Comparison_Operators</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>-and -or -xor                    about_Comparison_Operators</source>
          <target state="translated">- und - oder Xor - About_Comparison_Operators</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(dot-source)  &amp; (call)         about_Scopes, about_Operators</source>
          <target state="translated">(Punkt-Quelle) &amp; (aufrufen) "about_scopes" About_Operators</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>| (pipeline operator)            about_Operators</source>
          <target state="translated">| About_Operators (Pipelineoperator)</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>2&gt;  2&gt;&gt;  2&gt;&amp;1             about_Redirection</source>
          <target state="translated">2 &gt; 2 &gt;&gt; 2 &gt; &amp; 1 About_Redirection</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>=  +=  -=  *=  /= %=             about_Assignment_Operators</source>
          <target state="translated">= += = * =, / = % = About_Assignment_Operators</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>EXAMPLES</source>
          <target state="translated">BEISPIELE</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following two commands show the arithmetic operators and the effect of using parentheses to force Windows PowerShell to evaluate the enclosed part of the expression first.</source>
          <target state="translated">Die folgenden beiden Befehle zeigen die arithmetischen Operatoren und die Auswirkung der Verwendung von Windows PowerShell zwingen Klammern eingeschlossenen Teil des Ausdrucks zuerst ausgewertet.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 2 + 3 * 4</source>
          <target state="translated">C:\PS &gt; 2 + 3 * 4</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>14</source>
          <target state="translated">14</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (2 + 3) * 4</source>
          <target state="translated">C:\PS &gt; (2 + 3) * 4</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>20</source>
          <target state="translated">20</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example gets the read-only text files from the local directory and saves them in the $read_only variable.</source>
          <target state="translated">Im folgende Beispiel ruft die schreibgeschützten Text-Dateien aus dem lokalen Verzeichnis ab und speichert sie in der $Read_only-Variablen.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>$read_only = get-childitem *.txt | where-object {$_.isReadOnly}</source>
          <target state="translated">$Read_only = Get-Childitem *.txt | WHERE-Object {$_.isReadOnly}</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It is equivalent to the following example.</source>
          <target state="translated">Dies entspricht dem folgenden Beispiel.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>$read_only = ( get-childitem *.txt | where-object {$_.isReadOnly} )</source>
          <target state="translated">$Read_only = (Get-Childitem *.txt | Where-Object {$_.isReadOnly})</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because the pipeline operator (|) has a higher precedence than the assignment operator (=), the files that the Get-ChildItem cmdlet gets are sent to the Where-Object cmdlet for filtering before they are assigned to the $read_only variable.</source>
          <target state="translated">Da der Pipelineoperator (|) eine höhere Priorität als der Zuweisungsoperator (=) aufweist, werden die Dateien, die das Get-ChildItem-Cmdlet ruft an das Where-Object-Cmdlet zum Filtern, bevor sie die Variable Read_only zugewiesen werden gesendet.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example demonstrates that the index operator takes precedence over the cast operator.</source>
          <target state="translated">Das folgende Beispiel zeigt, dass der Indexoperator Umwandlungsoperator Vorrang.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The first expression creates an array of three strings.</source>
          <target state="translated">Der erste Ausdruck erstellt ein Array aus drei Zeichenfolgen.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Then, it uses the index operator with a value of 0 to select the first object in the array, which is the first string.</source>
          <target state="translated">Anschließend verwendet er das erste Objekt im Array auswählen, der erste Zeichenfolge ist der Indexoperator mit einem Wert von 0.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Finally, it casts the selected object as a string.</source>
          <target state="translated">Schließlich wird es das ausgewählte Objekt als Zeichenfolge umgewandelt.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In this case, the cast has no effect.</source>
          <target state="translated">In diesem Fall hat die Umwandlung keine Auswirkung.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; [string]@('Windows','PowerShell','2.0')[0] Windows</source>
          <target state="translated">C:\PS &gt; [string]@('Windows','PowerShell','2.0') [0] Windows</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The second expression uses parentheses to force the cast operation to occur before the index selection.</source>
          <target state="translated">Der zweite Ausdruck verwendet Klammern zum Erzwingen der Umwandlungsvorgang vor der Indexauswahl auftreten.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>As a result, the entire array is cast as a (single) string.</source>
          <target state="translated">Daher wird das gesamte Array als String (einzelne) umgewandelt.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Then, the index operator selects the first item in the string array, which is the first character.</source>
          <target state="translated">Dann wählt der Indexoperator das erste Element in der Zeichenfolge, die das erste Zeichen ist.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; ([string]@('Windows','PowerShell','2.0'))[0]</source>
          <target state="translated">C:\PS &gt; ([string]@('Windows','PowerShell','2.0')) [0]</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the following example, because the -gt (greater-than) operator has a higher precedence than the -and (logical AND) operator, the result of the expression is FALSE.</source>
          <target state="translated">Im folgenden Beispiel da - Gt (größer-als) Operator hat Vorrang vor den - und (logisches AND) Operator das Ergebnis des Ausdrucks ist "false".</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 2 -gt 4 -and 1 False</source>
          <target state="translated">C:\PS &gt; 2 - Gt, 1 und 4 - False</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It is equivalent to the following expression.</source>
          <target state="translated">Dies entspricht dem folgenden Ausdruck.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; (2 -gt 4) -and 1 False</source>
          <target state="translated">C:\PS &gt; (2 - Gt 4)- und 1 False</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If the -and operator had higher precedence, the answer would be TRUE.</source>
          <target state="translated">Wenn die - Operator hat Vorrang und die Antwort wird "true" sein.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>C:\PS&gt; 2 -gt (4 -and 1) True</source>
          <target state="translated">C:\PS &gt; 2 - Gt (4- und 1) True</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, this example demonstrates an important principle of managing operator precedence.</source>
          <target state="translated">In diesem Beispiel wird jedoch ein wichtiges Prinzip der Verwaltung von Operatorrangfolge veranschaulicht.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When an expression is difficult for people to interpret, use parentheses to force the evaluation order, even when it forces the default operator precedence.</source>
          <target state="translated">Wenn ein Ausdruck schwerer zu interpretieren ist, verwenden Sie Klammern, um die Auswertungsreihenfolge zu erzwingen, auch wenn der Standard-Operatorrangfolge gezwungen wird.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The parentheses make your intentions clear to people who are reading and maintaining your scripts.</source>
          <target state="translated">Die Klammern stellen Ihre Absichten deaktivieren Sie die Personen, die gelesen und Pflege der Skripts.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>SEE ALSO</source>
          <target state="translated">SIEHE AUCH</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>about_Assignment_Operators about_Comparison_Operators about_Join about_Logical_Operators about_Operators about_Redirection about_Scopes about_Split about_Type_Operators</source>
          <target state="translated">About_Assignment_Operators About_Comparison_Operators About_Join "about_logical_operators" About_Operators About_Redirection "about_scopes" About_Split about_Type_Operators</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>