<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4fb33c9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a635485387bb367f4e43982085f9d36765a95e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Managing-Processes-with-Process-Cmdlets.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53d02dacf16d69f5da03e2ccb0df6772962600a6</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Managing Processes with Process Cmdlets</source>
          <target state="translated">使用 Process Cmdlet 管理进程</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Managing Processes with Process Cmdlets</source>
          <target state="translated">使用 Process Cmdlet 管理进程</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use the Process cmdlets in Windows PowerShell to manage local and remote processes in Windows PowerShell.</source>
          <target state="translated">可以在 Windows PowerShell 中使用 Process cmdlet 来管理 Windows PowerShell 中的本地和远程进程。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Getting Processes (Get-Process)</source>
          <target state="translated">获取进程 (Get-Process)</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To get the processes running on the local computer, run a <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> with no parameters.</source>
          <target state="translated">若要获取在本地计算机上运行的进程，请运行不具有参数的 <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can get particular processes by specifying their process names or process IDs.</source>
          <target state="translated">你可以通过指定其进程名称或进程 ID 来获取特定进程。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following command gets the Idle process:</source>
          <target state="translated">以下命令将获取空闲进程：</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although it is normal for cmdlets to return no data in some situations, when you specify a process by its ProcessId, <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> generates an error if it finds no matches, because the usual intent is to retrieve a known running process.</source>
          <target state="translated">尽管某些情况下 cmdlet 不会返回任何数据很正常，但当你按其 ProcessId 指定一个进程时，如果未找到任何匹配项，<bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> 将生成一个错误，因为通常的目的是检索一个已知的正在运行的进程。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If there is no process with that Id, it is likely that the Id is incorrect or that the process of interest has already exited:</source>
          <target state="translated">如果按该 ID 找不到进程，则很可能该 ID 不正确或相关进程已退出：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the Name parameter of the Get-Process cmdlet to specify a subset of processes based on the process name.</source>
          <target state="translated">你可以使用 Get-Process cmdlet 的 Name 参数来基于进程名称指定进程的子集。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Name parameter can take multiple names in a comma-separated list and it supports the use of wildcards, so you can type name patterns.</source>
          <target state="translated">Name 参数可以采用多个名称（在列表中以逗号分隔），并且支持使用通配符，因此，你可以键入名称模式。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, the following command gets process whose names begin with "ex."</source>
          <target state="translated">例如，以下命令将获取名称以“ex”开头的进程。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because the .NET System.Diagnostics.Process class is the foundation for Windows PowerShell processes, it follows some of the conventions used by System.Diagnostics.Process.</source>
          <target state="translated">由于 .NET System.Diagnostics.Process 类是 Windows PowerShell 进程的基础，因此它遵循 System.Diagnostics.Process 使用的某些约定。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>One of those conventions is that the process name for an executable never includes the ".exe" at the end of the executable name.</source>
          <target state="translated">其中一个约定是可执行文件的进程名从不在可执行文件名的末尾包含“.exe”。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> also accepts multiple values for the Name parameter.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> 还接受 Name 参数的多个值。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use the ComputerName parameter of Get-Process to get processes on remote computers.</source>
          <target state="translated">可以使用 Get-Process 的 ComputerName 参数获取远程计算机上的进程。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the PowerShell processes on the local computer (represented by "localhost") and on two remote computers.</source>
          <target state="translated">例如，以下命令将获取本地计算机（表示为“localhost”）和两台远程计算机上的 PowerShell 进程。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The computer names are not evident in this display, but they are stored in the MachineName property of the process objects that Get-Process returns.</source>
          <target state="translated">计算机名在此显示中不可见，但是它们存储在 Get-Process 返回的进程对象的 MachineName 属性中。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following command uses the Format-Table cmdlet to display the process ID, ProcessName and MachineName (ComputerName) properties of the process objects.</source>
          <target state="translated">下面的命令使用 Format-Table cmdlet 显示进程对象的进程 ID、ProcessName 和 MachineName (ComputerName) 属性。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This more complex command adds the MachineName property to the standard Get-Process display.</source>
          <target state="translated">这一更为复杂的命令将 MachineName 属性添加到标准 Get-Process 显示中。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The backtick (<ph id="ph1">\`</ph>)(ASCII 96) is the Windows PowerShell continuation character.</source>
          <target state="translated">反撇号 (<ph id="ph1">\`</ph>)(ASCII 96) 是 Windows PowerShell 的继续符。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Stopping Processes (Stop-Process)</source>
          <target state="translated">停止进程 (Stop-Process)</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Windows PowerShell gives you flexibility for listing processes, but what about stopping a process?</source>
          <target state="translated">Windows PowerShell 可以灵活地列出进程，但停止进程呢？</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Stop-Process<ept id="p1">**</ept> cmdlet takes a Name or Id to specify a process you want to stop.</source>
          <target state="translated"><bpt id="p1">**</bpt>Stop-Process<ept id="p1">**</ept> cmdlet 将采用 Name 或 ID 来指定想要停止的进程。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your ability to stop processes depends on your permissions.</source>
          <target state="translated">能否停止进程取决于你的权限。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Some processes cannot be stopped.</source>
          <target state="translated">某些进程无法停止。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, if you try to stop the idle process, you get an error:</source>
          <target state="translated">例如，如果你尝试停止空闲进程，则会出现错误：</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can also force prompting with the <bpt id="p1">**</bpt>Confirm<ept id="p1">**</ept> parameter.</source>
          <target state="translated">你也可以通过使用 <bpt id="p1">**</bpt>Confirm<ept id="p1">**</ept> 参数进行强制提示。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This parameter is particularly useful if you use a wildcard when specifying the process name, because you may accidentally match some processes you do not want to stop:</source>
          <target state="translated">如果你在指定进程名称时使用通配符，此参数会特别有用，因为可能会意外地匹配到你不想要停止的一些进程：</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Complex process manipulation is possible by using some of the object filtering cmdlets.</source>
          <target state="translated">可以通过使用某些对象筛选 cmdlet 来实现复杂的过程操作。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Because a Process object has a Responding property that is true when it is no longer responding, you can stop all nonresponsive applications with the following command:</source>
          <target state="translated">因为 Process 对象具有 Responding 属性，当程序不再响应时该属性为 true，你可以使用以下命令停止所有无响应的应用程序：</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can use the same approach in other situations.</source>
          <target state="translated">在其他情况下，可以使用相同的方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, suppose a secondary notification area application automatically runs when users start another application.</source>
          <target state="translated">例如，假设用户启动另一个应用程序时，辅助通知区域的应用程序将自动运行。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You may find that this does not work correctly in Terminal Services sessions, but you still want to keep it in sessions that run on the physical computer console.</source>
          <target state="translated">你可能会发现在“终端服务”会话中它无法正常工作，但你仍想要将其保留在物理计算机控制台上运行的会话中。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Sessions connected to the physical computer desktop always have a session ID of 0, so you can stop all instances of the process that are in other sessions by using <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> and the process, <bpt id="p2">**</bpt>SessionId<ept id="p2">**</ept>:</source>
          <target state="translated">连接到物理计算机桌面的会话始终具有一个为 0 的会话 ID，这样你可以通过使用 <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> 和进程 <bpt id="p2">**</bpt>SessionId<ept id="p2">**</ept> 停止在其他会话中的所有进程的实例：</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Stop-Process cmdlet does not have a ComputerName parameter.</source>
          <target state="translated">Stop-Process cmdlet 不具有 ComputerName 参数。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Therefore, to run a stop process command on a remote computer, you need to use the Invoke-Command cmdlet.</source>
          <target state="translated">因此，若要在远程计算机上运行停止进程，需要使用 Invoke-Command cmdlet。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, to stop the PowerShell process on the Server01 remote computer, type:</source>
          <target state="translated">例如，若要停止 Server01 远程计算器上的 PowerShell 进程，请键入：</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Stopping All Other Windows PowerShell Sessions</source>
          <target state="translated">停止所有其他 Windows PowerShell 会话</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It may occasionally be useful to be able to stop all running Windows PowerShell sessions other than the current session.</source>
          <target state="translated">这可能对停止当前会话之外的所有正在运行的 Windows PowerShell 会话偶尔有用。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a session is using too many resources or is inaccessible (it may be running remotely or in another desktop session), you may not be able to directly stop it.</source>
          <target state="translated">如果会话正在使用过多资源或无法访问（它可能正在远程运行或在另一个桌面会话中运行），可能不能直接将其停止。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you try to stop all running sessions, however, the current session may be terminated instead.</source>
          <target state="translated">如果你尝试停止所有正在运行的会话，但是，这可能会终止当前会话。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each Windows PowerShell session has an environment variable PID that contains the Id of the Windows PowerShell process.</source>
          <target state="translated">每个 Windows PowerShell 会话都具有一个包含 Windows PowerShell 进程的 ID 的环境变量 PID。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can check the $PID against the Id of each session and terminate only Windows PowerShell sessions that have a different Id.</source>
          <target state="translated">你可以对比每个会话的 ID 检查 $PID，并仅终止具有不同 ID 的 Windows PowerShell 会话。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following pipeline command does this and returns the list of terminated sessions (because of the use of the <bpt id="p1">**</bpt>PassThru<ept id="p1">**</ept> parameter):</source>
          <target state="translated">下面的管道命令执行此操作并返回终止的会话的列表（因为使用了 <bpt id="p1">**</bpt>PassThru<ept id="p1">**</ept> 参数）：</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Starting, Debugging, and Waiting for Processes</source>
          <target state="translated">启动、调试和等待进程</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Windows PowerShell also comes with cmdlets to start (or restart), debug a process, and wait for a process to complete before running a command.</source>
          <target state="translated">Windows PowerShell 还附带 cmdlet，以启动（或重启）、调试进程，并在运行命令之前等待进程完成。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For information about these cmdlets, see the cmdlet help topic for each cmdlet.</source>
          <target state="translated">有关这些 cmdlet 的信息，请参阅有关每个 cmdlet 的 cmdlet 帮助主题。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">另请参阅</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get-Process [m2]<ept id="p1">](https://technet.microsoft.com/en-us/library/27a05dbd-4b69-48a3-8d55-b295f6225f15)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Stop-Process [m2]<ept id="p2">](https://technet.microsoft.com/en-us/library/12454238-9881-457a-bde4-fb6cd124deec)</ept><ph id="ph2">
</ph><bpt id="p3">[</bpt>Start-Process<ept id="p3">](https://technet.microsoft.com/en-us/library/41a7e43c-9bb3-4dc2-8b0c-f6c32962e72c)</ept><ph id="ph3">
</ph><bpt id="p4">[</bpt>Wait-Process<ept id="p4">](https://technet.microsoft.com/en-us/library/9222af7a-789d-4a09-aa90-09d7c256c799)</ept><ph id="ph4">
</ph><bpt id="p5">[</bpt>Debug-Process<ept id="p5">](https://technet.microsoft.com/en-us/library/eea1dace-3913-4dbd-b659-5a94a610eee1)</ept><ph id="ph5">
</ph><bpt id="p6">[</bpt>Invoke-Command<ept id="p6">](https://technet.microsoft.com/en-us/library/22fd98ba-1874-492e-95a5-c069467b8462)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Get-Process [m2]<ept id="p1">](https://technet.microsoft.com/en-us/library/27a05dbd-4b69-48a3-8d55-b295f6225f15)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Stop-Process [m2]<ept id="p2">](https://technet.microsoft.com/en-us/library/12454238-9881-457a-bde4-fb6cd124deec)</ept><ph id="ph2">
</ph><bpt id="p3">[</bpt>Start-Process<ept id="p3">](https://technet.microsoft.com/en-us/library/41a7e43c-9bb3-4dc2-8b0c-f6c32962e72c)</ept><ph id="ph3">
</ph><bpt id="p4">[</bpt>Wait-Process<ept id="p4">](https://technet.microsoft.com/en-us/library/9222af7a-789d-4a09-aa90-09d7c256c799)</ept><ph id="ph4">
</ph><bpt id="p5">[</bpt>Debug-Process<ept id="p5">](https://technet.microsoft.com/en-us/library/eea1dace-3913-4dbd-b659-5a94a610eee1)</ept><ph id="ph5">
</ph><bpt id="p6">[</bpt>Invoke-Command<ept id="p6">](https://technet.microsoft.com/en-us/library/22fd98ba-1874-492e-95a5-c069467b8462)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>