<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4fb33c9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6216f3e1a766c57a7549a3e3b4fbe76d043a8a41</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\fundamental\Using-Variables-to-Store-Objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">759072b966b448b4da5468e5855d1bbc7a9ca1c8</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Variables to Store Objects</source>
          <target state="translated">使用变量存储对象</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using Variables to Store Objects</source>
          <target state="translated">使用变量存储对象</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Windows PowerShell works with objects.</source>
          <target state="translated">Windows PowerShell 处理对象。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Windows PowerShell lets you create variables - essentially named objects - to preserve output to use later.</source>
          <target state="translated">Windows PowerShell 允许你创建实质上是命名对象的变量以保留输出以供以后使用。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you are used to working with variables in other shells, remember that Windows PowerShell variables are objects, not text.</source>
          <target state="translated">如果你习惯在其他 Shell 中处理变量，请记住，Windows PowerShell 变量是对象，而非文本。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Variables are always specified with the initial character $, and can include any alphanumeric characters or the underscore in their names.</source>
          <target state="translated">始终使用初始字符 $ 指定变量，并且可以在其名称中包含任何字母数字字符或下划线。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating a Variable</source>
          <target state="translated">创建变量</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can create a variable by typing a valid variable name:</source>
          <target state="translated">可以通过键入有效的变量名称来创建变量：</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This returns no result because <bpt id="p1">**</bpt>$loc<ept id="p1">**</ept> does not have a value.</source>
          <target state="translated">这将不返回任何结果，因为 <bpt id="p1">**</bpt>$loc<ept id="p1">**</ept> 不具有值。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can create a variable and assign it a value in the same step.</source>
          <target state="translated">你可以在同一步骤中创建变量并为其赋值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Windows PowerShell only creates the variable if it does not exist; otherwise, it assigns the specified value to the existing variable.</source>
          <target state="translated">Windows PowerShell 仅当变量不存在时才创建变量；否则，它会将指定的值赋给现有变量。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To store your current location in the variable <bpt id="p1">**</bpt>$loc<ept id="p1">**</ept>, type:</source>
          <target state="translated">若要将你的当前位置存储在变量 <bpt id="p1">**</bpt>$loc<ept id="p1">**</ept>中，请键入：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There is no output displayed when you type this command because the output is sent to $loc.</source>
          <target state="translated">当你键入此命令时，不会显示任何输出，因为已将输出发送给 $loc。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell, displayed output is a side effect of the fact that data which is not otherwise directed always gets sent to the screen.</source>
          <target state="translated">在 Windows PowerShell 中，未定向的数据将始终发送到屏幕，所显示的输出正是这一事实的副作用。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Typing $loc will show your current location:</source>
          <target state="translated">键入 $loc 将显示你的当前位置：</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> to display information about the contents of variables.</source>
          <target state="translated">你可以使用 <bpt id="p1">**</bpt>Get-Member<ept id="p1">**</ept> 来显示有关变量内容的信息。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Piping $loc to Get-Member will show you that it is a <bpt id="p1">**</bpt>PathInfo<ept id="p1">**</ept> object, just like the output from Get-Location:</source>
          <target state="translated">通过管道将 $loc 传递至 Get-Member 会向你显示这是一个 <bpt id="p1">**</bpt>PathInfo<ept id="p1">**</ept> 对象，就像 Get-Location 的输出一样：</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Manipulating Variables</source>
          <target state="translated">操作变量</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Windows PowerShell provides several commands to manipulate variables.</source>
          <target state="translated">Windows PowerShell 提供多个用以操作变量的命令。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can see a complete listing in a readable form by typing:</source>
          <target state="translated">你可以通过键入以下内容看到可读形式的完整列表：</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In addition to the variables you create in your current Windows PowerShell session, there are several system-defined variables.</source>
          <target state="translated">除了你在当前的 Windows PowerShell 会话中创建的变量，还存在多个系统定义的变量。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Remove-Variable<ept id="p1">**</ept> cmdlet to clear out all of the variables which are not controlled by Windows PowerShell.</source>
          <target state="translated">你可以使用 <bpt id="p1">**</bpt>Remove-Variable<ept id="p1">**</ept> cmdlet 来清除所有不受 Windows PowerShell 控制的变量。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Type the following command to clear all variables:</source>
          <target state="translated">键入以下命令来清除所有变量：</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This will produce the confirmation prompt you see below.</source>
          <target state="translated">这将生成你在下方看到的确认提示。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you then run the <bpt id="p1">**</bpt>Get-Variable<ept id="p1">**</ept> cmdlet, you will see the remaining Windows PowerShell variables.</source>
          <target state="translated">然后，如果你运行 <bpt id="p1">**</bpt>Get-Variable<ept id="p1">**</ept> cmdlet，你会看到其余的 Windows PowerShell 变量。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Since there is also a variable Windows PowerShell drive, you can also display all Windows PowerShell variables by typing:</source>
          <target state="translated">由于还存在一个变量 Windows PowerShell 驱动器，你也可以通过键入以下内容显示所有的 Windows PowerShell 变量：</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using Cmd.exe Variables</source>
          <target state="translated">使用 Cmd.exe 变量</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Although Windows PowerShell is not Cmd.exe, it runs in a command shell environment and can use the same variables available in any environment in Windows.</source>
          <target state="translated">虽然 Windows PowerShell 不是 Cmd.exe，但它在命令 Shell 环境中运行，并且可以在 Windows 的任何环境中使用相同的可用变量。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These variables are exposed through a drive named <bpt id="p1">**</bpt>env<ept id="p1">**</ept>:.</source>
          <target state="translated">这些变量通过名为 <bpt id="p1">**</bpt>env<ept id="p1">**</ept> 的驱动器进行公开：</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can view these variables by typing:</source>
          <target state="translated">你可以通过键入以下内容查看这些变量：</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Although the standard variable cmdlets are not designed to work with <bpt id="p1">**</bpt>env:<ept id="p1">**</ept> variables, you can still use them by specifying the <bpt id="p2">**</bpt>env:<ept id="p2">**</ept> prefix.</source>
          <target state="translated">虽然标准变量 cmdlet 并不用于处理 <bpt id="p1">**</bpt>env:<ept id="p1">**</ept> 变量，但你仍可以通过指定 <bpt id="p2">**</bpt>env:<ept id="p2">**</ept> 前缀来使用它们。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, to see the operating system root directory, you can use the command-shell <bpt id="p1">**</bpt>%SystemRoot%<ept id="p1">**</ept> variable from within Windows PowerShell by typing:</source>
          <target state="translated">例如，若要查看操作系统根目录，你可以通过键入以下内容从 Windows PowerShell 内部使用命令 Shell <bpt id="p1">**</bpt>%SystemRoot%<ept id="p1">**</ept> 变量：</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can also create and modify environment variables from within Windows PowerShell.</source>
          <target state="translated">你还可以从 Windows PowerShell 内部创建和修改环境变量。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Environment variables accessed from Windows PowerShell conform to the normal rules for environment variables elsewhere in Windows.</source>
          <target state="translated">从 Windows PowerShell 访问的环境变量遵循针对 Windows 中其他环境变量的一般规则。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>