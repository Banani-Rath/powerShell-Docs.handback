<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-4fb33c9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3f7c226fcb496e5bb51ba601429c54b43de9d52</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Working-with-Files-and-Folders.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions" />
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59ecb4141571df079452c6b8c90e4f9079aa33e0</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with Files and Folders</source>
          <target state="translated">使用檔案及資料夾</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="translated">powershell,cmdlet</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Working with Files and Folders</source>
          <target state="translated">使用檔案及資料夾</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Navigating through Windows PowerShell drives and manipulating the items on them is similar to manipulating files and folders on Windows physical disk drives.</source>
          <target state="translated">瀏覽 Windows PowerShell 磁碟機和操作磁碟機上的項目，類似於在 Windows 實體磁碟機上操作檔案和資料夾。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>We will discuss how to deal with specific file and folder manipulation tasks in this section.</source>
          <target state="translated">本節會討論特定檔案和資料夾的處理操作方法。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Listing All the Files and Folders Within a Folder</source>
          <target state="translated">列出資料夾內所有的檔案和資料夾</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can get all items directly within a folder by using <bpt id="p1">**</bpt>Get-ChildItem<ept id="p1">**</ept>.</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>Get-ChildItem<ept id="p1">**</ept> 直接取得資料夾內的所有項目。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add the optional <bpt id="p1">**</bpt>Force<ept id="p1">**</ept> parameter to display hidden or system items.</source>
          <target state="translated">加入選用的 <bpt id="p1">**</bpt>Force<ept id="p1">**</ept> 參數，以顯示隱藏或系統項目。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, this command displays the direct contents of Windows PowerShell Drive C (which is the same as the Windows physical drive C):</source>
          <target state="translated">例如，這個命令會顯示 Windows PowerShell 磁碟機 C (和 Windows 實體磁碟機 C 相同) 的直接內容︰</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The command lists only the directly contained items, much like using Cmd.exe's <bpt id="p1">**</bpt>DIR<ept id="p1">**</ept> command or <bpt id="p2">**</bpt>ls<ept id="p2">**</ept> in a UNIX shell.</source>
          <target state="translated">命令只會列出直接包含的項目，很像使用 Cmd.exe 的 <bpt id="p1">**</bpt>DIR<ept id="p1">**</ept> 命令或 UNIX 殼層的 <bpt id="p2">**</bpt>ls<ept id="p2">**</ept>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to show contained items, you need to specify the <bpt id="p1">**</bpt>-Recurse<ept id="p1">**</ept> parameter as well.</source>
          <target state="translated">若要顯示包含的項目，您也必須要指定 <bpt id="p1">**</bpt>-Recurse<ept id="p1">**</ept> 參數。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(This can take an extremely long time to complete.) To list everything on the C drive:</source>
          <target state="translated">(這可能需要很長時間才能完成)。列出 C 磁碟機上的所有項目︰</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get-ChildItem<ept id="p1">**</ept> can filter items with its <bpt id="p2">**</bpt>Path<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Filter<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Include<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Exclude<ept id="p5">**</ept> parameters, but those are typically based only on name.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-ChildItem<ept id="p1">**</ept> 可以用它的 <bpt id="p2">**</bpt>Path<ept id="p2">**</ept>、<bpt id="p3">**</bpt>Filter<ept id="p3">**</ept>、<bpt id="p4">**</bpt>Include<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>Exclude<ept id="p5">**</ept> 參數來篩選項目，但這些通常只以名稱為基礎。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can perform complex filtering based on other properties of items by using <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept>.</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> 根據項目的其他屬性來執行複雜的篩選。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following command finds all executables within the Program Files folder that were last modified after October 1, 2005 and which are neither smaller than 1 megabyte nor larger than 10 megabytes:</source>
          <target state="translated">下列命令會在 Program Files 資料夾內尋找在 2005 年 10 月 1 日之後修改的、介於 1 MB 到 10 MB 之間的全部可執行檔︰</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copying Files and Folders</source>
          <target state="translated">複製檔案與資料夾</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Copying is done with <bpt id="p1">**</bpt>Copy-Item<ept id="p1">**</ept>.</source>
          <target state="translated">以 <bpt id="p1">**</bpt>Copy-Item<ept id="p1">**</ept> 完成複製。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following command backs up C:<ph id="ph1">\\</ph>boot.ini to C:<ph id="ph2">\\</ph>boot.bak:</source>
          <target state="translated">下列命令會將 C:<ph id="ph1">\\</ph>boot.ini 備份到 C:<ph id="ph2">\\</ph>boot.bak：</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the destination file already exists, the copy attempt fails.</source>
          <target state="translated">如果目的地檔案已經存在，則複製嘗試就會失敗。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To overwrite a pre-existing destination, use the Force parameter:</source>
          <target state="translated">若要覆寫既有的目的地，請使用 Force 參數︰</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This command works even when the destination is read-only.</source>
          <target state="translated">這個命令對唯讀的目的地也有效。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Folder copying works the same way.</source>
          <target state="translated">複製資料夾的方式也相同。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This command copies the folder C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>test1 to the new folder c:<ph id="ph3">\\</ph>temp<ph id="ph4">\\</ph>DeleteMe recursively:</source>
          <target state="translated">這個命令會將資料夾 C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>test1 以遞迴方式複製到新的資料夾 c:<ph id="ph3">\\</ph>temp<ph id="ph4">\\</ph>DeleteMe︰</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also copy a selection of items.</source>
          <target state="translated">您也可以複製選取的項目。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following command copies all .txt files contained anywhere in c:<ph id="ph1">\\</ph>data to c:<ph id="ph2">\\</ph>temp<ph id="ph3">\\</ph>text:</source>
          <target state="translated">下列命令會將 c:<ph id="ph1">\\</ph>data 中任何位置的所有 .txt 檔案複製到 c:<ph id="ph2">\\</ph>temp<ph id="ph3">\\</ph>text︰</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can still use other tools to perform file system copies.</source>
          <target state="translated">您仍然可以使用其他工具執行檔案系統複製。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>XCOPY, ROBOCOPY, and COM objects, such as the <bpt id="p1">**</bpt>Scripting.FileSystemObject,<ept id="p1">**</ept> all work in Windows PowerShell.</source>
          <target state="translated">XCOPY、ROBOCOPY 和 COM 物件，如 <bpt id="p1">**</bpt>Scripting.FileSystemObject<ept id="p1">**</ept>，在 Windows PowerShell 中都有效。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, you can use the Windows Script Host <bpt id="p1">**</bpt>Scripting.FileSystem COM<ept id="p1">**</ept> class to back up C:<ph id="ph1">\\</ph>boot.ini to C:<ph id="ph2">\\</ph>boot.bak:</source>
          <target state="translated">例如，您可以使用 Windows Script Host <bpt id="p1">**</bpt>Scripting.FileSystem COM<ept id="p1">**</ept> 類別將 C:<ph id="ph1">\\</ph>boot.ini 備份到 C:<ph id="ph2">\\</ph>boot.bak︰</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creating Files and Folders</source>
          <target state="translated">建立檔案與資料夾</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creating new items works the same on all Windows PowerShell providers.</source>
          <target state="translated">所有 Windows PowerShell 提供者的建立新項目功能都一樣。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If a Windows PowerShell provider has more than one type of item—for example, the FileSystem Windows PowerShell provider distinguishes between directories and files—you need to specify the item type.</source>
          <target state="translated">如果 Windows PowerShell 提供者有多個項目類型—例如，FileSystem Windows PowerShell 提供者區分目錄和檔案—您就需要指定項目類型。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This command creates a new folder C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>New Folder:</source>
          <target state="translated">這個命令會建立新的資料夾 C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>New Folder：</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This command creates a new empty file C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>New Folder<ph id="ph3">\\</ph>file.txt</source>
          <target state="translated">這個命令會建立新的空檔案 C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>New Folder<ph id="ph3">\\</ph>file.txt</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Removing All Files and Folders Within a Folder</source>
          <target state="translated">移除資料夾內所有的檔案和資料夾</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can remove contained items using <bpt id="p1">**</bpt>Remove-Item<ept id="p1">**</ept>, but you will be prompted to confirm the removal if the item contains anything else.</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>Remove-Item<ept id="p1">**</ept> 移除包含的項目，但如果項目包含任何其他項目，系統會提示您確認移除。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, if you attempt to delete the folder C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>DeleteMe that contains other items, Windows PowerShell prompts you for confirmation before deleting the folder:</source>
          <target state="translated">例如，如果您嘗試刪除包含其他項目的資料夾 C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>DeleteMe，Windows PowerShell 就會先提示您確認再刪除資料夾︰</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you do not want to be prompted for each contained item, specify the <bpt id="p1">**</bpt>Recurse<ept id="p1">**</ept> parameter:</source>
          <target state="translated">如果不想每個包含項目都出現提示，請指定 <bpt id="p1">**</bpt>Recurse<ept id="p1">**</ept> 參數：</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Mapping a Local Folder as a Windows Accessible Drive</source>
          <target state="translated">將本機資料夾對應為 Windows 可存取磁碟機</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can also map a local folder, using the <bpt id="p1">**</bpt>subst<ept id="p1">**</ept> command.</source>
          <target state="translated">您也可以使用 <bpt id="p1">**</bpt>subst<ept id="p1">**</ept> 命令對應本機資料夾。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following command creates a local drive P: rooted in the local Program Files directory:</source>
          <target state="translated">下列命令會在本機的 Program Files 目錄下建立本機磁碟機 P:︰</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Just as with network drives, drives mapped within Windows PowerShell using <bpt id="p1">**</bpt>subst<ept id="p1">**</ept> are immediately visible to the Windows PowerShell shell.</source>
          <target state="translated">就像使用網路磁碟機，Windows PowerShell 殼層可以立即看到使用 <bpt id="p1">**</bpt>subst<ept id="p1">**</ept> 在 Windows PowerShell 內對應的磁碟機。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Reading a Text File into an Array</source>
          <target state="translated">將文字檔讀入陣列</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>One of the more common storage formats for text data is in a file with separate lines treated as distinct data elements.</source>
          <target state="translated">文字資料最常見的儲存體格式之一，是將檔案中分隔的各行視為不同的資料元素。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> cmdlet can be used to read an entire file in one step, as shown here:</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> Cmdlet 可以用一個步驟讀取整個檔案，如下所示︰</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> already treats the data read from the file as an array, with one element per line of file content.</source>
          <target state="translated"><bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> 已經將從檔案讀取的資料視為陣列，檔案內容為每行一個元素。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can confirm this by checking the <bpt id="p1">**</bpt>Length<ept id="p1">**</ept> of the returned content:</source>
          <target state="translated">您可以藉由檢查只要核取傳回內容的 <bpt id="p1">**</bpt>長度<ept id="p1">**</ept> 即可確認︰</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This command is most useful for getting lists of information into Windows PowerShell directly.</source>
          <target state="translated">這個命令在將資訊清單直接放入 Windows PowerShell 非常有用。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, you might store a list of computer names or IP addresses in a file C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>domainMembers.txt, with one name on each line of the file.</source>
          <target state="translated">例如，您可能會在檔案 C:<ph id="ph1">\\</ph>temp<ph id="ph2">\\</ph>domainMembers.txt 中儲存電腦名稱或 IP 位址的清單，一行一個名稱。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> to retrieve the file contents and put them in the variable <bpt id="p2">**</bpt>$Computers<ept id="p2">**</ept>:</source>
          <target state="translated">您可以使用 <bpt id="p1">**</bpt>Get-Content<ept id="p1">**</ept> 擷取檔案內容並將內容放入變數 <bpt id="p2">**</bpt>$Computers<ept id="p2">**</ept>：</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>$Computers<ept id="p1">**</ept> is now an array containing a computer name in each element.</source>
          <target state="translated"><bpt id="p1">**</bpt>$Computers<ept id="p1">**</ept> 現在是每個元素包含一個電腦名稱的陣列。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>